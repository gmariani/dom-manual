<apiPackage id="dom.events"><apiName>dom.events</apiName><apiDetail/><apiClassifier id="dom.events:KeyboardEvent"><apiName>KeyboardEvent</apiName><shortdesc>
	 The KeyboardEvent interface provides specific contextual information 
	 associated with keyboard devices.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:UIEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The KeyboardEvent interface provides specific contextual information 
	 associated with keyboard devices. Each keyboard event references a key 
	 using an identifier. Keyboard events are commonly directed at the 
	 element that has the focus.
	 
	 <p>The KeyboardEvent interface provides convenient attributes for some common 
	 modifiers keys: KeyboardEvent.ctrlKey, KeyboardEvent.shiftKey, 
	 KeyboardEvent.altKey, KeyboardEvent.metaKey. These attributes are equivalent 
	 to using the method KeyboardEvent.getModifierState(keyIdentifierArg) with 
	 "Control", "Shift", "Alt", or "Meta" respectively.</p>
	 
	 <p>To create an instance of the KeyboardEvent interface, use the 
	 DocumentEvent.createEvent("KeyboardEvent") method call.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-KeyboardEvent"><linktext>W3C - DOM 3 Events: KeyboardEvent</linktext></link></related-links><apiOperation id="dom.events:KeyboardEvent:getModifierState"><apiName>getModifierState</apiName><shortdesc>
		 Queries the state of a modifier using a key identifier.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If it is a modifier key and the modifier is activated
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>keyIdentifierArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A modifier key identifier. Common modifier 
		 keys are "Alt", "AltGraph", "CapsLock", "Control", "Meta", "NumLock", 
		 "Scroll", or "Shift".
		 
		 <p><b>Note:</b> If an application wishes to distinguish between right and left 
		 modifiers, this information could be deduced using keyboard events 
		 and KeyboardEvent.keyLocation.</p>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Queries the state of a modifier using a key identifier.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-KeyboardEvent-getModifierState"><linktext>W3C - DOM 3 Events: KeyboardEvent.getModifierState()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/keyset.html#Modifiers"><linktext>Modifier Keys</linktext></link></related-links></apiOperation><apiOperation id="dom.events:KeyboardEvent:initKeyboardEvent"><apiName>initKeyboardEvent</apiName><shortdesc>
		 Initializes attributes of a KeyboardEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>keyIdentifierArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies KeyboardEvent.keyIdentifier.
		 </apiDesc></apiParam><apiParam><apiItemName>keyLocationArg</apiItemName><apiType value="Number"/><apiDesc>Specifies KeyboardEvent.keyLocation.
		 </apiDesc></apiParam><apiParam><apiItemName>modifiersListArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A white space separated list of modifier key 
		 identifiers to be activated on this object. As an example, "Control Alt" 
		 will mark the control and alt modifiers as activated.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a KeyboardEvent object. This method has the 
		 same behavior as UIEvent.initUIEvent(). The value of UIEvent.detail 
		 remains undefined.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-KeyboardEvent-initKeyboardEvent"><linktext>W3C - DOM 3 Events: KeyboardEvent.initKeyboardEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:KeyboardEvent:initKeyboardEventNS"><apiName>initKeyboardEventNS</apiName><shortdesc>
		 Initializes attributes of a KeyboardEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>keyIdentifierArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies KeyboardEvent.keyIdentifier.
		 </apiDesc></apiParam><apiParam><apiItemName>keyLocationArg</apiItemName><apiType value="Number"/><apiDesc>Specifies KeyboardEvent.keyLocation.
		 </apiDesc></apiParam><apiParam><apiItemName>modifiersListArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A white space separated list of modifier key 
		 identifiers to be activated on this object. As an example, "Control Alt" 
		 will mark the control and alt modifiers as activated.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a KeyboardEvent object. This method has the 
		 same behavior as UIEvent.initUIEventNS(). The value of UIEvent.detail 
		 remains undefined. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-KeyboardEvent-initKeyboardEventNS"><linktext>W3C - DOM 3 Events: KeyboardEvent.initKeyboardEventNS()</linktext></link></related-links></apiOperation><apiValue id="dom.events:KeyboardEvent:DOM_KEY_LOCATION_LEFT"><apiName>DOM_KEY_LOCATION_LEFT</apiName><shortdesc>
		 The key activated is in the left key location (there is more than one 
		 possible location for this key).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The key activated is in the left key location (there is more than one 
		 possible location for this key). Example: the left Shift key on a PC 
		 101 Key US keyboard.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#DOM_KEY_LOCATION_LEFT"><linktext>W3C - DOM 3 Events: KeyboardEvent.DOM_KEY_LOCATION_LEFT</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyboardEvent:DOM_KEY_LOCATION_NUMPAD"><apiName>DOM_KEY_LOCATION_NUMPAD</apiName><shortdesc>
		 The key activation originated on the numeric keypad or with a virtual key 
		 corresponding to the numeric keypad.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The key activation originated on the numeric keypad or with a virtual key 
		 corresponding to the numeric keypad. Example: the '1' key on a PC 101 Key 
		 US keyboard located on the numeric pad.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#DOM_KEY_LOCATION_NUMPAD"><linktext>W3C - DOM 3 Events: KeyboardEvent.DOM_KEY_LOCATION_NUMPAD</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyboardEvent:DOM_KEY_LOCATION_RIGHT"><apiName>DOM_KEY_LOCATION_RIGHT</apiName><shortdesc>
		 The key activation is in the right key location (there is more than one 
		 possible location for this key).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The key activation is in the right key location (there is more than one 
		 possible location for this key). Example: the right Shift key on a PC 
		 101 Key US keyboard.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#DOM_KEY_LOCATION_RIGHT"><linktext>W3C - DOM 3 Events: KeyboardEvent.DOM_KEY_LOCATION_RIGHT</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyboardEvent:DOM_KEY_LOCATION_STANDARD"><apiName>DOM_KEY_LOCATION_STANDARD</apiName><shortdesc>
		 The key activation is not distinguished as the left or right version 
		 of the key, and did not originate from the numeric keypad (or did 
		 not originate with a virtual key corresponding to the numeric keypad).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The key activation is not distinguished as the left or right version 
		 of the key, and did not originate from the numeric keypad (or did 
		 not originate with a virtual key corresponding to the numeric keypad). 
		 Example: the 'Q' key on a PC 101 Key US keyboard.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#DOM_KEY_LOCATION_STANDARD"><linktext>W3C - DOM 3 Events: KeyboardEvent.DOM_KEY_LOCATION_STANDARD</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyboardEvent:keydown"><apiName>keydown</apiName><shortdesc>
		 A key is pressed down.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keydown</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A key is pressed down. 
		 
		 <p>This event type is device dependent and relies on the capabilities of the input devices 
		 and how they are mapped in the operating system. This event type is generated after the keyboard mapping but 
		 before the processing of an input method editor. This event should logically happen before the event keyup is 
		 produced. Whether a keydown contributes or not to the generation of a text event is implementation dependent.</p>
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>Namespace</entry><entry><codeph>None</codeph></entry>
		 	</row><row>
		 		<entry>Cancelable</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Bubbles</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Target</entry><entry><codeph>Element</codeph></entry>
		 	</row><row>
		 		<entry>Context info</entry><entry>UIEvent.view, KeyboardEvent.keyIdentifier, KeyboardEvent.keyLocation, 
		 KeyboardEvent.altKey, KeyboardEvent.shiftKey, KeyboardEvent.ctrlKey, and KeyboardEvent.metaKey are in use.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-keydown"><linktext>W3C - DOM 3 Events: KeyboardEvent.keydown</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyboardEvent:keyup"><apiName>keyup</apiName><shortdesc>
		 A key is released.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyup</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A key is released. 
		 
		 <p>This event type is device dependent and relies on the capabilities of the input devices and 
		 how they are mapped in the operating system. This event type is generated after the keyboard mapping but before 
		 the processing of an input method editor. This event should logically happen after the event keydown is produced.
		 Whether a keyup contributes or not to the generation of a text event is implementation dependent.</p>
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>Namespace</entry><entry><codeph>None</codeph></entry>
		 	</row><row>
		 		<entry>Cancelable</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Bubbles</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Target</entry><entry><codeph>Element</codeph></entry>
		 	</row><row>
		 		<entry>Context info</entry><entry>UIEvent.view, KeyboardEvent.keyIdentifier, and KeyboardEvent.keyLocation are in use. 
		 KeyboardEvent.altKey, KeyboardEvent.shiftKey, KeyboardEvent.ctrlKey, and KeyboardEvent.metaKey are in use unless the 
		 KeyboardEvent.keyIdentifier corresponds to the key modifier itself.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-keyup"><linktext>W3C - DOM 3 Events: KeyboardEvent.keyup</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyboardEvent:altKey:get"><apiName>altKey</apiName><shortdesc>
		 If the alternative (Alt) key modifier is activated.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 If the alternative (Alt) key modifier is activated.
		 
		 <p><b>Note:</b> The Option key modifier on Macintosh systems must be represented 
		 using this key modifier.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;altKey example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function showChar(e){
		 	alert(
		 		"Key Pressed: " + String.fromCharCode(e.charCode) + "\n"
		 		+ "charCode: " + e.charCode + "\n"
		 		+ "ALT key pressed: " + e.altKey + "\n"
		 	);
		 }
		 
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body onkeypress="showChar(event);"&gt;
		 &lt;p&gt;
		 Press any character key,
		 with or without holding down the ALT key.&lt;br /&gt;
		 You can also use the SHIFT key together with the ALT key.
		 &lt;/p&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.altKey"><linktext>MDC - event.altKey</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-KeyboardEvent-altKey"><linktext>W3C - DOM 3 Events: KeyboardEvent.altKey</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyboardEvent:charCode:get"><apiName>charCode</apiName><shortdesc>
		 Returns the Unicode value of a character key pressed during a keypress event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Returns the Unicode value of a character key pressed during a keypress event.
		 
		 <p>For constants equivalent to these numeric codes, see KeyEvent.</p>
		 
		 <p><b>Note:</b> In a keypress event, the Unicode value of the key pressed is stored in either the 
		 keyCode or charCode property, never both. If the key pressed generates a character (e.g. 'a'), charCode is 
		 set to the code of that character, respecting the letter case. (i.e. charCode takes into account whether the 
		 shift key is held down). Otherwise, the code of the pressed key is stored in keyCode.</p>
		 
		 <p><b>Note:</b> charCode is never set in the keydown and keyup events. In these cases, keyCode is 
		 set instead.</p>
		 
		 <p><b>Note:</b> To get the code of the key regardless of whether it was stored in keyCode or 
		 charCode, query the which property.</p>
		 
		 <p><b>Note:</b> Characters entered through an IME do not register through keyCode or charCode. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;charCode example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function showChar(e) {
		 	alert("Key Pressed: " + String.fromCharCode(e.charCode) + "\n"
		 	+ "charCode: " + e.charCode);
		 }
		 
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body onkeypress="showChar(event);"&gt;
		 &lt;p&gt;Press any 'character' type key.&lt;/p&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.charCode"><linktext>MDC - event.charCode</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyboardEvent:ctrlKey:get"><apiName>ctrlKey</apiName><shortdesc>
		 If the control (Ctrl) key modifier is activated.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 If the control (Ctrl) key modifier is activated.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;ctrlKey example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function showChar(e) {
		 	alert(
		 		"Key Pressed: " + String.fromCharCode(e.charCode) + "\n"
		 		+ "charCode: " + e.charCode + "\n"
		 		+ "CTRL key pressed: " + e.ctrlKey + "\n"
		 	);
		 }
		 
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body onkeypress="showChar(event);"&gt;
		 &lt;p&gt;Press any character key, with or without holding down the CTRL key.&lt;br /&gt;
		 You can also use the SHIFT key together with the CTRL key.&lt;/p&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.ctrlKey"><linktext>MDC - event.ctrlKey</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-KeyboardEvent-ctrlKey"><linktext>W3C - DOM 3 Events: KeyboardEvent.ctrlKey</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyboardEvent:keyCode:get"><apiName>keyCode</apiName><shortdesc>
		 Returns the Unicode value of a non-character key in a keypress event or any key in any other type of keyboard event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the Unicode value of a non-character key in a keypress event or any key in any other type of keyboard event.
		 
		 <p>For constants equivalent to these numeric codes, see KeyEvent.</p>
		 
		 <p><b>Note:</b> In a keypress event, the Unicode value of the key pressed is stored in either the keyCode or 
		 charCode property, never both. If the key pressed generates a character (e.g. 'a'), charCode is set to the code of that 
		 character, respecting the letter case. (i.e. charCode takes into account whether the shift key is held down). Otherwise, 
		 the code of the pressed key is stored in keyCode.</p>
		 
		 <p><b>Note:</b> keyCode is always set in the keydown and keyup events. In these cases, charCode is never set.</p>
		 
		 <p><b>Note:</b> To get the code of the key regardless of whether it was stored in keyCode or charCode, query the which property.</p>
		 
		 <p><b>Note:</b> Characters entered through an IME do not register through keyCode or charCode. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;keyCode example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function showKeyCode(e) {
		 	alert("keyCode for the key pressed: " + e.keyCode + "\n");
		 }
		 
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body onkeydown="showKeyCode(event);"&gt;
		 &lt;p&gt;Press any key.&lt;/p&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.keyCode"><linktext>MDC - event.keyCode</linktext></link><link href="dom.events.xml#KeyEvent"><linktext>dom.events.KeyEvent</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyboardEvent:keyIdentifier:get"><apiName>keyIdentifier</apiName><shortdesc>
		 Holds the identifier of the key.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Holds the identifier of the key. The key identifiers are defined in 
		 Appendix A.2 "Key identifiers set". Implementations that are unable 
		 to identify a key must use the key identifier "Unidentified".
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-KeyboardEvent-keyIdentifier"><linktext>W3C - DOM 3 Events: KeyboardEvent.keyIdentifier</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/keyset.html#KeySet-Set"><linktext>Key identifiers set</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyboardEvent:keyLocation:get"><apiName>keyLocation</apiName><shortdesc>
		 The keyLocation attribute contains an indication of the location of 
		 they key on the device, as described in Keyboard event types.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The keyLocation attribute contains an indication of the location of 
		 they key on the device, as described in Keyboard event types.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-KeyboardEvent-keylocation"><linktext>W3C - DOM 3 Events: KeyboardEvent.keyLocation</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#ID-KeyboardEvent-KeyLocationCode"><linktext>Keyboard event types</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyboardEvent:metaKey:get"><apiName>metaKey</apiName><shortdesc>
		 If the meta (Meta) key modifier is activated.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 If the meta (Meta) key modifier is activated.
		 
		 <p><b>Note:</b> The Command key modifier on Macintosh systems must be represented 
		 using this key modifier.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-KeyboardEvent-metaKey"><linktext>W3C - DOM 3 Events: KeyboardEvent.metaKey</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyboardEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
		 If the shift (Shift) key modifier is activated.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 If the shift (Shift) key modifier is activated.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-KeyboardEvent-shiftKey"><linktext>W3C - DOM 3 Events: KeyboardEvent.shiftKey</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.events:KeyEvent"><apiName>KeyEvent</apiName><shortdesc>
	 The KeyEvent interface provides specific contextual information associated with Key Events.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:UIEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The KeyEvent interface provides specific contextual information associated with Key Events.
	 
	 The detail attribute inherited from UIEvent is used to indicated the number of keypresses 
	 which have occurred during key repetition. If this information is not available this value 
	 should be 0.
	 
	 <p><b>Note:</b> This is from DOM 3 Events Working Draft 10 (April 2001) and has since been deprecated in Working Draft 21 (December 2007)</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/en/DOM/Event/UIEvent/KeyEvent"><linktext>MDC - KeyEvent</linktext></link><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-KeyEvent"><linktext>W3C - DOM 3 Events: KeyEvent</linktext></link></related-links><apiOperation id="dom.events:KeyEvent:checkModifier"><apiName>checkModifier</apiName><shortdesc>
		 The CheckModifier method is used to check the status of a single modifier key associated with a KeyEvent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The status of the modifier represented as a boolean.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>modifer</apiItemName><apiType value="Number"/><apiDesc>The modifier which the user wishes to query.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The CheckModifier method is used to check the status of a single modifier key associated with a KeyEvent. 
		 The identifier of the modifier in question is passed into the CheckModifier function. If the modifier is 
		 triggered it will return true. If not, it will return false.
		 
		 <p>The list of keys below represents the allowable modifier paramaters for this method. </p>
		 <ul>
		 <li>DOM_VK_LEFT_ALT</li>
		 <li>DOM_VK_RIGHT_ALT</li>
		 <li>DOM_VK_LEFT_CONTROL</li>
		 <li>DOM_VK_RIGHT_CONTROL</li>
		 <li>DOM_VK_LEFT_SHIFT</li>
		 <li>DOM_VK_RIGHT_SHIFT</li>
		 <li>DOM_VK_META</li>
		 </ul>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-KeyEvent-checkModifier"><linktext>W3C - DOM 3 Events: KeyEvent.checkModifier()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:KeyEvent:initKeyEvent"><apiName>initKeyEvent</apiName><shortdesc>
		 The initKeyEvent method is used to initialize the value of a MouseEvent created through 
		 the DocumentEvent interface.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether or not the event can bubble.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether or not the event's default action can be prevent.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies the KeyEvent's AbstractView.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiType value="Number"/><apiDesc>Specifies the number of repeated keypresses, if available.
		 </apiDesc></apiParam><apiParam><apiItemName>outputStringArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the KeyEvent's outputString attribute
		 </apiDesc></apiParam><apiParam><apiItemName>keyValArg</apiItemName><apiType value="Number"/><apiDesc>Specifies the KeyEvent's keyValattribute
		 </apiDesc></apiParam><apiParam><apiItemName>virtKeyValArg</apiItemName><apiType value="Number"/><apiDesc>Specifies the KeyEvent's virtKeyValattribute
		 </apiDesc></apiParam><apiParam><apiItemName>inputGeneratedArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies the KeyEvent's inputGeneratedattribute
		 </apiDesc></apiParam><apiParam><apiItemName>numPadArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies the KeyEvent's numPadattribute
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The initKeyEvent method is used to initialize the value of a MouseEvent created through 
		 the DocumentEvent interface. This method may only be called before the KeyEvent has been 
		 dispatched via the dispatchEvent method, though it may be called multiple times during that 
		 phase if necessary. If called multiple times, the final invocation takes precedence. This 
		 method has no effect if called after the event has been dispatched. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-Event-initKeyEvent"><linktext>W3C - DOM 3 Events: KeyEvent.initKeyEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:KeyEvent:initModifier"><apiName>initModifier</apiName><shortdesc>
		 The initModifier method is used to initialize the values of any modifiers associated with a KeyEvent 
		 created through the DocumentEvent interface.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modifier</apiItemName><apiType value="Number"/><apiDesc>The modifier which the user wishes to initialize
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc>The new value of the modifier.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The initModifier method is used to initialize the values of any modifiers associated with a KeyEvent 
		 created through the DocumentEvent interface. This method may only be called before the KeyEvent has 
		 been dispatched via the dispatchEvent method, though it may be called multiple times during that phase 
		 if necessary. If called multiple times with the same modifier property the final invocation takes 
		 precedence. Unless explicitly give a value of true, all modifiers have a value of false. This method 
		 has no effect if called after the event has been dispatched.
		 
		 <p>The list of keys below represents the allowable modifier paramaters for this method. </p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-KeyEvent-initModifier"><linktext>W3C - DOM 3 Events: KeyEvent.initModifier()</linktext></link></related-links></apiOperation><apiValue id="dom.events:KeyEvent:DOM_VK_CAPS_LOCK"><apiName>DOM_VK_CAPS_LOCK</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>9</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_DELETE"><apiName>DOM_VK_DELETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_DOWN"><apiName>DOM_VK_DOWN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>23</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_END"><apiName>DOM_VK_END</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>11</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_ENTER"><apiName>DOM_VK_ENTER</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>12</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_ESCAPE"><apiName>DOM_VK_ESCAPE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>13</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F1"><apiName>DOM_VK_F1</apiName><shortdesc>
		 Constant for the F1 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>26</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F1 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F10"><apiName>DOM_VK_F10</apiName><shortdesc>
		 Constant for the F10 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>35</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F10 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F11"><apiName>DOM_VK_F11</apiName><shortdesc>
		 Constant for the F11 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>36</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F11 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F12"><apiName>DOM_VK_F12</apiName><shortdesc>
		 Constant for the F12 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>37</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F12 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F13"><apiName>DOM_VK_F13</apiName><shortdesc>
		 Constant for the F13 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>38</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F13 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F14"><apiName>DOM_VK_F14</apiName><shortdesc>
		 Constant for the F14 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>39</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F14 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F15"><apiName>DOM_VK_F15</apiName><shortdesc>
		 Constant for the F15 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>40</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F15 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F16"><apiName>DOM_VK_F16</apiName><shortdesc>
		 Constant for the F16 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>41</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F16 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F17"><apiName>DOM_VK_F17</apiName><shortdesc>
		 Constant for the F17 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>42</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F17 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F18"><apiName>DOM_VK_F18</apiName><shortdesc>
		 Constant for the F18 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>43</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F18 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F19"><apiName>DOM_VK_F19</apiName><shortdesc>
		 Constant for the F19 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>44</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F19 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F2"><apiName>DOM_VK_F2</apiName><shortdesc>
		 Constant for the F2 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>27</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F2 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F20"><apiName>DOM_VK_F20</apiName><shortdesc>
		 Constant for the F20 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>45</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F20 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F21"><apiName>DOM_VK_F21</apiName><shortdesc>
		 Constant for the F21 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>46</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F21 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F22"><apiName>DOM_VK_F22</apiName><shortdesc>
		 Constant for the F22 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>47</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F22 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F23"><apiName>DOM_VK_F23</apiName><shortdesc>
		 Constant for the F23 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>48</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F23 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F24"><apiName>DOM_VK_F24</apiName><shortdesc>
		 Constant for the F24 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>49</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F24 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F3"><apiName>DOM_VK_F3</apiName><shortdesc>
		 Constant for the F3 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>28</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F3 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F4"><apiName>DOM_VK_F4</apiName><shortdesc>
		 Constant for the F4 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>29</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F4 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F5"><apiName>DOM_VK_F5</apiName><shortdesc>
		 Constant for the F5 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>30</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F5 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F6"><apiName>DOM_VK_F6</apiName><shortdesc>
		 Constant for the F6 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>31</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F6 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F7"><apiName>DOM_VK_F7</apiName><shortdesc>
		 Constant for the F7 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>32</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F7 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F8"><apiName>DOM_VK_F8</apiName><shortdesc>
		 Constant for the F8 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>33</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F8 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_F9"><apiName>DOM_VK_F9</apiName><shortdesc>
		 Constant for the F9 function key.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>34</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Constant for the F9 function key.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_HOME"><apiName>DOM_VK_HOME</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>14</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_INSERT"><apiName>DOM_VK_INSERT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>15</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_LEFT"><apiName>DOM_VK_LEFT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>20</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_LEFT_ALT"><apiName>DOM_VK_LEFT_ALT</apiName><shortdesc>
		 This key is a modifier key
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 This key is a modifier key
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_LEFT_CONTROL"><apiName>DOM_VK_LEFT_CONTROL</apiName><shortdesc>
		 This key is a modifier key
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 This key is a modifier key
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_LEFT_META"><apiName>DOM_VK_LEFT_META</apiName><shortdesc>
		 This key is a modifier key
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>7</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 This key is a modifier key
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_LEFT_SHIFT"><apiName>DOM_VK_LEFT_SHIFT</apiName><shortdesc>
		 This key is a modifier key
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>5</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 This key is a modifier key
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_NUM_LOCK"><apiName>DOM_VK_NUM_LOCK</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>16</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_PAGE_DOWN"><apiName>DOM_VK_PAGE_DOWN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>24</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_PAGE_UP"><apiName>DOM_VK_PAGE_UP</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>25</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_PAUSE"><apiName>DOM_VK_PAUSE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>17</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_PRINTSCREEN"><apiName>DOM_VK_PRINTSCREEN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>18</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_RIGHT"><apiName>DOM_VK_RIGHT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>21</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_RIGHT_ALT"><apiName>DOM_VK_RIGHT_ALT</apiName><shortdesc>
		 This key is a modifier key
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 This key is a modifier key
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_RIGHT_CONTROL"><apiName>DOM_VK_RIGHT_CONTROL</apiName><shortdesc>
		 This key is a modifier key
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 This key is a modifier key
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_RIGHT_META"><apiName>DOM_VK_RIGHT_META</apiName><shortdesc>
		 This key is a modifier key
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>8</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 This key is a modifier key
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_RIGHT_SHIFT"><apiName>DOM_VK_RIGHT_SHIFT</apiName><shortdesc>
		 This key is a modifier key
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>6</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 This key is a modifier key
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_SCROLL_LOCK"><apiName>DOM_VK_SCROLL_LOCK</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>19</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_UNDEFINED"><apiName>DOM_VK_UNDEFINED</apiName><shortdesc>
		 Used for key events which do not have a virtual key code available.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Used for key events which do not have a virtual key code available.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:DOM_VK_UP"><apiName>DOM_VK_UP</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>22</apiData><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="dom.events:KeyEvent:inputGenerated:get"><apiName>inputGenerated</apiName><shortdesc>
		 The inputGenerated attribute indicates whether the key event will normally cause visible output.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 The inputGenerated attribute indicates whether the key event will normally cause visible output. If 
		 the key event does not generate any visible output, such as the use of a function key or the 
		 combination of certain modifier keys used in conjunction with another key, then the value will be 
		 false. If visible output is normally generated by the key event then the value will be true.
		 
		 <p>The value of inputGenerated does not guarantee the creation of a character. If a key event causing 
		 visible output is cancelable it may be prevented from causing output. This attribute is intended 
		 primarily to differentiate between keys events which may or may not produce visible output depending 
		 on the system state.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-KeyEvent-inputGenerated"><linktext>W3C - DOM 3 Events: KeyEvent.inputGenerated</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyEvent:keyVal:get"><apiName>keyVal</apiName><shortdesc>
		 The value of keyVal holds the value of the Unicode character associated with the depressed key.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The value of keyVal holds the value of the Unicode character associated with the depressed key. 
		 If the key has no Unicode representation or no Unicode character is available the value is 0.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-UIEvent-keyVal"><linktext>W3C - DOM 3 Events: KeyEvent.keyVal</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyEvent:numPad:get"><apiName>numPad</apiName><shortdesc>
		 The numPad attribute indicates whether or not the key event was generated on the number pad section 
		 of the keyboard.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 The numPad attribute indicates whether or not the key event was generated on the number pad section 
		 of the keyboard. If the number pad was used to generate the key event the value is true, otherwise the value is false.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-KeyEvent-numPad"><linktext>W3C - DOM 3 Events: KeyEvent.numPad</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyEvent:outputString:get"><apiName>outputString</apiName><shortdesc>
		 outputString holds the value of the output generated by the key event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 outputString holds the value of the output generated by the key event. This may be a single Unicode 
		 character or it may be a string. It may also be null in the case where no output was generated by the key event.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-UIEvent-outputString"><linktext>W3C - DOM 3 Events: KeyEvent.outputString</linktext></link></related-links></apiValue><apiValue id="dom.events:KeyEvent:virtKeyVal:get"><apiName>virtKeyVal</apiName><shortdesc>
		 When the key associated with a key event is not representable via a Unicode character virtKeyVale holds 
		 the virtual key code associated with the depressed key.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 When the key associated with a key event is not representable via a Unicode character virtKeyVale holds 
		 the virtual key code associated with the depressed key. If the key has a Unicode representation or no 
		 virtual code is available the value is DOM_VK_UNDEFINED.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-KeyEvent-virtKeyVal"><linktext>W3C - DOM 3 Events: KeyEvent.virtKeyVal</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.events:UIEvent"><apiName>UIEvent</apiName><shortdesc>
	 The UIEvent interface provides specific contextual information 
	 associated with User Interface events.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The UIEvent interface provides specific contextual information 
	 associated with User Interface events.
	 
	 <p>To create an instance of the UIEvent interface, use the 
	 DocumentEvent.createEvent("UIEvent") method call.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event"><linktext>MDC - event</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-UIEvent"><linktext>W3C - DOM 3 Events: UIEvent</linktext></link></related-links><apiOperation id="dom.events:UIEvent:initUIEvent"><apiName>initUIEvent</apiName><shortdesc>
		 Initializes attributes of an UIEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiType value="Number"/><apiDesc>Specifies UIEvent.detail.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of an UIEvent object. This method has the 
		 same behavior as Event.initEvent(). 
		 
		 </apiDesc><example>
		 <codeblock>
		 e = document.createEvent("UIEvents");
		 // creates a click event that bubbles, can be cancelled,
		 // and with its view and detail property initialized to window and 1,
		 // respectively
		 e.initUIEvent("click", true, true, window, 1);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.initUIEvent"><linktext>MDC - event.initUIEvent()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initUIEvent"><linktext>W3C - UIEvent.initUIEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:UIEvent:initUIEventNS"><apiName>initUIEventNS</apiName><shortdesc>
		 Initializes attributes of an UIEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiType value="Number"/><apiDesc>Specifies UIEvent.detail.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of an UIEvent object. This method has the same behavior as Event.initEventNS(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initUIEventNS"><linktext>W3C - UIEvent.initUIEventNS()</linktext></link></related-links></apiOperation><apiValue id="dom.events:UIEvent:DOMActivate"><apiName>DOMActivate</apiName><shortdesc>
		 Refer to Activation requests and behavior.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>DOMActivate</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Refer to Activation requests and behavior.
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>Namespace</entry><entry><codeph>None</codeph></entry>
		 	</row><row>
		 		<entry>Cancelable</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Bubbles</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Target</entry><entry><codeph>Element</codeph></entry>
		 	</row><row>
		 		<entry>Context info</entry><entry>UIEvent.view is in use.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-flow-activation"><linktext>W3C - Activation requests and behavior</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-DOMActivate"><linktext>W3C - UIEvent.DOMActivate</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:DOMFocusIn"><apiName>DOMFocusIn</apiName><shortdesc>
		 An event target receives focus.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>DOMFocusIn</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 An event target receives focus. The focus is given to the element before the dispatch of this event type. This event type is dispatched after the event type focus.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-DOMFocusIn"><linktext>W3C - UIEvent.DOMFocusIn</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:DOMFocusOut"><apiName>DOMFocusOut</apiName><shortdesc>
		 An event target loses focus.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>DOMFocusOut</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 An event target loses focus. The focus is taken from the element before the dispatch of this event type. This event type is dispatched after the event type blur.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-DOMFocusOut"><linktext>W3C - UIEvent.DOMFocusOut</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:abort"><apiName>abort</apiName><shortdesc>
		 Loading of a resource has been aborted.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>abort</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Loading of a resource has been aborted.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-abort"><linktext>W3C - DOM 3 Events: UIEvent.abort / Event.abort</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:blur"><apiName>blur</apiName><shortdesc>
		 An event target loses focus.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>blur</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 An event target loses focus. The focus is taken from the element before the dispatch of this event type.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-blur"><linktext>W3C - UIEvent.blur</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:change"><apiName>change</apiName><shortdesc>
		 A control loses the input focus and its value has been modified since gaining focus.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A control loses the input focus and its value has been modified since gaining focus. This event type is dispatched before the event type blur.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-change"><linktext>W3C - DOM 3 Events: UIEvent.change / Event.change</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:error"><apiName>error</apiName><shortdesc>
		 A resource failed to load, or has been loaded but cannot be interpreted according to its semantics 
		 such as an invalid image, a script execution error, or non-well-formed XML.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A resource failed to load, or has been loaded but cannot be interpreted according to its semantics 
		 such as an invalid image, a script execution error, or non-well-formed XML.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-error"><linktext>W3C - DOM 3 Events: UIEvent.error / Event.error</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:focus"><apiName>focus</apiName><shortdesc>
		 An event target receives focus.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focus</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 An event target receives focus. The focus is given to the element before the dispatch of this event type.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-focus"><linktext>W3C - UIEvent.focus</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:load"><apiName>load</apiName><shortdesc>
		  The DOM Implementation finishes loading the resource (such as the document) and any dependent resources 
		 (such as images, style sheets, or scripts).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>load</apiData><apiType value="String"/></apiValueDef><apiDesc>
		  The DOM Implementation finishes loading the resource (such as the document) and any dependent resources 
		 (such as images, style sheets, or scripts). Dependent resources that fail to load will not prevent this 
		 event from firing if the resource that loaded them is still accessible via the DOM. If this event type 
		 is dispatched, implementations are required to dispatch this event at least on the Document node.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Document, Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-load"><linktext>W3C - DOM 3 Events: UIEvent.load / Event.load</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:reset"><apiName>reset</apiName><shortdesc>
		 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is reset.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>reset</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is reset.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-reset"><linktext>W3C - DOM 3 Events: UIEvent.reset / Event.reset</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:resize"><apiName>resize</apiName><shortdesc>
		 A document view or an element has been resized.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resize</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A document view or an element has been resized. The resize occured before the dispatch of this event type.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Document, Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-UIEvent"><linktext>W3C - DOM 3 Events: UIEvent.resize</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:scroll"><apiName>scroll</apiName><shortdesc>
		 A document view or an element has been scrolled.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scroll</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A document view or an element has been scrolled. The scroll occured before the dispatch of this event type.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Document, Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-scroll"><linktext>W3C - DOM 3 Events: UIEvent.scroll</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:select"><apiName>select</apiName><shortdesc>
		 A user selects some text.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>select</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A user selects some text. DOM Level 3 Events does not provide contextual information to access 
		 the selected text. The selection occured before the dispatch of this event type.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-select"><linktext>W3C - DOM 3 Events: UIEvent.select / Event.select</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:submit"><apiName>submit</apiName><shortdesc>
		 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is submitted.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>submit</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is submitted.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-submit"><linktext>W3C - DOM 3 Events: UIEvent.submit / Event.submit</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:unload"><apiName>unload</apiName><shortdesc>
		 The DOM implementation removes from the environment the resource (such as the document) or any dependent
		 resources (such as images, style sheets, scripts).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unload</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 The DOM implementation removes from the environment the resource (such as the document) or any dependent
		 resources (such as images, style sheets, scripts). The document is unloaded after the dispatch of this event 
		 type. If this event type is dispatched, implementations are required to dispatch this event at least on the 
		 Document node.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Document, Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-unload"><linktext>W3C - DOM 3 Events: UIEvent.unload / Event.unload</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:detail:get"><apiName>detail</apiName><shortdesc>
		 Specifies some detail information about the Event, depending 
		 on the type of event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Specifies some detail information about the Event, depending 
		 on the type of event.
		 
		 <p><b>Note:</b> For mouse events, such as click, dblclick, mousedown, or mouseup, the detail 
		 property indicates how many times the mouse has been clicked in the same location for this event.</p>
		 
		 <p><b>Note:</b> For a dblclick event the value of detail is always 2.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 	&lt;title&gt;event.detail example&lt;/title&gt;
		 	&lt;script type="text/javascript"&gt;
		 	function giveDetails(e) {
		 		var text = document.getElementById("t");
		 		text.value = e.detail;
		 	}
		 	function init() {
		 		var b1 = document.getElementById("b");
		 		b1.onclick = giveDetails;   
		 	}
		 	&lt;/script&gt;
		 
		 &lt;/head&gt;
		 &lt;body onload="init();"&gt;
		 &lt;form&gt;
		 	&lt;input id="b" type="button" value="details"&gt;
		 	&lt;input id="t" type="text" value=""&gt;&lt;br&gt;
		 	&lt;input type="reset"&gt;
		 &lt;/form&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.detail"><linktext>MDC - event.detail</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-UIEvent-detail"><linktext>W3C - UIEvent.detail</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:isChar:get"><apiName>isChar</apiName><shortdesc>
		 Returns a boolean indicating whether the event produced a key character or not.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Returns a boolean indicating whether the event produced a key character or not. 
		 
		 <p><b>Note:</b> Some key combos may raise events but not produce any character (example: ctrl + alt ?). 
		 When this is the case, isChar returns false. isChar is used when event handlers need to do something like echo 
		 the input on the screen. </p>
		 
		 <p><b>Note:</b> There is currently a known bug affecting the return result, which is always false and 
		 never true. Please see the discussion link in the sidebar for more details. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 if e.isChar {
		 	echoInput(e.type);
		 }</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.isChar"><linktext>MDC - event.isChar</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:layerX:get"><apiName>layerX</apiName><shortdesc>
		 Returns the horizontal coordinate of the event relative to the current layer.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Returns the horizontal coordinate of the event relative to the current layer. 
		 
		 <p><b>Note:</b> layerX takes scrolling of the page into account, and returns a value relative to the 
		 whole of the document, unless the event occurs inside a positioned element, where the returned value is 
		 relative to the top left of the positioned element. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		&lt;head&gt;
		&lt;title&gt;pageX\pageY &amp; layerX\layerY example&lt;/title&gt;

		&lt;script type="text/javascript"&gt;

		function showCoords(evt){
		  var form = document.forms.form_coords;
		  var parent_id = evt.target.parentNode.id;
		  form.parentId.value = parent_id;
		  form.pageXCoords.value = evt.pageX;
		  form.pageYCoords.value = evt.pageY;
		  form.layerXCoords.value = evt.layerX;
		  form.layerYCoords.value = evt.layerY;
		}
		&lt;/script&gt;

		&lt;style type="text/css"&gt;

		 #d1 {
		  border: solid blue 1px;
		  padding: 20px;
		 }

		 #d2 {
		  position: absolute;
		  top: 180px;
		  left: 80%;
		  right:auto;
		  width: 40%;
		  border: solid blue 1px;
		  padding: 20px;
		 }

		 #d3 {
		  position: absolute;
		  top: 240px;
		  left: 20%;
		  width: 50%;
		  border: solid blue 1px;
		  padding: 10px;
		 }

		&lt;/style&gt;
		&lt;/head&gt;

		&lt;body onmousedown="showCoords(event)"&gt;

		&lt;p&gt;To display the mouse coordinates please click anywhere on the page.&lt;/p&gt;

		&lt;div id="d1"&gt;
		&lt;span&gt;This is an un-positioned div so clicking it will return
		layerX/layerY values almost the same as pageX/PageY values.&lt;/span&gt;
		&lt;/div&gt;

		&lt;div id="d2"&gt;

		&lt;span&gt;This is a positioned div so clicking it will return layerX/layerY
		values that are relative to the top-left corner of this positioned
		element. Note the pageX\pageY properties still return the
		absolute position in the document, including page scrolling.&lt;/span&gt;

		&lt;span&gt;Make the page scroll more! This is a positioned div so clicking it
		will return layerX/layerY values that are relative to the top-left
		corner of this positioned element. Note the pageX\pageY properties still
		return the absolute position in the document, including page
		scrolling.&lt;/span&gt;

		&lt;/div&gt;

		&lt;div id="d3"&gt;
		&lt;form name="form_coords" id="form1"&gt;
		 Parent Element id: &lt;input type="text" name="parentId" size="7" /&gt;&lt;br /&gt;

		 pageX:&lt;input type="text" name="pageXCoords" size="7" /&gt;  
		 pageY:&lt;input type="text" name="pageYCoords" size="7" /&gt;&lt;br /&gt;
		 layerX:&lt;input type="text" name="layerXCoords" size="7" /&gt;  
		 layerY:&lt;input type="text" name="layerYCoords" size="7" /&gt;

		&lt;/form&gt;
		&lt;/div&gt;

		&lt;/body&gt;
		&lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.layerX"><linktext>MDC - event.layerX</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:layerY:get"><apiName>layerY</apiName><shortdesc>
		 Returns the vertical coordinate of the event relative to the current layer.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Returns the vertical coordinate of the event relative to the current layer. 
		 
		 <p><b>Note:</b> layerY takes scrolling of the page into account, and returns a value relative to the 
		 whole of the document, unless the event occurs inside a positioned element, where the returned value is relative 
		 to the top left of the positioned element. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		&lt;head&gt;
		&lt;title&gt;pageX\pageY &amp; layerX\layerY example&lt;/title&gt;

		&lt;script type="text/javascript"&gt;

		function showCoords(evt){
		  var form = document.forms.form_coords;
		  var parent_id = evt.target.parentNode.id;
		  form.parentId.value = parent_id;
		  form.pageXCoords.value = evt.pageX;
		  form.pageYCoords.value = evt.pageY;
		  form.layerXCoords.value = evt.layerX;
		  form.layerYCoords.value = evt.layerY;
		}
		&lt;/script&gt;

		&lt;style type="text/css"&gt;

		 #d1 {
		  border: solid blue 1px;
		  padding: 20px;
		 }

		 #d2 {
		  position: absolute;
		  top: 180px;
		  left: 80%;
		  right:auto;
		  width: 40%;
		  border: solid blue 1px;
		  padding: 20px;
		 }

		 #d3 {
		  position: absolute;
		  top: 240px;
		  left: 20%;
		  width: 50%;
		  border: solid blue 1px;
		  padding: 10px;
		 }

		&lt;/style&gt;
		&lt;/head&gt;

		&lt;body onmousedown="showCoords(event)"&gt;

		&lt;p&gt;To display the mouse coordinates please click anywhere on the page.&lt;/p&gt;

		&lt;div id="d1"&gt;
		&lt;span&gt;This is an un-positioned div so clicking it will return
		layerX/layerY values almost the same as pageX/PageY values.&lt;/span&gt;
		&lt;/div&gt;

		&lt;div id="d2"&gt;

		&lt;span&gt;This is a positioned div so clicking it will return layerX/layerY
		values that are relative to the top-left corner of this positioned
		element. Note the pageX\pageY properties still return the
		absolute position in the document, including page scrolling.&lt;/span&gt;

		&lt;span&gt;Make the page scroll more! This is a positioned div so clicking it
		will return layerX/layerY values that are relative to the top-left
		corner of this positioned element. Note the pageX\pageY properties still
		return the absolute position in the document, including page
		scrolling.&lt;/span&gt;

		&lt;/div&gt;

		&lt;div id="d3"&gt;
		&lt;form name="form_coords" id="form1"&gt;
		 Parent Element id: &lt;input type="text" name="parentId" size="7" /&gt;&lt;br /&gt;

		 pageX:&lt;input type="text" name="pageXCoords" size="7" /&gt;  
		 pageY:&lt;input type="text" name="pageYCoords" size="7" /&gt;&lt;br /&gt;
		 layerX:&lt;input type="text" name="layerXCoords" size="7" /&gt;  
		 layerY:&lt;input type="text" name="layerYCoords" size="7" /&gt;

		&lt;/form&gt;
		&lt;/div&gt;

		&lt;/body&gt;
		&lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.layerY"><linktext>MDC - event.layerY</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:pageX:get"><apiName>pageX</apiName><shortdesc>
		 Returns the horizontal coordinate of the event relative to whole document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Returns the horizontal coordinate of the event relative to whole document. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.pageX"><linktext>MDC - event.pageX</linktext></link><link href="dom.events.xml#MouseEvent/pageX"><linktext>dom.events.MouseEvent.pageX</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:pageY:get"><apiName>pageY</apiName><shortdesc>
		 Returns the vertical coordinate of the event relative to the whole document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Returns the vertical coordinate of the event relative to the whole document. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.pageY"><linktext>MDC - event.pageY</linktext></link><link href="dom.events.xml#MouseEvent/pageY"><linktext>dom.events.MouseEvent.pageY</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:view:get"><apiName>view</apiName><shortdesc>
		 Returns the AbstractView object from which the event was generated.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.views:AbstractView</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the AbstractView object from which the event was generated. In browsers, this is the window object the event happened in. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.view"><linktext>MDC - event.view</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-UIEvent-view"><linktext>W3C - UIEvent.view</linktext></link></related-links></apiValue><apiValue id="dom.events:UIEvent:which:get"><apiName>which</apiName><shortdesc>
		 Returns the numeric keyCode of the key pressed, or the character code (charCode) for 
		 an alphanumeric key pressed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the numeric keyCode of the key pressed, or the character code (charCode) for 
		 an alphanumeric key pressed. 
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;charCode/keyCode/which example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function showKeyPress(evt) {
		 	alert("onkeypress handler: \n"
		 		+ "keyCode property: " + evt.keyCode + "\n"
		 		+ "which property: " + evt.which + "\n"
		 		+ "charCode property: " + evt.charCode + "\n"
		 		+ "Character Key Pressed: "
		 		+ String.fromCharCode(evt.charCode) + "\n"
		 	);
		 }
		 
		 
		 function keyDown(evt) {
		 	alert("onkeydown handler: \n"
		 		+ "keyCode property: " + evt.keyCode + "\n"
		 		+ "which property: " + evt.which + "\n"
		 	);
		 }
		 
		 
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body
		   onkeypress="showKeyPress(event);"
		   onkeydown="keyDown(event);"
		 &gt;
		 
		 &lt;p&gt;Please press any key.&lt;/p&gt;
		 
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.which"><linktext>MDC - event.which</linktext></link><link href="dom.events.xml#UIEvent/keyCode"><linktext>keyCode</linktext></link><link href="dom.events.xml#UIEvent/charCode"><linktext>charCode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.events:Event"><apiName>Event</apiName><shortdesc>
	 The Event interface is used to provide contextual information about an 
	 event to the listener processing the event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The Event interface is used to provide contextual information about an 
	 event to the listener processing the event. An object which implements 
	 the Event interface is passed as the parameter to an EventListener. The 
	 object passed to the event listener may also implement derived interfaces 
	 that provide access to information directly relating to the type of event 
	 they represent.
	 
	 <p>To create an instance of the Event interface, use the 
	 DocumentEvent.createEvent("Event") method call.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event"><linktext>W3C - DOM 3 Events: Event</linktext></link></related-links><apiOperation id="dom.events:Event:initEvent"><apiName>initEvent</apiName><shortdesc>
		 Initializes attributes of an Event created through the 
		 DocumentEvent.createEvent method.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of an Event created through the 
		 DocumentEvent.createEvent method. This method may only be called 
		 before the Event has been dispatched via the 
		 EventTarget.dispatchEvent() method. If the method is called several 
		 times before invoking EventTarget.dispatchEvent, only the final 
		 invocation takes precedence. This method has no effect if called after 
		 the event has been dispatched. If called from a subclass of the Event 
		 interface only the values specified in this method are modified, all 
		 other attributes are left unchanged.
		 
		 <p>This method sets the Event.type attribute to typeArg, and 
		 Event.namespaceURI to null. To initialize an event with a namespace 
		 URI, use the Event.initEventNS() method.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initEvent"><linktext>W3C - DOM 3 Events: Event.initEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:Event:initEventNS"><apiName>initEventNS</apiName><shortdesc>
		 Initializes attributes of an Event object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of an Event object. This method has the same 
		 behavior as Event.initEvent(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initEventNS"><linktext>W3C - DOM 3 Events: Event.initEventNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:Event:preventBubble"><apiName>preventBubble</apiName><shortdesc>
		 Prevents the event from bubbling.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Obsolete" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Prevents the event from bubbling. This method is deprecated in favor of standard stopPropagation and is removed in Gecko 1.9. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.preventBubble"><linktext>MDC - event.preventBubble()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:Event:preventCapture"><apiName>preventCapture</apiName><shortdesc>
		 This method is deprecated in favor of standard stopPropagation and is removed in Gecko 1.9.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Obsolete" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This method is deprecated in favor of standard stopPropagation and is removed in Gecko 1.9. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.preventCapture"><linktext>MDC - event.preventCapture()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:Event:preventDefault"><apiName>preventDefault</apiName><shortdesc>
		 Cancels the event if it is cancelable, without stopping further propagation of the event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Cancels the event if it is cancelable, without stopping further propagation of the event. 
		 
		 Signifies that the event is to be canceled, meaning any default action 
		 normally taken by the implementation as a result of the event will not 
		 occur (see also Default actions and cancelable events). Calling this 
		 method for a non-cancelable event has no effect.
		 
		 <p><b>Note:</b> This method does not stop the event propagation; use 
		 Event.stopPropagation() or Event.stopImmediatePropagation() for that effect.</p>
		 
		 <p><b>Note:</b> Calling preventDefault during any stage of event flow cancels 
		 the event, meaning that any default action normally taken by the implementation as a 
		 result of the event will not occur. </p>
		 
		 </apiDesc><example>
		 Toggling a checkbox is the default action of clicking on a checkbox. This example demonstrates how to prevent that happening: 
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;preventDefault example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function stopDefAction(evt) {
		 	evt.preventDefault();
		 }
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body&gt;
		 
		 &lt;p&gt;Please click on the checkbox control.&lt;/p&gt;
		 
		 &lt;form&gt;
		 &lt;input type="checkbox" onclick="stopDefAction(event);"/&gt;
		 &lt;label for="checkbox"&gt;Checkbox&lt;/label&gt;
		 
		 &lt;/form&gt;
		 
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.preventDefault"><linktext>MDC - event.preventDefault()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-preventDefault"><linktext>W3C - DOM 3 Events: Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:Event:stopImmediatePropogation"><apiName>stopImmediatePropogation</apiName><shortdesc>
		 Prevents other event listeners from being triggered and, unlike 
		 Event.stopPropagation() its effect is immediate .</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Prevents other event listeners from being triggered and, unlike 
		 Event.stopPropagation() its effect is immediate . Once it has been called, 
		 further calls to this method have no additional effect.
		 
		 <p><b>Note:</b> This method does not prevent the default action from being invoked; 
		 use Event.preventDefault() for that effect.</p>
		 
		 </apiDesc><example>
		 This example demonstrates how events fire and are handled in the DOM in a very simple way. 
		 When the BODY of this HTML document loads, an event listener is registered with the top row 
		 of the TABLE. The event listener handles the event by executing the function stopEvent, 
		 which changes the value in the bottom cell of the table.
		 
		 <p>However, stopEvent also calls an event object method, event.stopPropagation, which keeps 
		 the event from bubbling any further up into the DOM. Note that the table itself has an onclick 
		 event handler that ought to display a message when the table is clicked. But the stopEvent 
		 method has stopped propagation, and so after the data in the table is updated, the event phase 
		 is effectively ended, and an alert box is displayed to confirm this.</p>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;Event Propagation&lt;/title&gt;
		 
		 &lt;style type="text/css"&gt;
		 	#t-daddy { border: 1px solid red }
		 	#c1 { background-color: pink; }
		 &lt;/style&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function stopEvent(ev) {
		 	c2 = document.getElementById("c2");
		 	c2.innerHTML = "hello";
		 
		 	// this ought to keep t-daddy from getting the click.
		 	ev.stopPropagation();
		 	alert("event propagation halted.");
		 }
		 
		 function load() {
		 	elem = document.getElementById("tbl1");
		 	elem.addEventListener("click", stopEvent, false);
		 }
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body onload="load();"&gt;
		 
		 &lt;table id="t-daddy" onclick="alert('hi');"&gt;
		 	&lt;tr id="tbl1"&gt;
		 		&lt;td id="c1"&gt;one&lt;/td&gt;
		 	&lt;/tr&gt;
		 	&lt;tr&gt;
		 		&lt;td id="c2"&gt;two&lt;/td&gt;
		 	&lt;/tr&gt;
		 &lt;/table&gt;
		 
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-stopImmediatePropagation"><linktext>W3C - DOM 3 Events: Event.stopImmediatePropogation()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:Event:stopPropogation"><apiName>stopPropogation</apiName><shortdesc>
		 Prevents other event listeners from being triggered but its effect is 
		 deferred until all event listeners attached on the Event.currentTarget 
		 have been triggered .</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Prevents other event listeners from being triggered but its effect is 
		 deferred until all event listeners attached on the Event.currentTarget 
		 have been triggered . Once it has been called, further calls to this 
		 method have no additional effect.
		 
		 <p><b>Note:</b> This method does not prevent the default action from being 
		 invoked; use Event.preventDefault() for that effect.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.stopPropogation"><linktext>MDC - event.stopPropogation()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-stopPropagation"><linktext>W3C - DOM 3 Events: Event.stopPropogation()</linktext></link></related-links></apiOperation><apiValue id="dom.events:Event:AT_TARGET"><apiName>AT_TARGET</apiName><shortdesc>
		 The current event is in the target phase, i.e.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The current event is in the target phase, i.e. it is being evaluated at the event target.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#AT_TARGET"><linktext>W3C - DOM 3 Events: Event.AT_TARGET</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:BUBBLING_PHASE"><apiName>BUBBLING_PHASE</apiName><shortdesc>
		 The current event phase is the bubbling phase.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The current event phase is the bubbling phase.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#BUBBLING_PHASE"><linktext>W3C - DOM 3 Events: Event.BUBBLING_PHASE</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:CAPTURING_PHASE"><apiName>CAPTURING_PHASE</apiName><shortdesc>
		 The current event phase is the capture phase.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The current event phase is the capture phase.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#CAPTURING_PHASE"><linktext>W3C - DOM 3 Events: Event.CAPTURING_PHASE</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:abort"><apiName>abort</apiName><shortdesc>
		 Loading of a resource has been aborted.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>abort</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Loading of a resource has been aborted.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-abort"><linktext>W3C - DOM 3 Events: UIEvent.abort / Event.abort</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:change"><apiName>change</apiName><shortdesc>
		 A control loses the input focus and its value has been modified since gaining focus.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A control loses the input focus and its value has been modified since gaining focus. This event type is dispatched before the event type blur.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-change"><linktext>W3C - DOM 3 Events: UIEvent.change / Event.change</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:error"><apiName>error</apiName><shortdesc>
		 A resource failed to load, or has been loaded but cannot be interpreted according to its semantics 
		 such as an invalid image, a script execution error, or non-well-formed XML.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A resource failed to load, or has been loaded but cannot be interpreted according to its semantics 
		 such as an invalid image, a script execution error, or non-well-formed XML.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-error"><linktext>W3C - DOM 3 Events: UIEvent.error / Event.error</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:load"><apiName>load</apiName><shortdesc>
		  The DOM Implementation finishes loading the resource (such as the document) and any dependent resources 
		 (such as images, style sheets, or scripts).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>load</apiData><apiType value="String"/></apiValueDef><apiDesc>
		  The DOM Implementation finishes loading the resource (such as the document) and any dependent resources 
		 (such as images, style sheets, or scripts). Dependent resources that fail to load will not prevent this 
		 event from firing if the resource that loaded them is still accessible via the DOM. If this event type 
		 is dispatched, implementations are required to dispatch this event at least on the Document node.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Document, Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-load"><linktext>W3C - DOM 3 Events: UIEvent.load / Event.load</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:reset"><apiName>reset</apiName><shortdesc>
		 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is reset.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>reset</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is reset.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-reset"><linktext>W3C - DOM 3 Events: UIEvent.reset / Event.reset</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:select"><apiName>select</apiName><shortdesc>
		 A user selects some text.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>select</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A user selects some text. DOM Level 3 Events does not provide contextual information to access 
		 the selected text. The selection occured before the dispatch of this event type.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-select"><linktext>W3C - DOM 3 Events: UIEvent.select / Event.select</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:submit"><apiName>submit</apiName><shortdesc>
		 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is submitted.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>submit</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is submitted.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-submit"><linktext>W3C - DOM 3 Events: UIEvent.submit / Event.submit</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:unload"><apiName>unload</apiName><shortdesc>
		 The DOM implementation removes from the environment the resource (such as the document) or any dependent
		 resources (such as images, style sheets, scripts).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.0"/><apiSince version="HTML 4.0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unload</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 The DOM implementation removes from the environment the resource (such as the document) or any dependent
		 resources (such as images, style sheets, scripts). The document is unloaded after the dispatch of this event 
		 type. If this event type is dispatched, implementations are required to dispatch this event at least on the 
		 Document node.
		 
		 <p><b>Note:</b> Dispatched from UIEvent if generated from a user interface, Event otherwise.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Document, Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view is in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-unload"><linktext>W3C - DOM 3 Events: UIEvent.unload / Event.unload</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:bubbles:get"><apiName>bubbles</apiName><shortdesc>
		 Used to indicate whether or not an event is a bubbling event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Used to indicate whether or not an event is a bubbling event. If the 
		 event can bubble the value is true, otherwise the value is false.
		 
		 </apiDesc><example>
		 <codeblock>
		 function goInput(e) {
		 	// checks bubbles and
		 	if not e.bubbles {
		 		// passes event along if it's not
		 		passItOn(e); 
		 	}
		 	// already bubbling
		 	doOutput(e)
		 }</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.altKey"><linktext>MDC - event.bubbles</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-canBubble"><linktext>W3C - DOM 3 Events: Event.bubbles</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:cancelable:get"><apiName>cancelable</apiName><shortdesc>
		 Indicates whether the event is cancelable or not.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Indicates whether the event is cancelable or not.
		 
		 <p><b>Note:</b> Whether an event can be canceled or not 
		 is something that's determined when that event is initialized. </p>
		 
		 <p><b>Note:</b> To cancel an event, call the preventDefault method on the event. This keeps 
		 the implementation from executing the default action that is associated with the event. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.cancelable"><linktext>MDC - event.cancelable</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-canCancel"><linktext>W3C - DOM 3 Events: Event.cancelable</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:currentTarget:get"><apiName>currentTarget</apiName><shortdesc>
		 Identifies the current target for the event, as the event traverses the DOM.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.events:EventTarget</apiValueClassifier></apiValueDef><apiDesc>
		 Identifies the current target for the event, as the event traverses the DOM.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.currentTarget"><linktext>MDC - event.currentTarget</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-currentTarget"><linktext>W3C - DOM 3 Events: Event.currentTarget</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:defaulPrevented:get"><apiName>defaulPrevented</apiName><shortdesc>
		 Used to indicate whether Event.preventDefault() has been called for 
		 this event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Used to indicate whether Event.preventDefault() has been called for 
		 this event.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-defaultPrevented"><linktext>W3C - DOM 3 Events: Event.defaulPrevented</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:eventPhase:get"><apiName>eventPhase</apiName><shortdesc>
		 Used to indicate which phase of event flow is currently being accomplished.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Used to indicate which phase of event flow is currently being accomplished.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.eventPhase"><linktext>MDC - event.eventPhase</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-eventPhase"><linktext>W3C - DOM 3 Events: Event.eventPhase</linktext></link><link href="dom.events.xml#Event/CAPTURING_PHASE"><linktext>CAPTURING_PHASE</linktext></link><link href="dom.events.xml#Event/AT_TARGET"><linktext>AT_TARGET</linktext></link><link href="dom.events.xml#Event/BUBBLING_PHASE"><linktext>BUBBLING_PHASE</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:explicitOriginalTarget:get"><apiName>explicitOriginalTarget</apiName><shortdesc>
		 The explicit original target of the event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>gecko.events:nsIDOMEventTarget</apiValueClassifier></apiValueDef><apiDesc>
		 The explicit original target of the event.
		 
		 <p>If the event was retargeted for some reason other than an anonymous boundary crossing, this 
		 will be set to the target before the retargeting occurs. For example, mouse events are retargeted 
		 to their parent node when they happen over text nodes (see bug 185889), and in that case 
		 currentTarget will show the parent and explicitOriginalTarget will show the text node. </p>
		 
		 <p>explicitOriginalTarget differs from originalTarget in that it will never contain anonymous content. </p>
		 
		 </apiDesc><example>
		 This property can be used with &lt;command&gt; to get the event details of the original object calling the command.
		 <codeblock>
		 function myCommand(ev) {
		 	alert(ev.explicitOriginalTarget.nodeName); // returns 'menuitem'
		 }
		 
		 
		 &lt;command id="my-cmd-anAction" oncommand="myCommand(event);"/&gt;
		 
		 &lt;menulist&gt;&lt;menupopup&gt;
		 	&lt;menuitem label="Get my element name!" command="my-cmd-anAction"/&gt;
		 &lt;/menupopup&gt;&lt;/menulist&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://mxr.mozilla.org/mozilla-central/source/dom/interfaces/events/nsIDOMNSEvent.idl"><linktext>Mozilla Central - nsIDOMNSEvent.idl</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:isTrusted:get"><apiName>isTrusted</apiName><shortdesc>
		 Determines if the event was from the user or script generated.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Determines if the event was from the user or script generated. Returns
		 true if the user caused the event to be dispatched.
		 
		 <p><b>Note:</b> Can't find any more information on this property</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://osdir.com/ml/w3c.webapi/2006-06/msg00080.html"><linktext>W3C WebAPI Forum - [DOM3EV] introduce Event.trusted?</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:namespaceURI:get"><apiName>namespaceURI</apiName><shortdesc>
		 The namespace URI associated with this event at initialization time, or 
		 null if it is unspecified.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The namespace URI associated with this event at initialization time, or 
		 null if it is unspecified.
		 DOM Level 2 Events initialization methods, such as Event.initEvent(), set 
		 the value to null.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-namespaceURI"><linktext>W3C - DOM 3 Events: Event.namespaceURI</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:originalTarget:get"><apiName>originalTarget</apiName><shortdesc>
		 The original target of the event before any retargetings.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 The original target of the event before any retargetings.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://mxr.mozilla.org/mozilla-central/source/dom/interfaces/events/nsIDOMNSEvent.idl"><linktext>Mozilla Central - nsIDOMNSEvent.idl</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:target:get"><apiName>target</apiName><shortdesc>
		 Used to indicate the event target.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.events:EventTarget</apiValueClassifier></apiValueDef><apiDesc>
		 Used to indicate the event target. This attribute contains the target node 
		 when used with the Event dispatch and DOM event flow.
		 
		 </apiDesc><example>
		 <codeblock>&lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;target example&lt;/title&gt;
		 &lt;script type="text/javascript"&gt;
		 
		 function highlightTarget(evt) {
		 	evt.target.style.backgroundColor = 'blue';
		 }
		 
		 function resetTarget(evt) {
  		 	evt.target.style.backgroundColor = 'silver';
		 }
		 
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body onmousedown="highlightTarget(event)" onmouseup="resetTarget(event)"&gt;
		 
		 &lt;p&gt;This example demonstrates how, by using event propagation, two event
		 handler functions in the body element can use the &lt;i&gt;target&lt;/i&gt; property
		 to distinguish between, and process, all other bubbleable events occuring
		 lower down the DOM. Note: not all events can bubble up the DOM.&lt;/p&gt;
		 
		 &lt;p&gt;As an event lower down the DOM bubbles up and reaches the body
		 object, the &lt;i&gt;target&lt;/i&gt; property contains the object reference of the
		 original event target. In this case which element in the document
		 received an onmousedown or onmouseup event.&lt;/p&gt;
		 
		 &lt;p&gt;This allows the event handlers of the body object to process bubbleable
		 events occuring lower down the DOM structure, which means there is no need
		 to attach the event handlers to every button &amp; para element of the page.&lt;/p&gt;
		 
		 &lt;button&gt;button 1&lt;/button&gt;&lt;br /&gt;
		 &lt;button&gt;button 2&lt;/button&gt;&lt;br /&gt;
		 
		 &lt;button&gt;button 3&lt;/button&gt;&lt;br /&gt;
		 &lt;button&gt;button 4&lt;/button&gt;&lt;br /&gt;
		 &lt;button&gt;button 5&lt;/button&gt;&lt;br /&gt;
		 &lt;button&gt;button 6&lt;/button&gt;&lt;br /&gt;
		 
		 &lt;button&gt;button 7&lt;/button&gt;&lt;br /&gt;
		 
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.target"><linktext>MDC - event.target</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-target"><linktext>W3C - DOM 3 Events: Event.target</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:timeStamp:get"><apiName>timeStamp</apiName><shortdesc>
		 Used to specify the time at which the event was created in milliseconds 
		 relative to 1970-01-01T00:00:00Z.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMTimeStamp</apiValueClassifier></apiValueDef><apiDesc>
		 Used to specify the time at which the event was created in milliseconds 
		 relative to 1970-01-01T00:00:00Z. Due to the fact that some systems may not 
		 provide this information the value of timeStamp may be not available for all 
		 events. When not available, the value is 0.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 
		 &lt;title&gt;timeStamp example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 function getTime(event) {
		 	document.getElementById("time").firstChild.nodeValue = event.timeStamp;
		 }
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body onkeypress="getTime(event)"&gt;
		 
		 &lt;p&gt;Press any key to get the current timestamp
		 for the onkeypress event.&lt;/p&gt;
		 &lt;p&gt;timeStamp: &lt;span id="time"&gt;-&lt;/span&gt;&lt;/p&gt;
		 
		 &lt;/body&gt;
		 
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.timeStamp"><linktext>MDC - event.timeStamp</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-timeStamp"><linktext>W3C - DOM 3 Events: Event.timeStamp</linktext></link></related-links></apiValue><apiValue id="dom.events:Event:type:get"><apiName>type</apiName><shortdesc>
		 The local name of the event type.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The local name of the event type. The name must be an NCName as defined in 
		 [XML Namespaces 1.1] and is case-sensitive.
		 
		 <p><b>Note:</b> The type must be an XML name.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 
		 &lt;title&gt;type example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 var currEvent = null;
		 
		 function getEvtType(evt) {
		 	currEvent = evt.type;
		 	document.getElementById("Etype").firstChild.nodeValue = currEvent;
		 }
		 
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body
		   onkeydown="getEvtType(event)"
		   onkeyup="getEvtType(event)"
		   onmousedown="getEvtType(event)"
		   onmouseup="getEvtType(event)"&gt;
		 
		 &lt;p&gt;Press any key or click the mouse to get the event type.&lt;/p&gt;
		 &lt;p&gt;Event type: &lt;span id="Etype"&gt;-&lt;/span&gt;&lt;/p&gt;
		 
		 &lt;/body&gt;
		 
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.type"><linktext>MDC - event.type</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-type"><linktext>W3C - DOM 3 Events: Event.type</linktext></link><link href="http://www.w3.org/TR/2006/REC-xml-names11-20060816/"><linktext>W3C - XML Namespaces 1.1</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.events:TextEvent"><apiName>TextEvent</apiName><shortdesc>
	 The TextEvent interface provides specific contextual information 
	 associated with Text Events.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:UIEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The TextEvent interface provides specific contextual information 
	 associated with Text Events.
	 
	 <p>To create an instance of the TextEvent interface, use the 
	 DocumentEvent.createEvent("TextEvent") method call.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-TextEvent"><linktext>W3C - DOM 3 Events: TextEvent</linktext></link></related-links><apiOperation id="dom.events:TextEvent:initTextEvent"><apiName>initTextEvent</apiName><shortdesc>
		 Initializes attributes of a TextEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>dataArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies TextEvent.data.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a TextEvent object. This method has the 
		 same behavior as UIEvent.initUIEvent(). The value of UIEvent.detail remains undefined. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initTextEvent"><linktext>W3C - TextEvent.initTextEvent()</linktext></link><link href="dom.events.xml#UIEvent/initUIEvent()"><linktext>dom.events.UIEvent.initUIEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:TextEvent:initTextEventNS"><apiName>initTextEventNS</apiName><shortdesc>
		 Initializes attributes of a TextEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>dataArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies TextEvent.data.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a TextEvent object. This method has the same 
		 behavior as UIEvent.initUIEventNS(). The value of UIEvent.detail remains undefined. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initTextEventNS"><linktext>W3C - TextEvent.initTextEventNS()</linktext></link><link href="dom.events.xml#UIEvent/initUIEventNS()"><linktext>dom.events.UIEvent.initUIEventNS()</linktext></link></related-links></apiOperation><apiValue id="dom.events:TextEvent:textInput"><apiName>textInput</apiName><shortdesc>
		 One or more characters have been entered.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>textInput</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 One or more characters have been entered. 
		 
		 <p>The characters can originate from a variety of sources. For example, it could be characters resulting 
		 from a key being pressed or released on a keyboard device, characters resulting from the processing of an 
		 input method editor, or resulting from a voice command. Where a "paste" operation generates a simple 
		 sequence of characters, i.e. a text without any structure or style information, this event type should 
		 be generated as well.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>UIEvent.view and TextEvent.data are in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-textInput"><linktext>W3C - TextEvent.textInput</linktext></link></related-links></apiValue><apiValue id="dom.events:TextEvent:data:get"><apiName>data</apiName><shortdesc>
		 Holds the value of the characters generated by the character device.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Holds the value of the characters generated by the character device. 
		 This may be a single Unicode character or a non-empty sequence of 
		 Unicode characters [Unicode]. Characters should be normalized as 
		 defined by the Unicode normalization form NFC, defined in [UAX #15]. 
		 This attribute cannot be null or contain the empty string.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-UIEvent-data"><linktext>W3C - TextEvent.data</linktext></link><link href="http://www.unicode.org/versions/Unicode5.0.0/"><linktext>Unicode</linktext></link><link href="http://www.unicode.org/reports/tr15/"><linktext>UAX #15</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.events:MouseEvent"><apiName>MouseEvent</apiName><shortdesc>
	 The MouseEvent interface provides specific contextual information 
	 associated with Mouse events.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="HTML 4.01"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>cssom.view:MouseEventView</apiBaseInterface><apiBaseClassifier>dom.events:UIEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The MouseEvent interface provides specific contextual information 
	 associated with Mouse events.
	 
	 <p>In the case of nested elements mouse events are always targeted at the 
	 most deeply nested element. Ancestors of the targeted element may use 
	 bubbling to obtain notification of mouse events which occur within their 
	 descendent elements.</p>
	 
	 <p>To create an instance of the MouseEvent interface, use the 
	 DocumentEvent.createEvent("MouseEvent") method call.</p>
	 
	 <p><b>Note:</b> When initializing MouseEvent objects using initMouseEvent or 
	 initMouseEventNS, implementations should use the client coordinates clientX 
	 and clientY for calculation of other coordinates (such as target coordinates 
	 exposed by DOM Level 0 implementations).</p>
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="dom.events:MouseEvent:getModifierState"><apiName>getModifierState</apiName><shortdesc>
		 Queries the state of a modifier using a key identifier.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If it is a modifier key and the modifier is activated
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>keyIdentifierArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Refer to the KeyboardEvent.getModifierState() 
		 method for a description of this parameter.
		 
		 Note: If an application wishes to distinguish between right and left 
		 modifiers, this information could be deduced using keyboard events 
		 and KeyboardEvent.keyLocation.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Queries the state of a modifier using a key identifier.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MouseEvent-getModifierState"><linktext>W3C - MouseEvent.getModifierState()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:MouseEvent:initMouseEvent"><apiName>initMouseEvent</apiName><shortdesc>
		 Initializes attributes of a MouseEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiType value="Number"/><apiDesc>Specifies UIEvent.detail.
		 </apiDesc></apiParam><apiParam><apiItemName>screenXArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.screenX.
		 </apiDesc></apiParam><apiParam><apiItemName>screenYArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.screenY.
		 </apiDesc></apiParam><apiParam><apiItemName>clientXArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.clientX.
		 </apiDesc></apiParam><apiParam><apiItemName>clientYArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.clientY.
		 </apiDesc></apiParam><apiParam><apiItemName>ctrlKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.ctrlKey.
		 </apiDesc></apiParam><apiParam><apiItemName>altKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.altKey.
		 </apiDesc></apiParam><apiParam><apiItemName>shiftKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.shiftKey.
		 </apiDesc></apiParam><apiParam><apiItemName>metaKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.metaKey.
		 </apiDesc></apiParam><apiParam><apiItemName>buttonArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.button
		 </apiDesc></apiParam><apiParam><apiItemName>relatedTargetArg</apiItemName><apiOperationClassifier>dom.events:EventTarget</apiOperationClassifier><apiDesc>Specifies MouseEvent.relatedTarget. This value may be null.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MouseEvent object. This method has the 
		 same behavior as UIEvent.initUIEvent(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMouseEvent"><linktext>W3C - MouseEvent.initMouseEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:MouseEvent:initMouseEventNS"><apiName>initMouseEventNS</apiName><shortdesc>
		 Initializes attributes of a MouseEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiType value="Number"/><apiDesc>Specifies UIEvent.detail.
		 </apiDesc></apiParam><apiParam><apiItemName>screenXArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.screenX.
		 </apiDesc></apiParam><apiParam><apiItemName>screenYArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.screenY.
		 </apiDesc></apiParam><apiParam><apiItemName>clientXArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.clientX.
		 </apiDesc></apiParam><apiParam><apiItemName>clientYArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.clientY.
		 </apiDesc></apiParam><apiParam><apiItemName>ctrlKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.ctrlKey.
		 </apiDesc></apiParam><apiParam><apiItemName>altKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.altKey.
		 </apiDesc></apiParam><apiParam><apiItemName>shiftKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.shiftKey.
		 </apiDesc></apiParam><apiParam><apiItemName>metaKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.metaKey.
		 </apiDesc></apiParam><apiParam><apiItemName>buttonArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.button
		 </apiDesc></apiParam><apiParam><apiItemName>relatedTargetArg</apiItemName><apiOperationClassifier>dom.events:EventTarget</apiOperationClassifier><apiDesc>Specifies MouseEvent.relatedTarget. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>modifiersListArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Refer to the KeyboardEvent.initKeyboardEventNS() method for a description of this parameter.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MouseEvent object. This method has the
		 same behavior as UIEvent.initUIEventNS(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMouseEventNS"><linktext>W3C - MouseEvent.initMouseEventNS()</linktext></link></related-links></apiOperation><apiValue id="dom.events:MouseEvent:click"><apiName>click</apiName><shortdesc>
		 A pointing device button is clicked over an element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.01"/><apiSince version="HTML 4.01"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A pointing device button is clicked over an element. 
		 
		 <p>The definition of a click depends on the environment configuration; i.e. it may depend on the screen location or 
		 the delay between the press and release of the pointing device button. In any case, the event target must be the 
		 same between the mousedown, mouseup, and click. The sequence of these events is: mousedown, mouseup, and click. It 
		 depends on the environment configuration whether the event type click can occur if one or more of the event types 
		 mouseover, mousemove, and mouseout occur between the press and release of the pointing device button. In addition, 
		 the event type is dispatched as described in Activation requests and behavior.</p>
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>Namespace</entry><entry><codeph>None</codeph></entry>
		 	</row><row>
		 		<entry>Cancelable</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Bubbles</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Target</entry><entry><codeph>Element</codeph></entry>
		 	</row><row>
		 		<entry>Context info</entry><entry>MouseEvent.screenX, MouseEvent.screenY, MouseEvent.clientX, MouseEvent.clientY, 
		 MouseEvent.altKey, MouseEvent.ctrlKey, MouseEvent.shiftKey, MouseEvent.metaKey, MouseEvent.button, and UIEvent.view 
		 are in use. The UIEvent.detail attribute indicates the current click count. The attribute value is 1 when the user 
		 begins this action and increments by 1 for each click.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-click"><linktext>W3C - MouseEvent.click</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:dblclick"><apiName>dblclick</apiName><shortdesc>
		 A pointing device button is clicked twice over an element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.01"/><apiSince version="HTML 4.01"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dblclick</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A pointing device button is clicked twice over an element. 
		 
		 <p>The definition of a double click depends on the environment configuration, except that the event target 
		 must be the same between mousedown, mouseup, and dblclick. This event type is dispatched after the event 
		 type click if a click and double click occur simultaneously, and after the event type mouseup otherwise.</p>
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>Namespace</entry><entry><codeph>None</codeph></entry>
		 	</row><row>
		 		<entry>Cancelable</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Bubbles</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Target</entry><entry><codeph>Element</codeph></entry>
		 	</row><row>
		 		<entry>Context info</entry><entry>MouseEvent.screenX, MouseEvent.screenY, MouseEvent.clientX, MouseEvent.clientY, MouseEvent.altKey, 
		 MouseEvent.ctrlKey, MouseEvent.shiftKey, MouseEvent.metaKey, MouseEvent.button, and UIEvent.view are in use. The UIEvent.detail 
		 attribute indicates the current click count.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-dblclick"><linktext>W3C - MouseEvent.dblclick</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:mousedown"><apiName>mousedown</apiName><shortdesc>
		 A pointing device button is pressed over an element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.01"/><apiSince version="HTML 4.01"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mousedown</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A pointing device button is pressed over an element.
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>Namespace</entry><entry><codeph>None</codeph></entry>
		 	</row><row>
		 		<entry>Cancelable</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Bubbles</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Target</entry><entry><codeph>Element</codeph></entry>
		 	</row><row>
		 		<entry>Context info</entry><entry>MouseEvent.screenX, MouseEvent.screenY, MouseEvent.clientX, MouseEvent.clientY, 
		 MouseEvent.altKey, MouseEvent.ctrlKey, MouseEvent.shiftKey, MouseEvent.metaKey, MouseEvent.button, and UIEvent.view 
		 are in use. The UIEvent.detail attribute indicates the current click count incremented by one. For example, if no 
		 click happened before the mousedown, UIEvent.detail will contain the value 1.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-mousedown"><linktext>W3C - MouseEvent.mousedown</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:mousemove"><apiName>mousemove</apiName><shortdesc>
		 A pointing device is moved while it is over an element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.01"/><apiSince version="HTML 4.01"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mousemove</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A pointing device is moved while it is over an element.
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>Namespace</entry><entry><codeph>None</codeph></entry>
		 	</row><row>
		 		<entry>Cancelable</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Bubbles</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Target</entry><entry><codeph>Element</codeph></entry>
		 	</row><row>
		 		<entry>Context info</entry><entry>MouseEvent.screenX, MouseEvent.screenY, MouseEvent.clientX, MouseEvent.clientY, 
		 MouseEvent.altKey, MouseEvent.ctrlKey, MouseEvent.shiftKey, MouseEvent.metaKey, and UIEvent.view are in use.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-mousemove"><linktext>W3C - MouseEvent.mousemove</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:mouseout"><apiName>mouseout</apiName><shortdesc>
		 A pointing device is moved away from an element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.01"/><apiSince version="HTML 4.01"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseout</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A pointing device is moved away from an element.
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>Namespace</entry><entry><codeph>None</codeph></entry>
		 	</row><row>
		 		<entry>Cancelable</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Bubbles</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Target</entry><entry><codeph>Element</codeph></entry>
		 	</row><row>
		 		<entry>Context info</entry><entry>MouseEvent.screenX, MouseEvent.screenY, MouseEvent.clientX, MouseEvent.clientY, 
		 MouseEvent.altKey, MouseEvent.ctrlKey, MouseEvent.shiftKey, MouseEvent.metaKey, and UIEvent.view are in use. 
		 MouseEvent.relatedTarget indicates the event target a pointing device is entering, if any.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-mouseout"><linktext>W3C - MouseEvent.mouseout</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:mouseover"><apiName>mouseover</apiName><shortdesc>
		 A pointing device is moved onto an element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.01"/><apiSince version="HTML 4.01"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseover</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A pointing device is moved onto an element.
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>Namespace</entry><entry><codeph>None</codeph></entry>
		 	</row><row>
		 		<entry>Cancelable</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Bubbles</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Target</entry><entry><codeph>Element</codeph></entry>
		 	</row><row>
		 		<entry>Context info</entry><entry>MouseEvent.screenX, MouseEvent.screenY, MouseEvent.clientX, MouseEvent.clientY, 
		 MouseEvent.altKey, MouseEvent.ctrlKey, MouseEvent.shiftKey, MouseEvent.metaKey, and UIEvent.view are in use. 
		 MouseEvent.relatedTarget indicates the event target a pointing device is exiting, if any.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-mouseover"><linktext>W3C - MouseEvent.mouseover</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:mouseup"><apiName>mouseup</apiName><shortdesc>
		 A pointing device button is released over an element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="4.01"/><apiSince version="HTML 4.01"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseup</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A pointing device button is released over an element.
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>Namespace</entry><entry><codeph>None</codeph></entry>
		 	</row><row>
		 		<entry>Cancelable</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Bubbles</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Target</entry><entry><codeph>Element</codeph></entry>
		 	</row><row>
		 		<entry>Context info</entry><entry>MouseEvent.screenX, MouseEvent.screenY, MouseEvent.clientX, MouseEvent.clientY, MouseEvent.altKey, MouseEvent.ctrlKey, MouseEvent.shiftKey, MouseEvent.metaKey, 
		 MouseEvent.button, and UIEvent.view are in use. The UIEvent.detail attribute indicates the current click count incremented by one.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-mouseup"><linktext>W3C - MouseEvent.mouseup</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:altKey:get"><apiName>altKey</apiName><shortdesc>
		 Refer to the KeyboardEvent.altKey attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Refer to the KeyboardEvent.altKey attribute.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MouseEvent-altKey"><linktext>W3C - MouseEvent.altKey</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:button:get"><apiName>button</apiName><shortdesc>
		 Returns an integer value indicating the button that changed state.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Returns an integer value indicating the button that changed state. 
		 Some mice may provide or simulate more buttons, and values higher than 2 
		 can be used to represent such buttons.
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>Namespace</entry><entry><codeph>None</codeph></entry>
		 	</row><row>
		 		<entry><codeph>0</codeph></entry><entry>Standard 'click', usually left button </entry>
		 	</row><row>
		 		<entry><codeph>1</codeph></entry><entry>Middle button, usually wheel-click </entry>
		 	</row><row>
		 		<entry><codeph>2</codeph></entry><entry>Right button, usually right-click </entry>
		 	</row><row>
		 		<entry>Context info</entry><entry>MouseEvent.screenX, MouseEvent.screenY, MouseEvent.clientX, MouseEvent.clientY, MouseEvent.altKey, MouseEvent.ctrlKey, MouseEvent.shiftKey, MouseEvent.metaKey, 
		 MouseEvent.button, and UIEvent.view are in use. The UIEvent.detail attribute indicates the current click count incremented by one.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 <p><b>Note:</b> Because mouse clicks are frequently intercepted by the user 
		 interface, it may be difficult to detect buttons other than those for a standard mouse 
		 click (usually the left button) in some circumstances. </p>
		 
		 <p><b>Note:</b> Users may change the configuration of buttons on their pointing 
		 device so that if an event's button property is zero, it may not have been caused by 
		 the button that is physically left–most on the pointing device; however, it should 
		 behave as if the left button was clicked in the standard button layout. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;script type="text/javascript"&gt;
		 
		 function whichButton(e) {
		 	// Handle different event models
		 	var e = e || window.event;
		 	var btnCode;
		 
		 	if ('object' == typeof e) {
		 		btnCode = e.button;
		 
		 		switch (btnCode) {
		 			case 0 : alert('Left button clicked');
		 			break;
		 			case 1 : alert('Middle button clicked');
		 			break;
		 			case 2 : alert('Right button clicked');
		 			break;
		 			default: alert('Unexpected code: ' + btnCode);
		 		}
		 	}
		 }
		 
		 &lt;/script&gt;
		 
		 &lt;p onmouseup="whichButton(event);" oncontextmenu="event.preventDefault();"&gt;Click with mouse...&lt;/p&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.button"><linktext>MDC - event.button</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MouseEvent-button"><linktext>W3C - MouseEvent.button</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:clientX:get"><apiName>clientX</apiName><shortdesc>
		 
		 Returns the horizontal coordinate within the application's client area at which the event occurred 
		 (as opposed to the coordinates within the page).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Returns the horizontal coordinate within the application's client area at which the event occurred 
		 (as opposed to the coordinates within the page). 
		 
		 <p>For example, clicking in the top-left corner of the client area will always result in a mouse 
		 event with a clientX value of 0, regardless of whether the page is scrolled horizontally.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 	&lt;title&gt;clientX\clientY example&lt;/title&gt;
		 
		 	&lt;script type="text/javascript"&gt;
		 		function showCoords(evt) {
		 			alert(
		 			"clientX value: " + evt.clientX + "\n"
		 			+ "clientY value: " + evt.clientY + "\n"
		 		);
		 		}
		 	&lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body onmousedown="showCoords(event)"&gt;
		 	&lt;p&gt;To display the mouse coordinates click anywhere on the page.&lt;/p&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms533567(VS.85).aspx"><linktext>MSDN: clientX Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/event.clientX"><linktext>MDC - Event: clientX Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-mouseeventview-interface"><linktext>W3C - CSSOM View: clientX Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#mousepos"><linktext>Quirksmode: Mouse position</linktext></link><link href="dom.events.xml#MouseEvent/clientY"><linktext>clientY</linktext></link><link href="dom.events.xml#MouseEvent/screenX"><linktext>screenX</linktext></link><link href="dom.events.xml#MouseEvent/screenY"><linktext>screenY</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:clientY:get"><apiName>clientY</apiName><shortdesc>
		 
		 Returns the vertical coordinate within the application's client area at which the event occurred 
		 (as opposed to the coordinates within the page).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Returns the vertical coordinate within the application's client area at which the event occurred 
		 (as opposed to the coordinates within the page).
		 
		 <p>For example, clicking in the top-left corner of the client area will always result in a mouse 
		 event with a clientY value of 0, regardless of whether the page is scrolled vertically.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;clientX\clientY example&lt;/title&gt;
		 
		 		&lt;script type="text/javascript"&gt;
		 			function showCoords(evt){
		 				alert(
		 				"clientX value: " + evt.clientX + "\n"
		 				+ "clientY value: " + evt.clientY + "\n"
		 			);
		 			}
		 		&lt;/script&gt;
		 	&lt;/head&gt;
		 
		 	&lt;body onmousedown="showCoords(event)"&gt;
		 		&lt;p&gt;To display the mouse coordinates click anywhere on the page.&lt;/p&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms533568(VS.85).aspx"><linktext>MSDN: clientY Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/event.clientY"><linktext>MDC - Event: clientY Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-mouseeventview-interface"><linktext>W3C - CSSOM View: clientY Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#mousepos"><linktext>Quirksmode: Mouse position</linktext></link><link href="dom.events.xml#MouseEvent/clientX"><linktext>clientX</linktext></link><link href="dom.events.xml#MouseEvent/screenX"><linktext>screenX</linktext></link><link href="dom.events.xml#MouseEvent/screenY"><linktext>screenY</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:ctrlKey:get"><apiName>ctrlKey</apiName><shortdesc>
		 Refer to the KeyboardEvent.ctrlKey attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Refer to the KeyboardEvent.ctrlKey attribute.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MouseEvent-ctrlKey"><linktext>W3C - MouseEvent.ctrlKey</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:metaKey:get"><apiName>metaKey</apiName><shortdesc>
		 Refer to the KeyboardEvent.metaKey attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Refer to the KeyboardEvent.metaKey attribute.
		 
		 </apiDesc><example>
		 <codeblock>
		 function goInput(e) {
		 	// checks metaKey and
		 	if (e.metaKey) {
		 		// passes event along
		 		superSizeOutput(e);
		 	} else {
		 		doOutput(e);
		 	}
		 }</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.metaKey"><linktext>MDC - event.metaKey</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MouseEvent-metaKey"><linktext>W3C - MouseEvent.metaKey</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:offsetX:get"><apiName>offsetX</apiName><shortdesc>
		 
		 Returns the horizontal coordinate, as number of CSS pixels, of the 
		 position where the event occurred relative to the origin of the padding box of the target node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5_buggy"/><apiTool name="IE" version="6.0_buggy"/><apiTool name="IE" version="7.0_buggy"/><apiTool name="IE" version="8.0_as_IE7_buggy"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.1b_no"/><apiTool name="Safari" version="3.0_incorrect"/><apiTool name="Safari" version="3.1_incorrect"/><apiTool name="Safari" version="4.0b_incorrect"/><apiTool name="Chrome" version="1.0_incorrect"/><apiTool name="Chrome" version="2.0_incorrect"/><apiTool name="Opera" version="9.62_incorrect"/><apiTool name="Opera" version="10.0a_incorrect"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Returns the horizontal coordinate, as number of CSS pixels, of the 
		 position where the event occurred relative to the origin of the padding box of the target node.
		 
		 <p>In IE the coordinates are calculated relative to the target element when that element is 
		 eligible to become an offsetParent. If that's not the case, the coordinates are calculated 
		 relative to the target's offsetParent.</p>
		 
		 <p><b>Note (Safari/Chrome):</b> Safari and Chrome calculate the position not from the padding box (as per the spec) but form the
		 border box.</p>
		 
		 <p><b>Note (Opera):</b> Opera calculates the position from the content box instead of the padding box.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;head&gt;
		 	&lt;script&gt;
		 		function offsetCoords() {
		 			var offsetInfo = ""
		 			offsetInfo = "The x coordinate is: " + window.event.offsetX + "\r"
		 			offsetInfo += "The y coordinate is: " + window.event.offsetY + "\r"
		 			alert(offsetInfo);
		 		}
		 	&lt;/script&gt;
		 &lt;/head&gt;
		 &lt;body onmousemove="window.status = 'X=' + window.event.offsetX + 
		 ' Y=' + window.event.offsetY" ondblclick="offsetCoords()"&gt;
		 	...
		 	&lt;div onclick="offsetCoords();" ... position:absolute; top:200; left:300;"&gt;
		 	...
		 	&lt;/div&gt;
		 &lt;/body&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms534305(VS.85).aspx"><linktext>MSDN: offsetX Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-mouseeventview-interface"><linktext>W3C - CSSOM View: offsetX Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#mousepos"><linktext>Quirksmode: Mouse position</linktext></link><link href="dom.events.xml#MouseEvent/offsetY"><linktext>offsetY</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:offsetY:get"><apiName>offsetY</apiName><shortdesc>
		 
		 Returns the vertical coordinate, as number of CSS pixels, of the 
		 position where the event occurred relative to the origin of the padding box of the target node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5_buggy"/><apiTool name="IE" version="6.0_buggy"/><apiTool name="IE" version="7.0_buggy"/><apiTool name="IE" version="8.0_as_IE7_buggy"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.1b_no"/><apiTool name="Safari" version="3.0_incorrect"/><apiTool name="Safari" version="3.1_incorrect"/><apiTool name="Safari" version="4.0b_incorrect"/><apiTool name="Chrome" version="1.0_incorrect"/><apiTool name="Chrome" version="2.0_incorrect"/><apiTool name="Opera" version="9.62_incorrect"/><apiTool name="Opera" version="10.0a_incorrect"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Returns the vertical coordinate, as number of CSS pixels, of the 
		 position where the event occurred relative to the origin of the padding box of the target node.
		 
		 <p>In IE the coordinates are calculated relative to the target element when that element is 
		 eligible to become an offsetParent. If that's not the case, the coordinates are calculated 
		 relative to the target's offsetParent.</p>
		 
		 <p><b>Note (Safari/Chrome):</b> Safari and Chrome calculate the position not from the padding box (as per the spec) but form the
		 border box.</p>
		 
		 <p><b>Note (Opera):</b> Opera calculates the position from the content box instead of the padding box.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;head&gt;
		 	&lt;script&gt;
		 		function offsetCoords() {
		 			var offsetInfo = ""
		 			offsetInfo = "The x coordinate is: " + window.event.offsetX + "\r"
		 			offsetInfo += "The y coordinate is: " + window.event.offsetY + "\r"
		 			alert(offsetInfo);
		 		}
		 	&lt;/script&gt;
		 &lt;/head&gt;
		 &lt;body onmousemove="window.status = 'X=' + window.event.offsetX + 
		 ' Y=' + window.event.offsetY" ondblclick="offsetCoords()"&gt;
		 	...
		 	&lt;div onclick="offsetCoords();" ... position:absolute; top:200; left:300;"&gt;
		 	...
		 	&lt;/div&gt;
		 &lt;/body&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms534306(VS.85).aspx"><linktext>MSDN: offsetY Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-mouseeventview-interface"><linktext>W3C - CSSOM View: offsetY Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#mousepos"><linktext>Quirksmode: Mouse position</linktext></link><link href="dom.events.xml#MouseEvent/offsetX"><linktext>offsetX</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:pageX:get"><apiName>pageX</apiName><shortdesc>
		 Returns the horizontal coordinate of the event relative to whole document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8_no"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Returns the horizontal coordinate of the event relative to whole document. 
		 
		 <p><b>Note (IE):</b> In order to get it in IE, too, add the scrolling offset of the 
		 document to clientX/Y.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;pageX\pageY &amp; layerX\layerY example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 	function showCoords(evt){
		 		var form = document.forms.form_coords;
		 		var parent_id = evt.target.parentNode.id;
		 		form.parentId.value = parent_id;
		 		form.pageXCoords.value = evt.pageX;
		 		form.pageYCoords.value = evt.pageY;
		 		form.layerXCoords.value = evt.layerX;
		 		form.layerYCoords.value = evt.layerY;
		 	}
		 &lt;/script&gt;
		 
		 &lt;style type="text/css"&gt;
		 
		 #d1 {
		 	border: solid blue 1px;
		 	padding: 20px;
		 }
		 
		 #d2 {
		 	position: absolute;
		 	top: 180px;
		 	left: 80%;
		 	right:auto;
		 	width: 40%;
		 	border: solid blue 1px;
		 	padding: 20px;
		 }
		 
		 #d3 {
		 	position: absolute;
		 	top: 240px;
		 	left: 20%;
		 	width: 50%;
		 	border: solid blue 1px;
		 	padding: 10px;
		 }
		 
		 &lt;/style&gt;
		 &lt;/head&gt;
		 
		 &lt;body onmousedown="showCoords(event)"&gt;
		 
		 &lt;p&gt;To display the mouse coordinates please click anywhere on the page.&lt;/p&gt;
		 
		 &lt;div id="d1"&gt;
		 	&lt;span&gt;This is an un-positioned div so clicking it will return
		 	layerX/layerY values almost the same as pageX/PageY values.&lt;/span&gt;
		 &lt;/div&gt;
		 
		 &lt;div id="d2"&gt;
		 	&lt;span&gt;This is a positioned div so clicking it will return layerX/layerY
		 	values that are relative to the top-left corner of this positioned
		 	element. Note the pageX\pageY properties still return the
		 	absolute position in the document, including page scrolling.&lt;/span&gt;
		 
		 	&lt;span&gt;Make the page scroll more! This is a positioned div so clicking it
		 	will return layerX/layerY values that are relative to the top-left
		 	corner of this positioned element. Note the pageX\pageY properties still
		 	return the absolute position in the document, including page
		 	scrolling.&lt;/span&gt;
		 &lt;/div&gt;
		 
		 &lt;div id="d3"&gt;
		 	&lt;form name="form_coords"&gt;
		 		Parent Element id: &lt;input type="text" name="parentId" size="7" /&gt;&lt;br /&gt;
		 		pageX:&lt;input type="text" name="pageXCoords" size="7" /&gt;  
		 		pageY:&lt;input type="text" name="pageYCoords" size="7" /&gt;&lt;br /&gt;
		 		layerX:&lt;input type="text" name="layerXCoords" size="7" /&gt;  
		 		layerY:&lt;input type="text" name="layerYCoords" size="7" /&gt;
		 	&lt;/form&gt;
		 &lt;/div&gt;
		 
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.pageX"><linktext>MDC - Event: pageX Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-mouseeventview-interface"><linktext>W3C - CSSOM View: pageX Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#mousepos"><linktext>Quirksmode: Mouse position</linktext></link><link href="dom.events.xml#MouseEvent/pageY"><linktext>pageY</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:pageY:get"><apiName>pageY</apiName><shortdesc>
		 Returns the vertical coordinate of the event relative to the whole document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8_no"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Returns the vertical coordinate of the event relative to the whole document.
		 
		 <p><b>Note (IE):</b> In order to get it in IE, too, add the scrolling offset of the 
		 document to clientX/Y.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;pageX\pageY &amp; layerX\layerY example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 	function showCoords(evt){
		 		var form = document.forms.form_coords;
		 		var parent_id = evt.target.parentNode.id;
		 		form.parentId.value = parent_id;
		 		form.pageXCoords.value = evt.pageX;
		 		form.pageYCoords.value = evt.pageY;
		 		form.layerXCoords.value = evt.layerX;
		 		form.layerYCoords.value = evt.layerY;
		 	}
		 &lt;/script&gt;
		 
		 &lt;style type="text/css"&gt;
		 
		 #d1 {
		 	border: solid blue 1px;
		 	padding: 20px;
		 }
		 
		 #d2 {
		 	position: absolute;
		 	top: 180px;
		 	left: 80%;
		 	right:auto;
		 	width: 40%;
		 	border: solid blue 1px;
		 	padding: 20px;
		 }
		 
		 #d3 {
		 	position: absolute;
		 	top: 240px;
		 	left: 20%;
		 	width: 50%;
		 	border: solid blue 1px;
		 	padding: 10px;
		 }
		 
		 &lt;/style&gt;
		 &lt;/head&gt;
		 
		 &lt;body onmousedown="showCoords(event)"&gt;
		 
		 &lt;p&gt;To display the mouse coordinates please click anywhere on the page.&lt;/p&gt;
		 
		 &lt;div id="d1"&gt;
		 	&lt;span&gt;This is an un-positioned div so clicking it will return
		 	layerX/layerY values almost the same as pageX/PageY values.&lt;/span&gt;
		 &lt;/div&gt;
		 
		 &lt;div id="d2"&gt;
		 	&lt;span&gt;This is a positioned div so clicking it will return layerX/layerY
		 	values that are relative to the top-left corner of this positioned
		 	element. Note the pageX\pageY properties still return the
		 	absolute position in the document, including page scrolling.&lt;/span&gt;
		 
		 	&lt;span&gt;Make the page scroll more! This is a positioned div so clicking it
		 	will return layerX/layerY values that are relative to the top-left
		 	corner of this positioned element. Note the pageX\pageY properties still
		 	return the absolute position in the document, including page
		 	scrolling.&lt;/span&gt;
		 &lt;/div&gt;
		 
		 &lt;div id="d3"&gt;
		 	&lt;form name="form_coords"&gt;
		 		Parent Element id: &lt;input type="text" name="parentId" size="7" /&gt;&lt;br /&gt;
		 		pageX:&lt;input type="text" name="pageXCoords" size="7" /&gt;  
		 		pageY:&lt;input type="text" name="pageYCoords" size="7" /&gt;&lt;br /&gt;
		 		layerX:&lt;input type="text" name="layerXCoords" size="7" /&gt;  
		 		layerY:&lt;input type="text" name="layerYCoords" size="7" /&gt;
		 	&lt;/form&gt;
		 &lt;/div&gt;
		 
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.pageY"><linktext>MDC - Event: pageY Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-mouseeventview-interface"><linktext>W3C - CSSOM View: pageY Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#mousepos"><linktext>Quirksmode: Mouse position</linktext></link><link href="dom.events.xml#MouseEvent/pageX"><linktext>pageX</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:relatedTarget:get"><apiName>relatedTarget</apiName><shortdesc>
		 Used to identify a secondary EventTarget related to a UI event, depending 
		 on the type of event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.events:EventTarget</apiValueClassifier></apiValueDef><apiDesc>
		 Used to identify a secondary EventTarget related to a UI event, depending 
		 on the type of event.
		 
		 <p><b>Note:</b> The relatedTarget property is used to find the other element, if any, involved 
		 in an event. Events like mouseover are oriented around a certain target, but also involve a secondary target, 
		 such as the target that is exited as the mouseover event fires for the primary target. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var rel = event.relatedTarget;
		 // dump("LEAVING " + (rel ? rel.localName : "null") + "\n");
		 // relatedTarget is null when the titletip is first shown:
		 // a mouseout event fires because the mouse is exiting 
		 // the main window and entering the titletip "window".
		 // relatedTarget is also null when the mouse exits the main 
		 // window completely, so count how many times relatedTarget 
		 // was null after titletip is first shown and hide popup
		 // the 2nd time
		 if (!rel) {
		 	if (++this._mouseOutCount &gt; 1)
		 	this.hidePopup();
		 	return;
		 }
		 // find out if the node we are entering is one of our 
		 // anonymous children
		 while (rel) {
		 	if (rel == this) {
		 		break;
		 	}
		 	rel = rel.parentNode;
		 }
		 // if the entered node is not a descendant of ours, hide 
		 // the tooltip
		 if (rel != this &amp;&amp; this._isMouseOver) {
		 	this.hidePopup();
		 }</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.relatedTarget"><linktext>MDC - event.relatedTarget</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MouseEvent-relatedTarget"><linktext>W3C - MouseEvent.relatedTarget</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:screenX:get"><apiName>screenX</apiName><shortdesc>
		 
		 Returns the horizontal coordinate of the event within the screen as a whole.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Returns the horizontal coordinate of the event within the screen as a whole. 
		 
		 <p><b>Note:</b> When you trap events on the window, document, or other roomy elements, you can get the 
		 coordinates of that event (e.g., a click) and route it properly, as the "clickMap" example demonstrates.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;screenX\screenY example&lt;/title&gt;
		 
		 		&lt;script type="text/javascript"&gt;
		 			function showCoords(evt){
		 				alert(
		 				"screenX value: " + evt.screenX + "\n"
		 				+ "screenY value: " + evt.screenY + "\n"
		 			);
		 		}
		 
		 		&lt;/script&gt;
		 	&lt;/head&gt;
		 
		 	&lt;body onmousedown="showCoords(event)"&gt;
		 		&lt;p&gt;To display the mouse coordinates click anywhere on the page.&lt;/p&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 <codeblock>
		 function checkClickMap(e) {
		 	if (e.screenX &lt; 50) doRedButton();
		 	if (50 &lt;= e.screenX) &lt; 100 doYellowButton();
		 	if (e.screenX &gt;= 100) doRedButton();
		 }</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms534391(VS.85).aspx"><linktext>MSDN: screenX Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/event.screenX"><linktext>MDC - Event: screenX Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-mouseeventview-interface"><linktext>W3C - CSSOM View: screenX Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#mousepos"><linktext>Quirksmode: Mouse position</linktext></link><link href="dom.events.xml#MouseEvent/clientX"><linktext>clientX</linktext></link><link href="dom.events.xml#MouseEvent/clientY"><linktext>clientY</linktext></link><link href="dom.events.xml#MouseEvent/screenY"><linktext>screenY</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:screenY:get"><apiName>screenY</apiName><shortdesc>
		 
		 Returns the vertical coordinate of the event within the screen as a whole.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Returns the vertical coordinate of the event within the screen as a whole.
		 
		 <p><b>Note:</b> When you trap events on the window, document, or other roomy elements, you can get the 
		 coordinates of that event (e.g., a click) and route it properly, as the "clickMap" example demonstrates.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;screenX\screenY example&lt;/title&gt;
		 
		 		&lt;script type="text/javascript"&gt;
		 			function showCoords(evt){
		 				alert(
		 				"screenX value: " + evt.screenX + "\n"
		 				+ "screenY value: " + evt.screenY + "\n"
		 			);
		 		}
		 
		 		&lt;/script&gt;
		 	&lt;/head&gt;
		 
		 	&lt;body onmousedown="showCoords(event)"&gt;
		 		&lt;p&gt;To display the mouse coordinates click anywhere on the page.&lt;/p&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 <codeblock>
		 function checkClickMap(e) {
		 	if (e.screenX &lt; 50) doRedButton();
		 	if (50 &lt;= e.screenX) &lt; 100 doYellowButton();
		 	if (e.screenX &gt;= 100) doRedButton();
		 }</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms534392(VS.85).aspx"><linktext>MSDN: screenY Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/event.screenY"><linktext>MDC - Event: screenY Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-mouseeventview-interface"><linktext>W3C - CSSOM View: screenY Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#mousepos"><linktext>Quirksmode: Mouse position</linktext></link><link href="dom.events.xml#MouseEvent/clientX"><linktext>clientX</linktext></link><link href="dom.events.xml#MouseEvent/clientY"><linktext>clientY</linktext></link><link href="dom.events.xml#MouseEvent/screenY"><linktext>screenY</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
		 Refer to the KeyboardEvent.shiftKey attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Refer to the KeyboardEvent.shiftKey attribute.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;shiftKey example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function showChar(e){
		 	alert(
		 		"Key Pressed: " + String.fromCharCode(e.charCode) + "\n"
		 		+ "charCode: " + e.charCode + "\n"
		 		+ "SHIFT key pressed: " + e.shiftKey + "\n"
		 		+ "ALT key pressed: " + e.altKey + "\n"
		 	);
		 }
		 
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body onkeypress="showChar(event);"&gt;
		 &lt;p&gt;Press any character key, with or without holding down
		 the SHIFT key.&lt;br /&gt;
		 You can also use the SHIFT key together with the ALT key.&lt;/p&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.shiftKey"><linktext>MDC - event.shiftKey</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MouseEvent-shiftKey"><linktext>W3C - MouseEvent.shiftKey</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:x:get"><apiName>x</apiName><shortdesc>
		 
		 Returns the value of pageX.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5_alternative"/><apiTool name="IE" version="6.0_alternative"/><apiTool name="IE" version="7.0_alternative"/><apiTool name="IE" version="8.0_as_IE7_alternative"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.1b_no"/><apiTool name="Safari" version="3.0_alternative"/><apiTool name="Safari" version="3.1_alternative"/><apiTool name="Safari" version="4.0b_alternative"/><apiTool name="Chrome" version="1.0_alternative"/><apiTool name="Chrome" version="2.0_alternative"/><apiTool name="Opera" version="9.62_alternative"/><apiTool name="Opera" version="10.0a_alternative"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Returns the value of pageX. 
		 
		 </apiDesc><example>
		 <codeblock>&lt;body onmousemove="window.status = 'X=' + window.event.x + ' Y=' + window.event.y"&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms535154(VS.85).aspx"><linktext>MSDN: x Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-mouseeventview-interface"><linktext>W3C - CSSOM View: x Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#mousepos"><linktext>Quirksmode: Mouse position</linktext></link><link href="dom.events.xml#MouseEvent/y"><linktext>y</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseEvent:y:get"><apiName>y</apiName><shortdesc>
		 
		 Returns the value of pageY.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5_alternative"/><apiTool name="IE" version="6.0_alternative"/><apiTool name="IE" version="7.0_alternative"/><apiTool name="IE" version="8.0_as_IE7_alternative"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.1b_no"/><apiTool name="Safari" version="3.0_alternative"/><apiTool name="Safari" version="3.1_alternative"/><apiTool name="Safari" version="4.0b_alternative"/><apiTool name="Chrome" version="1.0_alternative"/><apiTool name="Chrome" version="2.0_alternative"/><apiTool name="Opera" version="9.62_alternative"/><apiTool name="Opera" version="10.0a_alternative"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 2
		 
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Returns the value of pageY. 
		 
		 </apiDesc><example>
		 <codeblock>&lt;body onmousemove="window.status = 'X=' + window.event.x + ' Y=' + window.event.y"&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms535164(VS.85).aspx"><linktext>MSDN: y Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-mouseeventview-interface"><linktext>W3C - CSSOM View: y Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#mousepos"><linktext>Quirksmode: Mouse position</linktext></link><link href="dom.events.xml#MouseEvent/x"><linktext>x</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.events:DocumentEvent"><apiName>DocumentEvent</apiName><shortdesc>
	 The DocumentEvent interface provides a mechanism by which the user can 
	 create an Event object of a type supported by the implementation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 The DocumentEvent interface provides a mechanism by which the user can 
	 create an Event object of a type supported by the implementation. If 
	 the feature "Events" is supported by the Document object, the 
	 DocumentEvent interface must be implemented on the same object. If the 
	 feature "+Events" is supported by the Document object, an object that 
	 supports the DocumentEvent interface must be returned by invoking the 
	 method Node.getFeature("+Events", "3.0") on the Document object.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-DocumentEvent"><linktext>W3C - DOM 3 Events: DocumentEvent</linktext></link></related-links><apiOperation id="dom.events:DocumentEvent:dom.events:DocumentEvent:canDispatch"><apiName>canDispatch</apiName><shortdesc>
		 Tests if the implementation can generate events of a specified type.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the implementation can generate and dispatch this event type
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.namespaceURI of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.type of the event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Tests if the implementation can generate events of a specified type. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-DocumentEvent-canDispatch"><linktext>W3C - DOM 3 Events: DocumentEvent.canDispatch()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:DocumentEvent:dom.events:DocumentEvent:createEvent"><apiName>createEvent</apiName><shortdesc>
		 Creates an event object of the type specified.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if the 
		 implementation does not support the Event interface requested.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The newly created event object.
		 
		 </apiDesc><apiOperationClassifier>dom.events:Event</apiOperationClassifier></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The eventType parameter specifies the name of the 
		 DOM Events interface to be supported by the created event object, 
		 e.g. "Event", "MouseEvent", "MutationEvent" and so on. If the Event 
		 is to be dispatched via the EventTarget.dispatchEvent() method the 
		 appropriate event initialization method must be called after creation 
		 in order to initialize the Event's values.
		 
		 As an example, a user wishing to synthesize some kind of UIEvent would 
		 invoke DocumentEvent.createEvent("UIEvent"). The UIEvent.initUIEventNS() 
		 ethod could then be called on the newly created UIEvent object to 
		 set the specific type of user interface event to be dispatched, DOMActivate 
		 for example, and set its context information, e.g. UIEvent.detail in 
		 this example.
		 
		 For backward compatibility reason, "UIEvents", "MouseEvents", "MutationEvents", 
		 and "HTMLEvents" feature names are valid values for the parameter eventType 
		 and represent respectively the interfaces "UIEvent", "MouseEvent", 
		 "MutationEvent", and "Event", and the characters 'a'..'z' are considered 
		 equivalent to the characters 'A'..'Z'.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates an event object of the type specified. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-DocumentEvent-createEvent"><linktext>W3C - DOM 3 Events: DocumentEvent.createEvent()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:DocumentEventGroup"><apiName>DocumentEventGroup</apiName><shortdesc>
	 The DocumentEventGroup interface provides a mechanism by which the user can create an EventGroup of a type supported by 
	 the implementation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 The DocumentEventGroup interface provides a mechanism by which the user can create an EventGroup of a type supported by 
	 the implementation. It is expected that the DocumentEvent interface will be implemented on the same object which implements 
	 the Documentinterface in an implementation which supports the EventGroupextension.
	 
	 <p><b>Note:</b> This is from DOM 3 Events Working Draft 10 (April 2001) and has since been deprecated in Working Draft 21 (December 2007)</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-DocumentEventGroup"><linktext>W3C - DOM 3 Events: DocumentEventGroup</linktext></link></related-links><apiOperation id="dom.events:DocumentEventGroup:dom.events:DocumentEventGroup:createEventGroup"><apiName>createEventGroup</apiName><shortdesc>
		 This method creates a new EventGroup for use in the addEventListener and removeEventListener methods of the EventTargetGroup interface.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The newly created EventGroup.
		 
		 </apiDesc><apiOperationClassifier>dom.events:EventGroup</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 This method creates a new EventGroup for use in the addEventListener and removeEventListener methods of the EventTargetGroup interface. 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.htmlevents-Events-DocumentEventGroup-createEventGroup"><linktext>W3C - DOM 3 Events: DocumentEventGroup.createEventGroup()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:EventExceptionCode"><apiName>EventExceptionCode</apiName><shortdesc>
	 An integer indicating the type of error generated.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An integer indicating the type of error generated.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventException-EventExceptionCode"><linktext>W3C - DOM 3 Events: EventExceptionCode</linktext></link></related-links><apiValue id="dom.events:EventExceptionCode:DISPATCH_REQUEST_ERR"><apiName>DISPATCH_REQUEST_ERR</apiName><shortdesc>
		 If the Event object is already dispatched in the tree.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If the Event object is already dispatched in the tree.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#DISPATCH_REQUEST_ERR"><linktext>W3C - DOM 3 Events: EventExceptionCode.DISPATCH_REQUEST_ERR</linktext></link></related-links></apiValue><apiValue id="dom.events:EventExceptionCode:UNSPECIFIED_EVENT_TYPE_ERR"><apiName>UNSPECIFIED_EVENT_TYPE_ERR</apiName><shortdesc>
		 If the Event.type was not specified by initializing the event 
		 before the method was called.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If the Event.type was not specified by initializing the event 
		 before the method was called. Specification of the Event.type 
		 as null or an empty string will also trigger this exception.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#UNSPECIFIED_EVENT_TYPE_ERR"><linktext>W3C - DOM 3 Events: EventExceptionCode.UNSPECIFIED_EVENT_TYPE_ERR</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.events:MouseWheelEvent"><apiName>MouseWheelEvent</apiName><shortdesc>
	 The MouseWheelEvent interface provides specific contextual information 
	 associated with mouse wheel events.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The MouseWheelEvent interface provides specific contextual information 
	 associated with mouse wheel events.
	 
	 <p>To create an instance of the MouseWheelEvent interface, use the 
	 DocumentEvent.createEvent("MouseWheelEvent") method call.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MouseWheelEvent"><linktext>W3C - DOM 3 Events: MouseWheelEvent</linktext></link></related-links><apiOperation id="dom.events:MouseWheelEvent:initMouseWheelEventNS"><apiName>initMouseWheelEventNS</apiName><shortdesc>
		 Initializes attributes of a MouseWheelEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiType value="Number"/><apiDesc>Specifies UIEvent.detail.
		 </apiDesc></apiParam><apiParam><apiItemName>screenXArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>screenYArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>clientXArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>clientYArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>buttonArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>relatedTargetArg</apiItemName><apiOperationClassifier>dom.events:EventTarget</apiOperationClassifier><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>modifiersListArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>wheelDeltaArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseWheelEvent.wheelDelta.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MouseWheelEvent object. This method 
		 has the same behavior as MouseEvent.initMouseEventNS(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMouseWheelEventNS"><linktext>W3C - MouseWheelEvent.initMouseWheelEventNS</linktext></link></related-links></apiOperation><apiValue id="dom.events:MouseWheelEvent:mousewheel"><apiName>mousewheel</apiName><shortdesc>
		 Refer to Activation requests and behavior.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mousewheel</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Refer to Activation requests and behavior.
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>Namespace</entry><entry><codeph>None</codeph></entry>
		 	</row><row>
		 		<entry>Cancelable</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Bubbles</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Target</entry><entry><codeph>Document, Element</codeph></entry>
		 	</row><row>
		 		<entry>Context info</entry><entry>MouseWheelEvent.wheelDelta, MouseEvent.altKey, MouseEvent.ctrlKey, MouseEvent.shiftKey, 
		 MouseEvent.metaKey, and UIEvent.view are in use. MouseEvent.screenX, MouseEvent.screenY, MouseEvent.clientX, 
		 MouseEvent.clientY, and MouseEvent.button are in use if the wheel is associated to a pointing device. MouseEvent.relatedTarget 
		 indicates the event target the pointing device is pointing at, if any. UIEvent.detail is not in use.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-mousewheel"><linktext>W3C - MouseWheelEvent.mousewheel</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseWheelEvent:wheelDelta:get"><apiName>wheelDelta</apiName><shortdesc>
		 The distance the wheel has rotated around the y-axis.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The distance the wheel has rotated around the y-axis.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MouseWheelEvent-wheelDelta"><linktext>W3C - MouseWheelEvent.wheelDelta</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.events:MessageEvent"><apiName>MessageEvent</apiName><shortdesc>
	 Messages in server-sent events, Web sockets, cross-document messaging, and channel messaging use the message event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Messages in server-sent events, Web sockets, cross-document messaging, and channel messaging use the message event.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#messageevent"><linktext>HTML 5: MessageEvent</linktext></link></related-links><apiOperation id="dom.events:MessageEvent:initMessageEvent"><apiName>initMessageEvent</apiName><shortdesc>
		 The initMessageEvent() must initialize the event in a manner analogous to the similarly-named methods in the DOM3 Events interfaces.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>dataArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The message being sent.
		 </apiDesc></apiParam><apiParam><apiItemName>originArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The origin of the document that sent the message (typically the scheme, hostname, and port of the document, but not its path or fragment identifier).
		 </apiDesc></apiParam><apiParam><apiItemName>lastEventIdArg</apiItemName><apiOperationClassifier>dom:WindowProxy</apiOperationClassifier><apiDesc>The last event ID string of the event source.
		 </apiDesc></apiParam><apiParam><apiItemName>sourceArg</apiItemName><apiOperationClassifier>dom.objects:MessagePortArray</apiOperationClassifier><apiDesc>The WindowProxy of the browsing context of the Window object from which the message came.
		 </apiDesc></apiParam><apiParam><apiItemName>portsArg</apiItemName><apiType value=""/><apiDesc>The MessagePortArray  being sent, if any.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The initMessageEvent() must initialize the event in a manner analogous to the similarly-named methods in the DOM3 Events interfaces.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.initMessageEvent"><linktext>MDC - event.initMessageEvent()</linktext></link><link href="http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#dom-messageevent-initmessageevent"><linktext>HTML 5: MessageEvent.initMessageEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:MessageEvent:initMessageEventNS"><apiName>initMessageEventNS</apiName><shortdesc>
		 The initMessageEventNS() must initialize the event in a manner analogous to the similarly-named methods in the DOM3 Events interfaces.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>dataArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The message being sent.
		 </apiDesc></apiParam><apiParam><apiItemName>originArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The origin of the document that sent the message (typically the scheme, hostname, and port of the document, but not its path or fragment identifier).
		 </apiDesc></apiParam><apiParam><apiItemName>lastEventIdArg</apiItemName><apiOperationClassifier>dom:WindowProxy</apiOperationClassifier><apiDesc>The last event ID string of the event source.
		 </apiDesc></apiParam><apiParam><apiItemName>sourceArg</apiItemName><apiOperationClassifier>dom.objects:MessagePortArray</apiOperationClassifier><apiDesc>The WindowProxy of the browsing context of the Window object from which the message came.
		 </apiDesc></apiParam><apiParam><apiItemName>portsArg</apiItemName><apiType value=""/><apiDesc>The MessagePortArray  being sent, if any.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The initMessageEventNS() must initialize the event in a manner analogous to the similarly-named methods in the DOM3 Events interfaces.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#dom-messageevent-initmessageeventns"><linktext>HTML 5: MessageEvent.initMessageEventNS()</linktext></link></related-links></apiOperation><apiValue id="dom.events:MessageEvent:data:get"><apiName>data</apiName><shortdesc>
		 A string holding the message passed from the other window.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef><apiDesc>
		 A string holding the message passed from the other window. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#dom-messageevent-data"><linktext>HTML 5: MessageEvent.data</linktext></link></related-links></apiValue><apiValue id="dom.events:MessageEvent:lastEventId:get"><apiName>lastEventId</apiName><shortdesc>
		 Returns the last event ID, for server-sent events.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the last event ID, for server-sent events.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#dom-messageevent-lasteventid"><linktext>HTML 5: MessageEvent.lastEventId</linktext></link></related-links></apiValue><apiValue id="dom.events:MessageEvent:origin:get"><apiName>origin</apiName><shortdesc>
		 Returns the origin of the message, for server-sent events and cross-document messaging.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the origin of the message, for server-sent events and cross-document messaging.
		 
		 <p>The origin of the window that sent the message at the time postMessage was called. This string is 
		 the concatenation of the protocol and "://", the host name if one exists, and ":" followed by a port 
		 number if a port is present and differs from the default port for the given protocol. Examples of 
		 typical origins are http://example.org (implying port 443), http://example.net (implying port 80), 
		 and http://example.com:8080. Note that this origin is not guaranteed to be the current or future origin 
		 of that window, which might have been navigated to a different location since postMessage was called. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#dom-messageevent-origin"><linktext>HTML 5: MessageEvent.origin</linktext></link></related-links></apiValue><apiValue id="dom.events:MessageEvent:ports:get"><apiName>ports</apiName><shortdesc>
		 Returns the MessagePortArray sent with the message, for cross-document messaging and channel messaging.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.objects:MessagePortArray</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the MessagePortArray sent with the message, for cross-document messaging and channel messaging.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#dom-messageevent-ports"><linktext>HTML 5: MessageEvent.ports</linktext></link></related-links></apiValue><apiValue id="dom.events:MessageEvent:source:get"><apiName>source</apiName><shortdesc>
		 Returns the WindowProxy of the source window, for cross-document messaging.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom:WindowProxy</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the WindowProxy of the source window, for cross-document messaging.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#dom-messageevent-source"><linktext>HTML 5: MessageEvent.source</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.events:MouseMultiWheelEvent"><apiName>MouseMultiWheelEvent</apiName><shortdesc>
	 The MouseMultiWheelEvent interface provides specific contextual 
	 information associated with mouse multi wheel events.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The MouseMultiWheelEvent interface provides specific contextual 
	 information associated with mouse multi wheel events.
	 
	 <p>To create an instance of the MouseMultiWheelEvent interface, use the 
	 DocumentEvent.createEvent("MouseMultiWheelEvent") method call.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MouseMultiWheelEvent"><linktext>W3C - DOM 3 Events: MouseMultiWheelEvent</linktext></link></related-links><apiOperation id="dom.events:MouseMultiWheelEvent:initMouseMultiWheelEventNS"><apiName>initMouseMultiWheelEventNS</apiName><shortdesc>
		 Initializes attributes of a MouseMultiWheelEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiType value="Number"/><apiDesc>Specifies UIEvent.detail.
		 </apiDesc></apiParam><apiParam><apiItemName>screenXArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>screenYArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>clientXArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>clientYArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>buttonArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>relatedTargetArg</apiItemName><apiOperationClassifier>dom.events:EventTarget</apiOperationClassifier><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>modifiersListArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>wheelDeltaXArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseMultiWheelEvent.wheelDeltaX.
		 </apiDesc></apiParam><apiParam><apiItemName>wheelDeltaYArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseMultiWheelEvent.wheelDeltaY.
		 </apiDesc></apiParam><apiParam><apiItemName>wheelDeltaZArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseMultiWheelEvent.wheelDeltaZ.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MouseMultiWheelEvent object. This method 
		 has the same behavior as MouseEvent.initMouseEventNS().
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMouseMultiWheelEventNS"><linktext>W3C - MouseWheelEvent.initMouseMultiWheelEventNS()</linktext></link></related-links></apiOperation><apiValue id="dom.events:MouseMultiWheelEvent:mousemultiwheel"><apiName>mousemultiwheel</apiName><shortdesc>
		 A mouse wheel has been rotated.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mousemultiwheel</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A mouse wheel has been rotated. A default action of user agent generated event objects of this type causes 
		 implementations to dispatch a mousewheel event iff it supports that event type and MouseMultiWheelEvent.wheelDeltaY is non-zero.
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>Namespace</entry><entry><codeph>None</codeph></entry>
		 	</row><row>
		 		<entry>Cancelable</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Bubbles</entry><entry>Yes</entry>
		 	</row><row>
		 		<entry>Target</entry><entry><codeph>Document, Element</codeph></entry>
		 	</row><row>
		 		<entry>Context info</entry><entry>MouseMultiWheelEvent.wheelDeltaX, MouseMultiWheelEvent.wheelDeltaY, MouseMultiWheelEvent.wheelDeltaZ, 
		 MouseEvent.altKey, MouseEvent.ctrlKey, MouseEvent.shiftKey, MouseEvent.metaKey, and UIEvent.view are in use. MouseEvent.screenX, 
		 MouseEvent.screenY, MouseEvent.clientX, MouseEvent.clientY, and MouseEvent.button are in use if the wheel is associated to a 
		 pointing device. MouseEvent.relatedTarget indicates the event target the pointing device is pointing at, if any. UIEvent.detail 
		 is not in use.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-mousewheel"><linktext>W3C - MouseWheelEvent.mousewheel</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseMultiWheelEvent:wheelDeltaX:get"><apiName>wheelDeltaX</apiName><shortdesc>
		 The distance the wheel has rotated around the x-axis.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The distance the wheel has rotated around the x-axis.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MouseMultiWheelEvent-wheelDeltaX"><linktext>W3C - MouseWheelEvent.wheelDeltaX</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseMultiWheelEvent:wheelDeltaY:get"><apiName>wheelDeltaY</apiName><shortdesc>
		 The distance the wheel has rotated around the y-axis.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The distance the wheel has rotated around the y-axis.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MouseMultiWheelEvent-wheelDeltaY"><linktext>W3C - MouseWheelEvent.wheelDeltaY</linktext></link></related-links></apiValue><apiValue id="dom.events:MouseMultiWheelEvent:wheelDeltaZ:get"><apiName>wheelDeltaZ</apiName><shortdesc>
		 The distance the wheel has rotated around the z-axis.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The distance the wheel has rotated around the z-axis.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MouseMultiWheelEvent-wheelDeltaZ"><linktext>W3C - MouseWheelEvent.wheelDeltaZ</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.events:MutationEvent"><apiName>MutationEvent</apiName><shortdesc>
	 The MutationEvent interface provides specific contextual information 
	 associated with Mutation events.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The MutationEvent interface provides specific contextual information 
	 associated with Mutation events.
	 
	 <p>To create an instance of the MutationEvent interface, use the 
	 DocumentEvent.createEvent("MutationEvent") method call.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MutationEvent"><linktext>W3C - MutationEvent</linktext></link></related-links><apiOperation id="dom.events:MutationEvent:initMutationEvent"><apiName>initMutationEvent</apiName><shortdesc>
		 Initializes attributes of a MutationEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>relatedNodeArg</apiItemName><apiType value="flash.xml:XMLNode"/><apiDesc>Specifies MutationEvent.relatedNode.
		 </apiDesc></apiParam><apiParam><apiItemName>prevValueArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationEvent.prevValue. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>newValueArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationEvent.newValue. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>attrNameArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationEvent.attrName. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>attrChangeArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MutationEvent.attrChange. This value may be null.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MutationEvent object. This method has the 
		 same behavior as Event.initEvent(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMutationEvent"><linktext>W3C - MutationEvent.initMutationEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:MutationEvent:initMutationEventNS"><apiName>initMutationEventNS</apiName><shortdesc>
		 Initializes attributes of a MutationEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>relatedNodeArg</apiItemName><apiType value="flash.xml:XMLNode"/><apiDesc>Specifies MutationEvent.relatedNode.
		 </apiDesc></apiParam><apiParam><apiItemName>prevValueArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationEvent.prevValue. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>newValueArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationEvent.newValue. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>attrNameArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationEvent.attrName. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>attrChangeArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MutationEvent.attrChange. This value may be null.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MutationEvent object. This method has 
		 the same behavior as Event.initEventNS().
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMutationEventNS"><linktext>W3C - MutationEvent.initMutationEventNS()</linktext></link></related-links></apiOperation><apiValue id="dom.events:MutationEvent:ADDITION"><apiName>ADDITION</apiName><shortdesc>
		 The Attr was just added.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The Attr was just added.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#ADDITION"><linktext>W3C - MutationEvent.ADDITION</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationEvent:DOMAttrModified"><apiName>DOMAttrModified</apiName><shortdesc>
		 Occurs after Attr.value has been modified and after an Attr node has been added to or removed from an Element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>DOMAttrModified</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Occurs after Attr.value has been modified and after an Attr node has been added to or removed from an Element. 
		 The target node of this event is the Element node where the change occured. It is implementation dependent whether 
		 this event type occurs when the children of the Attr node are changed in ways that do not affect the value of Attr.value.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>MutationEvent.attrName and MutationEvent.attrChange are in use. The value of MutationEvent.relatedNode indicates the Attr 
		 node that has been modified, added, or removed. If the Attr node has been added, MutationEvent.newValue is in use. If the Attr 
		 node has been removed, MutationEvent.prevValue is in use. If the Attr node has been modified, MutationEvent.newValue and 
		 MutationEvent.prevValue are in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-DOMAttrModified"><linktext>W3C - MutationEvent.DOMAttrModified</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationEvent:DOMCharacterDataModified"><apiName>DOMCharacterDataModified</apiName><shortdesc>
		 Occurs after CharacterData.data or ProcessingInstruction.data have been modified but the node itself has not been 
		 inserted or deleted.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>DOMCharacterDataModified</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Occurs after CharacterData.data or ProcessingInstruction.data have been modified but the node itself has not been 
		 inserted or deleted. The target node of this event is the CharacterData node or the ProcessingInstruction node.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Text, Comment, CDATASection, ProcessingInstruction</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>MutationEvent.prevValue, and MutationEvent.newValue are in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-DOMCharacterDataModified"><linktext>W3C - MutationEvent.DOMCharacterDataModified</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationEvent:DOMNodeInserted"><apiName>DOMNodeInserted</apiName><shortdesc>
		 A node has been added as a child of another node or, in case of Attr nodes, has been added to an Element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>DOMNodeInserted</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A node has been added as a child of another node or, in case of Attr nodes, has been added to an Element. 
		 This event is dispatched after the insertion has taken place. The target node of this event is the node being inserted.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element, Attr, Text, Comment, CDATASection, DocumentType, EntityReference, ProcessingInstruction</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>MutationEvent.relatedNode holds the parent node of the node that has been inserted or, in case of Attr nodes, the ownerElement of the Attr node.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-DOMNodeInserted"><linktext>W3C - MutationEvent.DOMNodeInserted</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationEvent:DOMNodeInsertedIntoDocument"><apiName>DOMNodeInsertedIntoDocument</apiName><shortdesc>
		 A node has been inserted into a document, either through direct insertion of the node or insertion of a subtree in which 
		 it is contained; Attr nodes are considered part of an Element's subtree.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>DOMNodeInsertedIntoDocument</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A node has been inserted into a document, either through direct insertion of the node or insertion of a subtree in which 
		 it is contained; Attr nodes are considered part of an Element's subtree. This event is dispatched after the insertion has 
		 taken place. The target node of this event is the node being inserted. If the node is being directly inserted, the event 
		 type DOMNodeInserted occurs before this event type.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element, Attr, Text, Comment, CDATASection, DocumentType, EntityReference, ProcessingInstruction</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>None</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-DOMNodeInsertedIntoDocument"><linktext>W3C - MutationEvent.DOMNodeInsertedIntoDocument</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationEvent:DOMNodeRemoved"><apiName>DOMNodeRemoved</apiName><shortdesc>
		 A node is being removed from its parent node or, in case of Attr nodes, removed from its ownerElement.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>DOMNodeRemoved</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A node is being removed from its parent node or, in case of Attr nodes, removed from its ownerElement. 
		 This event is dispatched before the removal takes place. The target node of this event is the node being removed.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element, Attr, Text, Comment, CDATASection, DocumentType, EntityReference, ProcessingInstruction</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>MutationEvent.relatedNode holds the parent node of the node being removed or, in case of Attr nodes, the ownerElement of the Attr node.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-DOMNodeRemoved"><linktext>W3C - MutationEvent.DOMNodeRemoved</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationEvent:DOMNodeRemovedFromDocument"><apiName>DOMNodeRemovedFromDocument</apiName><shortdesc>
		 A node is being removed from a document, either through direct removal of the node or removal of a subtree in which 
		 it is contained; Attr nodes are considered part of an Element's subtree.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>DOMNodeRemovedFromDocument</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 A node is being removed from a document, either through direct removal of the node or removal of a subtree in which 
		 it is contained; Attr nodes are considered part of an Element's subtree. This event is dispatched before the removal 
		 takes place. The target node of this event type is the node being removed. If the node is being directly removed, 
		 the event type DOMNodeRemoved occurs before this event type.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element, Attr, Text, Comment, CDATASection, DocumentType, EntityReference, ProcessingInstruction</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>None</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-DOMNodeRemovedFromDocument"><linktext>W3C - MutationEvent.DOMNodeRemovedFromDocument</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationEvent:DOMSubtreeModified"><apiName>DOMSubtreeModified</apiName><shortdesc>
		 This is a general event for notification of all changes to the document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>DOMSubtreeModified</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 This is a general event for notification of all changes to the document. 
		 
		 <p>It can be used instead 
		 of the more specific mutation and mutation name events listed below. It may be dispatched after 
		 a single modification to the document or, at the implementation's discretion, after multiple 
		 changes have occurred. The latter use should generally be used to accommodate multiple changes 
		 which occur either simultaneously or in rapid succession. The target of this event is the lowest 
		 common parent of the changes which have taken place. This event is dispatched after any other 
		 events caused by the mutation(s) have occurred.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Document, DocumentFragment, Element, Attr</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>None</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-DOMSubtreeModified"><linktext>W3C - MutationEvent.DOMSubtreeModified</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationEvent:MODIFICATION"><apiName>MODIFICATION</apiName><shortdesc>
		 The Attr was modified in place.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The Attr was modified in place.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#MODIFICATION"><linktext>W3C - MutationEvent.MODIFICATION</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationEvent:REMOVAL"><apiName>REMOVAL</apiName><shortdesc>
		 The Attr was just removed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The Attr was just removed.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#REMOVAL"><linktext>W3C - MutationEvent.REMOVAL</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationEvent:attrChange:get"><apiName>attrChange</apiName><shortdesc>
		 Indicates the type of change which triggered the DOMAttrModified event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Indicates the type of change which triggered the DOMAttrModified event. 
		 The values can be MODIFICATION, ADDITION, or REMOVAL.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MutationEvent-attrChange"><linktext>W3C - MutationEvent.attrChange</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationEvent:attrName:get"><apiName>attrName</apiName><shortdesc>
		 Indicates the name of the changed Attr node in a DOMAttrModified event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Indicates the name of the changed Attr node in a DOMAttrModified event.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MutationEvent-attrName"><linktext>W3C - MutationEvent.attrName</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationEvent:newValue:get"><apiName>newValue</apiName><shortdesc>
		 Indicates the new value of the Attr node in DOMAttrModified events, and 
		 of the CharacterData node in DOMCharacterDataModified events.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Indicates the new value of the Attr node in DOMAttrModified events, and 
		 of the CharacterData node in DOMCharacterDataModified events.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MutationEvent-newValue"><linktext>W3C - MutationEvent.newValue</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationEvent:prevValue:get"><apiName>prevValue</apiName><shortdesc>
		 Indicates the previous value of the Attr node in DOMAttrModified events, 
		 and of the CharacterData node in DOMCharacterDataModified events.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Indicates the previous value of the Attr node in DOMAttrModified events, 
		 and of the CharacterData node in DOMCharacterDataModified events.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MutationEvent-prevValue"><linktext>W3C - MutationEvent.prevValue</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationEvent:relatedNode:get"><apiName>relatedNode</apiName><shortdesc>
		 is used to identify a secondary node related to a mutation event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Node</apiValueClassifier></apiValueDef><apiDesc>
		 is used to identify a secondary node related to a mutation event. For 
		 example, if a mutation event is dispatched to a node indicating that 
		 its parent has changed, the relatedNode is the changed parent. If an 
		 event is instead dispatched to a subtree indicating a node was changed 
		 within it, the relatedNode is the changed node. In the case of the 
		 DOMAttrModified event it indicates the Attr node which was modified, 
		 added, or removed.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MutationEvent-relatedNode"><linktext>W3C - MutationEvent.relatedNode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.events:MutationNameEvent"><apiName>MutationNameEvent</apiName><shortdesc>
	 The MutationNameEvent interface provides specific contextual information 
	 associated with Mutation name event types.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:MutationEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The MutationNameEvent interface provides specific contextual information 
	 associated with Mutation name event types.
	 
	 To create an instance of the MutationNameEvent interface, use the 
	 Document.createEvent("MutationNameEvent") method call.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MutationNameEvent"><linktext>W3C - DOM 3 Events: MutationNameEvent</linktext></link></related-links><apiOperation id="dom.events:MutationNameEvent:initMutationNameEvent"><apiName>initMutationNameEvent</apiName><shortdesc>
		 Initializes attributes of a MutationNameEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>relatedNodeArg</apiItemName><apiType value="flash.xml:XMLNode"/><apiDesc>Specifies MutationEvent.relatedNode.
		 </apiDesc></apiParam><apiParam><apiItemName>prevNamespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationNameEvent.prevNamespaceURI. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>prevNodeNameArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationNameEvent.prevNodeName.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MutationNameEvent object. This method has 
		 the same behavior as MutationEvent.initMutationEvent(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMutationNameEvent"><linktext>W3C - MutationNameEvent.initMutationNameEvent()</linktext></link><link href="dom.events.xml#UIEvent/initUIEvent()"><linktext>dom.events.UIEvent.initUIEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:MutationNameEvent:initMutationNameEventNS"><apiName>initMutationNameEventNS</apiName><shortdesc>
		 Initializes attributes of a MutationNameEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>relatedNodeArg</apiItemName><apiType value="flash.xml:XMLNode"/><apiDesc>Specifies MutationEvent.relatedNode.
		 </apiDesc></apiParam><apiParam><apiItemName>prevNamespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationNameEvent.prevNamespaceURI. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>prevNodeNameArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationNameEvent.prevNodeName.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MutationNameEvent object. This method has 
		 the same behavior as MutationEvent.initMutationEventNS(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMutationNameEventNS"><linktext>W3C - MutationNameEvent.initMutationNameEventNS()</linktext></link><link href="dom.events.xml#UIEvent/initUIEventNS()"><linktext>dom.events.UIEvent.initUIEventNS()</linktext></link></related-links></apiOperation><apiValue id="dom.events:MutationNameEvent:DOMAttributeNameChanged"><apiName>DOMAttributeNameChanged</apiName><shortdesc>
		 Occurs after the namespaceURI and/or the nodeName of a Attr node have been modified (e.g., the attribute was 
		 renamed using Document.renameNode()).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>DOMAttributeNameChanged</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Occurs after the namespaceURI and/or the nodeName of a Attr node have been modified (e.g., the attribute was 
		 renamed using Document.renameNode()). The target node of this event is the Element node whose Attr has been renamed.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>MutationNameEvent.prevNamespaceURI, and MutationNameEvent.prevNodeName are in use. The value of MutationEvent.relatedNode contains the renamed Attr node.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-DOMAttributeNameChanged"><linktext>W3C - MutationNameEvent.DOMAttributeNameChanged</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationNameEvent:DOMElementNameChanged"><apiName>DOMElementNameChanged</apiName><shortdesc>
		 Occurs after the namespaceURI and/or the nodeName of an Element node have been modified (e.g., the element was 
		 renamed using Document.renameNode()).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>DOMElementNameChanged</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Occurs after the namespaceURI and/or the nodeName of an Element node have been modified (e.g., the element was 
		 renamed using Document.renameNode()). The target node of this event is the renamed Element node.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 <entry>Cancelable</entry>
		 <entry>No</entry>
		 </row><row>
		 <entry>Bubbles</entry>
		 <entry>Yes</entry>
		 </row><row>
		 <entry>Target</entry>
		 <entry><codeph>Element</codeph></entry>
		 </row><row>
		 <entry>Context info</entry>
		 <entry>MutationNameEvent.prevNamespaceURI, and MutationNameEvent.prevNodeName are in use.</entry>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#event-DOMElementNameChanged"><linktext>W3C - MutationNameEvent.DOMElementNameChanged</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationNameEvent:prevNamespaceURI:get"><apiName>prevNamespaceURI</apiName><shortdesc>
		 The previous value of the relatedNode's namespaceURI.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The previous value of the relatedNode's namespaceURI.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MutationNameEvent-prevNamespaceURI"><linktext>W3C - MutationNameEvent.prevNamespaceURI</linktext></link></related-links></apiValue><apiValue id="dom.events:MutationNameEvent:prevNodeName:get"><apiName>prevNodeName</apiName><shortdesc>
		 The previous value of the relatedNode's nodeName.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The previous value of the relatedNode's nodeName.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MutationNameEvent-prevNodeName"><linktext>W3C - MutationNameEvent.prevNodeName</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.events:EventTargetGroup"><apiName>EventTargetGroup</apiName><shortdesc>
	 The EventTargetGroup interface is implemented by the same set of objects that implement the EventTarget 
	 interface, namely all EventTargets in in implementation which supports the Event model and the EventGroup extension.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 The EventTargetGroup interface is implemented by the same set of objects that implement the EventTarget 
	 interface, namely all EventTargets in in implementation which supports the Event model and the EventGroup extension.
	 
	 <p><b>Note:</b> This is from DOM 3 Events Working Draft 10 (April 2001) and has since been deprecated in Working Draft 21 (December 2007)</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-EventTargetGroup"><linktext>W3C - DOM 3 Events: EventTargetGroup</linktext></link></related-links><apiOperation id="dom.events:EventTargetGroup:dom.events:EventTargetGroup:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 This method is equivalent to the addEventListener method of the EventTarget interface, with the exception of 
		 the added eventGroup parameter.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>eventGroup</apiItemName><apiOperationClassifier>dom.events:EventGroup</apiOperationClassifier><apiDesc>The EventGroup to associate with the listener.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method is equivalent to the addEventListener method of the EventTarget interface, with the exception of 
		 the added eventGroup parameter. The listener is registered with this EventGroup associated. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-EventTargetGroup-addEventListener"><linktext>W3C - DOM 3 Events: EventTargetGroup.addEventListener()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:EventTargetGroup:dom.events:EventTargetGroup:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 This method is equivalent to the removeEventListener method of the EventTarget interface, with the exception 
		 of the added eventGroup parameter.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>eventGroup</apiItemName><apiOperationClassifier>dom.events:EventGroup</apiOperationClassifier><apiDesc>The EventGroup to associate with the listener.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method is equivalent to the removeEventListener method of the EventTarget interface, with the exception 
		 of the added eventGroup parameter. The listener registered with this EventGroup associated is removed. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-EventTargetGroup-removeEventListener"><linktext>W3C - DOM 3 Events: EventTargetGroup.removeEventListener()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:CustomEvent"><apiName>CustomEvent</apiName><shortdesc>
	 The CustomEvent interface is the recommended interface for 
	 application-specific event types.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The CustomEvent interface is the recommended interface for 
	 application-specific event types. Unlike the Event interface, it allows 
	 applications to provide contextual information about the event type. 
	 Application-specific event types should have an associated namespace to 
	 avoid clashes with future general-purpose event types.
	 
	 <p>To create an instance of the CustomEvent interface, use the 
	 DocumentEvent.createEvent("CustomEvent") method call.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-CustomEvent"><linktext>W3C - DOM 3 Events: CustomEvent</linktext></link></related-links><apiOperation id="dom.events:CustomEvent:initCustomEventNS"><apiName>initCustomEventNS</apiName><shortdesc>
		 Initializes attributes of a CustomEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiOperationClassifier>dom.core.types:DOMObject</apiOperationClassifier><apiDesc>Specifies CustomEvent.detail. This value may be null.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a CustomEvent object. This method has 
		 the same behavior as Event.initEventNS(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initCustomEventNS"><linktext>W3C - DOM 3 Events: CustomEvent.initCustomEventNS()</linktext></link></related-links></apiOperation><apiValue id="dom.events:CustomEvent:detail:get"><apiName>detail</apiName><shortdesc>
		 Specifies some detail information about the Event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMObject</apiValueClassifier></apiValueDef><apiDesc>
		 Specifies some detail information about the Event.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-CustomEvent-detail"><linktext>W3C - DOM 3 Events: CustomEvent.detail</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.events:EventListener"><apiName>EventListener</apiName><shortdesc>
	 The EventListener interface is the primary way for handling events.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 The EventListener interface is the primary way for handling events. Users 
	 implement the EventListener interface and register their event listener on 
	 an EventTarget. The users should also remove their EventListener from its 
	 EventTarget after they have completed using the listener.
	 
	 <p>Copying a Node, with methods such as Node.cloneNode or Range.cloneContents, 
	 does not copy the event listeners attached to it. Event listeners must be 
	 attached to the newly created Node afterwards if so desired.</p>
	 
	 <p>Moving a Node, with methods Document.adoptNode, Node.appendChild, or 
	 Range.extractContents, does not affect the event listeners attached to it.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventListener"><linktext>W3C - DOM 3 Events: EventListener</linktext></link><link href="dom.events.xml#EventTarget"><linktext>dom.events.EventTarget</linktext></link></related-links><apiOperation id="dom.events:EventListener:dom.events:EventListener:handleEvent"><apiName>handleEvent</apiName><shortdesc>
		 This method is called whenever an event occurs of the event type for 
		 which the EventListener interface was registered.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>evt</apiItemName><apiOperationClassifier>dom.events:Event</apiOperationClassifier><apiDesc>The Event contains contextual information about the event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method is called whenever an event occurs of the event type for 
		 which the EventListener interface was registered. 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventListener"><linktext>W3C - DOM 3 Events: EventListener.handleEvent()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:EventTarget"><apiName>EventTarget</apiName><shortdesc>
	 The EventTarget interface is implemented by all the objects which could be 
	 event targets in an implementation which supports an event flow.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 The EventTarget interface is implemented by all the objects which could be 
	 event targets in an implementation which supports an event flow. The 
	 interface allows registration and removal of event listeners, and dispatch 
	 of events to an event target.
	 
	 <p>When used with the DOM event flow, this interface is implemented by all 
	 target nodes and target ancestors, i.e. all DOM Nodes of the tree support 
	 this interface when the implementation conforms to DOM Level 3 Events and, 
	 therefore, this interface can be obtained by using binding-specific casting 
	 methods on an instance of the Node interface.</p>
	 
	 <p>Invoking addEventListener or addEventListenerNS repeatedly on the same 
	 EventTarget with the same values for the parameters namespaceURI, type, 
	 listener, and useCapture has no effect. Doing so does not cause the 
	 EventListener to be called more than once and does not cause a change in the 
	 triggering order.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget"><linktext>W3C - DOM 3 Events: EventTarget</linktext></link></related-links><apiOperation id="dom.events:EventTarget:dom.events:EventTarget:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 Associates a function with a particular event and binds the event to the current node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string representing the event to bind, without the "on" prefix. For example, "click", "mousedown" etc.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The function or method to associate with the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Whether to bind the event as it is propagating towards the target node, (event Capture), or as the 
		 event bubbles upwards from the target (event bubble). Set to true or false, respectively.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates a function with a particular event and binds the event to the current node.
		 
		 </apiDesc><example>
		 <codeblock>
		 function statusreport() {
		 		alert("document has loaded");
		 }
		 
		 if (window.addEventListener) {
		 		window.addEventListener("load", statusreport, false); //invoke function
		 }
		 window.onload = statusreport(); //function invoked again, since no event handler conflicts</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-addEventListener"><linktext>W3C - DOM 3 Events: EventTarget.addEventListener()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:EventTarget:dom.events:EventTarget:addEventListenerNS"><apiName>addEventListenerNS</apiName><shortdesc>
		 Registers an event listener, depending on the useCapture parameter, on the 
		 capture phase of the DOM event flow or its target and bubbling phases.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.namespaceURI associated with the event for which the user is registering.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string representing the event to bind, without the "on" prefix. For example, "click", "mousedown" etc.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The function or method to associate with the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Whether to bind the event as it is propagating towards the target node, (event Capture), or as the 
		 event bubbles upwards from the target (event bubble). Set to true or false, respectively.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers an event listener, depending on the useCapture parameter, on the 
		 capture phase of the DOM event flow or its target and bubbling phases.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-addEventListener"><linktext>W3C - DOM 3 Events: EventTarget.addEventListener()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:EventTarget:dom.events:EventTarget:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
		 Dispatches an event to fire on a node artificially.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>UNSPECIFIED_EVENT_TYPE_ERR: 
		 Raised if the Event.type was not specified by initializing the event 
		 before dispatchEvent was called. Specification of the Event.type as 
		 null or an empty string will also trigger this exception.
		 
		 </apiDesc><apiItemName>EventException</apiItemName><apiOperationClassifier>dom.events:EventException</apiOperationClassifier></apiException><apiException><apiDesc>DISPATCH_REQUEST_ERR: Raised 
		 if the Event object is already being dispatched.
		 
		 </apiDesc><apiItemName>EventException</apiItemName><apiOperationClassifier>dom.events:EventException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if the Event 
		 object has not been created using DocumentEvent.createEvent().
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if 
		 Event.type is not an NCName as defined in [XML Namespaces 1.1].
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>Indicates whether any of the listeners which handled the 
		 event called Event.preventDefault(). If Event.preventDefault() was 
		 called the returned value is false, else it is true.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>dom.events:Event</apiOperationClassifier><apiDesc>The event to be dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatches an event to fire on a node artificially.
		 
		 <p><b>Note (IE):</b> IE's equivalent of dispatchEvent() is fireEvent().</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;div id="test" onclick="alert('hi')"&gt;Sample DIV.&lt;/div&gt;
		 &lt;script type="text/javascript"&gt;
		 //Generate an artificial click event on "test". Fires alert("hi")
		 var clickevent = document.createEvent("MouseEvents");
		 clickevent.initEvent("click", true, true);
		 document.getElementById("test").dispatchEvent(myevent);
		 &lt;/script&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-dispatchEvent"><linktext>W3C - DOM 3 Events: EventTarget.dispatchEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:EventTarget:dom.events:EventTarget:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 Removes an event listener.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.type for which the user registered 
		 the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The EventListener to be removed.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether the EventListener being removed 
		 was registered for the capture phase or not. If a listener was 
		 registered twice, once for the capture phase and once for the target 
		 and bubbling phases, each must be removed separately. Removal of an 
		 event listener registered for the capture phase does not affect the 
		 same event listener registered for the target and bubbling phases, 
		 and vice versa.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes an event listener.
		 
		 <p>Calling removeEventListener with arguments 
		 which do not identify any currently registered EventListener on the 
		 EventTarget has no effect. The Event.namespaceURI for which the user 
		 registered the event listener is implied and is null.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-removeEventListener"><linktext>W3C - DOM 3 Events: EventTarget.removeEventListener()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:EventTarget:dom.events:EventTarget:removeEventListenerNS"><apiName>removeEventListenerNS</apiName><shortdesc>
		 Removes an event listener.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.namespaceURI associated with the event for which the user registered the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.type for which the user registered 
		 the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The EventListener to be removed.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether the EventListener being removed 
		 was registered for the capture phase or not. If a listener was 
		 registered twice, once for the capture phase and once for the target 
		 and bubbling phases, each must be removed separately. Removal of an 
		 event listener registered for the capture phase does not affect the 
		 same event listener registered for the target and bubbling phases, 
		 and vice versa.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes an event listener. Calling removeEventListenerNS with arguments 
		 which do not identify any currently registered EventListener on the 
		 EventTarget has no effect. 
		  
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTargetGroup-removeEventListenerNS"><linktext>W3C - DOM 3 Events: EventTarget.removeEventListenerNS()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:EventException"><apiName>EventException</apiName><shortdesc>
	 Event operations may throw an EventException as specified in their method descriptions.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 Event operations may throw an EventException as specified in their method descriptions.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventException"><linktext>W3C - DOM 3 Events: EventException</linktext></link></related-links><apiValue id="dom.events:EventException:dom.events:EventException:code:get"><apiName>code</apiName><shortdesc>
		 An integer indicating the type of error generated.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 An integer indicating the type of error generated.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventException"><linktext>W3C - DOM 3 Events: EventException.code</linktext></link><link href="dom.events.xml#EventExceptionCode"><linktext>dom.events.EventExceptionCode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.events:EventGroup"><apiName>EventGroup</apiName><shortdesc>
	 The EventGroup interface functions primarily as a placeholder for separating the event flows when there 
	 are multiple groups of listeners for a DOM tree.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 The EventGroup interface functions primarily as a placeholder for separating the event flows when there 
	 are multiple groups of listeners for a DOM tree.
	 
	 <p>EventListeners can be registered without an EventGroup using the existing EventTarget interface, or with 
	 an associated EventGroup using the new EventTargetGroup interface. When an event is dispatched, it is 
	 dispatched independently to each EventGroup. In particular, the stopPropagation method of the Event interface 
	 only stops propagation within an EventListener's associated EventGroup.</p>
	 
	 <p><b>Note:</b> This is from DOM 3 Events Working Draft 10 (April 2001) and has since been deprecated in Working Draft 21 (December 2007)</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-EventGroup"><linktext>W3C - DOM 3 Events: EventGroup</linktext></link></related-links><apiOperation id="dom.events:EventGroup:dom.events:EventGroup:isSameEventGroup"><apiName>isSameEventGroup</apiName><shortdesc>
		 This method checks if the supplied EventGroup is the same as the EventGroup upon which the method is called.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns true if the EventGroups are equal, else returns false.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>eventGroup</apiItemName><apiOperationClassifier>dom.events:EventGroup</apiOperationClassifier><apiDesc>The EventGroup with which to check equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method checks if the supplied EventGroup is the same as the EventGroup upon which the method is called. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-EventGroup-isSameEventGroup"><linktext>W3C - DOM 3 Events: EventGroup.isSameEventGroup()</linktext></link></related-links></apiOperation></apiClassifier></apiPackage>