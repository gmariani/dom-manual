<apiPackage id="gecko"><apiName>gecko</apiName><apiDetail/><apiClassifier id="gecko:nsIBoxObject"><apiName>nsIBoxObject</apiName><shortdesc>
	 Where possible, element.getClientRects and element.getBoundingClientRect should 
	 be used instead.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 Where possible, element.getClientRects and element.getBoundingClientRect should 
	 be used instead.  nsIBoxObject is subject to change.
	 
	 INCOMPLETE
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/en/nsIBoxObject"><linktext>MDC - nsIBoxObject</linktext></link></related-links></apiClassifier><apiClassifier id="gecko:nsIURI"><apiName>nsIURI</apiName><shortdesc>
	 nsIURI is an interface for an uniform resource identifier with 
	 internationalization support, offering attributes that allow setting 
	 and querying the basic components of a URI, and methods for 
	 performing basic operations on URIs.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 nsIURI is an interface for an uniform resource identifier with 
	 internationalization support, offering attributes that allow setting 
	 and querying the basic components of a URI, and methods for 
	 performing basic operations on URIs.
	 </apiDesc></apiClassifierDetail><apiOperation id="gecko:nsIURI:clone"><apiName>clone</apiName><shortdesc>
		 Clones the URI, returning a new nsIURI object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An nsIURI object that represents the same URI as the current 
		 nsIURI.
		 </apiDesc><apiOperationClassifier>gecko:nsIURI</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Clones the URI, returning a new nsIURI object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gecko:nsIURI:equals"><apiName>equals</apiName><shortdesc>
		 Compares the current URI with another URI, returning true if the two 
		 represent the same location.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the two URIs represent the same location
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>other</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Another nsIURI to compare to. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Compares the current URI with another URI, returning true if the two 
		 represent the same location.
		 
		 Note: This is more than a string comparison, as two different URI 
		 strings can represent the same location.  For example, comparing 
		 "http://foo.com:80/" and "http://foo.com/" will return true.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gecko:nsIURI:resolve"><apiName>resolve</apiName><shortdesc>
		 Resolves a relative URI string, using this URI as the base.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The resolved absolute URI string.
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativePath</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The relative path to resolve. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Resolves a relative URI string, using this URI as the base.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gecko:nsIURI:schemeIs"><apiName>schemeIs</apiName><shortdesc>
		 Quickly reports whether the nsIURI represents a URI with the specified 
		 scheme.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the URI is for the specified scheme
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>scheme</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string representing the scheme to compare to. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Quickly reports whether the nsIURI represents a URI with the specified 
		 scheme.  This comparison is case-insensitive.
		 
		 Note: This is an optimization, allowing you to check the scheme of the 
		 URI without having to get the scheme and do the comparison yourself; 
		 this saves memory allocations.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="gecko:nsIURI:asciiHost:get"><apiName>asciiHost</apiName><shortdesc>
		 The URI host with an ASCII compatible encoding.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The URI host with an ASCII compatible encoding. Follows the IDNA 
		 draft spec for converting internationalized domain names (UTF-8) 
		 to ASCII for compatibility with existing Internet infrasture.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gecko:nsIURI:asciiSpec:get"><apiName>asciiSpec</apiName><shortdesc>
		 The URI spec with an ASCII compatible encoding.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The URI spec with an ASCII compatible encoding. The host portion 
		 follows the IDNA draft spec. Other parts are URL-escaped per the 
		 rules of RFC2396. The result is strictly ASCII.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gecko:nsIURI:host:get"><apiName>host</apiName><shortdesc>
		 The host is the Internet domain name to which this URI refers.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The host is the Internet domain name to which this URI refers. It 
		 could be an IPv4 (or IPv6) address literal. If supported, it could 
		 be a non-ASCII internationalized domain name.
		 
		 Note: Characters are not escaped.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gecko:nsIURI:hostPort:get"><apiName>hostPort</apiName><shortdesc>
		 The "host : port" part of the URI (or simply the host, if port is -1).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The "host : port" part of the URI (or simply the host, if port is -1).
		 
		 Note: Characters are not escaped.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gecko:nsIURI:originCharset:get"><apiName>originCharset</apiName><shortdesc>
		 The charset of the document from which this URI originated.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The charset of the document from which this URI originated. An 
		 empty value implies UTF-8.
		 
		 If this value is something other than UTF-8 then the URI components 
		 (e.g., spec, prePath, username, etc.) are all fully URL-escaped. 
		 Otherwise, the URI components may contain unescaped multibyte 
		 UTF-8 characters.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gecko:nsIURI:password:get"><apiName>password</apiName><shortdesc>
		 The optional password, assuming the preHost consists of 
		 "username:password".</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The optional password, assuming the preHost consists of 
		 "username:password".
		 
		 Note: Some characters may be escaped.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gecko:nsIURI:path:get"><apiName>path</apiName><shortdesc>
		 The path, typically including at least a leading '/' (but may also 
		 be empty, depending on the protocol).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The path, typically including at least a leading '/' (but may also 
		 be empty, depending on the protocol).
		 
		 Note: Some characters may be escaped.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gecko:nsIURI:port:get"><apiName>port</apiName><shortdesc>
		 The URI's port.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The URI's port. A port value of -1 corresponds to the protocol's 
		 default port (eg. -1 implies port 80 for HTTP URIs).
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gecko:nsIURI:prePath:get"><apiName>prePath</apiName><shortdesc>
		 The prePath returns the string before the path (such as 
		 "scheme://user:password</shortdesc><prolog><asCustoms><host>: port"). This is useful for authentication 
		 or managing sessions.
		 
		 Note: Some characters may be escaped.
		 </host></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The prePath returns the string before the path (such as 
		 "scheme://user:password</apiDesc></apiValueDetail></apiValue><apiValue id="gecko:nsIURI:scheme:get"><apiName>scheme</apiName><shortdesc>
		 The scheme is the protocol to which this URI refers.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The scheme is the protocol to which this URI refers. The scheme is 
		 restricted to the US-ASCII charset per RFC2396.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gecko:nsIURI:spec:get"><apiName>spec</apiName><shortdesc>
		 Returns a string representation of the URI.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Returns a string representation of the URI. Setting the spec causes 
		 the new spec to be parsed using the rules for the scheme the URI 
		 currently has. If the string cannot be parsed as a URI, 
		 NS_ERROR_MALFORMED_URI thrown.
		 
		 If the URI stores information from the nsIIOService  interface's 
		 newURI()  call that created it, other than just the parsed string, 
		 the behavior of this information when setting the spec attribute 
		 is undefined.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gecko:nsIURI:userPass:get"><apiName>userPass</apiName><shortdesc>
		 The "username:password" (or username only if the value doesn't 
		 contain a ':').</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The "username:password" (or username only if the value doesn't 
		 contain a ':').
		 
		 Note: Some characters may be escaped.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="gecko:nsIURI:username:get"><apiName>username</apiName><shortdesc>
		 The optional username, assuming the preHost consists of 
		 "username:password".</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The optional username, assuming the preHost consists of 
		 "username:password".
		 
		 Note: Some characters may be escaped.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="gecko:nsIDOMOfflineResourceList"><apiName>nsIDOMOfflineResourceList</apiName><shortdesc>
	 </shortdesc><prolog><asMetadata/><asCustoms><internal>http://developer.mozilla.org/en/nsIDOMOfflineResourceList
	 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="gecko:nsIPrincipal"><apiName>nsIPrincipal</apiName><shortdesc>
	 http://developer.mozilla.org/en/nsIPrincipal
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 http://developer.mozilla.org/en/nsIPrincipal
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="gecko:nsIXPCComponents"><apiName>nsIXPCComponents</apiName><shortdesc>
	 </shortdesc><prolog><asMetadata/><asCustoms><internal>
	 
	 http://mxr.mozilla.org/mozilla-central/source/js/src/xpconnect/idl/xpccomponents.idl
	 
	 http://developer.mozilla.org/en/Components_object
	 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 </apiDesc></apiClassifierDetail></apiClassifier></apiPackage>