<?xml version="1.0" encoding="UTF-8"?><allClasses><apiPackage id="cssom.view"><apiName>cssom.view</apiName><apiClassifier id="cssom.view:Screen"><apiName>Screen</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="cssom.view:DocumentView"><apiName>DocumentView</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="cssom.view:DocumentView:cssom.view:DocumentView:elementFromPoint"><apiName>elementFromPoint</apiName><shortdesc>
		 Returns the element from the document whose elementFromPoint method is being called which is the 
		 topmost element which lies under the given point.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0_alternative"/><apiTool name="Safari" version="3.1_alternative"/><apiTool name="Safari" version="4.0b_alternative"/><apiTool name="Chrome" version="1.0_alternative"/><apiTool name="Chrome" version="2.0_alternative"/><apiTool name="Opera" version="9.62_incorrect"/><apiTool name="Opera" version="10.0a_alternative"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>The element at x,y in the viewport
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>The X coordinate to check, in CSS pixels relative to the upper-left corner of the document's containing window or frame.
		 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>The Y coordinate to check, in CSS pixels relative to the upper-left corner of the document's containing window or frame.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the element from the document whose elementFromPoint method is being called which is the 
		 topmost element which lies under the given point. 
		 
		 <p>The point is specified via coordinates, in CSS pixels, relative to the upper-left-most point 
		 in the window or frame containing the document.</p>
		 
		 <p><b>Note:</b> If the element at the specified point belongs to another document (for example, 
		 an iframe's subdocument), the element in the DOM of the document the method is called on (in the iframe 
		 case, the iframe itself) is returned. If the element at the given point is anonymous or XBL generated 
		 content, such as a textbox's scroll bars, then the first non-anonymous ancestor element (for example, 
		 the textbox) is returned.</p>
		 
		 <p><b>Note:</b> If the specified point is outside the visible bounds of the document or either 
		 coordinate is negative, the result is null.</p>
		 
		 <p><b>Note:</b> The browsers do not entirely agree which mouse coordinates this method needs. 
		 IE and Firefox 3 need clientX/Y (relative to the viewport), while Opera and Safari need pageX/Y (relative 
		 to the document).</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;elementFromPoint example&lt;/title&gt;
		 		&lt;script type="text/javascript"&gt;
		 			function changeColor(newColor) {
		 				elem = document.elementFromPoint(2, 2);
		 				elem.style.color = newColor;
		 			}
		 		&lt;/script&gt;
		 	&lt;/head&gt;
		 
		 	&lt;body&gt;
		 		&lt;p id="para1"&gt;Some text here&lt;/p&gt;
		 		&lt;button onclick="changeColor('blue');"&gt;blue&lt;/button&gt;
		 		&lt;button onclick="changeColor('red');"&gt;red&lt;/button&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;
		 </codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536417(VS.85).aspx"><linktext>MSDN: elementFromPoint Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.elementFromPoint"><linktext>MDC - Document: elementFromPoint Method</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-documentview-interface"><linktext>W3C - CSSOM View: elementFromPoint Method</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#documentview"><linktext>Quirksmode: DocumentView and ElementView methods</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="cssom.view:WindowView"><apiName>WindowView</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="cssom.view:Media"><apiName>Media</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><example>
	 <codeblock>var m = window.media;</codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="cssom.view:Media:cssom.view:Media:query"><apiName>query</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the mediaquery matches the state of the current view.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>mediaquery</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/cssom-view/#media-query"><linktext>W3C CSSOM Views Specification: Media.query()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="cssom.view:ElementView"><apiName>ElementView</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="cssom.view:ElementView:cssom.view:ElementView:getBoundingClientRect"><apiName>getBoundingClientRect</apiName><shortdesc>
		 Retrieves an object that specifies the bounds of a collection of TextRectangle objects.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_almost"/><apiTool name="Firefox" version="3.1b_almost"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0b_no"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0_no"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>cssom.view:TextRectangle</apiOperationClassifier><apiDesc>The returned value is a TextRectangle object which is the union 
		 of the rectangles returned by getClientRects() for the element, i.e., 
		 the CSS border-boxes associated with the element.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves an object that specifies the bounds of a collection of TextRectangle objects.
		 
		 <p><b>Note (IE8):</b> In IE8 mode, the bounding rectangle is the same as the client rectangle.</p>
		 
		 <p><b>Note (IE5):</b> In Microsoft Internet Explorer 5, the window's upper-left is at 
		 2,2 (pixels) with respect to the true client.</p>
		 
		 <p><b>Note (Firefox 3.5):</b> Firefox 3.5 adds width and height properties to the TextRectangle object.</p>
		 
		 <p><b>Note (Firefox):</b> Firefox doesn't round the top/bottom coordinates.</p>
		 
		 </apiDesc><example>
		 <codeblock>var rect = obj.getBoundingClientRect();</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536433(VS.85).aspx"><linktext>MSDN: getBoundingClientRect Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.getBoundingClientRect"><linktext>MDC - Element: getBoundingClientRect Method</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-getclientrects"><linktext>W3C - CSSOM View: getBoundingClientRect Method</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#documentview"><linktext>Quirksmode: DocumentView and ElementView methods</linktext></link></related-links></apiOperation><apiOperation id="cssom.view:ElementView:cssom.view:ElementView:getClientRects"><apiName>getClientRects</apiName><shortdesc>
		 Retrieves a collection of rectangles that describes the layout of the 
		 contents of an object or range within the client.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5_buggy"/><apiTool name="IE" version="6.0_buggy"/><apiTool name="IE" version="7.0_buggy"/><apiTool name="IE" version="8.0_as_IE7_buggy"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_almost"/><apiTool name="Firefox" version="3.1b_almost"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0b_no"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0_no"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>cssom.view:TextRectangleList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Retrieves a collection of rectangles that describes the layout of the 
		 contents of an object or range within the client. Each rectangle 
		 describes a single line.
		 
		 <p><b>Note (IE8):</b> In IE8 mode, getClientRects always returns 
		 a collection of one rectangle—the same rectangle as getBoundingClientRect.</p>
		 
		 <p><b>Note (IE):</b> In IE5-7, split up a block-level element such as a &lt;p&gt; into one rectangle per line.
		 This is incorrect: a block-level element should be reported as one rectangle.</p>
		 
		 <p><b>Note (IE):</b> In IE5-7, the rectangles are off by about two pixels. According to John Resig this is caused by the 
		 (invisible, but nonetheless present) borders of the &lt;html&gt; element.</p>
		 
		 <p><b>Note (Firefox 3.5):</b> Firefox 3.5 adds width and height properties to the TextRectangle object.</p>
		 
		 <p><b>Note (Firefox):</b> Firefox doesn't round the top/bottom coordinates.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var rects = obj.getClientRects();
		 var numLines = rects.length;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536435(VS.85).aspx"><linktext>MSDN: getClientRects Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.getClientRects"><linktext>MDC - Element: getClientRects Method</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-getclientrects"><linktext>W3C - CSSOM View: getClientRects Method</linktext></link><link href="http://ejohn.org/blog/getboundingclientrect-is-awesome/"><linktext>John Resig</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#documentview"><linktext>Quirksmode: DocumentView and ElementView methods</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="cssom.view:TextRectangleList"><apiName>TextRectangleList</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><example>
	 This example shows how to use the getClientRects method and the TextRectangle collection to iterate through the lines of text in an object.
	 
	 <codeblock>
	 &lt;script&gt;
	 function newHighlite(obj) {            
	 	oRcts = obj.getClientRects();
	 	iLength = oRcts.length;
	 	for (i = 0;i &lt; iLength; i++) {	
	 		alert("Line number " + (i + 1) + " is " + (oRcts(i).right - oRcts(i).left) + " pixels wide.");
	 	}
	 }
	 &lt;/script&gt;</codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="cssom.view:TextRectangleList:cssom.view:TextRectangleList:item"><apiName>item</apiName><shortdesc>
		 Retrieves an object from a TextRectangle collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0b_no"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0_no"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0a_no"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: May be raised if the index 
		 is negative or greater than the number of TextRectangle objects 
		 associated with the object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>cssom.view:TextRectangle</apiOperationClassifier><apiDesc>The TextRectangle object at that index
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves an object from a TextRectangle collection.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/dd347037(VS.85).aspx"><linktext>MSDN: item Method</linktext></link><link href="http://www.w3.org/TR/cssom-view/#textrectanglelist"><linktext>W3C - CSSOM View: item Method</linktext></link></related-links></apiOperation><apiOperation id="cssom.view:TextRectangleList:cssom.view:TextRectangleList:namedItem"><apiName>namedItem</apiName><shortdesc>
		 Retrieves an object or a collection from a specified collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.1b_no"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0b_no"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0_no"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0a_no"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>cssom.view:TextRectangle</apiOperationClassifier><apiDesc>Returns an object or a collection of objects if successful, or null otherwise.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name or id property of the object to retrieve. A collection is returned if more than one match is made.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves an object or a collection from a specified collection.
		 
		 <p><b>Note (IE8):</b> In IE8 mode, the namedItem method does not return collections if more than one named item is found; instead, it returns the first case-insensitive matched element.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;div id="oDIV1"&gt;This text will not change.&lt;/div&gt;
		 &lt;div id="oDIV2"&gt;This text will change.&lt;/div&gt;
		 &lt;button onclick="document.all.namedItem('oDIV2').innerHTML='Changed!';"&gt;
		 Change Option
		 &lt;/button&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536634(VS.85).aspx"><linktext>MSDN: namedItem Method</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="cssom.view:MouseEventView"><apiName>MouseEventView</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="cssom.view:TextRectangle"><apiName>TextRectangle</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><example>
	 In the following excerpt from the Gettysburg Address, four TextRectangle objects are contained in the b element (bold text).
	 
	 <codeblock>
	 &lt;p&gt;Four score and seven years ago &lt;b&gt;our fathers&lt;br&gt;
	 brought forth . . . a new nation, conceived in liberty&lt;br&gt;
	 and dedicated to the proposition that all men are&lt;br&gt;
	 created equal.&lt;/b&gt; Now we are engaged in a great civil war . . . 
	 &lt;/p&gt;
	 </codeblock>
	 
	 <p>
	 The four TextRectangle objects are: 
	 <ol>
	 <li>"our fathers"</li>
	 <li>"brought forth . . . a new nation, conceived in liberty"</li>
	 <li>"and dedicated to the proposition that all men are"</li>
	 <li>"created equal"</li>
	 </ol>
	 </p>
	 
	 <p>If you resize the window containing this text, the TextRectangle objects do not update. Because the objects are a 
	 snapshot of the layout, the objects should update after an onresize event occurs.</p>
	 
	 <p>The width of the TextRectangle may not be identical to the width of the TextRange it contains. A TextRange is only 
	 as wide as the text, but a TextRectangle is as wide as the element containing that text.</p>
	 
	 </example></apiClassifierDetail></apiClassifier><apiClassifier id="cssom.view:RangeView"><apiName>RangeView</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="cssom.view:RangeView:cssom.view:RangeView:getBoundingClientRect"><apiName>getBoundingClientRect</apiName><shortdesc>
		 Retrieves an object that specifies the bounds of a collection of TextRectangle objects.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.1b_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMTR 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>cssom.view:TextRectangle</apiOperationClassifier><apiDesc>The returned value is a TextRectangle object which is the union 
		 of the rectangles returned by getClientRects() for the element, i.e., 
		 the CSS border-boxes associated with the element.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Retrieves an object that specifies the bounds of a collection of TextRectangle objects.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/cssom-view/#rangeview-getboundingclientrect"><linktext>W3C - CSSOM View: RangeView.getBoundingClientRect()</linktext></link><link href="cssom.view.xml#ElementView/getBoundingClientRect()"><linktext>ElementView.getBoundingClientRect()</linktext></link></related-links></apiOperation><apiOperation id="cssom.view:RangeView:cssom.view:RangeView:getClientRects"><apiName>getClientRects</apiName><shortdesc>
		 Retrieves a collection of rectangles that describes the layout of the 
		 contents of an object or range within the client.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.1b_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMTR 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>cssom.view:TextRectangleList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Retrieves a collection of rectangles that describes the layout of the 
		 contents of an object or range within the client. Each rectangle 
		 describes a single line.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/cssom-view/#rangeview-getclientrects"><linktext>W3C - CSSOM View: RangeView.getClientRects()</linktext></link><link href="cssom.view.xml#ElementView/getClientRects()"><linktext>ElementView.getClientRects()</linktext></link></related-links></apiOperation></apiClassifier></apiPackage><apiPackage id="dom.core.types"><apiName>dom.core.types</apiName><apiClassifier id="dom.core.types:DOMUserData"><apiName>DOMUserData</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.core.types:DOMTimeStamp"><apiName>DOMTimeStamp</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.core.types:DOMObject"><apiName>DOMObject</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.core.types:DOMString"><apiName>DOMString</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="dom.core"><apiName>dom.core</apiName><apiClassifier id="dom.core:CharacterData"><apiName>CharacterData</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:CharacterData:appendData"><apiName>appendData</apiName><shortdesc>
		 Append the string to the end of the character data of the node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The DOMString to append.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Append the string to the end of the character data of the node. 
		 Upon success, data provides access to the concatenation of data and 
		 the DOMString specified.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms756985%28VS.85%29.aspx"><linktext>MSDN - appendData Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/CharacterData.appendData"><linktext>MDC - CharacterData.appendData()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-32791A2F"><linktext>W3C - CharacterData.appendData()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:CharacterData:deleteData"><apiName>deleteData</apiName><shortdesc>
		 Remove a range of 16-bit units  from the node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified 
		 offset is negative or greater than the number of 16-bit units in data,
		 or if the specified count is negative.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>The offset from which to start removing.
		 </apiDesc></apiParam><apiParam><apiItemName>count</apiItemName><apiType value="Number"/><apiDesc>The number of 16-bit units to delete. If the sum of offset 
		 and count exceeds length then all 16-bit units from offset  to the end of 
		 the data are deleted.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove a range of 16-bit units  from the node. Upon success, data and 
		 length reflect the change.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms754600%28VS.85%29.aspx"><linktext>MSDN - deleteData Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/CharacterData.deleteData"><linktext>MDC - CharacterData.deleteData()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-7C603781"><linktext>W3C - CharacterData.deleteData()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:CharacterData:insertData"><apiName>insertData</apiName><shortdesc>
		 Insert a string at the specified 16-bit unit offset.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified 
		 offset is negative or greater than the number of 16-bit units in data.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>The character offset at which to insert.
		 </apiDesc></apiParam><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The DOMString to insert.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Insert a string at the specified 16-bit unit offset.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms762794%28VS.85%29.aspx"><linktext>MSDN - insertData Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/CharacterData.insertData"><linktext>MDC - CharacterData.insertData()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-3EDB695F"><linktext>W3C - CharacterData.insertData()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:CharacterData:replaceData"><apiName>replaceData</apiName><shortdesc>
		 Replace the characters starting at the specified 16-bit unit offset 
		 with the specified string.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified 
		 offset is negative or greater than the number of 16-bit units in data, 
		 or if the specified count is negative.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>The offset from which to start replacing.
		 </apiDesc></apiParam><apiParam><apiItemName>count</apiItemName><apiType value="Number"/><apiDesc>The number of 16-bit units to replace. If the sum of 
		 offset and count exceeds length, then all 16-bit units to the end of 
		 the data are replaced; (i.e., the effect is the same as a remove 
		 method call with the same range, followed by an append method invocation).
		 </apiDesc></apiParam><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The DOMString with which the range must be replaced.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replace the characters starting at the specified 16-bit unit offset 
		 with the specified string.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms766416%28VS.85%29.aspx"><linktext>MSDN - replaceData Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/CharacterData.replaceData"><linktext>MDC - CharacterData.replaceData()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-E5CBA7FB"><linktext>W3C - CharacterData.replaceData()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:CharacterData:substringData"><apiName>substringData</apiName><shortdesc>
		 Extracts a range of data from the node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified 
		 offset is negative or greater than the number of 16-bit units in data, 
		 or if the specified count is negative.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>DOMSTRING_SIZE_ERR: Raised if the specified 
		 range of text does not fit into a DOMString.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The specified substring. If the sum of offset and count exceeds 
		 the length, then all 16-bit units to the end of the data are returned.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>Start offset of substring to extract.
		 </apiDesc></apiParam><apiParam><apiItemName>count</apiItemName><apiType value="Number"/><apiDesc>The number of 16-bit units to extract.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Extracts a range of data from the node.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms755744%28VS.85%29.aspx"><linktext>MSDN - substringData Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/CharacterData.substringData"><linktext>MDC - CharacterData.substringData()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-6531BCCF"><linktext>W3C - CharacterData.substringData()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:DOMConfiguration"><apiName>DOMConfiguration</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:DOMConfiguration:dom.core:DOMConfiguration:canSetParameter"><apiName>canSetParameter</apiName><shortdesc>
		 Check if setting a parameter to a specific value is supported.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the parameter could be successfully set to the specified value
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the parameter to check.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>dom.core.types:DOMUserData</apiOperationClassifier><apiDesc>An object. if null, the returned value is true. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check if setting a parameter to a specific value is supported.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMConfiguration.canSetParameter"><linktext>MDC - DOMConfiguration.canSetParameter()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMConfiguration-canSetParameter"><linktext>W3C - DOMConfiguration.canSetParameter()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMConfiguration:dom.core:DOMConfiguration:getParameter"><apiName>getParameter</apiName><shortdesc>
		 Return the value of a parameter if known.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_FOUND_ERR: Raised when the parameter 
		 name is not recognized. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core.types:DOMUserData</apiOperationClassifier><apiDesc>The current object associated with the specified parameter or n
		 ull if no object has been associated or if the parameter is not supported. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the parameter. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Return the value of a parameter if known. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMConfiguration.getParameter"><linktext>MDC - DOMConfiguration.getParameter()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMConfiguration-getParameter"><linktext>W3C - DOMConfiguration.getParameter()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMConfiguration:dom.core:DOMConfiguration:setParameter"><apiName>setParameter</apiName><shortdesc>
		 Set the value of a parameter.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_FOUND_ERR: Raised when the parameter 
		 name is not recognized. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised when the 
		 parameter name is recognized but the requested value cannot be set. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>TYPE_MISMATCH_ERR: Raised if the value 
		 type for this parameter name is incompatible with the expected 
		 value type. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the parameter to set.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>dom.core.types:DOMUserData</apiOperationClassifier><apiDesc>The new value or null if the user wishes to unset the 
		 parameter. While the type of the value parameter is defined as 
		 DOMUserData, the object type must match the type defined by the definition 
		 of the parameter. For example, if the parameter is "error-handler", the 
		 value must be of type DOMErrorHandler. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Set the value of a parameter.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMConfiguration.setParameter"><linktext>MDC - DOMConfiguration.setParameter()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMConfiguration-property"><linktext>W3C - DOMConfiguration.setParameter()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:Attr"><apiName>Attr</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.core:DOMImplementationList"><apiName>DOMImplementationList</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:DOMImplementationList:dom.core:DOMImplementationList:item"><apiName>item</apiName><shortdesc>
		 Returns the indexth item in the collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:DOMImplementation</apiOperationClassifier><apiDesc>The DOMImplementation at the indexth position in the 
		 DOMImplementationList, or null if that is not a valid index. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the indexth item in the collection.
		 
		 <p>If index is greater than 
		 or equal to the number of DOMImplementations in the list, this 
		 returns null. </p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementationList.item"><linktext>MDC - DOMImplementationList.item()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMImplementationList-item"><linktext>W3C - DOMImplementationList.item()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:NamedNodeMap"><apiName>NamedNodeMap</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:getNamedItem"><apiName>getNamedItem</apiName><shortdesc>
		 Gets a node by name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>A Node (of any type) with the specified nodeName, or null 
		 if it does not identify any node in this map.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The nodeName of a node to retrieve.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Gets a node by name.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms767592%28VS.85%29.aspx"><linktext>MSDN - getNamedItem Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1074577549"><linktext>W3C - NamedNodeMap.getNamedItem()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:getNamedItemNS"><apiName>getNamedItemNS</apiName><shortdesc>
		 Gets a node by namespace and localName.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>A Node (of any type) with the specified local name and namespace 
		 URI, or null if they do not identify any node in this map.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>nameSpaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the node to retrieve.
		 </apiDesc></apiParam><apiParam><apiItemName>localName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The local name of the node to retrieve.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Gets a node by namespace and localName.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-getNamedItemNS"><linktext>W3C - NamedNodeMap.getNamedItemNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:getQualifiedItem"><apiName>getQualifiedItem</apiName><shortdesc>
		 Returns the attribute with the specified namespace and attribute name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>An object. Returns the attribute node specified by the baseName and namespaceURI parameters. 
		 Returns Null if the attribute is not in the collection or if the item is not an attribute.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>baseName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The string specifying the base name of the attribute, without namespace qualification.
		 </apiDesc></apiParam><apiParam><apiItemName>nameSpaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The string specifying the namespace prefix that qualifies the attribute name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the attribute with the specified namespace and attribute name.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757075%28VS.85%29.aspx"><linktext>MSDN - getQualifiedItem Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:item"><apiName>item</apiName><shortdesc>
		 Returns the item at the given index (or null if the index is higher or equal to the number of nodes).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node at the index position in the map, or null if that 
		 is not a valid index.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the item at the given index (or null if the index is higher or equal to the number of nodes).
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms759220%28VS.85%29.aspx"><linktext>MSDN - item Method (IXMLDOMNamedNodeMap)</linktext></link><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-349467F9"><linktext>W3C - NamedNodeMap.item()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:nextNode"><apiName>nextNode</apiName><shortdesc>
		 Returns the next node in the collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>An IXMLDOMNode, which refers to the next node in the collection. Returns Null if there is no next node.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the next node in the collection.
		 
		 <p><b>Note:</b> The iterator initially points before the first node in the list so that the first call 
		 to the nextNode method returns the first node in the list.</p>
		 
		 <p><b>Note:</b> This method returns Null when the current node is the last node or there are no items 
		 in the list. When the current node is removed from the list, subsequent calls to nextNode return Null. The 
		 iterator must be reset by calling the reset method.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757847%28VS.85%29.aspx"><linktext>MSDN - nextNode Method (IXMLDOMNamedNodeMap)</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:removeNamedItem"><apiName>removeNamedItem</apiName><shortdesc>
		 Removes a node (or if an attribute, may reveal a default if present).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_FOUND_ERR: Raised if there is no node 
		 named name  in this map.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this map is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node removed from this map if a node with such a name exists.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The nodeName of the node to remove.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a node (or if an attribute, may reveal a default if present).
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms762291%28VS.85%29.aspx"><linktext>MSDN - removeNamedItem Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-D58B193"><linktext>W3C - NamedNodeMap.removeNamedItem()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:removeNamedItemNS"><apiName>removeNamedItemNS</apiName><shortdesc>
		 Removes a node (or if an attribute, may reveal a default if present).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_FOUND_ERR: Raised if there is no 
		 node with the specified namespaceURI and localName in this map.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised 
		 if this map is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if 
		 the implementation does not support the feature "XML" and the 
		 language exposed through the Document does not support XML Namespaces. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node removed from this map if a node with such a local 
		 name and namespace URI exists.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>nameSpaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the node to remove.
		 </apiDesc></apiParam><apiParam><apiItemName>localName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The local name of the node to remove.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a node (or if an attribute, may reveal a default if present).
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-removeNamedItemNS"><linktext>W3C - NamedNodeMap.removeNamedItemNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:reset"><apiName>reset</apiName><shortdesc>
		 Resets the iterator.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Resets the iterator.
		 
		 <p><b>Note:</b> Implemented in: MSXML 3.0 and later.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms762655%28VS.85%29.aspx"><linktext>MSDN - reset Method (IXMLDOMNamedNodeMap)</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:setNamedItem"><apiName>setNamedItem</apiName><shortdesc>
		 Adds (or replaces) a node by its nodeName.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if arg was 
		 created from a different document than the one that created this map.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if
		 this map is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INUSE_ATTRIBUTE_ERR: Raised if arg is 
		 an Attr that is already an attribute of another Element object. The 
		 DOM user must explicitly clone Attr nodes to re-use them in 
		 other elements.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if an 
		 attempt is made to add a node doesn't belong in this NamedNodeMap. 
		 Examples would include trying to insert something other than an Attr 
		 node into an Element's map of attributes, or a non-Entity node into 
		 the DocumentType's map of Entities.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>If the new Node replaces an existing node the replaced 
		 Node is returned, otherwise null is returned.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>A node to store in this map. The node will later be 
		 accessible using the value of its nodeName attribute.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds (or replaces) a node by its nodeName.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms764702%28VS.85%29.aspx"><linktext>MSDN - setNamedItem Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1025163788"><linktext>W3C - NamedNodeMap.setNamedItem()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:setNamedItemNS"><apiName>setNamedItemNS</apiName><shortdesc>
		 Adds (or replaces) a node by its localName and namespaceURI.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if arg was 
		 created from a different document than the one that created this map.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this map is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INUSE_ATTRIBUTE_ERR: Raised if arg is an 
		 Attr that is already an attribute of another Element object. The DOM 
		 user must explicitly clone Attr nodes to re-use them in other elements.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if an 
		 attempt is made to add a node doesn't belong in this NamedNodeMap. 
		 Examples would include trying to insert something other than an Attr 
		 node into an Element's map of attributes, or a non-Entity node into 
		 the DocumentType's map of Entities.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>If the new Node replaces an existing node the replaced Node 
		 is returned, otherwise null is returned.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>A node to store in this map. The node will later be 
		 accessible using the value of its namespaceURI and localName attributes.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds (or replaces) a node by its localName and namespaceURI.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-setNamedItemNS"><linktext>W3C - NamedNodeMap.setNamedItemNS()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:UserDataHandler"><apiName>UserDataHandler</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:UserDataHandler:handle"><apiName>handle</apiName><shortdesc>
		 This method is called whenever the node for which this handler is 
		 registered is imported or cloned.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiType value="Number"/><apiDesc>Specifies the type of operation that is being performed on the node.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the key for which this handler is being called. 
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Specifies the data for which this handler is being called. 
		 </apiDesc></apiParam><apiParam><apiItemName>src</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies the node being cloned, adopted, imported, or renamed. This is null when the node is being deleted.
		 </apiDesc></apiParam><apiParam><apiItemName>dst</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies the node newly created if any, or null.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method is called whenever the node for which this handler is 
		 registered is imported or cloned.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/UserDataHandler.handle"><linktext>MDC - UserDataHandler.handle()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-handleUserDataEvent"><linktext>W3C - UserDataHandler.handle()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:DOMErrorHandler"><apiName>DOMErrorHandler</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:DOMErrorHandler:dom.core:DOMErrorHandler:handleError"><apiName>handleError</apiName><shortdesc>
		 This method is called on the error handler when an error occurs.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the handleError method returns false, the DOM implementation should stop
		 the current processing when possible. If the method returns true, the 
		 processing may continue depending on DOMError.severity. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>error</apiItemName><apiOperationClassifier>dom.core:DOMError</apiOperationClassifier><apiDesc>The error object that describes the error. This object may be reused 
		 by the DOM implementation across multiple calls to the handleError method. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method is called on the error handler when an error occurs.
		 If an exception is thrown from this method, it is considered to be 
		 equivalent of returning true. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMErrorHandler.handleError"><linktext>MDC - DOMErrorHandler.handleError()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-ERRORS-DOMErrorHandler-handleError"><linktext>W3C - DOMErrorHandler.handleError()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:DOMImplementationRegistry"><apiName>DOMImplementationRegistry</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:DOMImplementationRegistry:dom.core:DOMImplementationRegistry:getDOMImplementation"><apiName>getDOMImplementation</apiName><shortdesc>
		 A method to request the first DOM implementation that supports the 
		 specified features.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:DOMImplementation</apiOperationClassifier><apiDesc>The first DOM implementation that support the desired features, or 
		 null if this source has none.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>feature</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string that specifies which features and versions are 
		 required. This is a space separated list in which each feature is specified 
		 by its name optionally followed by a space and a version number.
		 This method returns the first item of the list returned by getDOMImplementationList.
		 As an example, the string "XML 3.0 Traversal +Events 2.0" will request a DOM 
		 implementation that supports the module "XML" for its 3.0 version, a module 
		 that support of the "Traversal" module for any version, and the module 
		 "Events" for its 2.0 version. The module "Events" must be accessible using the 
		 method Node.getFeature() and DOMImplementation.getFeature(). 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 A method to request the first DOM implementation that supports the 
		 specified features. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementationRegistry.getDOMImplementation"><linktext>MDC - DOMImplementationRegistry.getDOMImplementation()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Bootstrap"><linktext>W3C - Bootstrapping</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMImplementationRegistry:dom.core:DOMImplementationRegistry:getDOMImplementationList"><apiName>getDOMImplementationList</apiName><shortdesc>
		 A method to request a list of DOM implementations that support the 
		 specified features and versions, as specified in DOM Features.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:DOMImplementationList</apiOperationClassifier><apiDesc>A list of DOM implementations that support the desired features.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>feature</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string that specifies which features and versions are required. 
		 This is a space separated list in which each feature is specified by its name 
		 optionally followed by a space and a version number. This is something like: 
		 "XML 3.0 Traversal +Events 2.0"
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 A method to request a list of DOM implementations that support the 
		 specified features and versions, as specified in DOM Features.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementationRegistry.getDOMImplementationList"><linktext>MDC - DOMImplementationRegistry.getDOMImplementationList()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Bootstrap"><linktext>W3C - Bootstrapping</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:DOMImplementation"><apiName>DOMImplementation</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:DOMImplementation:dom.core:DOMImplementation:createDocument"><apiName>createDocument</apiName><shortdesc>
		 This method creates a DOM document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified qualified name is not an XML name according to [XML 1.0].
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the 
		 qualifiedName is malformed, if the qualifiedName has a prefix and the 
		 namespaceURI is null, or if the qualifiedName is null and the 
		 namespaceURI is different from null, or if the qualifiedName has a 
		 prefix that is "xml" and the namespaceURI is different from 
		 "http://www.w3.org/XML/1998/namespace" [XML Namespaces], or if the DOM 
		 implementation does not support the "XML" feature but a non-null 
		 namespace URI was provided, since namespaces were defined by XML.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if doctype has 
		 already been used with a different document or was created from a 
		 different implementation.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Document</apiOperationClassifier><apiDesc>A new Document object with its document element. If the NamespaceURI, 
		 qualifiedName, and doctype are null, the returned Document is empty with 
		 no document element.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the document element to 
		 create or null.
		 </apiDesc></apiParam><apiParam><apiItemName>qualifiedName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The qualified name of the document element to 
		 be created or null.
		 </apiDesc></apiParam><apiParam><apiItemName>doctype</apiItemName><apiOperationClassifier>dom.core:DocumentType</apiOperationClassifier><apiDesc>The type of document to be created or null.
		 When doctype is not null, its Node.ownerDocument attribute is set to 
		 the document being created.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method creates a DOM document.
		 
		 </apiDesc><example>
		 <codeblock>
		 var doc = document.implementation.createDocument ('http://www.w3.org/1999/xhtml', 'html', null);
		 var body = document.createElementNS('http://www.w3.org/1999/xhtml', 'body');
		 body.setAttribute('id', 'abc');
		 doc.documentElement.appendChild(body);
		 alert(doc.getElementById('abc')); // [object HTMLBodyElement]</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementation.createDocument"><linktext>MDC - DOMImplementation.createDocument()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Level-2-Core-DOM-createDocument"><linktext>W3C - DOMImplementation.createDocument()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMImplementation:dom.core:DOMImplementation:createDocumentType"><apiName>createDocumentType</apiName><shortdesc>
		 Creates an empty DocumentType node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified qualified name is not an XML name according to [XML 1.0].
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the 
		 qualifiedName is malformed.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if 
		 the implementation does not support the feature "XML" and the 
		 language exposed through the Document does not support XML Namespaces. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:DocumentType</apiOperationClassifier><apiDesc>A new DocumentType node with Node.ownerDocument set to null.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>qualifiedName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The qualified name  of the document type to be created.
		 </apiDesc></apiParam><apiParam><apiItemName>publicId</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The external subset public identifier.
		 </apiDesc></apiParam><apiParam><apiItemName>systemId</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The external subset system identifier.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates an empty DocumentType node.
		 
		 <p>Entity declarations and notations 
		 are not made available. Entity reference expansions and default 
		 attribute additions do not occur.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var dt = document.implementation.createDocumentType('svg:svg', '-//W3C//DTD SVG 1.1//EN', 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd');
		 var d = document.implementation.createDocument('http://www.w3.org/2000/svg', 'svg:svg', dt);
		 alert(d.doctype.publicId); // -//W3C//DTD SVG 1.1//EN</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementation.createDocumentType"><linktext>MDC - DOMImplementation.createDocumentType()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Level-2-Core-DOM-createDocType"><linktext>W3C - DOMImplementation.createDocumentType()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMImplementation:dom.core:DOMImplementation:getFeature"><apiName>getFeature</apiName><shortdesc>
		 This method returns a specialized object which implements the 
		 specialized APIs of the specified feature and version, as specified 
		 in DOM Features.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMObject</apiOperationClassifier><apiDesc>Returns an object which implements the specialized APIs of the 
		 specified feature and version, if any, or null if there is no object 
		 which implements interfaces associated with that feature. If the DOMObject 
		 returned by this method implements the DOMImplementation  interface, it 
		 must delegate to the primary core DOMImplementation and not return results 
		 inconsistent with the primary core DOMImplementation such as hasFeature, 
		 getFeature, etc. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>feature</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the feature requested. Note that any plus 
		 sign "+" prepended to the name of the feature will be ignored since it 
		 is not significant in the context of this method. 
		 </apiDesc></apiParam><apiParam><apiItemName>version</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This is the version number of the feature to test. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method returns a specialized object which implements the 
		 specialized APIs of the specified feature and version, as specified 
		 in DOM Features. 
		 
		 <p>The specialized object may also be obtained by using 
		 binding-specific casting methods but is not necessarily expected to, 
		 as discussed in Mixed DOM Implementations. This method also allow 
		 the implementation to provide specialized objects which do not support 
		 the DOMImplementation interface. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 if (myNode.isSupported("+Events", "3.0")) {
		 	// (the plus sign "+" is irrelevant for the getFeature method itself and is ignored by this method anyway)
		 	EventTarget evt = (EventTarget) myNode.getFeature("Events", "3.0");
		 	// ...
		 }</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementation.getFeature"><linktext>MDC - DOMImplementation.getFeature()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMImplementation3-getFeature"><linktext>W3C - DOMImplementation.getFeature()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMFeatures"><linktext>W3C - DOM Features</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMImplementation:dom.core:DOMImplementation:hasFeature"><apiName>hasFeature</apiName><shortdesc>
		 Test if the DOM implementation implements a specific feature and version, 
		 as specified in DOM Features.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the feature is implemented in the specified version.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>feature</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the feature to test. 
		 </apiDesc></apiParam><apiParam><apiItemName>version</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This is the version number of the feature to test. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Test if the DOM implementation implements a specific feature and version, 
		 as specified in DOM Features.
		 
		 </apiDesc><example>
		 The following example uses the hasFeature method to test whether the object implements the DOM HTML standard.
		 <codeblock>var bSupported = document.implementation.hasFeature("HTML","1.0");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536446(VS.85).aspx"><linktext>MSDN - hasFeature Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/DOMImplementation.hasFeature"><linktext>MDC - DOMImplementation.hasFeature()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-5CED94D7"><linktext>W3C - DOMImplementation.hasFeature()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMFeatures"><linktext>W3C - DOM Features</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:DOMException"><apiName>DOMException</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.core:DocumentType"><apiName>DocumentType</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.core:ExceptionCode"><apiName>ExceptionCode</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.core:NameList"><apiName>NameList</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:NameList:dom.core:NameList:contains"><apiName>contains</apiName><shortdesc>
		 Test if a name is part of this NameList.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the name has been found.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>str</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name to look for. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Test if a name is part of this NameList. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NameList.contains"><linktext>MDC - NameList.contains()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#NameList-contains"><linktext>W3C - NameList.contains()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NameList:dom.core:NameList:containsNS"><apiName>containsNS</apiName><shortdesc>
		 Test if the pair namespaceURI/name is part of this NameList.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the pair namespaceURI/name has been found.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI to look for. 
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name to look for. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Test if the pair namespaceURI/name is part of this NameList. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NameList.containsNS"><linktext>MDC - NameList.containsNS()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#NameList-containsNS"><linktext>W3C - NameList.containsNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NameList:dom.core:NameList:getName"><apiName>getName</apiName><shortdesc>
		 Returns the indexth name item in the collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name at the indexth position in the NameList, or null if 
		 there is no name for the specified index or if the index is out of range. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the indexth name item in the collection. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NameList.getName"><linktext>MDC - NameList.getName()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#NameList-getName"><linktext>W3C - NameList.getName()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NameList:dom.core:NameList:getNamespaceURI"><apiName>getNamespaceURI</apiName><shortdesc>
		 Returns the indexth namespaceURI item in the collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI at the indexth position in the NameList, or null 
		 if there is no name for the specified index or if the index is out of range. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the indexth namespaceURI item in the collection. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NameList.getNamespaceURI"><linktext>MDC - NameList.getNamespaceURI()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#NameList-getNamespaceURI"><linktext>W3C - NameList.getNamespaceURI()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:EntityReference"><apiName>EntityReference</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.core:DOMLocator"><apiName>DOMLocator</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.core:Document"><apiName>Document</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>dom.style.css:DocumentCSS</apiBaseInterface><apiBaseInterface>dom.style.stylesheets:DocumentStyle</apiBaseInterface><apiBaseInterface>cssom.view:DocumentView</apiBaseInterface><apiBaseInterface>dom.views:DocumentView</apiBaseInterface><apiBaseInterface>dom.tr.range:DocumentRange</apiBaseInterface><apiBaseInterface>dom.events:DocumentEvent</apiBaseInterface><apiBaseInterface>dom.tr.traversal:DocumentTraversal</apiBaseInterface><apiBaseInterface>selectors:NodeSelector</apiBaseInterface><apiBaseInterface>dom.loadsave:DOMImplementationLS</apiBaseInterface><apiBaseInterface>dom.loadsave:DocumentLS</apiBaseInterface><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:Document:abort"><apiName>abort</apiName><shortdesc>
		 
		 If the document is currently being loaded as a result of the method load being invoked the loading and parsing is immediately 
		 aborted.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 If the document is currently being loaded as a result of the method load being invoked the loading and parsing is immediately 
		 aborted. The possibly partial result of parsing the document is discarded and the document is cleared. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2002/WD-DOM-Level-3-ASLS-20020409/load-save.html#LS-DocumentLS-abort"><linktext>W3C - DocumentLS.abort()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:adoptNode"><apiName>adoptNode</apiName><shortdesc>
		 Attempts to adopt a node from another document to this document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if the source 
		 node is of type DOCUMENT, DOCUMENT_TYPE.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised when 
		 the source node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The adopted node, or null if this operation fails, such as when 
		 the source node comes from a different implementation.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to move into this document.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Attempts to adopt a node from another document to this document. If supported, 
		 it changes the ownerDocument of the source node, its children, as well as the 
		 attached attribute nodes if there are any. If the source node has a parent it 
		 is first removed from the child list of its parent. This effectively allows 
		 moving a subtree from one document to another (unlike importNode() which create 
		 a copy of the source node instead of moving it). When it fails, applications 
		 should use Document.importNode() instead. Note that if the adopted node is 
		 already part of this document (i.e. the source and target document are the same), 
		 this method still has the effect of removing the source node from the child 
		 list of its parent, if any. The following list describes the specifics for 
		 each type of node.
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Attribute</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>ATTRIBUTE_NODE</entry>
		 		<entry>The ownerElement attribute is set to null and the specified flag is set to true on the adopted Attr. The descendants of the source Attr are recursively adopted.</entry>
		 	</row><row>
		 		<entry>DOCUMENT_FRAGMENT_NODE</entry>
		 		<entry>The descendants of the source node are recursively adopted.</entry>
		 	</row><row>
		 		<entry>DOCUMENT_NODE</entry>
		 		<entry>Document nodes cannot be adopted.</entry>
		 	</row><row>
		 		<entry>DOCUMENT_TYPE_NODE</entry>
		 		<entry>DocumentType nodes cannot be adopted.</entry>
		 	</row><row>
		 		<entry>ELEMENT_NODE</entry>
		 		<entry>Specified attribute nodes of the source element are adopted. Default attributes are discarded, though if the document being adopted into defines default attributes for this element name, those are assigned. The descendants of the source element are recursively adopted.</entry>
		 	</row><row>
		 		<entry>ENTITY_NODE</entry>
		 		<entry>Entity nodes cannot be adopted.</entry>
		 	</row><row>
		 		<entry>ENTITY_REFERENCE_NODE</entry>
		 		<entry>Only the EntityReference node itself is adopted, the descendants are discarded, since the source and destination documents might have defined the entity differently. If the document being imported into provides a definition for this entity name, its value is assigned.</entry>
		 	</row><row>
		 		<entry>NOTATION_NODE</entry>
		 		<entry>Notation nodes cannot be adopted.</entry>
		 	</row><row>
		 		<entry>PROCESSING_INSTRUCTION_NODE, TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE</entry>
		 		<entry>These 
		 nodes can all be adopted. No specifics.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 <p><b>Note:</b> Since it does not create new nodes unlike the Document.importNode() method, 
		 this method does not raise an INVALID_CHARACTER_ERR exception, and applications 
		 should use the Document.normalizeDocument() method to check if an imported name 
		 is not an XML name according to the XML version in use.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.adoptNode"><linktext>MDC - Document.adoptNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Document3-adoptNode"><linktext>W3C - Document.adoptNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:attachEvent"><apiName>attachEvent</apiName><shortdesc>
		 Binds the specified function to an event, so that the function gets called whenever 
		 the event fires on the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true (successful) or false (failed).
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The event string should include the "on" prefix (ie: "onload", "onclick" etc).
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The function or method to associate with the event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Binds the specified function to an event, so that the function gets called whenever 
		 the event fires on the object.
		 
		 </apiDesc><example>
		 <codeblock>if (window.attachEvent) window.attachEvent("onload", statusreport); //invoke function</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx"><linktext>MSDN - attachEvent Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:canDispatch"><apiName>canDispatch</apiName><shortdesc>
		 
		 Tests if the implementation can generate events of a specified type.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the implementation can generate and dispatch this event type
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.namespaceURI of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.type of the event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Tests if the implementation can generate events of a specified type. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-DocumentEvent-canDispatch"><linktext>W3C - DOM 3 Events: DocumentEvent.canDispatch()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createAttribute"><apiName>createAttribute</apiName><shortdesc>
		 Creates an Attr of the given name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified name is not an XML name according to the XML version 
		 in use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>A new Attr object with the nodeName  attribute set to name, 
		 and localName, prefix, and namespaceURI set to null. The value of 
		 the attribute is the empty string.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the attribute.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates an Attr of the given name. Note that the Attr instance can 
		 then be set on an Element  using the setAttributeNode method.
		 To create an attribute with a qualified name and namespace URI, use 
		 the createAttributeNS method.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 
		 &lt;head&gt;
		 &lt;title&gt; create/set/get Attribute example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function doAttrib() {
		 	var node = document.getElementById("div1");
		 	var a = document.createAttribute("my_attrib");
		 	a.nodeValue = "newVal";
		 	node.setAttributeNode(a);
		 	alert(node.getAttribute("my_attrib")); // "newVal"
		 }
		 
		 // alternative form not actually using createAttribute
		 //function doAttrib() {
		 //var node = document.getElementById("div1");
		 //node.setAttribute("my_attrib", "newVal");
		 //alert(node.getAttribute("my_attrib")); // "newVal"
		 //}
		 
		 &lt;/script&gt;
		 
		 &lt;/head&gt;
		 
		 &lt;body onload="doAttrib();"&gt;
		 	&lt;div id="div1"&gt;
		 		&lt;p&gt;Some content here&lt;/p&gt;
		 	&lt;/div&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536379%28VS.85%29.aspx"><linktext>MSDN - createAttribute Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.createAttribute"><linktext>MDC - Document.createAttribute()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1084891198"><linktext>W3C - Document.createAttribute()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createAttributeNS"><apiName>createAttributeNS</apiName><shortdesc>
		 Creates an attribute of the given qualified name and namespace URI.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified qualifiedName  is not an XML name according to the XML 
		 version in use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the qualifiedName 
		 is a malformed qualified name, if the qualifiedName has a prefix and 
		 the namespaceURI is null, if the qualifiedName has a prefix that is 
		 "xml" and the namespaceURI is different from 
		 "http://www.w3.org/XML/1998/namespace", if the qualifiedName or its 
		 prefix is "xmlns" and the namespaceURI is different from 
		 "http://www.w3.org/2000/xmlns/", or if the namespaceURI is 
		 "http://www.w3.org/2000/xmlns/" and neither the qualifiedName nor its 
		 prefix is "xmlns".
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: Always thrown if the 
		 current document does not support the "XML" feature, since namespaces 
		 were defined by XML.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>A new Attr object with the following attributes:
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Attribute</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry><codeph>Node.nodeName</codeph></entry>
		 		<entry>qualifiedName</entry>
		 	</row><row>
		 		<entry><codeph>Node.namespaceURI</codeph></entry>
		 		<entry><codeph>namespaceURI</codeph></entry>
		 	</row><row>
		 		<entry><codeph>Node.prefix</codeph></entry>
		 		<entry>prefix, extracted from <codeph>qualifiedName</codeph>, or <codeph>null</codeph> if there is no	prefix</entry>
		 	</row><row>
		 		<entry><codeph>Node.localName</codeph></entry>
		 		<entry>local name, extracted from <codeph>qualifiedName</codeph></entry>
		 	</row><row>
		 		<entry><codeph>Attr.name</codeph></entry>
		 		<entry>qualifiedName</entry>
		 	</row><row>
		 		<entry><codeph>Node.nodeValue</codeph></entry>
		 		<entry>the empty string</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the attribute to create.
		 </apiDesc></apiParam><apiParam><apiItemName>qualifiedName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The qualified name of the attribute to instantiate.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates an attribute of the given qualified name and namespace URI.
		 Per XML Namespaces, applications must use the value null as the 
		 namespaceURI parameter for methods if they wish to have no namespace.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.createAttributeNS"><linktext>MDC - Document.createAttributeNS()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-DocCrAttrNS"><linktext>W3C - Document.createAttributeNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createCDATASection"><apiName>createCDATASection</apiName><shortdesc>
		 Creates a CDATASection node whose value is the specified string.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if this 
		 document is an HTML document.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:CDATASection</apiOperationClassifier><apiDesc>The new CDATASection object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The data for the CDATASection contents.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a CDATASection node whose value is the specified string.
		 
		 <p><b>Note (Mozilla):</b> Will throw a NS_ERROR_DOM_INVALID_CHARACTER_ERR exception if one tries to 
		 submit the closing CDATA sequence ("]]&gt;") as part of the data, so unescaped user-provided data cannot 
		 be safely used without with this method getting this exception (createTextNode() can often be used in 
		 its place). </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var docu = new DOMParser().parseFromString('&lt;xml&gt;&lt;/xml&gt;',  "application/xml");
		 
		 var cdata = docu.createCDATASection('Some &lt;CDATA&gt; data &amp; then some');
		 
		 docu.getElementsByTagName('xml')[0].appendChild(cdata);
		 
		 alert(new XMLSerializer().serializeToString(docu));
		 // Displays: &lt;xml&gt;&lt;![CDATA[Some &lt;CDATA&gt; data &amp; then some]]&gt;&lt;/xml&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.createCDATASection"><linktext>MDC - Document.createCDATASection()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-D26C0AF8"><linktext>W3C - Document.createCDATASection()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createComment"><apiName>createComment</apiName><shortdesc>
		 Creates a Comment node given the specified string.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Comment</apiOperationClassifier><apiDesc>The new Comment object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The data for the node.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a Comment node given the specified string.
		 
		 <p><b>Note (Mozilla):</b> Will throw a NS_ERROR_DOM_INVALID_CHARACTER_ERR exception if one tries to 
		 include the "--" sequence as part of the data, so if based on user data, this potential string would 
		 need to be escaped or have its exception caught. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var docu = new DOMParser().parseFromString('&lt;xml&gt;&lt;/xml&gt;',  "application/xml");
		 
		 var comment = docu.createComment('This is a not-so-secret comment in your document');
		 
		 docu.getElementsByTagName('xml')[0].appendChild(comment);
		 
		 alert(new XMLSerializer().serializeToString(docu));
		 // Displays: &lt;xml&gt;&lt;!--This is a not-so-secret comment in your document--&gt;&lt;/xml&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536383%28VS.85%29.aspx"><linktext>MSDN - createComment Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.createComment"><linktext>MDC - Document.createComment()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1334481328"><linktext>W3C - Document.createComment()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createDocumentFragment"><apiName>createDocumentFragment</apiName><shortdesc>
		 Creates an empty DocumentFragment object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:DocumentFragment</apiOperationClassifier><apiDesc>A new DocumentFragment.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Creates an empty DocumentFragment object. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var frag = document.createDocumentFragment();
		 frag.appendChild(document.createTextNode('Ipsum Lorem'));
		 document.body.appendChild(frag);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536387%28VS.85%29.aspx"><linktext>MSDN - createDocumentFragment Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.createDocumentFragment"><linktext>MDC - Document.createDocumentFragment()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-35CB04B5"><linktext>W3C - Document.createDocumentFragment()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createElement"><apiName>createElement</apiName><shortdesc>
		 Creates an element of the type specified.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified name is not an XML name according to the XML version in 
		 use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>A new Element object with the nodeName attribute set to tagName, 
		 and localName, prefix, and namespaceURI set to null.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>tagName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the element type to instantiate. For XML, 
		 this is case-sensitive, otherwise it depends on the case-sensitivity 
		 of the markup language in use. In that case, the name is mapped to 
		 the canonical form of that markup by the DOM implementation.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates an element of the type specified. Note that the instance
		 returned implements the Element interface, so attributes can be 
		 specified directly on the returned object.
		 In addition, if there are known attributes with default values, 
		 Attr nodes representing them are automatically created and attached 
		 to the element.
		 To create an element with a qualified name and namespace URI, use 
		 the createElementNS method.
		 
		 <p><b>Note (Mozilla):</b> Gecko implementation of createElement doesn't conform 
		 to the DOM spec for XUL and XHTML documents: localName and namespaceURI are not set 
		 to null on the created element. See bug 280692 for details.</p>
		 
		 <p><b>Note (IE):</b> In Microsoft Internet Explorer 4.0, the only new elements you can create are  img,  area, and  
		 option. As of Internet Explorer 5, you can create all elements programmatically, except  frame and  
		 iframe. The properties of these created elements are read/write and can be accessed programmatically.
		 Before you use new objects, you must explicitly add them to their respective collections or to the 
		 document. To insert new elements into the current document, use the  insertBefore method or the  
		 appendChild method. </p>
		 
		 <p><b>Note (IE):</b> You must perform a second step when you use createElement to create the  
		 input element. The createElement method generates an input text box, because that is the default input 
		 type property. To insert any other kind of input element, first invoke createElement for input, and then 
		 set the type property to the appropriate value in the next line of code. </p>
		 
		 <p><b>Note (IE):</b> Attributes can be included with the tagName as long as the entire string is valid 
		 HTML. To include the  NAME attribute at run time on objects created with the createElement method, use the tagName.</p>
		 
		 <p><b>Note (IE):</b> Use the tagName to include attributes when form elements are created that will be reset 
		 using the  reset method or a  BUTTON with a  TYPE attribute value of reset.</p>
		 
		 </apiDesc><example>
		 This creates a new &lt;div&gt; and inserts it before the element with id "org_div1":
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;||Working with elements||&lt;/title&gt;
		 &lt;/head&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 var my_div = null;
		 var newDiv = null;
		 
		 function addElement() {
		 // create a new div element
		 // and give it some content
		 newDiv = document.createElement("div");
		 newDiv.innerHTML = "&lt;h1&gt;Hi there and greetings!&lt;/h1&gt;";
		 
		 // add the newly created element and it's content into the DOM
		 my_div = document.getElementById("org_div1");
		 document.body.insertBefore(newDiv, my_div);
		 }
		 
		 
		 &lt;/script&gt;
		 
		 &lt;body onload="addElement()"&gt;
		 	&lt;div id='org_div1'&gt; The text above has been created dynamically.&lt;/div&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536389%28VS.85%29.aspx"><linktext>MSDN - createElement Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.createElement"><linktext>MDC - Document.createElement()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-2141741547"><linktext>W3C - Document.createElement()</linktext></link><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=280692"><linktext>bug 280692</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createElementNS"><apiName>createElementNS</apiName><shortdesc>
		 Creates an element of the given qualified name and namespace URI.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified qualifiedName is not an XML name according to the XML 
		 version in use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the qualifiedName 
		 is a malformed qualified name, if the qualifiedName has a prefix and the 
		 namespaceURI is null, or if the qualifiedName has a prefix that is "xml" 
		 and the namespaceURI is different from 
		 "http://www.w3.org/XML/1998/namespace" [XML Namespaces], or if the 
		 qualifiedName or its prefix is "xmlns" and the namespaceURI is different 
		 from "http://www.w3.org/2000/xmlns/", or if the namespaceURI is 
		 "http://www.w3.org/2000/xmlns/" and neither the qualifiedName nor its 
		 prefix is "xmlns".
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: Always thrown if the 
		 current document does not support the "XML" feature, since namespaces 
		 were defined by XML.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>A new Element object with the following attributes:
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Attribute</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry><codeph>Node.nodeName</codeph></entry>
		 		<entry>qualifiedName</entry>
		 	</row><row>
		 		<entry><codeph>Node.namespaceURI</codeph></entry>
		 		<entry><codeph>namespaceURI</codeph></entry>
		 	</row><row>
		 		<entry><codeph>Node.prefix</codeph></entry>
		 		<entry>prefix, extracted from <codeph>qualifiedName</codeph>, or <codeph>null</codeph> if there is no	prefix</entry>
		 	</row><row>
		 		<entry><codeph>Node.localName</codeph></entry>
		 		<entry>local name, extracted from <codeph>qualifiedName</codeph></entry>
		 	</row><row>
		 		<entry><codeph>Element.tagName</codeph></entry>
		 		<entry>qualifiedName</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the element to create.
		 </apiDesc></apiParam><apiParam><apiItemName>qualifiedName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The qualified name of the element type to instantiate.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates an element of the given qualified name and namespace URI.
		 Per XML Namespaces, applications must use the value null as the 
		 namespaceURI parameter for methods if they wish to have no namespace.
		 
		 </apiDesc><example>
		 This creates a new &lt;div&gt; element in the XHTML namespace and appends it to the vbox element. Although 
		 this is not an extremely useful XUL document, it does demonstrate the use of elements from two different 
		 namespaces within a single document:
		 <codeblock>
		 &lt;?xml version="1.0"?&gt;
		 &lt;page xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
		 		xmlns:html="http://www.w3.org/1999/xhtml"
		 		title="||Working with elements||"
		 		onload="init()"&gt;
		 
		 &lt;script type="text/javascript"&gt;&lt;![CDATA[
		 var container;
		 var newdiv;
		 var txtnode;
		 
		 function init(){
		 	container = document.getElementById("ContainerBox");
		 	newdiv = document.createElementNS("http://www.w3.org/1999/xhtml","html:div");
		 	txtnode = document.createTextNode("This is text that was constructed dynamically with createElementNS and createTextNode then inserted into the document using appendChild.");
		 	newdiv.appendChild(txtnode);
		 	container.appendChild(newdiv);
		 }
		 
		 ]]&gt;&lt;/script&gt;
		 
		 	&lt;vbox id='ContainerBox' flex='1'&gt;
		 		&lt;html:div&gt;
		 			The script on this page will add dynamic content below:
		 		&lt;/html:div&gt;
		 	&lt;/vbox&gt;
		 &lt;/page&gt;</codeblock>
		 
		 <p>The example given above uses inline script which is not recommended in XHTML documents. This particular 
		 example is actually an XUL document with embedded XHTML, however, the recommendation still applies. Inline 
		 script does not cause any problems for this short example, however, for any serious work you should learn 
		 about Properly Using CSS and JavaScript in XHTML Documents. </p>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.createElementNS"><linktext>MDC - Document.createElementNS()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-DocCrElNS"><linktext>W3C - Document.createElementNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createEntityReference"><apiName>createEntityReference</apiName><shortdesc>
		 Creates an EntityReference object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified name is not an XML name according to the XML version in 
		 use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if this document 
		 is an HTML document.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:EntityReference</apiOperationClassifier><apiDesc>The new EntityReference object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the entity to reference.
		 Unlike Document.createElementNS or Document.createAttributeNS, no 
		 namespace well-formed checking is done on the entity name. Applications 
		 should invoke Document.normalizeDocument() with the parameter "namespaces" 
		 set to true in order to ensure that the entity name is namespace well-formed. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates an EntityReference object. In addition, if the referenced 
		 entity is known, the child list of the EntityReference node is made 
		 the same as that of the corresponding Entity node.
		 
		 <p><b>Note:</b> If any descendant of the Entity node has an unbound namespace 
		 prefix, the corresponding descendant of the created EntityReference 
		 node is also unbound; (its namespaceURI is null). The DOM Level 2 and 
		 3 do not support any mechanism to resolve namespace prefixes in this case.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.createEntityReference"><linktext>MDC - Document.createEntityReference()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-392B75AE"><linktext>W3C - Document.createEntityReference()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createEvent"><apiName>createEvent</apiName><shortdesc>
		 
		 Creates an event object of the type specified.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.events:Event</apiOperationClassifier><apiDesc>The newly created event object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The eventType parameter specifies the name of the 
		 DOM Events interface to be supported by the created event object, 
		 e.g. "Event", "MouseEvent", "MutationEvent" and so on. If the Event 
		 is to be dispatched via the EventTarget.dispatchEvent() method the 
		 appropriate event initialization method must be called after creation 
		 in order to initialize the Event's values.
		 
		 As an example, a user wishing to synthesize some kind of UIEvent would 
		 invoke DocumentEvent.createEvent("UIEvent"). The UIEvent.initUIEventNS() 
		 ethod could then be called on the newly created UIEvent object to 
		 set the specific type of user interface event to be dispatched, DOMActivate 
		 for example, and set its context information, e.g. UIEvent.detail in 
		 this example.
		 
		 For backward compatibility reason, "UIEvents", "MouseEvents", "MutationEvents", 
		 and "HTMLEvents" feature names are valid values for the parameter eventType 
		 and represent respectively the interfaces "UIEvent", "MouseEvent", 
		 "MutationEvent", and "Event", and the characters 'a'..'z' are considered 
		 equivalent to the characters 'A'..'Z'.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Creates an event object of the type specified. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-DocumentEvent-createEvent"><linktext>W3C - DOM 3 Events: DocumentEvent.createEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createEventObject"><apiName>createEventObject</apiName><shortdesc>
		 Generates an  event object to pass event context information when you use the  fireEvent method.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.events:Event</apiOperationClassifier><apiDesc>Returns an event object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>existingEvent</apiItemName><apiData>null</apiData><apiOperationClassifier>dom.events:Event</apiOperationClassifier><apiDesc>A object that specifies an existing event object on which to base the new object.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Generates an  event object to pass event context information when you use the  fireEvent method.
		 
		 </apiDesc><example>
		 The following sample shows how to use the createEventObject method with the fireEvent method.
		 <codeblock>
		 &lt;html&gt;
		 &lt;body&gt;
		 &lt;script&gt;
		 	function OuterClick() {
		 		if(event.expando == "from_inner") {
		 			alert("Event actually fired by clicking on inner DIV!")
		 		} else {
		 			alert("Event fired by clicking on outer DIV!")
		 		}
		 	}
		 	function InnerClick() {
		 		var eventObj = document.createEventObject();
		 		// Set an expando property on the event object. This will be used by the 
		 		// event handler to determine what element was clicked on.
		 		eventObj.expando = "from_inner";
		 		parent.document.all.Outer.fireEvent("onclick",eventObj);
		 		event.cancelBubble = true;
		 	}
		 &lt;/script&gt;
		 &lt;div id="Outer" onclick="OuterClick()" style="height:200;width:200;padding:50;background-color:mistyrose"&gt;
		 	&lt;div id="Inner" onclick="InnerClick()" style="height:100;width:100;padding:25;background-color:lavender"&gt;&lt;/div&gt;
		 &lt;/div&gt;
		 
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536390%28VS.85%29.aspx"><linktext>MSDN - createEventObject Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createLSInput"><apiName>createLSInput</apiName><shortdesc>
		 
		 Create a new empty input source object where LSInput.characterStream, LSInput.byteStream, LSInput.stringData  
		 LSInput.systemId, LSInput.publicId, LSInput.baseURI, and LSInput.encoding are null, and LSInput.certifiedText is false.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.loadsave:LSInput</apiOperationClassifier><apiDesc>The newly created input object. 
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Create a new empty input source object where LSInput.characterStream, LSInput.byteStream, LSInput.stringData  
		 LSInput.systemId, LSInput.publicId, LSInput.baseURI, and LSInput.encoding are null, and LSInput.certifiedText is false. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-DOMImplementationLS-createLSInput"><linktext>W3C - DOMImplementationLS.createLSInput()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createLSOutput"><apiName>createLSOutput</apiName><shortdesc>
		 
		 Create a new empty output destination object where LSOutput.characterStream, LSOutput.byteStream, LSOutput.systemId, 
		 LSOutput.encoding are null.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.loadsave:LSOutput</apiOperationClassifier><apiDesc>The newly created output object. 
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Create a new empty output destination object where LSOutput.characterStream, LSOutput.byteStream, LSOutput.systemId, 
		 LSOutput.encoding are null. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-DOMImplementationLS-createLSOutput"><linktext>W3C - DOMImplementationLS.createLSOutput()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createLSParser"><apiName>createLSParser</apiName><shortdesc>
		 
		 Create a new LSParser.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.loadsave:LSParser</apiOperationClassifier><apiDesc>The newly created LSParser object. This LSParser is either synchronous or asynchronous depending on the value of the mode argument. 
		 
		 <p><b>Note:</b> By default, the newly created LSParser does not contain a DOMErrorHandler, 
		 i.e. the value of the "error-handler" configuration parameter is null. However, implementations may provide 
		 a default error handler at creation time. In that case, the initial value of the "error-handler" configuration 
		 parameter on the new LSParser object contains a reference to the default error handler. </p>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>mode</apiItemName><apiType value="Number"/><apiDesc>The mode argument is either MODE_SYNCHRONOUS or MODE_ASYNCHRONOUS, if mode is 
		 MODE_SYNCHRONOUS then the LSParser that is created will operate in synchronous mode, if it's 
		 MODE_ASYNCHRONOUS then the LSParser that is created will operate in asynchronous mode. 
		 </apiDesc></apiParam><apiParam><apiItemName>schemaType</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>An absolute URI representing the type of the schema language used during 
		 the load of a Document using the newly created LSParser. Note that no lexical checking is done 
		 on the absolute URI. In order to create a LSParser for any kind of schema types (i.e. the LSParser 
		 will be free to use any schema found), use the value null. 
		 
		 <p><b>Note:</b> For W3C XML Schema [XML Schema Part 1], applications must use the value 
		 "http://www.w3.org/2001/XMLSchema". For XML DTD [XML 1.0], applications must use the value 
		 "http://www.w3.org/TR/REC-xml". Other Schema languages are outside the scope of the W3C and therefore 
		 should recommend an absolute URI in order to use this method. </p>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Create a new LSParser. The newly constructed parser may then be configured by means of its 
		 DOMConfiguration object, and used to parse documents by means of its parse method. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-DOMImplementationLS-createLSParser"><linktext>W3C - DOMImplementationLS.createLSParser()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createLSSerializer"><apiName>createLSSerializer</apiName><shortdesc>
		 
		 Create a new LSSerializer object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.loadsave:LSSerializer</apiOperationClassifier><apiDesc>The newly created LSSerializer object.
		 
		 <p><b>Note:</b> By default, the newly created LSSerializer  has no DOMErrorHandler, i.e. the value of the 
		 "error-handler" configuration parameter is null. However, implementations may provide a default error handler at creation time. 
		 In that case, the initial value of the "error-handler"  configuration parameter on the new LSSerializer object contains a 
		 reference to the default error handler. </p>
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Create a new LSSerializer object. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-DOMImplementationLS-createLSSerializer"><linktext>W3C - DOMImplementationLS.createLSSerializer()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createNodeIterator"><apiName>createNodeIterator</apiName><shortdesc>
		 
		 Create a new NodeIterator over the subtree rooted at the specified node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.tr.traversal:NodeIterator</apiOperationClassifier><apiDesc>The newly created NodeIterator.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>root</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node which will be iterated together with its children. The iterator is initially positioned 
		 just before this node. The <codeph>whatToShow</codeph> flags and the filter, if any, are not considered when setting this position. The <codeph>root</codeph> must not be <codeph>null</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>whatToShow</apiItemName><apiType value="Number"/><apiDesc>This flag specifies which node types may appear in the logical view of the tree presented 
		 by the iterator. These flags can be combined using OR.
		 </apiDesc></apiParam><apiParam><apiItemName>filter</apiItemName><apiOperationClassifier>dom.tr.traversal:NodeFilter</apiOperationClassifier><apiDesc>The <codeph>NodeFilter</codeph> to be used with this <codeph>TreeWalker</codeph>, or <codeph>null</codeph> to indicate no filter.
		 </apiDesc></apiParam><apiParam><apiItemName>entityReferenceExpansion</apiItemName><apiType value="Boolean"/><apiDesc>The value of this flag determines whether entity reference nodes are expanded.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Create a new NodeIterator over the subtree rooted at the specified node. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var nodeIterator = document.createNodeIterator(
		 	document.body,
		 	NodeFilter.SHOW_ELEMENT,
		 	{ acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },
		 	false
		 	);
		 var nodeList = new Array();
		 var currentNode;
		 
		 while (currentNode = nodeIterator.nextNode()) {
		 	nodeList.push(currentNode);
		 }</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Document.createNodeIterator"><linktext>MDC - Document: createNodeIterator Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-Document"><linktext>W3C - DOM Level 2 Traversal: createNodeIterator Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createProcessingInstruction"><apiName>createProcessingInstruction</apiName><shortdesc>
		 Creates a ProcessingInstruction node given the specified name and 
		 data strings.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the specified
		 target is not an XML name according to the XML version in use specified in 
		 the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if this document is 
		 an HTML document.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:ProcessingInstruction</apiOperationClassifier><apiDesc>The new ProcessingInstruction object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The target part of the processing instruction.
		 Unlike Document.createElementNS or Document.createAttributeNS, no namespace 
		 well-formed checking is done on the target name. Applications should invoke 
		 Document.normalizeDocument() with the parameter "namespaces" set to true in 
		 order to ensure that the target name is namespace well-formed. 
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The data for the node.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a ProcessingInstruction node given the specified name and 
		 data strings.
		 
		 </apiDesc><example>
		 <codeblock>
		 var docu = new DOMParser().parseFromString('&lt;xml&gt;&lt;/xml&gt;',  "application/xml");
		 
		 var pi = docu.createProcessingInstruction('xml-stylesheet', 'href="mycss.css" type="text/css"');
		 
		 docu.getElementsByTagName('xml')[0].appendChild(pi);
		 
		 alert(new XMLSerializer().serializeToString(docu));
		 // Displays: &lt;xml&gt;&lt;?xml-stylsheet href="mycss.css" type="text/css"?&gt;&lt;/xml&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.createProcessingInstruction"><linktext>MDC - Document.createProcessingInstruction()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-135944439"><linktext>W3C - Document.createProcessingInstruction()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createRange"><apiName>createRange</apiName><shortdesc>
		 
		 This interface can be obtained from the object implementing the Document interface using binding-specific 
		 casting methods.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.tr.range:Range</apiOperationClassifier><apiDesc>The initial state of the Range returned from this method is such that both of its boundary-points 
		 are positioned at the beginning of the corresponding Document, before any content. The Range returned can 
		 only be used to select content associated with this Document, or with DocumentFragments and Attrs for which 
		 this Document is the ownerDocument.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 This interface can be obtained from the object implementing the Document interface using binding-specific 
		 casting methods. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var range = document.createRange();
		 range.setStart(startNode, startOffset);
		 range.setEnd(endNode, endOffset);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536394%28VS.85%29.aspx"><linktext>MSDN: createRange Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.createRange"><linktext>MDC - Document: createRange Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-DocumentRange-idl"><linktext>W3C - DOM Level 2 Range: DocumentRange</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createStyleSheet"><apiName>createStyleSheet</apiName><shortdesc>
		 Creates a style sheet for the document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.style.stylesheets:StyleSheet</apiOperationClassifier><apiDesc>Returns a  styleSheet object. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>url</apiItemName><apiData>null</apiData><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies how to add the style sheet to the document. If a file name is specified for the URL, the style information is added as a  link object. If the URL contains style information, it is added to the  style object.
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>The index that indicates where the new style sheet is inserted in the  styleSheets collection. The default is to insert the new style sheet at the end of the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a style sheet for the document. 
		 
		 <p><b>Note (IE):</b> You can create up to 31 styleSheet objects with the createStyleSheet method. After 
		 that, the method returns an "Invalid Argument" exception. To create additional objects, use  createElement and 
		 append them to the  HEAD of the document as follows: 
		 
		 <codeblock>
		 var styleSheet = document.createElement('STYLE');
		 document.documentElement.firstChild.appendChild(styleSheet);</codeblock>
		 </p>
		 
		 </apiDesc><example>
		 This example uses the createStyleSheet method to create a link to a style sheet.
		 <codeblock>document.createStyleSheet('styles.css');</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx"><linktext>MSDN - createStyleSheet Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createTextNode"><apiName>createTextNode</apiName><shortdesc>
		 Creates a Text node given the specified string.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Text</apiOperationClassifier><apiDesc>The new Text object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The data for the node.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a Text node given the specified string.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;createTextNode example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function addTextNode() {
		 	var newtext = document.createTextNode(" Some text added dynamically. ");
		 	var para = document.getElementById("p1");
		 	para.appendChild(newtext);
		 }
		 
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body&gt;
		 &lt;div style="border: 1px solid red"&gt;
		 &lt;p id="p1"&gt;First line of paragraph.&lt;br /&gt;&lt;/p&gt;
		 &lt;/div&gt;&lt;br /&gt;
		 
		 &lt;button onclick="addTextNode();"&gt;add another textNode.&lt;/button&gt;
		 
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536400%28VS.85%29.aspx"><linktext>MSDN - createTextNode Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.createTextNode"><linktext>MDC - Document.createTextNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1975348127"><linktext>W3C - Document.createTextNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createTreeWalker"><apiName>createTreeWalker</apiName><shortdesc>
		 
		 Create a new TreeWalker over the subtree rooted at the specified node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.tr.traversal:TreeWalker</apiOperationClassifier><apiDesc>The newly created <codeph>TreeWalker</codeph>.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>root</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node which will serve as the <codeph>root</codeph> for the TreeWalker. The whatToShow flags and the NodeFilter 
		 are not considered when setting this value; any node type will be accepted as the <codeph>root</codeph>. The <codeph>currentNode</codeph> of the 
		 TreeWalker is initialized to this node, whether or not it is visible. The <codeph>root</codeph> functions as a stopping point for 
		 traversal methods that look upward in the document structure, such as <codeph>parentNode</codeph> and nextNode. The <codeph>root</codeph> must not 
		 be <codeph>null</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>whatToShow</apiItemName><apiType value="Number"/><apiDesc>This flag specifies which node types may appear in the logical view of the tree presented by 
		 the tree-walker. These flags can be combined using OR.
		 </apiDesc></apiParam><apiParam><apiItemName>filter</apiItemName><apiOperationClassifier>dom.tr.traversal:NodeFilter</apiOperationClassifier><apiDesc>The <codeph>NodeFilter</codeph> to be used with this <codeph>TreeWalker</codeph>, or <codeph>null</codeph> to indicate no filter.
		 </apiDesc></apiParam><apiParam><apiItemName>entityReferenceExpansion</apiItemName><apiType value="Boolean"/><apiDesc>If this flag is false, the contents of <codeph>EntityReference</codeph> nodes are not presented in the logical view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Create a new TreeWalker over the subtree rooted at the specified node. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var treeWalker = document.createTreeWalker(
		 	document.body,
		 	NodeFilter.SHOW_ELEMENT,
		 	{ acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },
		 	false
		 	);
		 var nodeList = new Array();
		 while(treeWalker.nextNode()) nodeList.push(treeWalker.currentNode);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Document.createNodeIterator"><linktext>MDC - Document: createNodeIterator Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-Document"><linktext>W3C - DOM Level 2 Traversal: createNodeIterator Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:detachEvent"><apiName>detachEvent</apiName><shortdesc>
		 Unbinds the specified function from the event, so that the function stops receiving notifications when the event fires.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies any of the standard  DHTML Events.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Specifies the function previously set using the attachEvent method.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Unbinds the specified function from the event, so that the function stops receiving notifications when the event fires.
		 
		 <p><b>Note (IE):</b> Behaviors that attach to events using the attachEvent method must explicitly call 
		 the detachEvent method to stop receiving notifications from the page when the  ondetach event fires. 
		 Behaviors that attach to events using the  PUBLIC:ATTACH element automatically stop receiving notifications 
		 when the behavior detaches from the element, and thus do not need to call the detachEvent method.</p>
		 
		 </apiDesc><example>
		 This example calls the detachEvent method from an HTML Component (HTC) when the highlighting effect is 
		 removed from the page, causing the ondetach event to fire.
		 <codeblock>
		 &lt;PUBLIC:ATTACH EVENT="ondetach" ONEVENT="cleanup()" /&gt;
		 
		 &lt;script language="JScript"&gt;
		 attachEvent ('onmouseover', Hilite);
		 attachEvent ('onmouseout', Restore);
		 
		 function cleanup() {
		 	detachEvent ('onmouseover', Hilite);
		 	detachEvent ('onmouseout', Restore);
		 }
		 
		 function Hilite() {
		 	if (event.srcElement == element) { 
		 		normalColor = style.color;  
		 		runtimeStyle.color  = "red";
		 		runtimeStyle.cursor = "hand";
		 	}
		 }
		 
		 function Restore() {
		 	if (event.srcElement == element) {
		 		runtimeStyle.color  = normalColor;
		 		runtimeStyle.cursor = "";
		 	}
		 }
		 &lt;/script&gt;</codeblock>
		 
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536411%28VS.85%29.aspx"><linktext>MSDN - detachEvent Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:elementFromPoint"><apiName>elementFromPoint</apiName><shortdesc>
		 
		 Returns the element from the document whose elementFromPoint method is being called which is the 
		 topmost element which lies under the given point.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0_alternative"/><apiTool name="Safari" version="3.1_alternative"/><apiTool name="Safari" version="4.0b_alternative"/><apiTool name="Chrome" version="1.0_alternative"/><apiTool name="Chrome" version="2.0_alternative"/><apiTool name="Opera" version="9.62_incorrect"/><apiTool name="Opera" version="10.0a_alternative"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>The element at x,y in the viewport
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>The X coordinate to check, in CSS pixels relative to the upper-left corner of the document's containing window or frame.
		 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>The Y coordinate to check, in CSS pixels relative to the upper-left corner of the document's containing window or frame.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns the element from the document whose elementFromPoint method is being called which is the 
		 topmost element which lies under the given point. 
		 
		 <p>The point is specified via coordinates, in CSS pixels, relative to the upper-left-most point 
		 in the window or frame containing the document.</p>
		 
		 <p><b>Note:</b> If the element at the specified point belongs to another document (for example, 
		 an iframe's subdocument), the element in the DOM of the document the method is called on (in the iframe 
		 case, the iframe itself) is returned. If the element at the given point is anonymous or XBL generated 
		 content, such as a textbox's scroll bars, then the first non-anonymous ancestor element (for example, 
		 the textbox) is returned.</p>
		 
		 <p><b>Note:</b> If the specified point is outside the visible bounds of the document or either 
		 coordinate is negative, the result is null.</p>
		 
		 <p><b>Note:</b> The browsers do not entirely agree which mouse coordinates this method needs. 
		 IE and Firefox 3 need clientX/Y (relative to the viewport), while Opera and Safari need pageX/Y (relative 
		 to the document).</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;elementFromPoint example&lt;/title&gt;
		 		&lt;script type="text/javascript"&gt;
		 			function changeColor(newColor) {
		 				elem = document.elementFromPoint(2, 2);
		 				elem.style.color = newColor;
		 			}
		 		&lt;/script&gt;
		 	&lt;/head&gt;
		 
		 	&lt;body&gt;
		 		&lt;p id="para1"&gt;Some text here&lt;/p&gt;
		 		&lt;button onclick="changeColor('blue');"&gt;blue&lt;/button&gt;
		 		&lt;button onclick="changeColor('red');"&gt;red&lt;/button&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;
		 </codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536417(VS.85).aspx"><linktext>MSDN: elementFromPoint Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.elementFromPoint"><linktext>MDC - Document: elementFromPoint Method</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-documentview-interface"><linktext>W3C - CSSOM View: elementFromPoint Method</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#documentview"><linktext>Quirksmode: DocumentView and ElementView methods</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:enableStylesheetsForSet"><apiName>enableStylesheetsForSet</apiName><shortdesc>
		 
		 Invoking this method must change the disabled attribute on each StyleSheet object with a title in the 
		 styleSheets attribute, so that all those whose title matches the name argument are enabled, and all others 
		 are disabled.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOM" version="0"/><apiSince version="CSSOM 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Invoking this method must change the disabled attribute on each StyleSheet object with a title in the 
		 styleSheets attribute, so that all those whose title matches the name argument are enabled, and all others 
		 are disabled. Title matches must be case-sensitive.
		 
		 <p>Invoking this method with the empty string value must disable all alternative and preferred style sheets
		 (but does not change the state of persistent style sheets).</p>
		 
		 <p>Invoking this method with the null value must have no effect.</p>
		 
		 <p>Style sheets that do not have a title are never affected by this method. This method does not change the 
		 values of the lastStyleSheetSet or preferredStyleSheetSet  attributes.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/document.enableStyleSheetsForSet"><linktext>MDC - Document.enableStylesheetsForSet()</linktext></link><link href="http://dev.w3.org/csswg/cssom/#documentstyle-enablestylesheetsforset"><linktext>W3C - DocumentStyle.enableStylesheetsForSet()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:getElementsByTagName"><apiName>getElementsByTagName</apiName><shortdesc>
		 Returns a NodeList of all the Elements in document order with a 
		 given tag name and are contained in the document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier><apiDesc>A new NodeList object containing all the matched Elements.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>tagname</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the tag to match on. The special 
		 value "~~" matches all tags. For XML, the tagname  parameter is 
		 case-sensitive, otherwise it depends on the case-sensitivity of 
		 the markup language in use. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a NodeList of all the Elements in document order with a 
		 given tag name and are contained in the document.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536439%28VS.85%29.aspx"><linktext>MSDN - getElementsByTagName Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.getElementsByTagName"><linktext>MDC - Document.getElementsByTagName()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-A6C9094"><linktext>W3C - Document.getElementsByTagName()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:getElementsByTagNameNS"><apiName>getElementsByTagNameNS</apiName><shortdesc>
		 Returns a NodeList of all the Elements with a given local name and 
		 namespace URI in document order.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier><apiDesc>A new NodeList object containing all the matched Elements.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the elements to match on. 
		 The special value "~~" matches all namespaces.
		 </apiDesc></apiParam><apiParam><apiItemName>localName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The local name of the elements to match on. The 
		 special value "~~" matches all local names.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a NodeList of all the Elements with a given local name and 
		 namespace URI in document order.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.getElementsByTagNameNS"><linktext>MDC - Document.getElementsByTagNameNS()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-getElBTNNS"><linktext>W3C - Document.getElementsByTagNameNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:getElemenyById"><apiName>getElemenyById</apiName><shortdesc>
		 Returns the Element that has an ID attribute with the given value.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMHTML" version="1"/><apiSince version="DOMHTML 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 2
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>The matching element or null if there is none.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>elementId</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The unique id value for an element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the Element that has an ID attribute with the given value. 
		 If no such element exists, this returns null. If more than one 
		 element has an ID attribute with that value, what is returned is undefined.
		 
		 <p><b>Note:</b> Attributes with the name "ID" or "id" are not of type ID 
		 unless so defined.</p>
		 
		 <p><b>Note:</b> Simply creating an element and assigning an ID will not make 
		 the element accessible by getElementById. Instead one needs to insert the element first 
		 into the document tree with insertBefore or a similar method, probably into a hidden div. 
		 
		 <codeblock>var element = document.createElement("div");
		 element.id = 'testqq';
		 var el = document.getElementById('testqq'); // el will be null!</codeblock>
		 
		 New users should note that the capitalization of 'Id' must be correct for the code to function 
		 - 'getElementByID' does not work, however natural it may seem. 
		 </p>
		 
		 <p><b>Note (IE):</b> In IE8 mode, getElementById performs a case-sensitive match on the 
		 ID attribute only. In IE7 mode and previous modes, this method performs a case-insensitive match 
		 on both the ID and NAME attributes, which might produce unexpected results.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;getElementById example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 function changeColor(newColor) {
		 	elem = document.getElementById("para1");
		 	elem.style.color = newColor;
		 }
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body&gt;
		 &lt;p id="para1"&gt;Some text here&lt;/p&gt;
		 &lt;button onclick="changeColor('blue');"&gt;blue&lt;/button&gt;
		 &lt;button onclick="changeColor('red');"&gt;red&lt;/button&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536437%28VS.85%29.aspx"><linktext>MSDN - getElementById Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.getElementById"><linktext>MDC - Document.getElemenyById()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-getElBId"><linktext>W3C - Document.getElemenyById()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:getOverrideStyle"><apiName>getOverrideStyle</apiName><shortdesc>
		 
		 This method is used to retrieve the override style declaration for a specified element and a specified pseudo-element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.style.css:CSSStyleDeclaration</apiOperationClassifier><apiDesc>The override style declaration.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>elt</apiItemName><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>The element whose style is to be modified. This parameter cannot be null.
		 </apiDesc></apiParam><apiParam><apiItemName>pseudoElt</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The pseudo-element or null if none.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 This method is used to retrieve the override style declaration for a specified element and a specified pseudo-element. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-DocumentCSS-getOverrideStyle"><linktext>W3C - DOM Level 2 Style: DocumentCSS.getOverrideStyle()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:importNode"><apiName>importNode</apiName><shortdesc>
		 Imports a node from another document to this document, without altering or removing the source 
		 node from the original document; this method creates a new copy of the source node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if the type of node being imported is not supported.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if one of the imported names is not an XML name 
		 according to the XML version in use specified in the Document.xmlVersion attribute. This may happen when 
		 importing an XML 1.1 element into an XML 1.0 document, for instance.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The imported node that belongs to this Document.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>importedNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to import.
		 </apiDesc></apiParam><apiParam><apiItemName>deep</apiItemName><apiType value="Boolean"/><apiDesc>If true, recursively import the subtree under the specified node; if false, import only 
		 the node itself, as explained above. This has no effect on nodes that cannot have any children, and on 
		 Attr, and EntityReference nodes.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Imports a node from another document to this document, without altering or removing the source 
		 node from the original document; this method creates a new copy of the source node. The returned 
		 node has no parent; (parentNode is null).
		 
		 <p>For all nodes, importing a node creates a node object owned by the importing document, with attribute 
		 values identical to the source node's nodeName and nodeType, plus the attributes related to 
		 namespaces (prefix, localName, and namespaceURI). As in the cloneNode operation, the source node is 
		 not altered. User data associated to the imported node is not carried over. However, if any 
		 UserDataHandlers has been specified along with the associated data these handlers will be called with 
		 the appropriate parameters before this method returns.</p>
		 
		 <p>Additional information is copied as appropriate to the nodeType, attempting to mirror the behavior 
		 expected if a fragment of XML or HTML source was copied from one document to another, recognizing that 
		 the two documents may have different DTDs in the XML case. The following list describes the specifics
		 for each type of node.</p>
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Node Type</entry><entry>Description</entry></row></thead><tbody><row>
		 		<entry>ATTRIBUTE_NODE</entry>
		 		<entry>The ownerElement attribute is set to null and the specified flag is set to true on the generated 
		 Attr. The descendants of the source Attr are recursively imported and the resulting nodes reassembled to 
		 form the corresponding subtree. Note that the deep parameter has no effect on Attr nodes; they always 
		 carry their children with them when imported.</entry>
		 	</row><row>
		 		<entry>DOCUMENT_FRAGMENT_NODE</entry>
		 		<entry>If the deep option was set to true, the descendants of the source DocumentFragment are recursively imported and the resulting nodes reassembled under the imported DocumentFragment to form the corresponding subtree. Otherwise, this simply generates an empty DocumentFragment.</entry>
		 	</row><row>
		 		<entry>DOCUMENT_NODE</entry>
		 		<entry>Document nodes cannot be imported.</entry>
		 	</row><row>
		 		<entry>DOCUMENT_TYPE_NODE</entry>
		 		<entry>DocumentType nodes cannot be imported.</entry>
		 	</row><row>
		 		<entry>ELEMENT_NODE</entry>
		 		<entry>Specified attribute nodes of the source element are imported, and the generated Attr nodes are attached to the generated Element. Default attributes are not copied, though if the document being imported into defines default attributes for this element name, those are assigned. If the importNode  deep parameter was set to true, the descendants of the source element are recursively imported and the resulting nodes reassembled to form the corresponding subtree.</entry>
		 	</row><row>
		 		<entry>ENTITY_NODE</entry>
		 		<entry>Entity nodes can be imported, however in the current release of the DOM the DocumentType is readonly. Ability to add these imported nodes to a DocumentType will be considered for addition to a future release of the DOM. On import, the publicId, systemId, and notationName attributes are copied. If a deep import is requested, the descendants of the the source Entity are recursively imported and the resulting nodes reassembled to form the corresponding subtree.</entry>
		 	</row><row>
		 		<entry>ENTITY_REFERENCE_NODE</entry>
		 		<entry>Only the EntityReference itself is copied, even if a deep import is requested, since the source and destination documents might have defined the entity differently. If the document being imported into provides a definition for this entity name, its value is assigned.</entry>
		 	</row><row>
		 		<entry>NOTATION_NODE</entry>
		 		<entry>Notation nodes can be imported, however in the current release of the DOM the DocumentType is readonly. Ability to add these imported nodes to a DocumentType will be considered for addition to a future release of the DOM. On import, the publicId and systemId attributes are copied. Note that the deep parameter has no effect on this type of nodes since they cannot have any children.</entry>
		 	</row><row>
		 		<entry>PROCESSING_INSTRUCTION_NODE</entry>
		 		<entry>The imported node copies its target and data values from those of the source node. Note that the deep parameter has no effect on this type of nodes since they cannot have any children.</entry>
		 	</row><row>
		 		<entry>TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE</entry>
		 		<entry>These three types of nodes inheriting from CharacterData copy their data and length attributes from those of the source node. Note that the deep parameter has no effect on these types of nodes since they cannot have any children.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 <p><b>Note:</b> The original node is not removed from the original document. The imported node is a clone of the original.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var iframe = document.getElementsByTagName("iframe")[0];
		 var oldNode = iframe.contentDocument.getElementById("myNode");
		 var newNode = document.importNode(oldNode,true);
		 document.getElementById("container").appendChild(newNode);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.importNode"><linktext>MDC - Document.importNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Core-Document-importNode"><linktext>W3C - Document.importNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:load"><apiName>load</apiName><shortdesc>
		 
		 Replaces the content of the document with the result of parsing the given URI.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If async is set to true load returns true if the document load was successfully initiated. If an 
		 error occurred when initiating the document load load returns false. If async is set to false load returns 
		 true if the document was successfully loaded and parsed. If an error occurred when either loading or parsing 
		 the URI load returns false.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The URI reference for the XML file to be loaded. If this is a relative URI, the base URI used by the implementation is implementation dependent.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Replaces the content of the document with the result of parsing the given URI. Invoking this method 
		 will either block the caller or return to the caller immediately depending on the value of the async 
		 attribute. Once the document is fully loaded the document will fire a "load" event that the caller can 
		 register as a listener for. If an error occurs the document will fire an "error" event so that the caller 
		 knows that the load failed (see ParseErrorEvent). If this method is called on a document that is currently 
		 loading, the current load is interrupted and the new URI load is initiated. 
		 
		 <p><b>Note (Mozilla):</b> As of at least Gecko 1.9, this no longer supports cross-site loading 
		 of documents (Use XMLHttpRequest instead).</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var xmlDoc = document.implementation.createDocument("", "test", null);
		 function documentLoaded (e) {
		 	alert(new XMLSerializer().serializeToString(e.target)); // Gives querydata.xml contents as string
		 }
		 xmlDoc.addEventListener("load", documentLoaded, false);
		 xmlDoc.load('querydata.xml');</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.load"><linktext>MDC - Document.load()</linktext></link><link href="http://www.w3.org/TR/2002/WD-DOM-Level-3-ASLS-20020409/load-save.html#LS-DocumentLS-load"><linktext>W3C - DocumentLS.load()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:loadXML"><apiName>loadXML</apiName><shortdesc>
		 
		 Replace the content of the document with the result of parsing the input string, this method is always synchronous.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if parsing the input string succeeded without errors, otherwise false.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string containing an XML document.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Replace the content of the document with the result of parsing the input string, this method is always synchronous. 
		 This method always parses from a DOMString, which means the data is always UTF16. All other encoding information is ignored. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2002/WD-DOM-Level-3-ASLS-20020409/load-save.html#LS-DocumentLS-loadXML"><linktext>W3C - DocumentLS.loadXML()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:normalizeDocument"><apiName>normalizeDocument</apiName><shortdesc>
		 This method acts as if the document was going through a save and load 
		 cycle, putting the document in a "normal" form.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This method acts as if the document was going through a save and load 
		 cycle, putting the document in a "normal" form. As a consequence, this 
		 method updates the replacement tree of EntityReference nodes and 
		 normalizes Text nodes, as defined in the method Node.normalize().
		 Otherwise, the actual result depends on the features being set on the 
		 Document.domConfig object and governing what operations actually take 
		 place. Noticeably this method could also make the document namespace 
		 well-formed according to the algorithm described in Namespace Normalization, 
		 check the character normalization, remove the CDATASection nodes, etc. See 
		 DOMConfiguration for details.
		 
		 <codeblock>
		 // Keep in the document the information defined
		 // in the XML Information Set (Java example)
		 DOMConfiguration docConfig = myDocument.getDomConfig();
		 docConfig.setParameter("infoset", Boolean.TRUE);
		 myDocument.normalizeDocument();</codeblock>
		 
		 <p>Mutation events, when supported, are generated to reflect the changes 
		 occurring on the document.
		 If errors occur during the invocation of this method, such as an attempt 
		 to update a read-only node or a Node.nodeName contains an invalid 
		 character according to the XML version in use, errors or warnings 
		 (DOMError.SEVERITY_ERROR or DOMError.SEVERITY_WARNING) will be reported 
		 using the DOMErrorHandler object associated with the "error-handler" parameter. 
		 Note this method might also report fatal errors (DOMError.SEVERITY_FATAL_ERROR) 
		 if an implementation cannot recover from an error.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document"><linktext>MDC - Document.normalizeDocument()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Document3-normalizeDocument"><linktext>W3C - Document.normalizeDocument()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:querySelector"><apiName>querySelector</apiName><shortdesc>
		 
		 Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Selectors" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0b_unknown"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>The first matching Element node within the node’s subtree. If there is no such node, returns null. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>selectors</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One or more selectors
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;Selectors API Example&lt;/title&gt;
		 	&lt;/head&gt;
		 	&lt;body&gt;
		 
		 		&lt;div id="foo"&gt;
		 			&lt;p class="warning"&gt;This is a sample warning&lt;/p&gt;
		 			&lt;p class="error"&gt;This is a sample error&lt;/p&gt;
		 		&lt;/div&gt;
		 		&lt;div id="bar"&gt;
		 			&lt;p&gt;...&lt;/p&gt;
		 		&lt;/div&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 x would contain the first element in the document with an ID of either foo or bar (or both). In the sample document above, it would select the div element with the ID of foo because it is first in document order.
		 <codeblock>var x = document.querySelector("#foo, #bar");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/cc288169%28VS.85%29.aspx"><linktext>MSDN - querySelector Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Document.querySelector"><linktext>MDC - Document.querySelector()</linktext></link><link href="http://www.w3.org/TR/selectors-api/#nodeselector"><linktext>W3C - NodeSelector.querySelector()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:querySelectorAll"><apiName>querySelectorAll</apiName><shortdesc>
		 
		 Returns a list of all elements descended from the element on which it is invoked that match the specified group of selectors.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Selectors" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0b"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier><apiDesc>A NodeList containing all of the matching Element nodes within the node’s subtree, in document order. If there are no such nodes, returns an empty NodeList.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>selectors</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One or more selectors
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns a list of all elements descended from the element on which it is invoked that match the specified group of selectors.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;Selectors API Example&lt;/title&gt;
		 	&lt;/head&gt;
		 	&lt;body&gt;
		 
		 		&lt;div id="foo"&gt;
		 			&lt;p class="warning"&gt;This is a sample warning&lt;/p&gt;
		 			&lt;p class="error"&gt;This is a sample error&lt;/p&gt;
		 		&lt;/div&gt;
		 		&lt;div id="bar"&gt;
		 			&lt;p&gt;...&lt;/p&gt;
		 		&lt;/div&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 The following example would select all p elements in the document that have a class of either "error" or "warning".
		 <codeblock>var alerts = document.querySelectorAll("p.warning, p.error");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/cc304115%28VS.85%29.aspx"><linktext>MSDN - querySelectorAll Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Document.querySelectorAll"><linktext>MDC - Document.querySelectorAll()</linktext></link><link href="http://www.w3.org/TR/selectors-api/#nodeselector"><linktext>W3C - NodeSelector.querySelectorAll()</linktext></link><link href="http://www.quirksmode.org/dom/w3c_core.html#gettingelements"><linktext>Quirksmode: Getting elements</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:renameNode"><apiName>renameNode</apiName><shortdesc>
		 Rename an existing node of type ELEMENT_NODE or ATTRIBUTE_NODE.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised when the type of 
		 the specified node is neither ELEMENT_NODE nor ATTRIBUTE_NODE, or if the 
		 implementation does not support the renaming of the document element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the new 
		 qualified name is not an XML name according to the XML version in use 
		 specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised when the specified 
		 node was created from a different document than this document.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the qualifiedName is 
		 a malformed qualified name, if the qualifiedName has a prefix and the 
		 namespaceURI is null, or if the qualifiedName has a prefix that is "xml" 
		 and the namespaceURI is different from "http://www.w3.org/XML/1998/namespace" 
		 XML Namespaces. Also raised, when the node being renamed is an attribute, 
		 if the qualifiedName, or its prefix, is "xmlns" and the namespaceURI is 
		 different from "http://www.w3.org/2000/xmlns/".
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The renamed node. This is either the specified node or the new 
		 node that was created to replace the specified node.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>n</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to rename.
		 </apiDesc></apiParam><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The new namespace URI.
		 </apiDesc></apiParam><apiParam><apiItemName>qualifiedName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The new qualified name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Rename an existing node of type ELEMENT_NODE or ATTRIBUTE_NODE.
		 When possible this simply changes the name of the given node, 
		 otherwise this creates a new node with the specified name and 
		 replaces the existing node with the new node as described below.
		 If simply changing the name of the given node is not possible, the 
		 following operations are performed: a new node is created, any 
		 registered event listener is registered on the new node, any user 
		 data attached to the old node is removed from that node, the old 
		 node is removed from its parent if it has one, the children are moved 
		 to the new node, if the renamed node is an Element its attributes are 
		 moved to the new node, the new node is inserted at the position the 
		 old node used to have in its parent's child nodes list if it has one, 
		 the user data that was attached to the old node is attached to the 
		 new node.
		 
		 <p>When the node being renamed is an Element only the specified attributes 
		 are moved, default attributes originated from the DTD are updated 
		 according to the new element name. In addition, the implementation 
		 may update default attributes from other schemas. Applications should 
		 use Document.normalizeDocument() to guarantee these attributes are 
		 up-to-date.</p>
		 
		 <p>When the node being renamed is an Attr that is attached to an Element, 
		 the node is first removed from the Element attributes map. Then, once 
		 renamed, either by modifying the existing node or creating a new one as 
		 described above, it is put back. In addition,
		 <ul>
		 <li>a user data event NODE_RENAMED is fired,</li>
		 <li>when the implementation supports the feature "MutationNameEvents", 
		 each mutation operation involved in this method fires the appropriate 
		 event, and in the end the event {http://www.w3.org/2001/xml-events, 
		 DOMElementNameChanged} or {http://www.w3.org/2001/xml-events, 
		 DOMAttributeNameChanged} is fired.</li>
		 </ul></p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.renameNode"><linktext>MDC - Document.renameNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Document3-renameNode"><linktext>W3C - Document.renameNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:saveXML"><apiName>saveXML</apiName><shortdesc>
		 
		 Save the document or the given node to a string (i.e.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The serialized document or null.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>snode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies what to serialize, if this parameter is null the whole document is serialized, if it's non-null the given node is serialized.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Save the document or the given node to a string (i.e. serialize the document or node). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2002/WD-DOM-Level-3-ASLS-20020409/load-save.html#LS-DocumentLS-saveXML"><linktext>W3C - DocumentLS.saveXML()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:updateSettings"><apiName>updateSettings</apiName><shortdesc>
		 Allows updating the print settings for the page.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0b_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Allows updating the print settings for the page.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/cc848923%28VS.85%29.aspx"><linktext>MSDN - updateSettings Method</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:DocumentFragment"><apiName>DocumentFragment</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>selectors:NodeSelector</apiBaseInterface><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:DocumentFragment:querySelector"><apiName>querySelector</apiName><shortdesc>
		 
		 Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Selectors" version="0"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>The first matching Element node within the node’s subtree. If there is no such node, returns null. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>selectors</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One or more selectors
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;Selectors API Example&lt;/title&gt;
		 	&lt;/head&gt;
		 	&lt;body&gt;
		 
		 		&lt;div id="foo"&gt;
		 			&lt;p class="warning"&gt;This is a sample warning&lt;/p&gt;
		 			&lt;p class="error"&gt;This is a sample error&lt;/p&gt;
		 		&lt;/div&gt;
		 		&lt;div id="bar"&gt;
		 			&lt;p&gt;...&lt;/p&gt;
		 		&lt;/div&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 x would contain the first element in the document with an ID of either foo or bar (or both). In the sample document above, it would select the div element with the ID of foo because it is first in document order.
		 <codeblock>var x = document.querySelector("#foo, #bar");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/selectors-api/#nodeselector"><linktext>W3C Selectors API</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DocumentFragment:querySelectorAll"><apiName>querySelectorAll</apiName><shortdesc>
		 
		 Returns a list of all elements descended from the element on which it is invoked that match the specified group of selectors.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Selectors" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5b4"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0b"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier><apiDesc>A NodeList containing all of the matching Element nodes within the node’s subtree, in document order. If there are no such nodes, returns an empty NodeList.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>selectors</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One or more selectors
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns a list of all elements descended from the element on which it is invoked that match the specified group of selectors.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;Selectors API Example&lt;/title&gt;
		 	&lt;/head&gt;
		 	&lt;body&gt;
		 
		 		&lt;div id="foo"&gt;
		 			&lt;p class="warning"&gt;This is a sample warning&lt;/p&gt;
		 			&lt;p class="error"&gt;This is a sample error&lt;/p&gt;
		 		&lt;/div&gt;
		 		&lt;div id="bar"&gt;
		 			&lt;p&gt;...&lt;/p&gt;
		 		&lt;/div&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 The following example would select all p elements in the document that have a class of either "error" or "warning".
		 <codeblock>var alerts = document.querySelectorAll("p.warning, p.error");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/selectors-api/#nodeselector"><linktext>W3C Selectors API</linktext></link><link href="http://www.quirksmode.org/dom/w3c_core.html#gettingelements"><linktext>Quirksmode: Getting elements</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:Comment"><apiName>Comment</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:CharacterData</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.core:Notation"><apiName>Notation</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.core:TypeInfo"><apiName>TypeInfo</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:TypeInfo:isDerivedFrom"><apiName>isDerivedFrom</apiName><shortdesc>
		 This method returns if there is a derivation between the reference 
		 type definition, i.e.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the document's schema is a DTD or no schema is associated 
		 with the document, this method will always return false.
		 
		 <p>
		 If the document's schema is an XML Schema, the method will true if the reference 
		 type definition is derived from the other type definition according to the 
		 derivation parameter. If the value of the parameter is 0 (no bit is set to 1 for 
		 the derivationMethod parameter), the method will return true if the other 
		 type definition can be reached by recursing any combination of {base type 
		 definition}, {item type definition}, or {member type definitions} from the 
		 reference type definition. </p>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>typeNamespaceArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace of the other type definition. 
		 </apiDesc></apiParam><apiParam><apiItemName>typeNameArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the other type definition. 
		 </apiDesc></apiParam><apiParam><apiItemName>derivationMethod</apiItemName><apiType value="Number"/><apiDesc>The type of derivation and conditions applied 
		 between two types, as described in the list of constants provided in this interface. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method returns if there is a derivation between the reference 
		 type definition, i.e. the TypeInfo on which the method is being called, 
		 and the other type definition, i.e. the one passed as parameters. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/TypeInfo.isDerivedFrom"><linktext>MDC - TypeInfo.isDerivedFrom()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#TypeInfo-isDerivedFrom"><linktext>W3C - TypeInfo.isDerivedFrom()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:Text"><apiName>Text</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:CharacterData</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:Text:replacewholeText"><apiName>replacewholeText</apiName><shortdesc>
		 Replaces the text of the node and all of its logically adjacent text nodes 
		 with the specified text.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="Firefox" version="3.5+"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR : One of the 
		 text nodes being replaced is read only.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Text</apiOperationClassifier><apiDesc>The Text node created with the specified content.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>content</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifying the text with which to replace the node's current contents.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the text of the node and all of its logically adjacent text nodes 
		 with the specified text.  The replaced nodes are removed, including the 
		 current node, unless it was the recipient of the replacement text.
		 
		 <p><b>Note:</b> This method returns the text node which received the replacement text, or null 
		 if the replacement text is an empty string.  The returned node is the current 
		 node unless the current node is read only, in which case the returned node is 
		 a newly created text node of the same type which has been inserted at the 
		 location of the replacement.</p>
		 
		 <p><b>Note (Mozilla):</b> Firefox's implementation of this method does not yet support EntityReference 
		 nodes as defined by the specification.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Text.replaceWholeText"><linktext>MDC - Text.replacewholeText()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Text3-replaceWholeText"><linktext>W3C - Text.replacewholeText()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Text:splitText"><apiName>splitText</apiName><shortdesc>
		 Breaks the Text node into two nodes at the specified offset, keeping both 
		 nodes in the tree as siblings.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR : The specified offset is negative or is greater than the number of 16-bit units in the node's text.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR : The node is read only.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Text</apiOperationClassifier><apiDesc>The new node, of the same type as this node.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>16-bit integer offset at which to split; the first character in the node is numbered zero.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Breaks the Text node into two nodes at the specified offset, keeping both 
		 nodes in the tree as siblings.
		 
		 <p><b>Note:</b> After the split, the current node contains all the content up to the specified 
		 offset point, and a newly created node of the same type contains the remaining 
		 text.  The newly created node is returned to the caller.  If the original node 
		 had a parent, the new node is inserted as the next sibling of the original 
		 node.  If the offset is equal to the length of the original node, the newly 
		 created node has no data.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms753789%28VS.85%29.aspx"><linktext>MSDN - splitText Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Text.splitText"><linktext>MDC - Text.splitText()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-38853C1D"><linktext>W3C - Text.splitText()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:CDATASection"><apiName>CDATASection</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Text</apiBaseClassifier></apiClassifierDef><example>
	 For example:
	 <codeblock>&lt;foo&gt;Here is a CDATA section: &lt;![CDATA[  &lt; &gt; &amp; ]]&gt; with all kinds of unescaped text. &lt;/foo&gt;</codeblock>
	 The only sequence which is not allowed within a CDATA section is the closing sequence of a CDATA section itself:
	 <codeblock>&lt;![CDATA[  ]]&gt; will cause an error   ]]&gt;</codeblock>
	 
	 </example></apiClassifierDetail></apiClassifier><apiClassifier id="dom.core:Node"><apiName>Node</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>dom.events:EventTarget</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:Node:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 
		 Associates a function with a particular event and binds the event to the current node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string representing the event to bind, without the "on" prefix. For example, "click", "mousedown" etc.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The function or method to associate with the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Whether to bind the event as it is propagating towards the target node, (event Capture), or as the 
		 event bubbles upwards from the target (event bubble). Set to true or false, respectively.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Associates a function with a particular event and binds the event to the current node.
		 
		 </apiDesc><example>
		 <codeblock>
		 function statusreport() {
		 		alert("document has loaded");
		 }
		 
		 if (window.addEventListener) {
		 		window.addEventListener("load", statusreport, false); //invoke function
		 }
		 window.onload = statusreport(); //function invoked again, since no event handler conflicts</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-addEventListener"><linktext>W3C - DOM 3 Events: EventTarget.addEventListener()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:addEventListenerNS"><apiName>addEventListenerNS</apiName><shortdesc>
		 
		 Registers an event listener, depending on the useCapture parameter, on the 
		 capture phase of the DOM event flow or its target and bubbling phases.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.namespaceURI associated with the event for which the user is registering.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string representing the event to bind, without the "on" prefix. For example, "click", "mousedown" etc.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The function or method to associate with the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Whether to bind the event as it is propagating towards the target node, (event Capture), or as the 
		 event bubbles upwards from the target (event bubble). Set to true or false, respectively.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Registers an event listener, depending on the useCapture parameter, on the 
		 capture phase of the DOM event flow or its target and bubbling phases.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-addEventListener"><linktext>W3C - DOM 3 Events: EventTarget.addEventListener()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:appendChild"><apiName>appendChild</apiName><shortdesc>
		 Adds a node to the end of the list of children of a specified parent node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if this 
		 node is of a type that does not allow children of the type of the 
		 newChild node, or if the node to append is one of this node's 
		 ancestors or this node itself, or if this node is of type Document 
		 and the DOM application attempts to append a second DocumentType or 
		 Element node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if newChild 
		 was created from a different document than the one that created 
		 this node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly or if the previous parent of the node being 
		 inserted is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: if the newChild node 
		 is a child of the Document node, this exception might be raised if 
		 the DOM implementation doesn't support the removal of the 
		 DocumentType child or Element child.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Returns a reference to the element that is appended to the object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Object that specifies the element to append.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a node to the end of the list of children of a specified parent node. 
		 If the node already exists it is removed from current parent node, then added to new parent node.
		 
		 <p><b>Note:</b> If child is a reference to an existing node in the document, 
		 appendChild moves it from its current position to the new position (i.e. there is no 
		 requirement to remove the node from its parent node before appending it to some other node).</p>
		 
		 <p><b>Note:</b> This also means that a node can't be in two points of the document 
		 simultaneously. So if the node already has a parent, it is first removed, then appended at 
		 the new position.</p>
		 
		 <p><b>Note:</b> You can use cloneNode to make a copy of the node before appending
		 it under the new parent. (Note that the copies made with cloneNode will not be automatically 
		 kept in sync.)</p>
		 
		 <p><b>Note:</b> This method is not allowed to move nodes between different documents. 
		 If you want to append node from a different document (for example to display results from AJAX 
		 request) you must first use importNode.</p>
		 
		 <p><b>Note (IE6):</b> In Microsoft Internet Explorer 6, This method now applies to 
		 the attribute object. </p>
		 
		 <p><b>Note:</b> When inserting a node tree under another node that has a different 
		 owner document, the  ownerDocument property for each inserted node is changed to match the owner 
		 document of its new parent.</p>
		 
		 <p><b>Note:</b> When moving a node tree to another document, the content of all entity 
		 reference nodes contained therein is updated to conform to the new document. If the new document 
		 does not declare an entity that was moved into it, the entity reference will have no children, and 
		 the old content is removed. Existing references to nodes under the entity reference are still valid, 
		 but the node whose parent previously was the entity reference now has a null parent. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // Create a new paragraph element, and append it to the end of the document body
		 var p = document.createElement("p");
		 document.body.appendChild(p);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa925543.aspx"><linktext>MSDN - appendChild Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.appendChild"><linktext>MDC - Node.appendChild()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-184E7107"><linktext>W3C - Node.appendChild()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:cloneNode"><apiName>cloneNode</apiName><shortdesc>
		 Returns a duplicate of the current node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Returns a reference to the newly created node.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>cloneChildren</apiItemName><apiType value="Boolean"/><apiDesc>FALSE, cloned objects do not include childNodes. TRUE, cloned objects include childNodes.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a duplicate of the current node. 
		 
		 <p><b>Note:</b> Cloning a node copies all of its attributes and their values. </p>
		 
		 <p><b>Note:</b> The duplicate node returned by cloneNode is not part of the 
		 document until it is added to another node that is part of the document using appendChild 
		 or a similar method. It also has no parent until it is appended to another node. </p>
		 
		 <p><b>Note:</b> If cloneChildren is set to false, none of the child nodes 
		 are cloned. Any text that the node contains is not cloned either, as it is contained in 
		 one or more child Text nodes. </p>
		 
		 <p><b>Note:</b> When you refer to the ID of a cloned element, a collection is returned.</p>
		 
		 <p><b>Note:</b> To clone a node for appending to a different document, use importNode instead. </p>
		 
		 <p><b>Note (IE):</b> If the node is the DOMDocument node, it is safer to clone the document 
		 using the save method, as follows. doc.save(doc2); </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 p = document.getElementById("para1"); 
		 p_prime = p.cloneNode(true);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa923265.aspx"><linktext>MSDN - cloneNode Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.cloneNode"><linktext>MDC - Node.cloneNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-3A0ED0A4"><linktext>W3C - Node.cloneNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:compareDocumentPosition"><apiName>compareDocumentPosition</apiName><shortdesc>
		 Compares the position of the current node against another node in any other document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: when the compared 
		 nodes are from different DOM implementations that do not coordinate 
		 to return consistent implementation-specific results.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="Number"/><apiDesc>The return value is computed as the relationship that otherNode has
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node that's being compared against.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Compares the position of the current node against another node in any other document.
		 
		 </apiDesc><example>
		 <codeblock>
		 var head = document.getElementsByTagName('head').item(0);
		 var result = head.compareDocumentPosition(document.body);
		 // result = Node.DOCUMENT_POSITION_FOLLOWING</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.compareDocumentPosition"><linktext>MDC - Node.compareDocumentPosition()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-compareDocumentPosition"><linktext>W3C - Node.compareDocumentPosition()</linktext></link><link href="dom.core.xml#Node/DOCUMENT_POSITION_DISCONNECTED"><linktext>DOCUMENT_POSITION_DISCONNECTED</linktext></link><link href="dom.core.xml#Node/DOCUMENT_POSITION_PRECEDING"><linktext>DOCUMENT_POSITION_PRECEDING</linktext></link><link href="dom.core.xml#Node/DOCUMENT_POSITION_FOLLOWING"><linktext>DOCUMENT_POSITION_FOLLOWING</linktext></link><link href="dom.core.xml#Node/DOCUMENT_POSITION_CONTAINS"><linktext>DOCUMENT_POSITION_CONTAINS</linktext></link><link href="dom.core.xml#Node/DOCUMENT_POSITION_CONTAINED_BY"><linktext>DOCUMENT_POSITION_CONTAINED_BY</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
		 
		 Dispatches an event to fire on a node artificially.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Indicates whether any of the listeners which handled the 
		 event called Event.preventDefault(). If Event.preventDefault() was 
		 called the returned value is false, else it is true.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>evt</apiItemName><apiOperationClassifier>dom.events:Event</apiOperationClassifier><apiDesc>The event to be dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Dispatches an event to fire on a node artificially.
		 
		 <p><b>Note (IE):</b> IE's equivalent of dispatchEvent() is fireEvent().</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;div id="test" onclick="alert('hi')"&gt;Sample DIV.&lt;/div&gt;
		 &lt;script type="text/javascript"&gt;
		 //Generate an artificial click event on "test". Fires alert("hi")
		 var clickevent = document.createEvent("MouseEvents");
		 clickevent.initEvent("click", true, true);
		 document.getElementById("test").dispatchEvent(myevent);
		 &lt;/script&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-dispatchEvent"><linktext>W3C - DOM 3 Events: EventTarget.dispatchEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:getFeature"><apiName>getFeature</apiName><shortdesc>
		 This method returns a specialized object which implements the 
		 specialized APIs of the specified feature and version, as specified 
		 in DOM Features.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMObject</apiOperationClassifier><apiDesc>Returns an object which implements the specialized APIs of the 
		 specified feature and version, if any, or null if there is no object 
		 which implements interfaces associated with that feature. If the 
		 DOMObject returned by this method implements the Node interface, it must 
		 delegate to the primary core Node and not return results inconsistent 
		 with the primary core Node  such as attributes, childNodes, etc. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>feature</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the feature requested. Note that any plus 
		 sign "+" prepended to the name of the feature will be ignored since it 
		 is not significant in the context of this method. 
		 </apiDesc></apiParam><apiParam><apiItemName>version</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This is the version number of the feature to test. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method returns a specialized object which implements the 
		 specialized APIs of the specified feature and version, as specified 
		 in DOM Features. The specialized object may also be obtained by using 
		 binding-specific casting methods but is not necessarily expected to, 
		 as discussed in Mixed DOM Implementations. This method also allow 
		 the implementation to provide specialized objects which do not support 
		 the Node interface. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.getFeature"><linktext>MDC - Node.getFeature()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-getFeature"><linktext>W3C - Node.getFeature()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:getUserData"><apiName>getUserData</apiName><shortdesc>
		 Retrieves the object associated to a key on a this node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMUserData</apiOperationClassifier><apiDesc>Returns the DOMUserData associated to the given key on this node, 
		 or null if there was none.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The key the object is associated to.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the object associated to a key on a this node. The object must 
		 first have been set to this node by calling setUserData with the same key.
		 
		 </apiDesc><example>
		 <codeblock>
		 var d = document.setUserData('key', 15, null);
		 alert(document.getUserData('key')); // 15</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.getUserData"><linktext>MDC - Node.getUserData()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-getUserData"><linktext>W3C - Node.getUserData()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:hasAttributes"><apiName>hasAttributes</apiName><shortdesc>
		 Returns a boolean value of true or false, indicating if the current element 
		 has any attributes or not.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the current element has any attributes or not. 
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns a boolean value of true or false, indicating if the current element 
		 has any attributes or not. 
		 
		 </apiDesc><example>
		 <codeblock>
		 t1 = document.getElementById("table-data"); 
		 if (t1.hasAttributes()) { 
		 	// do something with t1.attributes
		 }</codeblock>
		 
		 <codeblock> var result=document.getElementsByTagName("div")[0].hasAttributes();</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.hasAttributes"><linktext>MDC - Node.hasAttributes()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-NodeHasAttrs"><linktext>W3C - Node.hasAttributes()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:hasChildNodes"><apiName>hasChildNodes</apiName><shortdesc>
		 Returns a value that indicates whether the object has children.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns a value that indicates whether the object has children. 
		 
		 <p><b>Note:</b> If the object contains HTML Elements or TextNodes, they can be 
		 accessed from the childNodes collection.</p>
		 
		 <p><b>Note:</b> element.hasChildNodes, without the parenthesises, will return the 
		 hasChildNodes Function, and not a Boolean.</p>
		 
		 <p><b>Note (IE6):</b> In Microsoft Internet Explorer 6, This method now applies to the 
		 attribute object. </p>
		 
		 </apiDesc><example>
		 Remove the first child node inside the element with the id "foo" if foo has child nodes.
		 <codeblock>
		 var foo = document.getElementById("foo");
		 if (foo.hasChildNodes()) { 
		 	foo.removeChild(foo.childNodes[0]);
		 }</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924162.aspx"><linktext>MSDN - hasChildNodes Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.hasChildNodes"><linktext>MDC - Node.hasChildNodes()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-810594187"><linktext>W3C - Node.hasChildNodes()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:insertBefore"><apiName>insertBefore</apiName><shortdesc>
		 Inserts the specified node before a reference element as a child of 
		 the current node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if this 
		 node is of a type that does not allow children of the type of the 
		 newChild node, or if the node to insert is one of this node's 
		 ancestors or this node itself, or if this node is of type Document 
		 and the DOM application attempts to insert a second DocumentType 
		 or Element node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if newChild 
		 was created from a different document than the one that created 
		 this node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly or if the parent of the node being inserted 
		 is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if refChild is 
		 not a child of this node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: if this node is of 
		 type Document, this exception might be raised if the DOM 
		 implementation doesn't support the insertion of a DocumentType or 
		 Element node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Returns a reference to the element that is inserted into the document.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>newNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to insert. 
		 </apiDesc></apiParam><apiParam><apiItemName>childNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node before which newNode is inserted. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified node before a reference element as a child of 
		 the current node. 
		 
		 <p><b>Note:</b> Do not specify the childNode  parameter when inserting the 
		 first child node. If children already exist and you do not specify 
		 the childNode  parameter, the oNewNode  becomes the last child of 
		 the parent object.</p>
		 
		 <p><b>Note (IE6):</b> In Microsoft Internet Explorer 6, This method now applies to the 
		 attribute object.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		  &lt;html&gt;
		 
		 &lt;head&gt;
		 	&lt;title&gt;Gecko DOM insertBefore test&lt;/title&gt;
		 &lt;/head&gt;
		 
		 &lt;body&gt;
		 
		 &lt;div&gt;
		 	&lt;span id="childSpan"&gt;foo bar&lt;/span&gt;
		 &lt;/div&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 	// create an empty element node
		 	// without an ID, any attributes, or any content
		 	var sp1 = document.createElement("span");
		 
		 	// give it an id attribute called 'newSpan'
		 	sp1.setAttribute("id", "newSpan");
		 
		 	// create some content for the newly created element.
		 	var sp1_content = document.createTextNode("This is a new span element. ");
		 
		 	// apply that content to the new element
		 	sp1.appendChild(sp1_content);
		 
		 	var sp2 = document.getElementById("childSpan");
		 	var parentDiv = sp2.parentNode;
		 
		 	// insert the new element into the DOM before sp2
		 	parentDiv.insertBefore(sp1, sp2);
		 &lt;/script&gt;
		 
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 <p>There is no insertAfter method, however it can be emulated using a combination of insertBefore and nextSibling. </p>
		 
		 <p>From the above example, sp1 could be inserted after sp2 using: </p>
		 
		 <codeblock>parentDiv.insertBefore(sp1, sp2.nextSibling);</codeblock>
		 
		 <p>If sp2 does not have a next sibling it must be the last child—sp2.nextSibling will return 
		 null so sp1 will be inserted at the end of the child nodes list (i.e. immediately after sp2). </p>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa922819.aspx"><linktext>MSDN - insertBefore Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.insertBefore"><linktext>MDC - Node.insertBefore()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-952280727"><linktext>W3C - Node.insertBefore()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:isDefaultNamespace"><apiName>isDefaultNamespace</apiName><shortdesc>
		 Returns true if the namespace is the default namespace on the given 
		 node or false if not.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the namespace is the default namespace on the given 
		 node or false if not.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace against which the element will be checked.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns true if the namespace is the default namespace on the given 
		 node or false if not.
		 
		 </apiDesc><example>
		 <codeblock>
		 var XULNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
		 var el = document.getElementsByTagNameNS(XULNS, 'textbox')[0];
		 alert(el.isDefaultNamespace(XULNS)); // true</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.isDefaultNamespace"><linktext>MDC - Node.isDefaultNamespace()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isDefaultNamespace"><linktext>W3C - Node.isDefaultNamespace()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:isEqualNode"><apiName>isEqualNode</apiName><shortdesc>
		 Tests whether two nodes are equal.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Returns true if the nodes are equal, false  otherwise.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to compare equality with.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Tests whether two nodes are equal.
		 
		 <p>This method tests for equality of nodes, not sameness (i.e., whether
		 the two nodes are references to the same object) which can be tested 
		 with Node.isSameNode(). All nodes that are the same will also be 
		 equal, though the reverse may not be true. Two nodes are equal if and 
		 only if the following conditions are satisfied:
		 <ul>
		 <li>The two nodes are of the same type.</li>
		 <li>The following string attributes are equal: nodeName, localName, 
		 namespaceURI, prefix, nodeValue. This is: they are both null, or they 
		 have the same length and are character for character identical.</li>
		 <li>The attributes NamedNodeMaps are equal. This is: they are both null, 
		 or they have the same length and for each node that exists in one map 
		 there is a node that exists in the other map and is equal, although not 
		 necessarily at the same index.</li>
		 <li>The childNodes NodeLists are equal. This is: they are both null, or 
		 they have the same length and contain equal nodes at the same index. 
		 Note that normalization can affect equality; to avoid this, nodes should 
		 be normalized before being compared.</li>
		 </ul>
		 </p>
		 
		 <p>For two DocumentType nodes to be equal, the following conditions must 
		 also be satisfied:
		 <ul>
		 <li>The following string attributes are equal: publicId, systemId, internalSubset.</li>
		 <li>The entities NamedNodeMaps are equal.</li>
		 <li>The notations NamedNodeMaps are equal.</li>
		 </ul>
		 </p>
		 
		 <p>On the other hand, the following do not affect equality: the ownerDocument, 
		 baseURI, and parentNode attributes, the specified attribute for Attr nodes, 
		 the schemaTypeInfo attribute for Attr and Element nodes, the 
		 Text.isElementContentWhitespace attribute for Text nodes, as well as any 
		 user data or event listeners registered on the nodes.</p>
		 
		 <p>Note: As a general rule, anything not mentioned in the description above 
		 is not significant in consideration of equality checking. Note that future 
		 versions of this specification may take into account more attributes and 
		 implementations conform to this specification are expected to be 
		 updated accordingly. </p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.isEqualNode"><linktext>MDC - Node.isEqualNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isEqualNode"><linktext>W3C - Node.isEqualNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:isSameNode"><apiName>isSameNode</apiName><shortdesc>
		 Returns whether this node is the same node as the given one.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Returns true if the nodes are the same, false otherwise.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to test against.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns whether this node is the same node as the given one.
		 This method provides a way to determine whether two Node references 
		 returned by the implementation reference the same object. When two 
		 Node references are references to the same object, even if through a 
		 proxy, the references may be used completely interchangeably, such 
		 that all attributes have the same values and calling the same DOM method 
		 on either reference always has exactly the same effect.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.isSameNode"><linktext>MDC - Node.isSameNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isSameNode"><linktext>W3C - Node.isSameNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:isSupported"><apiName>isSupported</apiName><shortdesc>
		 Tests whether the DOM implementation implements a specific feature 
		 and that feature is supported by this node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>feature</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>name of the feature to test. This is the same name 
		 which can be passed to the method hasFeature on DOMImplementation. 
		 Possible values defined within the core DOM specification are listed 
		 on the DOM Level 2 Conformance Section.  The name of the feature to 
		 test. This is the same name which can be passed to the method 
		 hasFeature on DOMImplementation. Possible values defined within 
		 the core DOM specification are listed on the DOM Level 2 Conformance Section. 
		 </apiDesc></apiParam><apiParam><apiItemName>version</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This is the version number of the feature to test. In DOM 
		 Level 2, version 1, this is the string 2.0. If the version is not specified, 
		 supporting any version of the feature will cause the method to return true. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Tests whether the DOM implementation implements a specific feature 
		 and that feature is supported by this node. 
		 
		 <p><b>Note:</b> To check if any version of the DOM specification is supported, 
		 you can pass in null as the version instead of a string. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // Get an element and check to see if its supports the DOM2 HTML Module
		 &lt;div id="doc"&gt;
		 &lt;/div&gt;
		 var main = document.getElementById('doc');
		 var output = main.isSupported('HTML', '2.0');</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.isSupported"><linktext>MDC - Node.isSupported()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Level-2-Core-Node-supports"><linktext>W3C - Node.isSupported()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:lookupNamespaceURI"><apiName>lookupNamespaceURI</apiName><shortdesc>
		 Takes a prefix and returns the namespaceURI associated with it on the 
		 given node if found (and null if not).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Returns the associated namespace URI or null if none is found.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>prefix</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The prefix to look for. If this parameter is null, 
		 the method will return the default namespace URI if any.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Takes a prefix and returns the namespaceURI associated with it on the 
		 given node if found (and null if not). Supplying null for the prefix 
		 will return the default namespace.
		 
		 <p><b>Note (Mozilla):</b> Due to bug 312019, this method does not work with 
		 dynamically assigned namespaces (i.e., those set with Node.prefix).</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.lookupNamespaceURI"><linktext>MDC - Node.lookupNamespaceURI()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespaceURI"><linktext>W3C - Node.lookupNamespaceURI()</linktext></link><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=312019"><linktext>bug 312019</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:lookupPrefix"><apiName>lookupPrefix</apiName><shortdesc>
		 Returns the prefix for a given namespaceURI if present, and null if not.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Returns an associated namespace prefix if found or null  if none is 
		 found. If more than one prefix are associated to the namespace prefix, the 
		 returned namespace prefix is implementation dependent.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI to look for.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the prefix for a given namespaceURI if present, and null if not. 
		 When multiple prefixes are possible, the result is implementation-dependent.
		 
		 <p><b>Note (Mozilla):</b> Due to bug 312019, this method does not work with 
		 dynamically assigned namespaces (i.e., those set with Node.prefix).</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.lookupPrefix"><linktext>MDC - Node.lookupPrefix()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix"><linktext>W3C - Node.lookupPrefix()</linktext></link><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=312019"><linktext>bug 312019</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:normalize"><apiName>normalize</apiName><shortdesc>
		 Puts the specified node and all of its subtree into a "normalized" 
		 form.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Puts the specified node and all of its subtree into a "normalized" 
		 form. In a normalized subtree, no text nodes in the subtree are 
		 empty and there are no adjacent text nodes. 
		 
		 <p><b>Note (IE):</b> By calling object.normalize before the subelements of an 
		 object are manipulated, you ensure that the document object model 
		 has a consistent structure. The normal form is useful for operations 
		 that require a consistent document tree structure, and it ensures 
		 that the document object model view is identical when saved and reloaded.</p>
		 
		 <p><b>Note (IE):</b> Adjacent CDATA sections will not be merged by the normalize 
		 method, allowing for an inconsistent object model when CDATA 
		 sections are present.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.normalize"><linktext>MDC - Node.normalize()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-normalize"><linktext>W3C - Node.normalize()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:removeChild"><apiName>removeChild</apiName><shortdesc>
		 Removes a child node from the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if oldChild is not 
		 a child of this node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: if this node is of 
		 type Document, this exception might be raised if the DOM implementation 
		 doesn't support the removal of the DocumentType child or the Element child.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Returns a reference to the object that is removed.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies the element to be removed from the document.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a child node from the object.
		 
		 <p>The node to be removed must be an immediate child of the parent object.</p>
		 
		 <p>If child is actually not a child of the element node, the method throws an exception. </p>
		 
		 <p><b>Note:</b> The removed child node still exists in memory, but is no longer part of the DOM. 
		 You may reuse the removed node later in your code, via the oldChild object reference.</p>
		 
		 <p><b>Note (IE6):</b> In Microsoft Internet Explorer 6, This method now applies to the attribute object. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // &lt;div id="top" align="center"&gt;
		 //   &lt;div id="nested"&gt;&lt;/div&gt; 
		 // &lt;/div&gt;
		 
		 var d = document.getElementById("top"); 
		 var d_nested = document.getElementById("nested"); 
		 var throwawayNode = d.removeChild(d_nested);</codeblock>
		 
		 <codeblock>
		 // remove all children from element
		 var element = document.getElementById("top");
		 while (element.firstChild) {
		 	element.removeChild(element.firstChild);
		 }</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa923301.aspx"><linktext>MSDN - removeChild Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.removeChild"><linktext>MDC - Node.removeChild()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1734834066"><linktext>W3C - Node.removeChild()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 
		 Removes an event listener.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.type for which the user registered 
		 the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The EventListener to be removed.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether the EventListener being removed 
		 was registered for the capture phase or not. If a listener was 
		 registered twice, once for the capture phase and once for the target 
		 and bubbling phases, each must be removed separately. Removal of an 
		 event listener registered for the capture phase does not affect the 
		 same event listener registered for the target and bubbling phases, 
		 and vice versa.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Removes an event listener.
		 
		 <p>Calling removeEventListener with arguments 
		 which do not identify any currently registered EventListener on the 
		 EventTarget has no effect. The Event.namespaceURI for which the user 
		 registered the event listener is implied and is null.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-removeEventListener"><linktext>W3C - DOM 3 Events: EventTarget.removeEventListener()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:removeEventListenerNS"><apiName>removeEventListenerNS</apiName><shortdesc>
		 
		 Removes an event listener.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.namespaceURI associated with the event for which the user registered the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.type for which the user registered 
		 the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The EventListener to be removed.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether the EventListener being removed 
		 was registered for the capture phase or not. If a listener was 
		 registered twice, once for the capture phase and once for the target 
		 and bubbling phases, each must be removed separately. Removal of an 
		 event listener registered for the capture phase does not affect the 
		 same event listener registered for the target and bubbling phases, 
		 and vice versa.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Removes an event listener. Calling removeEventListenerNS with arguments 
		 which do not identify any currently registered EventListener on the 
		 EventTarget has no effect. 
		  
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTargetGroup-removeEventListenerNS"><linktext>W3C - DOM 3 Events: EventTarget.removeEventListenerNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:replaceChild"><apiName>replaceChild</apiName><shortdesc>
		 Replaces an existing child element with a new child element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if this 
		 node is of a type that does not allow children of the type of the 
		 newChild node, or if the node to put in is one of this node's 
		 ancestors or this node itself, or if this node is of type Document 
		 and the result of the replacement operation would add a second 
		 DocumentType or Element on the Document node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if newChild 
		 was created from a different document than the one that created 
		 this node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node or the parent of the new node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if oldChild is 
		 not a child of this node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: if this node is of 
		 type Document, this exception might be raised if the DOM implementation 
		 doesn't support the replacement of the DocumentType child or Element child.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Returns a reference to the object that is replaced.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>newNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The new node to replace oldChild. If it already exists in the DOM, it is first removed. 
		 </apiDesc></apiParam><apiParam><apiItemName>childNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies the existing element to be replaced.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces an existing child element with a new child element.
		 
		 </apiDesc><example>
		 <codeblock>
		 // &lt;div&gt;
		 //  &lt;span id="childSpan"&gt;foo bar&lt;/span&gt;
		 // &lt;/div&gt;
		 
		 // create an empty element node
		 // without an ID, any attributes, or any content
		 var sp1 = document.createElement("span");
		 
		 // give it an id attribute called 'newSpan'
		 sp1.setAttribute("id", "newSpan");
		 
		 // create some content for the new element.
		 var sp1_content = document.createTextNode("new replacement span element.");
		 
		 // apply that content to the new element
		 sp1.appendChild(sp1_content);
		 
		 // build a reference to the existing node to be replaced
		 var sp2 = document.getElementById("childSpan");
		 var parentDiv = sp2.parentNode;
		 
		 // replace existing node sp2 with the new span element sp1
		 parentDiv.replaceChild(sp1, sp2);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa925527.aspx"><linktext>MSDN - replaceChild Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.replaceChild"><linktext>MDC - Node.replaceChild()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-785887307"><linktext>W3C - Node.replaceChild()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:selectNodes"><apiName>selectNodes</apiName><shortdesc>
		 Applies the specified pattern-matching operation to this node's context and returns the list of matching nodes as IXMLDOMNodeList.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier><apiDesc>Returns a collection of nodes selected by an XSL Pattern or XPath query. If no nodes are selected, an empty collection is returned.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>queryString</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A XSLPattern or XPath query that is to be applied to the context defined by this node. The value of the 
		 SelectionLanguage internal property (flag) determines whether an XSLPattern or XPath query is used. By default, the queryString is 
		 an XSLPattern query. The SelectionLanguage internal property (flag) can be set with the setProperty Method.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Applies the specified pattern-matching operation to this node's context and returns the list of matching nodes as IXMLDOMNodeList.
		 
		 <p><b>Note (IE):</b> This method is only valid if the XML Query Language (XQL) feature has been included in the operating 
		 system (OS). If a call to this method is made and XQL is not supported, an error message will be returned. </p>
		 
		 <p><b>Note (IE):</b> The  selectSingleNode method is similar to the selectNodes method, but returns only the first matching 
		 node rather than the list of all matching nodes.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926403.aspx"><linktext>MSDN - selectNodes Method</linktext></link><link href="dom.core.xml#Node/selectSingleNode()"><linktext>selectSingleNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:selectSingleNode"><apiName>selectSingleNode</apiName><shortdesc>
		 Applies the specified pattern-matching operation to this node's context and returns the first matching node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Returns the first node that matches the XSL or XPath query. If no nodes match the query, it returns Null.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>queryString</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A Extensible Stylesheet Language (XSL) or XPath query that is to be applied to the context defined by 
		 this node. The value of the SelectionLanguage internal property (flag) determines whether an XSL or XPath query is used. 
		 By default, the expression is an XSL pattern query. The SelectionLanguage internal property (flag) can be set with the 
		 setProperty method.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Applies the specified pattern-matching operation to this node's context and returns the first matching node.
		 
		 <p><b>Note (IE):</b> This method is only valid if the XML Query Language (XQL) feature has been included in 
		 the OS. If a call to this method is made and XQL is not supported, an error message will be returned. </p>
		 
		 <p><b>Note (IE):</b> The selectSingleNode method is similar to the  selectNodes Method, but returns only 
		 the first matching node rather than the list of all matching nodes.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924233.aspx"><linktext>MSDN - selectSingleNode Method</linktext></link><link href="dom.core.xml#Node/selectNodes()"><linktext>selectNodes()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:setUserData"><apiName>setUserData</apiName><shortdesc>
		 Associate an object to a key on this node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMUserData</apiOperationClassifier><apiDesc>Returns the DOMUserData previously associated to the given key on this node, or null if there was none.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>key</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The key to associate the object to.
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>dom.core.types:DOMUserData</apiOperationClassifier><apiDesc>The object to associate to the given key, or null to remove any existing association to that key.
		 </apiDesc></apiParam><apiParam><apiItemName>handler</apiItemName><apiOperationClassifier>dom.core:UserDataHandler</apiOperationClassifier><apiDesc>The handler to associate to that key, or null.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associate an object to a key on this node. The object can later be 
		 retrieved from this node by calling getUserData with the same key.
		 
		 <p>Allows a user to attach data to an element, without needing to modify the DOM. Note 
		 that such data will not be preserved when imported via importNode, as with cloneNode() 
		 and renameNode() operations (though adoptNode does preserve the information), and equality 
		 tests in isEqualNode() do not consider user data in making the assessment.</p>
		 
		 <p>This method offers the convenience of associating data with specific nodes without needing 
		 to alter the structure of a document and in a standard fashion, but it also means that extra 
		 steps may need to be taken if one wishes to serialize the information or include the 
		 information upon clone, import, or rename operations.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var d = document.implementation.createDocument('', 'test', null); 
		 d.documentElement.setUserData('key', 15, {handle:function (o, k, d, s, ds) {alert(o+'::'+k+'::'+d+'::'+s+'::'+ds)}}); // 2::key::15::[object Element]::[object Element]
		 alert(d.documentElement.getUserData('key')); // 15
		 var e = document.importNode(d.documentElement, true); // causes handler to be called
		 alert(e.getUserData('key')); // null since user data is not copied</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.setUserData"><linktext>MDC - Node.setUserData()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-setUserData"><linktext>W3C - Node.setUserData()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:transformNode"><apiName>transformNode</apiName><shortdesc>
		 Processes this node and its children using the supplied Extensible Stylesheet Language Transformations
		 (XSLT) style sheet and returns the resulting transformation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Returns a string that contains the product of the transformation of this XML document based on the XSLT style sheet.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>styleSheet</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Valid XML document or DOM node that consists of XSLT elements that direct the transformation of this node.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Processes this node and its children using the supplied Extensible Stylesheet Language Transformations
		 (XSLT) style sheet and returns the resulting transformation.
		 
		 <p><b>Note (IE):</b> This method is only valid if the XSLT feature has been included in the operating system 
		 (OS). If a call to this method is made and XSLT is not supported, an error message will be returned. </p>
		 
		 <p><b>Note (IE):</b> The stylesheet parameter must be either a  DOMDocument node, in which case the document 
		 is assumed to be an Extensible Stylesheet Language (XSL) style sheet, or a Document Object Model (DOM) node in the 
		 XSL style sheet, in which case this node is treated as a stand-alone style sheet fragment.</p>
		 
		 <p><b>Note (IE):</b> The source node defines a context in which the style sheet operates, but navigation outside 
		 this scope is allowed. For example, a style sheet can use the id function to access other parts of the document. </p>
		 
		 <p><b>Note (IE):</b> This method supports both stand-alone and embedded style sheets and also provides the 
		 ability to run a localized style sheet fragment against a particular source node.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924913.aspx"><linktext>MSDN - transformNode Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:transformNodeToObject"><apiName>transformNodeToObject</apiName><shortdesc>
		 Processes this node and its children using the supplied Extensible Stylesheet Language Transformations (XSLT) style sheet 
		 and returns the resulting transformation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleSheet</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Valid XML document or DOM node that consists of XSLT elements that direct the transformation of this node.
		 </apiDesc></apiParam><apiParam><apiItemName>outputObject</apiItemName><apiType value=""/><apiDesc>On return, contains the product of the transformation of this XML document based on the XSLT style sheet. 
		 If the variant represents the  DOMDocument object, the document is built according to its properties and its child nodes are 
		 replaced during this transformation process. The XML transformation can also be sent to a stream.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Processes this node and its children using the supplied Extensible Stylesheet Language Transformations (XSLT) style sheet 
		 and returns the resulting transformation.
		 
		 <p><b>Note (IE):</b> This method is only valid if the XSLT feature has been included in the operating system (OS). If 
		 a call to this method is made and XSLT is not supported, an error message will be returned. </p>
		 
		 <p><b>Note (IE):</b> The stylesheet parameter must be either a  DOMDocument node, in which case the document is assumed 
		 to be an XSLT style sheet, or a Document Object Model (DOM) node in the XSLT style sheet, in which case this node is treated 
		 as a stand-alone style sheet fragment.</p>
		 
		 <p><b>Note (IE):</b> The source node defines a context in which the style sheet operates, but navigation outside this 
		 scope is allowed. For example, a style sheet can use the id function to access other parts of the document. </p>
		 
		 <p><b>Note (IE):</b> This method supports both stand-alone and embedded style sheets and also provides the ability to 
		 run a localized style sheet fragment against a particular source node.</p>
		 
		 <p><b>Note (IE):</b> The transformNodeToObject method always generates a Unicode byte-order mark, which means it cannot 
		 be used in conjunction with other Active Server Pages (ASP) Response.Write or Response.BinaryWrite calls.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924282.aspx"><linktext>MSDN - transformNodeToObject Method</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:DOMError"><apiName>DOMError</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.core:ProcessingInstruction"><apiName>ProcessingInstruction</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.core:DOMStringList"><apiName>DOMStringList</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:DOMStringList:dom.core:DOMStringList:contains"><apiName>contains</apiName><shortdesc>
		 The column number this locator is pointing to, or -1 if there is no 
		 column number available.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the string has been found.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>str</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The string to look for. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The column number this locator is pointing to, or -1 if there is no 
		 column number available.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMStringList.contains"><linktext>MDC - DOMStringList.contains()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMStringList-contains"><linktext>W3C - DOMStringList.contains()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMStringList:dom.core:DOMStringList:item"><apiName>item</apiName><shortdesc>
		 Returns the index of the item in the collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The DOMString at the index position in the DOMStringList, or null 
		 if that is not a valid index.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index of the item in the collection. If index is greater than 
		 or equal to the number of DOMStrings in the list, this returns null. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMStringList.item"><linktext>MDC - DOMStringList.item()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMStringList-item"><linktext>W3C - DOMStringList.item()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:NodeList"><apiName>NodeList</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:NodeList:dom.core:NodeList:item"><apiName>item</apiName><shortdesc>
		 Returns the index item in the collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node at the indexth position in the NodeList, or null 
		 if that is not a valid index.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index item in the collection. If index is greater than
		 or equal to the number of nodes in the list, this returns null.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757028%28VS.85%29.aspx"><linktext>MSDN - item Method (IXMLDOMNodeList)</linktext></link><link href="http://developer.mozilla.org/En/DOM/NodeList.item"><linktext>MDC - NodeList.item()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-844377136"><linktext>W3C - NodeList.item()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NodeList:dom.core:NodeList:nextNode"><apiName>nextNode</apiName><shortdesc>
		 Returns the next node in the collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>An IXMLDOMNode refers to the next node in the collection. Returns Null if there is no next node.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the next node in the collection.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757831%28VS.85%29.aspx"><linktext>MSDN - nextNode Method (IXMLDOMNodeList)</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NodeList:dom.core:NodeList:reset"><apiName>reset</apiName><shortdesc>
		 Resets the iterator.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Resets the iterator.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms766592%28VS.85%29.aspx"><linktext>MSDN - reset Method (IXMLDOMNodeList)</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:Element"><apiName>Element</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>cssom.view:ElementView</apiBaseInterface><apiBaseInterface>elementtraversal:ElementTraversal</apiBaseInterface><apiBaseInterface>selectors:NodeSelector</apiBaseInterface><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:Element:addBehavior"><apiName>addBehavior</apiName><shortdesc>
		 Attaches a behavior to the element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="+5.5"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Returns an identifier that can be used later to detach the behavior from the element.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Location of the behavior, in URL format.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Attaches a behavior to the element.
		 
		 <p>This method, and the following remarks, apply only to attached 
		 behaviors, which are the original Dynamic HTML (DHTML) behaviors 
		 introduced in Microsoft Internet Explorer 5. Element behaviors are 
		 a feature in Internet Explorer 5.5 and cannot be added to or 
		 removed from an element.</p>
		 
		 <p>This method enables you to attach a behavior without using Cascading 
		 Style Sheets (CSS).</p>
		 
		 <p>Unless the specified behavior in the addBehavior call is one of the 
		 default behaviors built into Internet Explorer, the addBehavior call 
		 causes Internet Explorer to download the behavior asynchronously, 
		 before the behavior is attached to the element.</p>
		 
		 <p>Due to the asynchronous nature of the addBehavior method, its return 
		 value cannot be relied on to determine whether the behavior was 
		 successfully applied to the element. Waiting for the onreadystatechange 
		 event to fire and verifying that the readyState property of the element 
		 is set to complete ensure that the behavior is completely attached to 
		 the element, and that all the behavior's members are available for scripting. 
		 Otherwise, attempting to use any behavior-defined member before the 
		 behavior is attached to the element results in a scripting error indicating 
		 that the object does not support that particular member.</p>
		 
		 <p>Note : A behavior attached to an element using the addBehavior method, or by 
		 applying the proposed CSS behavior attribute inline, is not automatically 
		 detached from the element when the element is removed from the document hierarchy. 
		 However, a behavior attached using a style rule defined in the document is 
		 detached automatically as the element is removed from the document tree.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;SCRIPT LANGUAGE="JScript"&gt;
		 var collBehaviorID = new Array();
		 var collLI = new Array ();
		 var countLI = 0;
		 
		 function attachBehavior() {
		 	collLI = document.all.tags("LI");
		 	countLI = collLI.length;
		 	for (i=0; i &lt; countLI; i++) {
		 		var iID = collLI[i].addBehavior("hilite.htc");
		 
		 		if (iID) collBehaviorID[i] = iID;
		 	}
		 }
		 &lt;/SCRIPT&gt;
		 
		 //Click &lt;A HREF="javascript:attachBehavior()"&gt;here&lt;/A&gt;
		 //to add a highlighting effect as you hover over each item below.
		 </codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:applyElement"><apiName>applyElement</apiName><shortdesc>
		 Makes the element either a child or parent of another element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>Returns a reference to the applied element.
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/><apiDesc>An object that becomes the child or parent of the current element.
		 </apiDesc></apiParam><apiParam><apiItemName>where</apiItemName><apiData>outside</apiData><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies one of the following values. 
		 outside : Specified element becomes a parent of the current element.
		 inside : Specified element becomes a child of the current element, but contains all the child elements of the current element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Makes the element either a child or parent of another element.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;SCRIPT&gt;
		 function fnApply() {
		 	var oNewNode = document.createElement("I");
		 	oList.applyElement(oNewNode);
		 }
		 &lt;/SCRIPT&gt;
		 
		 &lt;UL ID = oList&gt;
		 &lt;LI&gt;List item 1
		 &lt;LI&gt;List item 2
		 &lt;LI&gt;List item 3
		 &lt;LI&gt;List item 4
		 &lt;/UL&gt;
		 &lt;INPUT TYPE="button" VALUE="Apply Element" onclick="fnApply()"&gt;
		 </codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:attachEvent"><apiName>attachEvent</apiName><shortdesc>
		 Binds the specified function to an event, so that the function gets called whenever 
		 the event fires on the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true (successful) or false (failed).
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The event string should include the "on" prefix (ie: "onload", "onclick" etc).
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The function or method to associate with the event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Binds the specified function to an event, so that the function gets called whenever 
		 the event fires on the object.
		 
		 </apiDesc><example>
		 <codeblock>if (window.attachEvent) window.attachEvent("onload", statusreport); //invoke function</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx"><linktext>MSDN - attachEvent Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:clearAttributes"><apiName>clearAttributes</apiName><shortdesc>
		 Removes all attributes and values from the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all attributes and values from the object.
		 
		 <p>The clearAttributes method clears only persistent HTML attributes. 
		 The ID attribute, styles, and script-only properties are not affected.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:componentFromPoint"><apiName>componentFromPoint</apiName><shortdesc>
		 Returns the component located at the specified coordinates via certain events.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Returns one of the following possible values.
		 <ul>
		 <li>empty string : Component is inside the client area of the object.</li>
		 <li>outside : Component is outside the bounds of the object.</li>
		 <li>scrollbarDown : Down scroll arrow is at the specified location.</li>
		 <li>scrollbarHThumb : Horizontal scroll thumb or box is at the specified location.</li>
		 <li>scrollbarLeft : Left scroll arrow is at the specified location.</li>
		 <li>scrollbarPageDown : Page-down scroll bar shaft is at the specified location.</li>
		 <li>scrollbarPageLeft : Page-left scroll bar shaft is at the specified location.</li>
		 <li>scrollbarPageRight : Page-right scroll bar shaft is at the specified location.</li>
		 <li>scrollbarPageUp : Page-up scroll bar shaft is at the specified location.</li>
		 <li>scrollbarRight : Right scroll arrow is at the specified location.</li>
		 <li>scrollbarUp : Up scroll arrow is at the specified location.</li>
		 <li>scrollbarVThumb : Vertical scroll thumb or box is at the specified location.</li>
		 <li>handleBottom : Bottom sizing handle is at the specified location.</li>
		 <li>handleBottomLeft : Lower-left sizing handle is at the specified location.</li>
		 <li>handleBottomRight : Lower-right sizing handle is at the specified location.</li>
		 <li>handleLeft : Left sizing handle is at the specified location.</li>
		 <li>handleRight : Right sizing handle is at the specified location.</li>
		 <li>handleTop : Top sizing handle is at the specified location.</li>
		 <li>handleTopLeft : Upper-left sizing handle is at the specified location.</li>
		 <li>handleTopRight : Upper-right sizing handle is at the specified location.</li>
		 </ul>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>The client window coordinate of x
		 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>The client window coordinate of y
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the component located at the specified coordinates via certain events.
		 
		 <p>IE Note: The componentFromPoint method, available as of Microsoft Internet Explorer 5, 
		 is applicable to any object that can be given scroll bars through Cascading Style Sheets (CSS).</p>
		 
		 <p>The componentFromPoint method might not return the same object consistently when it 
		 is used with the onmouseover event. Because a user's mouse speed and entry point 
		 can vary, different components of an element can fire the onmouseover event. For 
		 example, when a user moves the cursor over a textArea object with scroll bars, the 
		 event might fire when the mouse enters the component border, the scroll bars, or 
		 the client region. After the event fires, the expected element might not be returned, 
		 unless the scroll bars were the point of entry for the mouse. In this case, the 
		 onmousemove event can be used to provide more consistent results.</p>
		 
		 <p>For the object's sizing handles to appear, designMode must be On, and the object 
		 must be selected.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:contains"><apiName>contains</apiName><shortdesc>
		 Checks whether the given element is contained within the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/><apiDesc>Element object that specifies the element to check.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether the given element is contained within the object. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:createControlRange"><apiName>createControlRange</apiName><shortdesc>
		 Creates a controlRange collection of nontext elements.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Creates a controlRange collection of nontext elements.
		 
		 <p>IE Note: Creates a selection range object for control-based selection 
		 rather than text-based selection.</p>
		 
		 <p>If a controlRange already exists, createControlRange overwrites 
		 the existing element; otherwise, it returns a pointer to the element created.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:detachEvent"><apiName>detachEvent</apiName><shortdesc>
		 Unbinds the specified function from the event, so that the function stops receiving notifications when the event fires.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies any of the standard  DHTML Events.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Specifies the function previously set using the attachEvent method.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Unbinds the specified function from the event, so that the function stops receiving notifications when the event fires.
		 
		 <p><b>Note (IE):</b> Behaviors that attach to events using the attachEvent method must explicitly call 
		 the detachEvent method to stop receiving notifications from the page when the  ondetach event fires. 
		 Behaviors that attach to events using the  PUBLIC:ATTACH element automatically stop receiving notifications 
		 when the behavior detaches from the element, and thus do not need to call the detachEvent method.</p>
		 
		 </apiDesc><example>
		 This example calls the detachEvent method from an HTML Component (HTC) when the highlighting effect is 
		 removed from the page, causing the ondetach event to fire.
		 <codeblock>
		 &lt;PUBLIC:ATTACH EVENT="ondetach" ONEVENT="cleanup()" /&gt;
		 
		 &lt;script language="JScript"&gt;
		 attachEvent ('onmouseover', Hilite);
		 attachEvent ('onmouseout', Restore);
		 
		 function cleanup() {
		 	detachEvent ('onmouseover', Hilite);
		 	detachEvent ('onmouseout', Restore);
		 }
		 
		 function Hilite() {
		 	if (event.srcElement == element) { 
		 		normalColor = style.color;  
		 		runtimeStyle.color  = "red";
		 		runtimeStyle.cursor = "hand";
		 	}
		 }
		 
		 function Restore() {
		 	if (event.srcElement == element) {
		 		runtimeStyle.color  = normalColor;
		 		runtimeStyle.cursor = "";
		 	}
		 }
		 &lt;/script&gt;</codeblock>
		 
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536411%28VS.85%29.aspx"><linktext>MSDN - detachEvent Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:doScroll"><apiName>doScroll</apiName><shortdesc>
		 Simulates a click on a scroll-bar component.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>scrollAction</apiItemName><apiData>scrollbarDown</apiData><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies how the object scrolls, using one of the following values.
		 <ul>
		 <li>scrollbarDown : Default. Down scroll arrow is at the specified location.</li>
		 <li>scrollbarHThumb : Horizontal scroll thumb or box is at the specified location.</li>
		 <li>scrollbarLeft : Left scroll arrow is at the specified location.</li>
		 <li>scrollbarPageDown : Page-down scroll bar shaft is at the specified location.</li>
		 <li>scrollbarPageLeft : Page-left scroll bar shaft is at the specified location.</li>
		 <li>scrollbarPageRight : Page-right scroll bar shaft is at the specified location.</li>
		 <li>scrollbarPageUp : Page-up scroll bar shaft is at the specified location.</li>
		 <li>scrollbarRight : Right scroll arrow is at the specified location.</li>
		 <li>scrollbarUp : Up scroll arrow is at the specified location.</li>
		 <li>scrollbarVThumb : Vertical scroll thumb or box is at the specified location.</li>
		 <li>down : Composite reference to scrollbarDown.</li>
		 <li>left : Composite reference to scrollbarLeft.</li>
		 <li>pageDown : Composite reference to scrollbarPageDown.</li>
		 <li>pageLeft : Composite reference to scrollbarPageLeft.</li>
		 <li>pageRight : Composite reference to scrollbarPageRight.</li>
		 <li>pageUp : Composite reference to scrollbarPageUp.</li>
		 <li>right : Composite reference to scrollbarRight.</li>
		 <li>up : Composite reference to scrollbarUp.</li>
		 </ul>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Simulates a click on a scroll-bar component.
		 
		 <p>Cascading Style Sheets (CSS) allow you to scroll on all objects through 
		 the overflow property.</p>
		 
		 <p>When the content of an element changes and causes scroll bars to display, 
		 the doScroll method might not work correctly immediately following the 
		 content update. When this happens, you can use the setTimeout method to 
		 enable the browser to recognize the dynamic changes that affect scrolling.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:dragDrop"><apiName>dragDrop</apiName><shortdesc>
		 Initiates a drag event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Drag operation success
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Initiates a drag event.
		 
		 <p>You can use this method to fire the ondragstart event. If the event is 
		 not cancelled, a drag operation is started. The method returns true when 
		 the mouse is released. If the ondragstart event is cancelled, the method 
		 returns false immediately</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:fireEvent"><apiName>fireEvent</apiName><shortdesc>
		 Fires a specified event on the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Event fired successfully
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>String that specifies the name of the event to fire.
		 </apiDesc></apiParam><apiParam><apiItemName>event</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Object that specifies the event object from which to obtain event object properties.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Fires a specified event on the object.
		 
		 <p>If the event being fired cannot be cancelled, fireEvent always returns true.</p>
		 
		 <p>Regardless of their values specified in the event object, the values of the 
		 four event properties—cancelBubble, returnValue, srcElement, and type—are 
		 automatically initialized to the values shown in the following table.</p> 
		 
		 <ul>
		 <li>cancelBubble : false</li>
		 <li>returnValue : true</li>
		 <li>srcElement : element on which the event is fired</li>
		 <li>type : name of the event that is fired</li>
		 </ul>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536423%28VS.85%29.aspx"><linktext>MSDN - fireEvent Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:getAdjacentText"><apiName>getAdjacentText</apiName><shortdesc>
		 Returns the adjacent text string.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Returns the first adjacent text string. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>where</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies where the text is located by using one of the following values.
		 <ul>
		 <li>beforeBegin : Text is returned immediately before the element.</li>
		 <li>afterBegin : Text is returned after the start of the element but before all other content in the element.</li>
		 <li>beforeEnd : Text is returned immediately before the end of the element but after all other content in the element.</li>
		 <li>afterEnd : Text is returned immediately after the end of the element.</li>
		 </ul>
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the adjacent text string. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:getAttribute"><apiName>getAttribute</apiName><shortdesc>
		 Returns the value of the named attribute on the specified element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="5.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="7.0+"/><apiTool name="Safari" version="1.0+"/><apiSince version="DOM 1 Core"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>The value or null/""
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the value of the named attribute on the specified element.
		 
		 <p>If the named attribute does not exist, the value returned will 
		 either be null or "" (the empty string).</p>
		 
		 <p><b>Note:</b> Essentially all web browsers (Firefox, Internet Explorer, recent 
		 versions of Opera, Safari, Konqueror, and iCab, as a non-exhaustive list) 
		 return null when the specified attribute does not exist on the specified 
		 element. The DOM specification says that the correct return value in 
		 this case is actually the empty string, and some DOM implementations 
		 implement this behavior. The implementation of getAttribute in XUL (Gecko) 
		 actually follows the specification and returns an empty string. 
		 Consequently, you should use hasAttribute to check for an attribute's 
		 existence prior to calling getAttribute() if it is possible that the 
		 requested attribute does not exist on the specified element.</p>
		 
		 <p>The attributeName parameter is usually case sensitive, but it is case-insensitive 
		 when used upon HTML elements.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var div1 = document.getElementById("div1");
		 var align = div1.getAttribute("align");
		 alert(align); // shows the value of align for the element with id="div1"</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:getAttributeNS"><apiName>getAttributeNS</apiName><shortdesc>
		 Returns the string value of the attribute with the specified namespace and name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the implementation 
		 does not support the feature "XML" and the language exposed through the Document 
		 does not support XML Namespaces (such as [HTML 4.01]). 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The value or null/""
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>nameSpace</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace of the specified attribute. 
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the specified attribute. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the string value of the attribute with the specified namespace and name. 
		 
		 <p>If the named attribute does not exist, the value returned will either be null 
		 or "" (the empty string).</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var div1 = document.getElementById("div1");
		 var a = div1.getAttributeNS("www.mozilla.org/ns/specialspace/", "special-align");
		 alert(a); // shows the value of align for that div</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:getAttributeNode"><apiName>getAttributeNode</apiName><shortdesc>
		 Returns the Attr node for the attribute with the given name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="IE" version="6.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="7.0+"/><apiTool name="Safari" version="1.0+"/><apiSince version="DOM 1 Core"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>Returns a reference to an attribute object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the name property of the requested attribute object.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the Attr node for the attribute with the given name. 
		 
		 <p><b>Note:</b> (IE8+) In IE8 mode, getAttributeNode correctly 
		 populates the value property of the returned attribute object regardless of 
		 whether the specified property is set to true or false. For more information 
		 on IE8 mode, see Defining Document Compatibility.</p>
		 
		 <p><b>Note:</b> (IE8+) In IE8 mode, the value 
		 property is correctly reported as a canonical attribute name. For example, 
		 &lt;input type="text" readonly&gt; and &lt;input type="text" readonly="readonly"&gt; would 
		 both set the input text field to read-only. In IE8 mode, the value is evaluated 
		 as a cannonical value, "readonly". In IE7 and earlier modes, it is evaluated 
		 as a Boolean value, true.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-getAttributeNode"><linktext>DOM Level 1:getAttributeNode</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-217A91B8"><linktext>DOM Level 2:getAttributeNode</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:getAttributeNodeNS"><apiName>getAttributeNodeNS</apiName><shortdesc>
		 Returns the Attr node for the attribute with the given namespace and name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>The node for specified attribute
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>nameSpace</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifying the namespace of the attribute. 
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifying the name of the attribute. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the Attr node for the attribute with the given namespace and name. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:getBoundingClientRect"><apiName>getBoundingClientRect</apiName><shortdesc>
		 
		 Retrieves an object that specifies the bounds of a collection of TextRectangle objects.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5_buggy"/><apiTool name="IE" version="6.0_buggy"/><apiTool name="IE" version="7.0_buggy"/><apiTool name="IE" version="8.0_as_IE7_buggy"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_almost"/><apiTool name="Firefox" version="3.1b_almost"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0b_no"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0_no"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>cssom.view:TextRectangle</apiOperationClassifier><apiDesc>The returned value is a TextRectangle object which is the union 
		 of the rectangles returned by getClientRects() for the element, i.e., 
		 the CSS border-boxes associated with the element.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Retrieves an object that specifies the bounds of a collection of TextRectangle objects.
		 
		 <p><b>Note (IE8):</b> In IE8 mode, the bounding rectangle is the same as the client rectangle.</p>
		 
		 <p><b>Note (IE5):</b> In Microsoft Internet Explorer 5, the window's upper-left is at 
		 2,2 (pixels) with respect to the true client.</p>
		 
		 <p><b>Note (Firefox 3.5):</b> Firefox 3.5 adds width and height properties to the TextRectangle object.</p>
		 
		 <p><b>Note (Firefox):</b> Firefox doesn't round the top/bottom coordinates.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var rects = obj.getClientRects();
		 var numLines = rects.length;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536435(VS.85).aspx"><linktext>MSDN: getClientRects Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.getClientRects"><linktext>MDC - Element: getClientRects Method</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-getclientrects"><linktext>W3C - CSSOM View: getClientRects Method</linktext></link><link href="http://ejohn.org/blog/getboundingclientrect-is-awesome/"><linktext>John Resig</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#documentview"><linktext>Quirksmode: DocumentView and ElementView methods</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:getClientRects"><apiName>getClientRects</apiName><shortdesc>
		 
		 Retrieves a collection of rectangles that describes the layout of the 
		 contents of an object or range within the client.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_almost"/><apiTool name="Firefox" version="3.1b_almost"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0b_no"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0_no"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>cssom.view:TextRectangleList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		 Retrieves a collection of rectangles that describes the layout of the 
		 contents of an object or range within the client. Each rectangle 
		 describes a single line.
		 
		 <p><b>Note (IE8):</b> In IE8 mode, getClientRects always returns 
		 a collection of one rectangle—the same rectangle as getBoundingClientRect.</p>
		 
		 <p><b>Note (IE):</b> In IE5-7, split up a block-level element such as a &lt;p&gt; into one rectangle per line.
		 This is incorrect: a block-level element should be reported as one rectangle.</p>
		 
		 <p><b>Note (IE):</b> In IE5-7, the rectangles are off by about two pixels. According to John Resig this is caused by the 
		 (invisible, but nonetheless present) borders of the &lt;html&gt; element.</p>
		 
		 <p><b>Note (Firefox 3.5):</b> Firefox 3.5 adds width and height properties to the TextRectangle object.</p>
		 
		 <p><b>Note (Firefox):</b> Firefox doesn't round the top/bottom coordinates.</p>
		 
		 </apiDesc><example>
		 <codeblock>var rect = obj.getBoundingClientRect();</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536433(VS.85).aspx"><linktext>MSDN: getBoundingClientRect Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.getBoundingClientRect"><linktext>MDC - Element: getBoundingClientRect Method</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-getclientrects"><linktext>W3C - CSSOM View: getBoundingClientRect Method</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#documentview"><linktext>Quirksmode: DocumentView and ElementView methods</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:getElementsByClassName"><apiName>getElementsByClassName</apiName><shortdesc>
		 Returns a set of elements with the given class name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/><apiTool name="Firefox" version="3.0+"/><apiSince version="HTML 5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier><apiDesc>Returns a set of elements with the given class name.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the name of a class.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a set of elements with the given class name. 
		 
		 <p>When called on 
		 the document object, the complete document is searched, including 
		 the root node. You may also call getElementsByClassName on any element; 
		 it will return only elements under the specified root element with the 
		 given class name. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 //Get all elements that have a class of 'test' 
		 document.getElementsByClassName('test');
		 //Get all elements that have a class of 'red' and 'test' 
		 document.getElementsByClassName('red test');</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:getElementsByTagName"><apiName>getElementsByTagName</apiName><shortdesc>
		 Retrieves a collection of objects based on the specified element name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="IE" version="5.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="7.0+"/><apiTool name="Safari" version="1.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier><apiDesc>Returns a collection of objects with the specified element name.
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the name of an element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves a collection of objects based on the specified element name.
		 
		 </apiDesc><example>
		 <codeblock>
		 // check the alignment on a number of cells in a table. 
		 var table = document.getElementById("forecast-table"); 
		 var cells = table.getElementsByTagName("td"); 
		 for (var i = 0; i &lt; cells.length; i++) { 
		 		status = cells[i].getAttribute("status"); 
		 		if ( status == "open") { 
		 			// grab the data 
		 		}
		 }</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:getElementsByTagNameNS"><apiName>getElementsByTagNameNS</apiName><shortdesc>
		 Returns a list of elements with the given tag name belonging to the given namespace.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier><apiDesc>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>nameSpace</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of elements to look for (see element.namespaceURI). For example, if you need to look for XHTML elements, use the XHTML namespace URI, http://www.w3.org/1999/xhtml. 
		 </apiDesc></apiParam><apiParam><apiItemName>localName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Either the local name of elements to look for or the special value ", which matches all elements
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a list of elements with the given tag name belonging to the given namespace. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:getExpression"><apiName>getExpression</apiName><shortdesc>
		 Retrieves the expression for the given property.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>Returns a variant value representing the expression of the property.
		 </apiDesc></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the name of the property from which to retrieve the expression.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the expression for the given property. 
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;body&gt;
		 &lt;span id="trueBlueSpan" style="background-color:lightblue; width:100px"&gt;
		 The width of this blue span is set inline at 100 pixels.
		 &lt;/span&gt;
		 &lt;span id="oldYellowSpan" style="background-color:lightyellow; width:200px"&gt;
		 The width of this yelllow span is set inline at 200 pixels.
		 &lt;/span&gt;
		 &lt;br&gt;
		 &lt;span id="AlGreenSpan" style="background-color:lightgreen; width:expression(trueBlueSpan.style.pixelWidth + oldYellowSpan.style.pixelWidth)"&gt;
		 Click the button below to see the expression used to set the width of this span.
		 &lt;/span&gt;
		 &lt;br&gt;
		 &lt;button onclick=alert(AlGreenSpan.style.getExpression("width"));&gt;See Expression&lt;/button&gt;
		 &lt;/body&gt;</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:hasAttribute"><apiName>hasAttribute</apiName><shortdesc>
		 DOM Level 2 | NS\FireFox 
		 
		 Determines whether an attribute with the specified name exists.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the attribute exists.
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Name of the attribute. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 2 | NS\FireFox</b> 
		 
		 Determines whether an attribute with the specified name exists.
		 
		 </apiDesc><example>
		 <codeblock>
		 // check that the attribute exists before setting a value
		 var d = document.getElementById("div1"); 
		 if d.hasAttribute("align") { 
		 		d.setAttribute("align", "center"); 
		 }</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:hasAttributeNS"><apiName>hasAttributeNS</apiName><shortdesc>
		 Returns a boolean value indicating whether the current element has the specified attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiTool name="Safari" version="1.3+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces (such 
		 as [HTML 4.01]). 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc>
		 </apiDesc></apiReturn><apiParam><apiItemName>nameSpace</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifying the namespace of the attribute. 
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Name of the attribute. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a boolean value indicating whether the current element has the specified attribute. 
		 
		 </apiDesc><example>
		 <codeblock>
		 // check that the attribute exists 
		 // before you set a value 
		 var d = document.getElementById("div1"); 
		 if (d.hasAttributeNS("http://www.mozilla.org/ns/specialspace/", "special-align")) {
		 	d.setAttribute("align", "center");
		 }</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:insertAdjacentElement"><apiName>insertAdjacentElement</apiName><shortdesc>
		 Inserts an element at the specified location.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>Returns an element object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>where</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies where to insert the HTML element, using one of the following values.
		 <ul>
		 <li>beforeBegin : Inserts element immediately before the object.</li>
		 <li>afterBegin : Inserts element after the start of the object, but before all other content in the object.</li>
		 <li>beforeEnd : Inserts element immediately before the end of the object, but after all other content in the object.</li>
		 <li>afterEnd : Inserts element immediately after the end of the object.</li>
		 </ul>
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>Object that specifies the element to be inserted adjacent to the object that invoked the insertAdjacentElement method.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts an element at the specified location.
		 
		 <p>You cannot insert text while the document is loading. Wait 
		 for the onload event before attempting to call this method.</p>
		 
		 <p>If you try to insert an object that already exists on the page, 
		 the existing object is moved to the point that you specified in 
		 the insertAdjacentElement method; no new object is created.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:insertAdjacentHTML"><apiName>insertAdjacentHTML</apiName><shortdesc>
		 Inserts the given HTML text into the element at the location.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="4.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>where</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies where to insert the HTML element, using one of the following values.
		 <ul>
		 <li>beforeBegin : Inserts text immediately before the object.</li>
		 <li>afterBegin : Inserts text after the start of the object, but before all other content in the object.</li>
		 <li>beforeEnd : Inserts text immediately before the end of the object, but after all other content in the object.</li>
		 <li>afterEnd : Inserts text immediately after the end of the object.</li>
		 </ul>
		 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the HTML text to insert. The string can 
		 be a combination of text and HTML tags. This must be well-formed, 
		 valid HTML or this method will fail.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the given HTML text into the element at the location.
		 
		 <p>If the text contains HTML tags, the method parses and formats 
		 the text as it is inserted.</p>
		 
		 <p>You cannot insert text while the document is loading. Wait for 
		 the onload event to fire before attempting to call this method.</p>
		 
		 <p>When using the insertAdjacentHTML method to insert script, you 
		 must include the DEFER attribute in the script element. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:insertAdjacentText"><apiName>insertAdjacentText</apiName><shortdesc>
		 Inserts the given text into the element at the specified location.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>where</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies where to insert the text, using one of the following values.
		 <ul>
		 <li>beforeBegin : Inserts text immediately before the object.</li>
		 <li>afterBegin : Inserts text after the start of the object, but before all other content in the object.</li>
		 <li>beforeEnd : Inserts text immediately before the end of the object, but after all other content in the object.</li>
		 <li>afterEnd : Inserts text immediately after the end of the object.</li>
		 </ul>
		 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the text to insert.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the given text into the element at the specified location.
		 
		 <p>The text inserted into the element is plain text. You cannot insert text 
		 while the document loads. Wait for the onload event to fire before 
		 attempting to call this method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:mergeAttributes"><apiName>mergeAttributes</apiName><shortdesc>
		 Copies all read/write attributes to the specified element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>Pointer to an Object that specifies the attributes copied
		 to the object that invokes mergeAttributes.
		 </apiDesc></apiParam><apiParam><apiItemName>preserve</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Available as of Microsoft Internet Explorer 5.5. Specifies 
		 whether to preserve the identity of the object to which attributes are 
		 being merged or not.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies all read/write attributes to the specified element.
		 
		 <p>The mergeAttributes method copies persistent HTML attributes, 
		 events, and styles.</p>
		 
		 <p>IE Note: In Internet Explorer 5 and earlier, attributes that are read-only, 
		 such as ID, are not merged.</p>
		 
		 <p>IE Note: As of Internet Explorer 5.5, by choosing not to preserve the identity 
		 of the destination object, you can merge all attributes of an object, 
		 including ID and NAME.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:querySelector"><apiName>querySelector</apiName><shortdesc>
		 
		 Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Selectors" version="0"/><apiSince version="DOM 3 Core"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>The first matching Element node within the node’s subtree. If there is no such node, returns null. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>selectors</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One or more selectors
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;Selectors API Example&lt;/title&gt;
		 	&lt;/head&gt;
		 	&lt;body&gt;
		 
		 		&lt;div id="foo"&gt;
		 			&lt;p class="warning"&gt;This is a sample warning&lt;/p&gt;
		 			&lt;p class="error"&gt;This is a sample error&lt;/p&gt;
		 		&lt;/div&gt;
		 		&lt;div id="bar"&gt;
		 			&lt;p&gt;...&lt;/p&gt;
		 		&lt;/div&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 x would contain the first element in the document with an ID of either foo or bar (or both). In the sample document above, it would select the div element with the ID of foo because it is first in document order.
		 <codeblock>var x = document.querySelector("#foo, #bar");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/selectors-api/#nodeselector"><linktext>W3C Selectors API</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:querySelectorAll"><apiName>querySelectorAll</apiName><shortdesc>
		 
		 Returns a list of all elements descended from the element on which it is invoked that match the specified group of selectors.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Selectors" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5b4"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0b"/><apiSince version="DOM 3 Core"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier><apiDesc>A NodeList containing all of the matching Element nodes within the node’s subtree, in document order. If there are no such nodes, returns an empty NodeList.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>selectors</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One or more selectors
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns a list of all elements descended from the element on which it is invoked that match the specified group of selectors.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;Selectors API Example&lt;/title&gt;
		 	&lt;/head&gt;
		 	&lt;body&gt;
		 
		 		&lt;div id="foo"&gt;
		 			&lt;p class="warning"&gt;This is a sample warning&lt;/p&gt;
		 			&lt;p class="error"&gt;This is a sample error&lt;/p&gt;
		 		&lt;/div&gt;
		 		&lt;div id="bar"&gt;
		 			&lt;p&gt;...&lt;/p&gt;
		 		&lt;/div&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 The following example would select all p elements in the document that have a class of either "error" or "warning".
		 <codeblock>var alerts = document.querySelectorAll("p.warning, p.error");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/selectors-api/#nodeselector"><linktext>W3C Selectors API</linktext></link><link href="http://www.quirksmode.org/dom/w3c_core.html#gettingelements"><linktext>Quirksmode: Getting elements</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:releaseCapture"><apiName>releaseCapture</apiName><shortdesc>
		 Removes mouse capture from the object in the current document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0b_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes mouse capture from the object in the current document.
		 
		 <p>For releaseCapture to have an effect, you must set mouse capture through 
		 the setCapture method.</p>
		 
		 <p>You can invoke the releaseCapture method on the document object. The 
		 releaseCapture method makes it unnecessary to determine which element 
		 has capture to programmatically release it. Other actions that release 
		 document capture include displaying a modal dialog box and switching 
		 focus to another application or browser window.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;BODY onload="oOwnCapture.setCapture();" onclick="document.releaseCapture();"&gt;
		 &lt;DIV ID=oOwnCapture onmousemove="oWriteLocation.value = event.clientX + event.clientY"; onlosecapture="alert(event.srcElement.id + ' has lost mouse capture.')"&gt;
		 &lt;TEXTAREA ID=oWriteLocation COLS=2&gt;&lt;/TEXTAREA&gt;
		 &lt;/DIV&gt;
		 &lt;HR&gt;
		 &lt;DIV ID=oNoCapture&gt;
		 &lt;P&gt;Click the document to invoke the releaseCapture method.&lt;/P&gt;
		 &lt;/DIV&gt;
		 &lt;/BODY&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536689%28VS.85%29.aspx"><linktext>MSDN - releaseCapture Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:removeAttribute"><apiName>removeAttribute</apiName><shortdesc>
		 Removes an attribute from the specified element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="4.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiTool name="Safari" version="1.0+"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the attribute to be removed from element. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes an attribute from the specified element. 
		 
		 <p>Note : You should use removeAttribute instead of setting 
		 the attribute value to null using setAttribute. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // &lt;div id="div1" align="left" width="200px"&gt;
		 document.getElementById("div1").removeAttribute("align"); 
		 // now: &lt;div id="div1" width="200px"&gt;</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:removeAttributeNS"><apiName>removeAttributeNS</apiName><shortdesc>
		 Removes the specified attribute from an element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces (such 
		 as [HTML 4.01]). 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>nameSpace</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Contains the namespace of the attribute. 
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The attribute to be removed from the current node.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the specified attribute from an element.
		 
		 <p>FF Note : In Firefox 3 and later, this method resets DOM values to their defaults. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // &lt;div id="div1" xmlns:special="http://www.mozilla.org/ns/specialspace" special:specialAlign="utterleft" width="200px" /&gt; 
		 d = document.getElementById("div1"); 
		 d.removeAttributeNS("http://www.mozilla.org/ns/specialspace", "specialAlign"); 
		 // now: &lt;div id="div1" width="200px" /&gt;</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:removeAttributeNode"><apiName>removeAttributeNode</apiName><shortdesc>
		 Removes an attribute object from the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="6.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiTool name="Safari" version="1.0+"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if oldAttr is not 
		 an attribute of the element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>Returns a reference to the removed attribute object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>The Attr node that needs to be removed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes an attribute object from the object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:removeBehavior"><apiName>removeBehavior</apiName><shortdesc>
		 Detaches a behavior from the element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If it was successfully removed.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="Number"/><apiDesc>Specifies the identifier that is returned from a previous addBehavior call.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Detaches a behavior from the element. 
		 
		 <p>This method applies only to attached behaviors, which are the original 
		 Dynamic HTML (DHTML) behaviors introduced in Microsoft Internet Explorer 5. 
		 Element behaviors are a feature in Internet Explorer 5.5 and cannot be 
		 added or removed from an element.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:removeExpression"><apiName>removeExpression</apiName><shortdesc>
		 Removes the expression from the specified property.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the expression was successfully removed.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the name of the property from which to remove an expression.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the expression from the specified property. 
		 
		 <p>After the expression is removed from the specified property, the value 
		 of the property equals the last computed value of the expression. To 
		 remove expressions set by the setExpression method, use removeExpression. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:removeNode"><apiName>removeNode</apiName><shortdesc>
		 Removes the object from the document hierarchy.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Returns a reference to the object that is removed.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>removeChildren</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>If the childNodes collection of the object is removed
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the object from the document hierarchy.
		 
		 <p>This property is accessible at run time. If elements are removed at 
		 run time, before the closing tag is parsed, areas of the document 
		 might not render.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536708%28VS.85%29.aspx"><linktext>MSDN - removeNode Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:replaceAdjacentText"><apiName>replaceAdjacentText</apiName><shortdesc>
		 Replaces the text adjacent to the element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A pointer to a String returning the old text.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>where</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies where to locate the replacement text, using one of the following values. 
		 <ul>
		 <li>beforeBegin : Inserts text immediately before the object.</li>
		 <li>afterBegin : Inserts text after the start of the object, but before all other content in the object.</li>
		 <li>beforeEnd : Inserts text immediately before the end of the object, but after all other content in the object.</li>
		 <li>afterEnd : Inserts text immediately after the end of the object.</li>
		 </ul>
		 </apiDesc></apiParam><apiParam><apiItemName>replaceText</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the replacement text.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the text adjacent to the element.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:replaceNode"><apiName>replaceNode</apiName><shortdesc>
		 Replaces the object with another element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Returns a reference to the object that is replaced.
		 </apiDesc></apiReturn><apiParam><apiItemName>newNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies the new element to replace the object.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the object with another element.
		 
		 <p>When a node is replaced, all values that are associated with the 
		 replaced object are removed. For example, if a b object is replaced 
		 with an i object, any attributes and text between the opening and 
		 closing tags are also replaced. To preserve these values, copy them 
		 to the new element before the original object is replaced.</p>
		 
		 <p>This method is accessible at run time. If elements are removed at run 
		 time before the closing tag is parsed, areas of the document might 
		 not render.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;SCRIPT&gt;
		 function fnReplace() {
		 var sPreserve = oList.innerHTML;
		 var oNewNode = document.createElement("OL");
		 oList.replaceNode(oNewNode);
		 oNewNode.innerHTML = sPreserve;
		 }
		 &lt;/SCRIPT&gt;
		 
		 &lt;UL ID = oList&gt;
		 &lt;LI&gt;List Item 1
		 &lt;LI&gt;List Item 2
		 &lt;LI&gt;List Item 3
		 &lt;LI&gt;List Item 4
		 &lt;/UL&gt;
		 &lt;INPUT TYPE = button VALUE = "Replace List" onclick = "fnReplace()"&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536719%28VS.85%29.aspx"><linktext>MSDN - replaceNode Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:scrollIntoView"><apiName>scrollIntoView</apiName><shortdesc>
		 Causes the object to scroll into view, aligning it either at the top 
		 or bottom of the window.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>alignToTop</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Whether to scroll the object so that top of the object is visible at the top of the window.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Causes the object to scroll into view, aligning it either at the top 
		 or bottom of the window. 
		 
		 <p>The scrollIntoView method is useful for immediately showing the user
		 the result of some action without requiring the user to manually 
		 scroll through the document to find the result.</p>
		 
		 <p>Depending on the size of the given object and the current window, this 
		 method might not be able to put the item at the very top or very bottom, 
		 but will position the object as close to the requested position as possible.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;ScrollIntoView() example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 function showIt(elID) {
		 var el = document.getElementById(elID);
		 el.scrollIntoView(true);
		 }
		 &lt;/script&gt;
		 
		 &lt;/head&gt;
		 &lt;body&gt;
		 	&lt;div style="height: 5em; width: 30em; overflow: scroll; border: 1px solid blue;"&gt;
		 		&lt;div style="height: 100px"&gt;&lt;/div&gt;
		 		&lt;p id="pToShow"&gt;The para to show&lt;/p&gt;
		 		&lt;div style="height: 100px"&gt;&lt;/div&gt;
		 	&lt;/div&gt;
		 	&lt;input type="button" value="Show para" onclick="showIt('pToShow');"&gt;
		 &lt;/body&gt;</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setActive"><apiName>setActive</apiName><shortdesc>
		 Sets the object as active without setting focus to the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.5+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Sets the object as active without setting focus to the object.
		 
		 <p>The setActive method does not cause the document to scroll to the 
		 active object in the current page or in another frame or window. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;script&gt;
		 function fnBottomActive() {
		 		//Set the object with ID=btnLarger active in frame with ID=oFrame1.
		 		window.parent.oFrame1.secondButton.setActive();
		 }
		 &lt;/script&gt;</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setAttribute"><apiName>setAttribute</apiName><shortdesc>
		 Sets the value of the specified attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="5.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiTool name="Safari" version="1.0+"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified name is not an XML name according to the XML version in 
		 use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the name of the attribute.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Specifies the string, number, or Boolean to assign to the attribute. 
		 </apiDesc></apiParam><apiParam><apiItemName>caseSensitive</apiItemName><apiType value=""/><apiDesc>(IE Only) Specifies whether to use a case-sensitive 
		 search to locate the attribute. Can be one of the following values: 
		 1 : The case of name  is respected. 
		 0 : Match name regardless of case.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the value of the specified attribute.
		 
		 <p>IE Note: Internet Explorer 8 and later. IE8 mode enables several enhancements 
		 to the setAttribute, getAttribute, and removeAttribute methods that 
		 are not available when pages are displayed in earlier document modes.</p>
		 
		 <p>The name parameter requires the name of the desired content 
		 attribute and not the Document Object Model (DOM) attribute. For example,
		 in IE8 mode, this method no longer requires name to be "className" 
		 when setting, getting, or removing a CLASS attribute. Earlier versions of 
		 Internet Explorer and Internet Explorer 8 in compatibility mode still 
		 require name to specify the corresponding DOM property name.</p>
		 
		 <p>The name parameter is not case sensitive. As a result, the 
		 caseSensitive parameter is no longer supported and should not be used.</p>
		 
		 <p>The methods support event handlers. For example, the following code example 
		 defines an event handler to call a function called SomeFunction when the 
		 body of the page is loaded.</p>
		 
		 <p>document.body.setAttribute('onload', 'SomeFunction()');</p>
		 
		 <p>If the specified attribute is not already present, the setAttribute method 
		 adds the attribute to the object and sets the value.</p>
		 
		 <p>If your pages are displayed in IE5 mode or IE7 mode, be careful when spelling 
		 attribute names. If you set iCaseSensitive to 1 and the name parameter does 
		 not have the same uppercase and lowercase letters as the attribute, a new 
		 attribute is created for the object. If two or more attributes have the 
		 same name, differing only in case, and iCaseSensitive is set to 0, this method 
		 assigns values only to the first attribute created with this name. All other 
		 attributes of the same name are ignored.</p>
		 
		 <p>New for Internet Explorer 8 Internet Explorer 8 and later. When pages are 
		 displayed in IE8 mode, the vValue parameter only supports string values. Non-string
		 values are not automatically converted to string values. For best results, 
		 formally convert values to strings before using them as parameter values. For 
		 example, do not attempt to pass an object directly to the vValue parameter; call 
		 the object's toString method instead.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setAttributeNS"><apiName>setAttributeNS</apiName><shortdesc>
		 Adds a new attribute or changes the value of an attribute with the 
		 given namespace and name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified qualified name is not an XML name according to the XML 
		 version in use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the qualifiedName 
		 is malformed per the Namespaces in XML specification, if the 
		 qualifiedName has a prefix and the namespaceURI is null, if the 
		 qualifiedName has a prefix that is "xml" and the namespaceURI is different 
		 from "http://www.w3.org/XML/1998/namespace", if the qualifiedName or 
		 its prefix is "xmlns" and the namespaceURI is different from 
		 "http://www.w3.org/2000/xmlns/", or if the namespaceURI is 
		 "http://www.w3.org/2000/xmlns/" and neither the qualifiedName nor its prefix 
		 is "xmlns".
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces (such 
		 as [HTML 4.01]). 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>nameSpace</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifying the namespace of the attribute. 
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The attribute to be set. 
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>The desired string value of the new attribute. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a new attribute or changes the value of an attribute with the 
		 given namespace and name. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var d = document.getElementById("d1");
		 d.setAttributeNS("http://www.mozilla.org/ns/specialspace", "align", "center");</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setAttributeNode"><apiName>setAttributeNode</apiName><shortdesc>
		 Sets an attribute object node as part of the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="4.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiTool name="Safari" version="1.0+"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if newAttr 
		 was created from a different document than the one that created 
		 the element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INUSE_ATTRIBUTE_ERR: Raised if newAttr 
		 is already an attribute of another Element object. The DOM user must 
		 explicitly clone Attr nodes to re-use them in other elements.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>Returns a reference to the removed attribute object.
		 </apiDesc></apiReturn><apiParam><apiItemName>attrNode</apiItemName><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>Attribute object to be assigned.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets an attribute object node as part of the object.
		 
		 <p>If the attribute named already exists on the element, that attribute
		 is replaced with the new one and the replaced one is returned.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // &lt;div id="one" align="left"&gt;one&lt;/div&gt; 
		 // &lt;div id="two"&gt;two&lt;/div&gt; 
		 var d1 = document.getElementById("one"); 
		 var d2 = document.getElementById("two"); 
		 var a = d1.getAttributeNode("align"); 
		 d2.setAttributeNode(a.cloneNode(true)); 
		 alert(d2.attributes[1].value) 
		 // returns: `left'</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setAttributeNodeNS"><apiName>setAttributeNodeNS</apiName><shortdesc>
		 Adds a new attribute node with the specified namespace and name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if newAttr 
		 was created from a different document than the one that created 
		 the element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INUSE_ATTRIBUTE_ERR: Raised if newAttr 
		 is already an attribute of another Element object. The DOM user must 
		 explicitly clone Attr nodes to re-use them in other elements.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces (such 
		 as [HTML 4.01]). 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>attrNode</apiItemName><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>Attribute object to be assigned.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a new attribute node with the specified namespace and name.
		 
		 <p>If the specified attribute already exists on the element, then that
		 attribute is replaced with the new one and the replaced one is returned.</p>
		 
		 <p>Note: If you try to set without cloning the node, Mozilla gives an 
		 NS_ERROR_DOM_INUSE_ATTRIBUTE_ERR "Attribute already in use" error, as the 
		 DOM requires cloning for Attr to be reused (unlike other Nodes which can 
		 be moved).</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // &lt;div id="one" xmlns:myNS="http://www.mozilla.org/ns/specialspace" myNS:special-align="utterleft"&gt;one&lt;/div&gt; 
		 // &lt;div id="two"&gt;two&lt;/div&gt; 
		 
		 var myns = "http://www.mozilla.org/ns/specialspace"; 
		 var d1 = document.getElementById("one"); 
		 var d2 = document.getElementById("two"); 
		 var a = d1.getAttributeNodeNS(myns, "special-align"); 
		 d2.setAttributeNodeNS(a.cloneNode(true));
		 alert(d2.attributes[1].value) // returns: `utterleft'</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setCapture"><apiName>setCapture</apiName><shortdesc>
		 Sets the mouse capture to the object that belongs to the current document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>containerCapture</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>(IE 5.5+) Whether events originating in a container are captured by the container.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the mouse capture to the object that belongs to the current document.
		 
		 <p>After mouse capture is set to an object, all mouse events for the document 
		 are routed to that object. Supported mouse events include onmousedown, 
		 onmouseup, onmousemove, onclick, ondblclick, onmouseover, and onmouseout. 
		 The srcElement property of the window event object always returns the object 
		 that is positioned under the mouse, instead of the object that has mouse capture.</p>
		 
		 <p>Mouse clicks automatically trigger the onlosecapture event. To retain mouse 
		 capture, call setCapture inside the onclick event handler. Mouse capture is 
		 also lost if the browser window loses focus for any reason (including alerts or 
		 pop-up windows).</p>
		 
		 <p>When the containerCapture parameter is set to true, a container object, such as 
		 a div, captures mouse events for all objects in it. By passing the value false, 
		 objects in that container can fire events, and cancel event bubbling.</p>
		 
		 <p>Drag-and-drop operations, such as the ondragstart event, and text selection 
		 through the user interface are disabled when mouse capture is set 
		 programmatically. The following key events are unaffected by mouse capture and 
		 fire as usual: onkeydown, onkeyup, and onkeypress. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;BODY onload="oOwnCapture.setCapture()" onclick="document.releaseCapture()"&gt;
		 &lt;DIV ID=oOwnCapture STYLE="background-color:#ccc;padding:6pt"
		 onmousemove="oWriteLocation.value = event.x + ':' + event.y";
		 onlosecapture="alert(event.srcElement.id + ' lost mouse capture.')"&gt;
		 &lt;P&gt;Mouse capture has been set to this gray division (DIV) 
		 at load time using the setCapture method. The text area will 
		 track the mousemove event through the &lt;B&gt;x&lt;/B&gt; 
		 and &lt;B&gt;y&lt;/B&gt; properties of the event object.&lt;BR&gt;
		 &lt;P&gt;Event bubbling works as usual on objects within a 
		 container that has mouse capture. Demonstrate this concept by 
		 clicking the button below or changing the active window from 
		 this one and then back. After oOwnCapture loses mouse capture, 
		 the text area continues tracking the mousemove events only 
		 while the cursor is over objects it contains.&lt;/P&gt;
		 &lt;BR&gt;&lt;BR&gt;
		 &lt;TEXTAREA ID=oWriteLocation COLS=9&gt; &lt;/TEXTAREA&gt;
		 &lt;/DIV&gt;
		 &lt;HR&gt;
		 &lt;DIV ID=oNoCapture&gt;
		 &lt;P&gt;This white division is here to illustrate that mousemove 
		 events over objects it contains are captured on the gray 
		 division, oOwnCapture.
		 &lt;INPUT VALUE="Move mouse over this object."&gt;
		 &lt;BUTTON&gt;Click Anywhere to End Mouse Capture&lt;/BUTTON&gt;
		 &lt;/DIV&gt;
		 &lt;/BODY&gt;</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setExpression"><apiName>setExpression</apiName><shortdesc>
		 Sets an expression for the specified object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the name of the property to which 
		 sExpression  is added.
		 </apiDesc></apiParam><apiParam><apiItemName>expression</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies any valid script(JScript, JavaScript, 
		 VBSCript) statement without quotations or semicolons. This string 
		 can include references to other properties on the current page. Array
		 references are not allowed on object properties included in this script.
		 </apiDesc></apiParam><apiParam><apiItemName>language</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies one of the following values:
		 <ul>
		 <li>JScript : Default. Language is JScript.</li>
		 <li>VBScript : Language is VBScript.</li>
		 <li>JavaScript : Language is JavaScript.</li>
		 </ul>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets an expression for the specified object. 
		 
		 <p>Use the setExpression method to add expressions to supported Cascading 
		 Style Sheets (CSS) attributes and read/write DHTML Properties. To remove 
		 expressions set by setExpression, use the removeExpression method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setIdAttribute"><apiName>setIdAttribute</apiName><shortdesc>
		 If the parameter isId is true, this method declares the specified 
		 attribute to be a user-determined ID attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOM 3 Core"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if the specified 
		 node is not an attribute of this element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the attribute.
		 </apiDesc></apiParam><apiParam><apiItemName>isId</apiItemName><apiType value="Boolean"/><apiDesc>Whether the attribute is a of type ID.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <p>If the parameter isId is true, this method declares the specified 
		 attribute to be a user-determined ID attribute. This affects the value 
		 of Attr.isId and the behavior of Document.getElementById, but does not 
		 change any schema that may be in use, in particular this does not 
		 affect the Attr.schemaTypeInfo of the specified Attr node. Use the value 
		 false for the parameter isId to undeclare an attribute for being a 
		 user-determined ID attribute.
		 To specify an attribute by local name and namespace URI, use the setIdAttributeNS
		 method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setIdAttributeNS"><apiName>setIdAttributeNS</apiName><shortdesc>
		 If the parameter isId is true, this method declares the specified 
		 attribute to be a user-determined ID attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOM 3 Core"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if the specified 
		 node is not an attribute of this element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>nameSpaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the attribute.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the attribute.
		 </apiDesc></apiParam><apiParam><apiItemName>isId</apiItemName><apiType value="Boolean"/><apiDesc>Whether the attribute is a of type ID.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <p>If the parameter isId is true, this method declares the specified 
		 attribute to be a user-determined ID attribute. This affects the value 
		 of Attr.isId and the behavior of Document.getElementById, but does not 
		 change any schema that may be in use, in particular this does not 
		 affect the Attr.schemaTypeInfo of the specified Attr node. Use the value 
		 false for the parameter isId to undeclare an attribute for being a 
		 user-determined ID attribute.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setIdAttributeNode"><apiName>setIdAttributeNode</apiName><shortdesc>
		 If the parameter isId is true, this method declares the specified attribute 
		 to be a user-determined ID attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOM 3 Core"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if the specified 
		 node is not an attribute of this element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>idAttr</apiItemName><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>The attribute node.
		 </apiDesc></apiParam><apiParam><apiItemName>isId</apiItemName><apiType value="Boolean"/><apiDesc>Whether the attribute is a of type ID.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <p>If the parameter isId is true, this method declares the specified attribute 
		 to be a user-determined ID attribute. This affects the value of Attr.isId 
		 and the behavior of Document.getElementById, but does not change any schema 
		 that may be in use, in particular this does not affect the 
		 Attr.schemaTypeInfo of the specified Attr node. Use the value false for the 
		 parameter isId to undeclare an attribute for being a user-determined ID attribute. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:swapNode"><apiName>swapNode</apiName><shortdesc>
		 Exchanges the location of two objects in the document hierarchy.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Returns a reference to the object that invoked the method.
		 </apiDesc></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies the existing element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Exchanges the location of two objects in the document hierarchy.
		 
		 <p>This method is accessible at run time. If elements are removed at 
		 run time, before the closing tag is parsed, areas of the document 
		 might not render.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;script&gt;
		 		function fnSwap() {
		 			oList.children(0).swapNode(oList.children(1));
		 		}
		 &lt;/script&gt;
		 
		 &lt;ul ID = oList&gt;
		 		&lt;li&gt;List Item 1&lt;/li&gt;
		 		&lt;li&gt;List Item 2&lt;/li&gt;
		 		&lt;li&gt;List Item 3&lt;/li&gt;
		 		&lt;li&gt;List Item 4&lt;/li&gt;
		 &lt;/ul&gt;
		 &lt;input type=button value="Swap List" onclick="fnSwap()"&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536774%28VS.85%29.aspx"><linktext>MSDN - swapNode Method</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:DOMImplementationSource"><apiName>DOMImplementationSource</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.core:DOMImplementationSource:dom.core:DOMImplementationSource:getDOMImplementation"><apiName>getDOMImplementation</apiName><shortdesc>
		 A method to request the first DOM implementation that supports the 
		 specified features.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:DOMImplementation</apiOperationClassifier><apiDesc>The first DOM implementation that support the desired features, or 
		 null if this source has none.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>features</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string that specifies which features and versions are 
		 required. This is a space separated list in which each feature is specified 
		 by its name optionally followed by a space and a version number.
		 This method returns the first item of the list returned by getDOMImplementationList.
		 As an example, the string "XML 3.0 Traversal +Events 2.0" will request a DOM 
		 implementation that supports the module "XML" for its 3.0 version, a module 
		 that support of the "Traversal" module for any version, and the module 
		 "Events" for its 2.0 version. The module "Events" must be accessible using the 
		 method Node.getFeature() and DOMImplementation.getFeature(). 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 A method to request the first DOM implementation that supports the 
		 specified features. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementationSource.getDOMImplementation"><linktext>MDC - DOMImplementationSource.getDOMImplementation()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-getDOMImpl"><linktext>W3C - DOMImplementationSource.getDOMImplementation()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMImplementationSource:dom.core:DOMImplementationSource:getDOMImplementationList"><apiName>getDOMImplementationList</apiName><shortdesc>
		 A method to request a list of DOM implementations that support the 
		 specified features and versions, as specified in DOM Features.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:DOMImplementationList</apiOperationClassifier><apiDesc>A list of DOM implementations that support the desired features.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>features</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string that specifies which features and versions are required. 
		 This is a space separated list in which each feature is specified by its name 
		 optionally followed by a space and a version number. This is something like: 
		 "XML 3.0 Traversal +Events 2.0"
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 A method to request a list of DOM implementations that support the 
		 specified features and versions, as specified in DOM Features.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementationSource.getDOMImplementationList"><linktext>MDC - DOMImplementationSource.getDOMImplementationList()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-getDOMImpls"><linktext>W3C - DOMImplementationSource.getDOMImplementationList()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:Entity"><apiName>Entity</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="dom.events"><apiName>dom.events</apiName><apiClassifier id="dom.events:KeyboardEvent"><apiName>KeyboardEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:UIEvent</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:KeyboardEvent:getModifierState"><apiName>getModifierState</apiName><shortdesc>
		 Queries the state of a modifier using a key identifier.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If it is a modifier key and the modifier is activated
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>keyIdentifierArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A modifier key identifier. Common modifier 
		 keys are "Alt", "AltGraph", "CapsLock", "Control", "Meta", "NumLock", 
		 "Scroll", or "Shift".
		 
		 <p><b>Note:</b> If an application wishes to distinguish between right and left 
		 modifiers, this information could be deduced using keyboard events 
		 and KeyboardEvent.keyLocation.</p>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Queries the state of a modifier using a key identifier.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-KeyboardEvent-getModifierState"><linktext>W3C - DOM 3 Events: KeyboardEvent.getModifierState()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/keyset.html#Modifiers"><linktext>Modifier Keys</linktext></link></related-links></apiOperation><apiOperation id="dom.events:KeyboardEvent:initKeyboardEvent"><apiName>initKeyboardEvent</apiName><shortdesc>
		 Initializes attributes of a KeyboardEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>keyIdentifierArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies KeyboardEvent.keyIdentifier.
		 </apiDesc></apiParam><apiParam><apiItemName>keyLocationArg</apiItemName><apiType value="Number"/><apiDesc>Specifies KeyboardEvent.keyLocation.
		 </apiDesc></apiParam><apiParam><apiItemName>modifiersListArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A white space separated list of modifier key 
		 identifiers to be activated on this object. As an example, "Control Alt" 
		 will mark the control and alt modifiers as activated.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a KeyboardEvent object. This method has the 
		 same behavior as UIEvent.initUIEvent(). The value of UIEvent.detail 
		 remains undefined.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-KeyboardEvent-initKeyboardEvent"><linktext>W3C - DOM 3 Events: KeyboardEvent.initKeyboardEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:KeyboardEvent:initKeyboardEventNS"><apiName>initKeyboardEventNS</apiName><shortdesc>
		 Initializes attributes of a KeyboardEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>keyIdentifierArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies KeyboardEvent.keyIdentifier.
		 </apiDesc></apiParam><apiParam><apiItemName>keyLocationArg</apiItemName><apiType value="Number"/><apiDesc>Specifies KeyboardEvent.keyLocation.
		 </apiDesc></apiParam><apiParam><apiItemName>modifiersListArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A white space separated list of modifier key 
		 identifiers to be activated on this object. As an example, "Control Alt" 
		 will mark the control and alt modifiers as activated.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a KeyboardEvent object. This method has the 
		 same behavior as UIEvent.initUIEventNS(). The value of UIEvent.detail 
		 remains undefined. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-KeyboardEvent-initKeyboardEventNS"><linktext>W3C - DOM 3 Events: KeyboardEvent.initKeyboardEventNS()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:KeyEvent"><apiName>KeyEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:UIEvent</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:KeyEvent:checkModifier"><apiName>checkModifier</apiName><shortdesc>
		 The CheckModifier method is used to check the status of a single modifier key associated with a KeyEvent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>The status of the modifier represented as a boolean.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>modifer</apiItemName><apiType value="Number"/><apiDesc>The modifier which the user wishes to query.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The CheckModifier method is used to check the status of a single modifier key associated with a KeyEvent. 
		 The identifier of the modifier in question is passed into the CheckModifier function. If the modifier is 
		 triggered it will return true. If not, it will return false.
		 
		 <p>The list of keys below represents the allowable modifier paramaters for this method. </p>
		 <ul>
		 <li>DOM_VK_LEFT_ALT</li>
		 <li>DOM_VK_RIGHT_ALT</li>
		 <li>DOM_VK_LEFT_CONTROL</li>
		 <li>DOM_VK_RIGHT_CONTROL</li>
		 <li>DOM_VK_LEFT_SHIFT</li>
		 <li>DOM_VK_RIGHT_SHIFT</li>
		 <li>DOM_VK_META</li>
		 </ul>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-KeyEvent-checkModifier"><linktext>W3C - DOM 3 Events: KeyEvent.checkModifier()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:KeyEvent:initKeyEvent"><apiName>initKeyEvent</apiName><shortdesc>
		 The initKeyEvent method is used to initialize the value of a MouseEvent created through 
		 the DocumentEvent interface.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether or not the event can bubble.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether or not the event's default action can be prevent.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies the KeyEvent's AbstractView.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiType value="Number"/><apiDesc>Specifies the number of repeated keypresses, if available.
		 </apiDesc></apiParam><apiParam><apiItemName>outputStringArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the KeyEvent's outputString attribute
		 </apiDesc></apiParam><apiParam><apiItemName>keyValArg</apiItemName><apiType value="Number"/><apiDesc>Specifies the KeyEvent's keyValattribute
		 </apiDesc></apiParam><apiParam><apiItemName>virtKeyValArg</apiItemName><apiType value="Number"/><apiDesc>Specifies the KeyEvent's virtKeyValattribute
		 </apiDesc></apiParam><apiParam><apiItemName>inputGeneratedArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies the KeyEvent's inputGeneratedattribute
		 </apiDesc></apiParam><apiParam><apiItemName>numPadArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies the KeyEvent's numPadattribute
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The initKeyEvent method is used to initialize the value of a MouseEvent created through 
		 the DocumentEvent interface. This method may only be called before the KeyEvent has been 
		 dispatched via the dispatchEvent method, though it may be called multiple times during that 
		 phase if necessary. If called multiple times, the final invocation takes precedence. This 
		 method has no effect if called after the event has been dispatched. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-Event-initKeyEvent"><linktext>W3C - DOM 3 Events: KeyEvent.initKeyEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:KeyEvent:initModifier"><apiName>initModifier</apiName><shortdesc>
		 The initModifier method is used to initialize the values of any modifiers associated with a KeyEvent 
		 created through the DocumentEvent interface.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modifier</apiItemName><apiType value="Number"/><apiDesc>The modifier which the user wishes to initialize
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc>The new value of the modifier.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The initModifier method is used to initialize the values of any modifiers associated with a KeyEvent 
		 created through the DocumentEvent interface. This method may only be called before the KeyEvent has 
		 been dispatched via the dispatchEvent method, though it may be called multiple times during that phase 
		 if necessary. If called multiple times with the same modifier property the final invocation takes 
		 precedence. Unless explicitly give a value of true, all modifiers have a value of false. This method 
		 has no effect if called after the event has been dispatched.
		 
		 <p>The list of keys below represents the allowable modifier paramaters for this method. </p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-KeyEvent-initModifier"><linktext>W3C - DOM 3 Events: KeyEvent.initModifier()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:UIEvent"><apiName>UIEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:Event</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:UIEvent:initUIEvent"><apiName>initUIEvent</apiName><shortdesc>
		 Initializes attributes of an UIEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiType value="Number"/><apiDesc>Specifies UIEvent.detail.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of an UIEvent object. This method has the 
		 same behavior as Event.initEvent(). 
		 
		 </apiDesc><example>
		 <codeblock>
		 e = document.createEvent("UIEvents");
		 // creates a click event that bubbles, can be cancelled,
		 // and with its view and detail property initialized to window and 1,
		 // respectively
		 e.initUIEvent("click", true, true, window, 1);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.initUIEvent"><linktext>MDC - event.initUIEvent()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initUIEvent"><linktext>W3C - UIEvent.initUIEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:UIEvent:initUIEventNS"><apiName>initUIEventNS</apiName><shortdesc>
		 Initializes attributes of an UIEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiType value="Number"/><apiDesc>Specifies UIEvent.detail.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of an UIEvent object. This method has the same behavior as Event.initEventNS(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initUIEventNS"><linktext>W3C - UIEvent.initUIEventNS()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:Event"><apiName>Event</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:Event:initEvent"><apiName>initEvent</apiName><shortdesc>
		 Initializes attributes of an Event created through the 
		 DocumentEvent.createEvent method.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of an Event created through the 
		 DocumentEvent.createEvent method. This method may only be called 
		 before the Event has been dispatched via the 
		 EventTarget.dispatchEvent() method. If the method is called several 
		 times before invoking EventTarget.dispatchEvent, only the final 
		 invocation takes precedence. This method has no effect if called after 
		 the event has been dispatched. If called from a subclass of the Event 
		 interface only the values specified in this method are modified, all 
		 other attributes are left unchanged.
		 
		 <p>This method sets the Event.type attribute to typeArg, and 
		 Event.namespaceURI to null. To initialize an event with a namespace 
		 URI, use the Event.initEventNS() method.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initEvent"><linktext>W3C - DOM 3 Events: Event.initEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:Event:initEventNS"><apiName>initEventNS</apiName><shortdesc>
		 Initializes attributes of an Event object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of an Event object. This method has the same 
		 behavior as Event.initEvent(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initEventNS"><linktext>W3C - DOM 3 Events: Event.initEventNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:Event:preventBubble"><apiName>preventBubble</apiName><shortdesc>
		 Prevents the event from bubbling.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Obsolete" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Prevents the event from bubbling. This method is deprecated in favor of standard stopPropagation and is removed in Gecko 1.9. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.preventBubble"><linktext>MDC - event.preventBubble()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:Event:preventCapture"><apiName>preventCapture</apiName><shortdesc>
		 This method is deprecated in favor of standard stopPropagation and is removed in Gecko 1.9.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Obsolete" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This method is deprecated in favor of standard stopPropagation and is removed in Gecko 1.9. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.preventCapture"><linktext>MDC - event.preventCapture()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:Event:preventDefault"><apiName>preventDefault</apiName><shortdesc>
		 Cancels the event if it is cancelable, without stopping further propagation of the event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Cancels the event if it is cancelable, without stopping further propagation of the event. 
		 
		 Signifies that the event is to be canceled, meaning any default action 
		 normally taken by the implementation as a result of the event will not 
		 occur (see also Default actions and cancelable events). Calling this 
		 method for a non-cancelable event has no effect.
		 
		 <p><b>Note:</b> This method does not stop the event propagation; use 
		 Event.stopPropagation() or Event.stopImmediatePropagation() for that effect.</p>
		 
		 <p><b>Note:</b> Calling preventDefault during any stage of event flow cancels 
		 the event, meaning that any default action normally taken by the implementation as a 
		 result of the event will not occur. </p>
		 
		 </apiDesc><example>
		 Toggling a checkbox is the default action of clicking on a checkbox. This example demonstrates how to prevent that happening: 
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;preventDefault example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function stopDefAction(evt) {
		 	evt.preventDefault();
		 }
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body&gt;
		 
		 &lt;p&gt;Please click on the checkbox control.&lt;/p&gt;
		 
		 &lt;form&gt;
		 &lt;input type="checkbox" onclick="stopDefAction(event);"/&gt;
		 &lt;label for="checkbox"&gt;Checkbox&lt;/label&gt;
		 
		 &lt;/form&gt;
		 
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.preventDefault"><linktext>MDC - event.preventDefault()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-preventDefault"><linktext>W3C - DOM 3 Events: Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:Event:stopImmediatePropogation"><apiName>stopImmediatePropogation</apiName><shortdesc>
		 Prevents other event listeners from being triggered and, unlike 
		 Event.stopPropagation() its effect is immediate .</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Prevents other event listeners from being triggered and, unlike 
		 Event.stopPropagation() its effect is immediate . Once it has been called, 
		 further calls to this method have no additional effect.
		 
		 <p><b>Note:</b> This method does not prevent the default action from being invoked; 
		 use Event.preventDefault() for that effect.</p>
		 
		 </apiDesc><example>
		 This example demonstrates how events fire and are handled in the DOM in a very simple way. 
		 When the BODY of this HTML document loads, an event listener is registered with the top row 
		 of the TABLE. The event listener handles the event by executing the function stopEvent, 
		 which changes the value in the bottom cell of the table.
		 
		 <p>However, stopEvent also calls an event object method, event.stopPropagation, which keeps 
		 the event from bubbling any further up into the DOM. Note that the table itself has an onclick 
		 event handler that ought to display a message when the table is clicked. But the stopEvent 
		 method has stopped propagation, and so after the data in the table is updated, the event phase 
		 is effectively ended, and an alert box is displayed to confirm this.</p>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;Event Propagation&lt;/title&gt;
		 
		 &lt;style type="text/css"&gt;
		 	#t-daddy { border: 1px solid red }
		 	#c1 { background-color: pink; }
		 &lt;/style&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function stopEvent(ev) {
		 	c2 = document.getElementById("c2");
		 	c2.innerHTML = "hello";
		 
		 	// this ought to keep t-daddy from getting the click.
		 	ev.stopPropagation();
		 	alert("event propagation halted.");
		 }
		 
		 function load() {
		 	elem = document.getElementById("tbl1");
		 	elem.addEventListener("click", stopEvent, false);
		 }
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body onload="load();"&gt;
		 
		 &lt;table id="t-daddy" onclick="alert('hi');"&gt;
		 	&lt;tr id="tbl1"&gt;
		 		&lt;td id="c1"&gt;one&lt;/td&gt;
		 	&lt;/tr&gt;
		 	&lt;tr&gt;
		 		&lt;td id="c2"&gt;two&lt;/td&gt;
		 	&lt;/tr&gt;
		 &lt;/table&gt;
		 
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-stopImmediatePropagation"><linktext>W3C - DOM 3 Events: Event.stopImmediatePropogation()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:Event:stopPropogation"><apiName>stopPropogation</apiName><shortdesc>
		 Prevents other event listeners from being triggered but its effect is 
		 deferred until all event listeners attached on the Event.currentTarget 
		 have been triggered .</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Prevents other event listeners from being triggered but its effect is 
		 deferred until all event listeners attached on the Event.currentTarget 
		 have been triggered . Once it has been called, further calls to this 
		 method have no additional effect.
		 
		 <p><b>Note:</b> This method does not prevent the default action from being 
		 invoked; use Event.preventDefault() for that effect.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.stopPropogation"><linktext>MDC - event.stopPropogation()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-stopPropagation"><linktext>W3C - DOM 3 Events: Event.stopPropogation()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:TextEvent"><apiName>TextEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:UIEvent</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:TextEvent:initTextEvent"><apiName>initTextEvent</apiName><shortdesc>
		 Initializes attributes of a TextEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>dataArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies TextEvent.data.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a TextEvent object. This method has the 
		 same behavior as UIEvent.initUIEvent(). The value of UIEvent.detail remains undefined. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initTextEvent"><linktext>W3C - TextEvent.initTextEvent()</linktext></link><link href="dom.events.xml#UIEvent/initUIEvent()"><linktext>dom.events.UIEvent.initUIEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:TextEvent:initTextEventNS"><apiName>initTextEventNS</apiName><shortdesc>
		 Initializes attributes of a TextEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>dataArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies TextEvent.data.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a TextEvent object. This method has the same 
		 behavior as UIEvent.initUIEventNS(). The value of UIEvent.detail remains undefined. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initTextEventNS"><linktext>W3C - TextEvent.initTextEventNS()</linktext></link><link href="dom.events.xml#UIEvent/initUIEventNS()"><linktext>dom.events.UIEvent.initUIEventNS()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:MouseEvent"><apiName>MouseEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>cssom.view:MouseEventView</apiBaseInterface><apiBaseClassifier>dom.events:UIEvent</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:MouseEvent:getModifierState"><apiName>getModifierState</apiName><shortdesc>
		 Queries the state of a modifier using a key identifier.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If it is a modifier key and the modifier is activated
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>keyIdentifierArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Refer to the KeyboardEvent.getModifierState() 
		 method for a description of this parameter.
		 
		 Note: If an application wishes to distinguish between right and left 
		 modifiers, this information could be deduced using keyboard events 
		 and KeyboardEvent.keyLocation.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Queries the state of a modifier using a key identifier.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-MouseEvent-getModifierState"><linktext>W3C - MouseEvent.getModifierState()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:MouseEvent:initMouseEvent"><apiName>initMouseEvent</apiName><shortdesc>
		 Initializes attributes of a MouseEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiType value="Number"/><apiDesc>Specifies UIEvent.detail.
		 </apiDesc></apiParam><apiParam><apiItemName>screenXArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.screenX.
		 </apiDesc></apiParam><apiParam><apiItemName>screenYArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.screenY.
		 </apiDesc></apiParam><apiParam><apiItemName>clientXArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.clientX.
		 </apiDesc></apiParam><apiParam><apiItemName>clientYArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.clientY.
		 </apiDesc></apiParam><apiParam><apiItemName>ctrlKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.ctrlKey.
		 </apiDesc></apiParam><apiParam><apiItemName>altKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.altKey.
		 </apiDesc></apiParam><apiParam><apiItemName>shiftKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.shiftKey.
		 </apiDesc></apiParam><apiParam><apiItemName>metaKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.metaKey.
		 </apiDesc></apiParam><apiParam><apiItemName>buttonArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.button
		 </apiDesc></apiParam><apiParam><apiItemName>relatedTargetArg</apiItemName><apiOperationClassifier>dom.events:EventTarget</apiOperationClassifier><apiDesc>Specifies MouseEvent.relatedTarget. This value may be null.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MouseEvent object. This method has the 
		 same behavior as UIEvent.initUIEvent(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMouseEvent"><linktext>W3C - MouseEvent.initMouseEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:MouseEvent:initMouseEventNS"><apiName>initMouseEventNS</apiName><shortdesc>
		 Initializes attributes of a MouseEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiType value="Number"/><apiDesc>Specifies UIEvent.detail.
		 </apiDesc></apiParam><apiParam><apiItemName>screenXArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.screenX.
		 </apiDesc></apiParam><apiParam><apiItemName>screenYArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.screenY.
		 </apiDesc></apiParam><apiParam><apiItemName>clientXArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.clientX.
		 </apiDesc></apiParam><apiParam><apiItemName>clientYArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.clientY.
		 </apiDesc></apiParam><apiParam><apiItemName>ctrlKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.ctrlKey.
		 </apiDesc></apiParam><apiParam><apiItemName>altKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.altKey.
		 </apiDesc></apiParam><apiParam><apiItemName>shiftKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.shiftKey.
		 </apiDesc></apiParam><apiParam><apiItemName>metaKeyArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies MouseEvent.metaKey.
		 </apiDesc></apiParam><apiParam><apiItemName>buttonArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseEvent.button
		 </apiDesc></apiParam><apiParam><apiItemName>relatedTargetArg</apiItemName><apiOperationClassifier>dom.events:EventTarget</apiOperationClassifier><apiDesc>Specifies MouseEvent.relatedTarget. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>modifiersListArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Refer to the KeyboardEvent.initKeyboardEventNS() method for a description of this parameter.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MouseEvent object. This method has the
		 same behavior as UIEvent.initUIEventNS(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMouseEventNS"><linktext>W3C - MouseEvent.initMouseEventNS()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:DocumentEvent"><apiName>DocumentEvent</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:DocumentEvent:dom.events:DocumentEvent:canDispatch"><apiName>canDispatch</apiName><shortdesc>
		 Tests if the implementation can generate events of a specified type.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the implementation can generate and dispatch this event type
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.namespaceURI of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.type of the event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Tests if the implementation can generate events of a specified type. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-DocumentEvent-canDispatch"><linktext>W3C - DOM 3 Events: DocumentEvent.canDispatch()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:DocumentEvent:dom.events:DocumentEvent:createEvent"><apiName>createEvent</apiName><shortdesc>
		 Creates an event object of the type specified.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if the 
		 implementation does not support the Event interface requested.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.events:Event</apiOperationClassifier><apiDesc>The newly created event object.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The eventType parameter specifies the name of the 
		 DOM Events interface to be supported by the created event object, 
		 e.g. "Event", "MouseEvent", "MutationEvent" and so on. If the Event 
		 is to be dispatched via the EventTarget.dispatchEvent() method the 
		 appropriate event initialization method must be called after creation 
		 in order to initialize the Event's values.
		 
		 As an example, a user wishing to synthesize some kind of UIEvent would 
		 invoke DocumentEvent.createEvent("UIEvent"). The UIEvent.initUIEventNS() 
		 ethod could then be called on the newly created UIEvent object to 
		 set the specific type of user interface event to be dispatched, DOMActivate 
		 for example, and set its context information, e.g. UIEvent.detail in 
		 this example.
		 
		 For backward compatibility reason, "UIEvents", "MouseEvents", "MutationEvents", 
		 and "HTMLEvents" feature names are valid values for the parameter eventType 
		 and represent respectively the interfaces "UIEvent", "MouseEvent", 
		 "MutationEvent", and "Event", and the characters 'a'..'z' are considered 
		 equivalent to the characters 'A'..'Z'.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates an event object of the type specified. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-DocumentEvent-createEvent"><linktext>W3C - DOM 3 Events: DocumentEvent.createEvent()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:DocumentEventGroup"><apiName>DocumentEventGroup</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:DocumentEventGroup:dom.events:DocumentEventGroup:createEventGroup"><apiName>createEventGroup</apiName><shortdesc>
		 This method creates a new EventGroup for use in the addEventListener and removeEventListener methods of the EventTargetGroup interface.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.events:EventGroup</apiOperationClassifier><apiDesc>The newly created EventGroup.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 This method creates a new EventGroup for use in the addEventListener and removeEventListener methods of the EventTargetGroup interface. 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.htmlevents-Events-DocumentEventGroup-createEventGroup"><linktext>W3C - DOM 3 Events: DocumentEventGroup.createEventGroup()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:EventExceptionCode"><apiName>EventExceptionCode</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.events:MouseWheelEvent"><apiName>MouseWheelEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:MouseEvent</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:MouseWheelEvent:initMouseWheelEventNS"><apiName>initMouseWheelEventNS</apiName><shortdesc>
		 Initializes attributes of a MouseWheelEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiType value="Number"/><apiDesc>Specifies UIEvent.detail.
		 </apiDesc></apiParam><apiParam><apiItemName>screenXArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>screenYArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>clientXArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>clientYArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>buttonArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>relatedTargetArg</apiItemName><apiOperationClassifier>dom.events:EventTarget</apiOperationClassifier><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>modifiersListArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>wheelDeltaArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseWheelEvent.wheelDelta.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MouseWheelEvent object. This method 
		 has the same behavior as MouseEvent.initMouseEventNS(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMouseWheelEventNS"><linktext>W3C - MouseWheelEvent.initMouseWheelEventNS</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:MessageEvent"><apiName>MessageEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:Event</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:MessageEvent:initMessageEvent"><apiName>initMessageEvent</apiName><shortdesc>
		 The initMessageEvent() must initialize the event in a manner analogous to the similarly-named methods in the DOM3 Events interfaces.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>dataArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The message being sent.
		 </apiDesc></apiParam><apiParam><apiItemName>originArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The origin of the document that sent the message (typically the scheme, hostname, and port of the document, but not its path or fragment identifier).
		 </apiDesc></apiParam><apiParam><apiItemName>lastEventIdArg</apiItemName><apiOperationClassifier>dom:WindowProxy</apiOperationClassifier><apiDesc>The last event ID string of the event source.
		 </apiDesc></apiParam><apiParam><apiItemName>sourceArg</apiItemName><apiOperationClassifier>dom.objects:MessagePortArray</apiOperationClassifier><apiDesc>The WindowProxy of the browsing context of the Window object from which the message came.
		 </apiDesc></apiParam><apiParam><apiItemName>portsArg</apiItemName><apiType value=""/><apiDesc>The MessagePortArray  being sent, if any.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The initMessageEvent() must initialize the event in a manner analogous to the similarly-named methods in the DOM3 Events interfaces.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/event.initMessageEvent"><linktext>MDC - event.initMessageEvent()</linktext></link><link href="http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#dom-messageevent-initmessageevent"><linktext>HTML 5: MessageEvent.initMessageEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:MessageEvent:initMessageEventNS"><apiName>initMessageEventNS</apiName><shortdesc>
		 The initMessageEventNS() must initialize the event in a manner analogous to the similarly-named methods in the DOM3 Events interfaces.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>dataArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The message being sent.
		 </apiDesc></apiParam><apiParam><apiItemName>originArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The origin of the document that sent the message (typically the scheme, hostname, and port of the document, but not its path or fragment identifier).
		 </apiDesc></apiParam><apiParam><apiItemName>lastEventIdArg</apiItemName><apiOperationClassifier>dom:WindowProxy</apiOperationClassifier><apiDesc>The last event ID string of the event source.
		 </apiDesc></apiParam><apiParam><apiItemName>sourceArg</apiItemName><apiOperationClassifier>dom.objects:MessagePortArray</apiOperationClassifier><apiDesc>The WindowProxy of the browsing context of the Window object from which the message came.
		 </apiDesc></apiParam><apiParam><apiItemName>portsArg</apiItemName><apiType value=""/><apiDesc>The MessagePortArray  being sent, if any.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The initMessageEventNS() must initialize the event in a manner analogous to the similarly-named methods in the DOM3 Events interfaces.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#dom-messageevent-initmessageeventns"><linktext>HTML 5: MessageEvent.initMessageEventNS()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:MouseMultiWheelEvent"><apiName>MouseMultiWheelEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:MouseEvent</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:MouseMultiWheelEvent:initMouseMultiWheelEventNS"><apiName>initMouseMultiWheelEventNS</apiName><shortdesc>
		 Initializes attributes of a MouseMultiWheelEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>viewArg</apiItemName><apiOperationClassifier>dom.views:AbstractView</apiOperationClassifier><apiDesc>Specifies UIEvent.view. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiType value="Number"/><apiDesc>Specifies UIEvent.detail.
		 </apiDesc></apiParam><apiParam><apiItemName>screenXArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>screenYArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>clientXArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>clientYArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>buttonArg</apiItemName><apiType value="Number"/><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>relatedTargetArg</apiItemName><apiOperationClassifier>dom.events:EventTarget</apiOperationClassifier><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>modifiersListArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Refer to the MouseEvent.initMouseEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>wheelDeltaXArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseMultiWheelEvent.wheelDeltaX.
		 </apiDesc></apiParam><apiParam><apiItemName>wheelDeltaYArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseMultiWheelEvent.wheelDeltaY.
		 </apiDesc></apiParam><apiParam><apiItemName>wheelDeltaZArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MouseMultiWheelEvent.wheelDeltaZ.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MouseMultiWheelEvent object. This method 
		 has the same behavior as MouseEvent.initMouseEventNS().
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMouseMultiWheelEventNS"><linktext>W3C - MouseWheelEvent.initMouseMultiWheelEventNS()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:MutationEvent"><apiName>MutationEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:Event</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:MutationEvent:initMutationEvent"><apiName>initMutationEvent</apiName><shortdesc>
		 Initializes attributes of a MutationEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>relatedNodeArg</apiItemName><apiType value="flash.xml:XMLNode"/><apiDesc>Specifies MutationEvent.relatedNode.
		 </apiDesc></apiParam><apiParam><apiItemName>prevValueArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationEvent.prevValue. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>newValueArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationEvent.newValue. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>attrNameArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationEvent.attrName. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>attrChangeArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MutationEvent.attrChange. This value may be null.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MutationEvent object. This method has the 
		 same behavior as Event.initEvent(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMutationEvent"><linktext>W3C - MutationEvent.initMutationEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:MutationEvent:initMutationEventNS"><apiName>initMutationEventNS</apiName><shortdesc>
		 Initializes attributes of a MutationEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>relatedNodeArg</apiItemName><apiType value="flash.xml:XMLNode"/><apiDesc>Specifies MutationEvent.relatedNode.
		 </apiDesc></apiParam><apiParam><apiItemName>prevValueArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationEvent.prevValue. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>newValueArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationEvent.newValue. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>attrNameArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationEvent.attrName. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>attrChangeArg</apiItemName><apiType value="Number"/><apiDesc>Specifies MutationEvent.attrChange. This value may be null.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MutationEvent object. This method has 
		 the same behavior as Event.initEventNS().
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMutationEventNS"><linktext>W3C - MutationEvent.initMutationEventNS()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:MutationNameEvent"><apiName>MutationNameEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:MutationEvent</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:MutationNameEvent:initMutationNameEvent"><apiName>initMutationNameEvent</apiName><shortdesc>
		 Initializes attributes of a MutationNameEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>relatedNodeArg</apiItemName><apiType value="flash.xml:XMLNode"/><apiDesc>Specifies MutationEvent.relatedNode.
		 </apiDesc></apiParam><apiParam><apiItemName>prevNamespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationNameEvent.prevNamespaceURI. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>prevNodeNameArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationNameEvent.prevNodeName.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MutationNameEvent object. This method has 
		 the same behavior as MutationEvent.initMutationEvent(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMutationNameEvent"><linktext>W3C - MutationNameEvent.initMutationNameEvent()</linktext></link><link href="dom.events.xml#UIEvent/initUIEvent()"><linktext>dom.events.UIEvent.initUIEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:MutationNameEvent:initMutationNameEventNS"><apiName>initMutationNameEventNS</apiName><shortdesc>
		 Initializes attributes of a MutationNameEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>relatedNodeArg</apiItemName><apiType value="flash.xml:XMLNode"/><apiDesc>Specifies MutationEvent.relatedNode.
		 </apiDesc></apiParam><apiParam><apiItemName>prevNamespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationNameEvent.prevNamespaceURI. This value may be null.
		 </apiDesc></apiParam><apiParam><apiItemName>prevNodeNameArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies MutationNameEvent.prevNodeName.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a MutationNameEvent object. This method has 
		 the same behavior as MutationEvent.initMutationEventNS(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initMutationNameEventNS"><linktext>W3C - MutationNameEvent.initMutationNameEventNS()</linktext></link><link href="dom.events.xml#UIEvent/initUIEventNS()"><linktext>dom.events.UIEvent.initUIEventNS()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:EventTargetGroup"><apiName>EventTargetGroup</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:EventTargetGroup:dom.events:EventTargetGroup:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 This method is equivalent to the addEventListener method of the EventTarget interface, with the exception of 
		 the added eventGroup parameter.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>eventGroup</apiItemName><apiOperationClassifier>dom.events:EventGroup</apiOperationClassifier><apiDesc>The EventGroup to associate with the listener.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method is equivalent to the addEventListener method of the EventTarget interface, with the exception of 
		 the added eventGroup parameter. The listener is registered with this EventGroup associated. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-EventTargetGroup-addEventListener"><linktext>W3C - DOM 3 Events: EventTargetGroup.addEventListener()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:EventTargetGroup:dom.events:EventTargetGroup:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 This method is equivalent to the removeEventListener method of the EventTarget interface, with the exception 
		 of the added eventGroup parameter.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>eventGroup</apiItemName><apiOperationClassifier>dom.events:EventGroup</apiOperationClassifier><apiDesc>The EventGroup to associate with the listener.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method is equivalent to the removeEventListener method of the EventTarget interface, with the exception 
		 of the added eventGroup parameter. The listener registered with this EventGroup associated is removed. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-EventTargetGroup-removeEventListener"><linktext>W3C - DOM 3 Events: EventTargetGroup.removeEventListener()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:CustomEvent"><apiName>CustomEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:Event</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:CustomEvent:initCustomEventNS"><apiName>initCustomEventNS</apiName><shortdesc>
		 Initializes attributes of a CustomEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURIArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.namespaceURI, the namespace URI associated with this event, or null if no namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies Event.type, the local name of the event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>detailArg</apiItemName><apiOperationClassifier>dom.core.types:DOMObject</apiOperationClassifier><apiDesc>Specifies CustomEvent.detail. This value may be null.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a CustomEvent object. This method has 
		 the same behavior as Event.initEventNS(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-Event-initCustomEventNS"><linktext>W3C - DOM 3 Events: CustomEvent.initCustomEventNS()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:EventListener"><apiName>EventListener</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:EventListener:dom.events:EventListener:handleEvent"><apiName>handleEvent</apiName><shortdesc>
		 This method is called whenever an event occurs of the event type for 
		 which the EventListener interface was registered.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>evt</apiItemName><apiOperationClassifier>dom.events:Event</apiOperationClassifier><apiDesc>The Event contains contextual information about the event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method is called whenever an event occurs of the event type for 
		 which the EventListener interface was registered. 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventListener"><linktext>W3C - DOM 3 Events: EventListener.handleEvent()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:EventTarget"><apiName>EventTarget</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:EventTarget:dom.events:EventTarget:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 Associates a function with a particular event and binds the event to the current node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string representing the event to bind, without the "on" prefix. For example, "click", "mousedown" etc.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The function or method to associate with the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Whether to bind the event as it is propagating towards the target node, (event Capture), or as the 
		 event bubbles upwards from the target (event bubble). Set to true or false, respectively.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associates a function with a particular event and binds the event to the current node.
		 
		 </apiDesc><example>
		 <codeblock>
		 function statusreport() {
		 		alert("document has loaded");
		 }
		 
		 if (window.addEventListener) {
		 		window.addEventListener("load", statusreport, false); //invoke function
		 }
		 window.onload = statusreport(); //function invoked again, since no event handler conflicts</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-addEventListener"><linktext>W3C - DOM 3 Events: EventTarget.addEventListener()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:EventTarget:dom.events:EventTarget:addEventListenerNS"><apiName>addEventListenerNS</apiName><shortdesc>
		 Registers an event listener, depending on the useCapture parameter, on the 
		 capture phase of the DOM event flow or its target and bubbling phases.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.namespaceURI associated with the event for which the user is registering.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string representing the event to bind, without the "on" prefix. For example, "click", "mousedown" etc.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The function or method to associate with the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Whether to bind the event as it is propagating towards the target node, (event Capture), or as the 
		 event bubbles upwards from the target (event bubble). Set to true or false, respectively.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Registers an event listener, depending on the useCapture parameter, on the 
		 capture phase of the DOM event flow or its target and bubbling phases.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-addEventListener"><linktext>W3C - DOM 3 Events: EventTarget.addEventListener()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:EventTarget:dom.events:EventTarget:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
		 Dispatches an event to fire on a node artificially.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>UNSPECIFIED_EVENT_TYPE_ERR: 
		 Raised if the Event.type was not specified by initializing the event 
		 before dispatchEvent was called. Specification of the Event.type as 
		 null or an empty string will also trigger this exception.
		 
		 </apiDesc><apiItemName>EventException</apiItemName><apiOperationClassifier>dom.events:EventException</apiOperationClassifier></apiException><apiException><apiDesc>DISPATCH_REQUEST_ERR: Raised 
		 if the Event object is already being dispatched.
		 
		 </apiDesc><apiItemName>EventException</apiItemName><apiOperationClassifier>dom.events:EventException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if the Event 
		 object has not been created using DocumentEvent.createEvent().
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if 
		 Event.type is not an NCName as defined in [XML Namespaces 1.1].
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="Boolean"/><apiDesc>Indicates whether any of the listeners which handled the 
		 event called Event.preventDefault(). If Event.preventDefault() was 
		 called the returned value is false, else it is true.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>dom.events:Event</apiOperationClassifier><apiDesc>The event to be dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatches an event to fire on a node artificially.
		 
		 <p><b>Note (IE):</b> IE's equivalent of dispatchEvent() is fireEvent().</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;div id="test" onclick="alert('hi')"&gt;Sample DIV.&lt;/div&gt;
		 &lt;script type="text/javascript"&gt;
		 //Generate an artificial click event on "test". Fires alert("hi")
		 var clickevent = document.createEvent("MouseEvents");
		 clickevent.initEvent("click", true, true);
		 document.getElementById("test").dispatchEvent(myevent);
		 &lt;/script&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-dispatchEvent"><linktext>W3C - DOM 3 Events: EventTarget.dispatchEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:EventTarget:dom.events:EventTarget:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 Removes an event listener.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.type for which the user registered 
		 the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The EventListener to be removed.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether the EventListener being removed 
		 was registered for the capture phase or not. If a listener was 
		 registered twice, once for the capture phase and once for the target 
		 and bubbling phases, each must be removed separately. Removal of an 
		 event listener registered for the capture phase does not affect the 
		 same event listener registered for the target and bubbling phases, 
		 and vice versa.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes an event listener.
		 
		 <p>Calling removeEventListener with arguments 
		 which do not identify any currently registered EventListener on the 
		 EventTarget has no effect. The Event.namespaceURI for which the user 
		 registered the event listener is implied and is null.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-removeEventListener"><linktext>W3C - DOM 3 Events: EventTarget.removeEventListener()</linktext></link></related-links></apiOperation><apiOperation id="dom.events:EventTarget:dom.events:EventTarget:removeEventListenerNS"><apiName>removeEventListenerNS</apiName><shortdesc>
		 Removes an event listener.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.namespaceURI associated with the event for which the user registered the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.type for which the user registered 
		 the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The EventListener to be removed.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether the EventListener being removed 
		 was registered for the capture phase or not. If a listener was 
		 registered twice, once for the capture phase and once for the target 
		 and bubbling phases, each must be removed separately. Removal of an 
		 event listener registered for the capture phase does not affect the 
		 same event listener registered for the target and bubbling phases, 
		 and vice versa.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes an event listener. Calling removeEventListenerNS with arguments 
		 which do not identify any currently registered EventListener on the 
		 EventTarget has no effect. 
		  
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTargetGroup-removeEventListenerNS"><linktext>W3C - DOM 3 Events: EventTarget.removeEventListenerNS()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.events:EventException"><apiName>EventException</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.events:EventGroup"><apiName>EventGroup</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.events:EventGroup:dom.events:EventGroup:isSameEventGroup"><apiName>isSameEventGroup</apiName><shortdesc>
		 This method checks if the supplied EventGroup is the same as the EventGroup upon which the method is called.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Returns true if the EventGroups are equal, else returns false.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>eventGroup</apiItemName><apiOperationClassifier>dom.events:EventGroup</apiOperationClassifier><apiDesc>The EventGroup with which to check equality.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method checks if the supplied EventGroup is the same as the EventGroup upon which the method is called. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-EventGroup-isSameEventGroup"><linktext>W3C - DOM 3 Events: EventGroup.isSameEventGroup()</linktext></link></related-links></apiOperation></apiClassifier></apiPackage><apiPackage id="dom.html.objects"><apiName>dom.html.objects</apiName><apiClassifier id="dom.html.objects:HTMLCollection"><apiName>HTMLCollection</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.html.objects:HTMLCollection:item"><apiName>item</apiName><shortdesc>
		 This method retrieves a node specified by ordinal index.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMHTML" version="1"/><apiSince version="DOMHTML 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The Node at the corresponding position upon success. A value 
		 of null is returned if the index is out of range.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>The index of the node to be fetched. The index 
		 origin is 0
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method retrieves a node specified by ordinal index. Nodes are
		 numbered in tree order (depth-first traversal order). 
		 
		 <p><b>Note (IE):</b> IE7 and earlier. item() has a second and optional param called 'iSubindex'. This param specifies the
		 zero-based index of the object to retrieve when a collection is returned.</p>
		 
		 <p><b>Note (IE):</b>  Internet Explorer 8 and later. In IE8 mode, the iSubindex parameter is not used.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/HTMLCollection"><linktext>MDC: HTMLCollection</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms536460%28VS.85%29.aspx"><linktext>MSDN: item Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-33262535"><linktext>W3C - DOM HTML: HTMLCollection.item()</linktext></link></related-links></apiOperation><apiOperation id="dom.html.objects:HTMLCollection:namedItem"><apiName>namedItem</apiName><shortdesc>
		 This method retrieves a Node using a name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMHTML" version="1"/><apiSince version="DOMHTML 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The Node with a name or id attribute whose value corresponds 
		 to the specified string. Upon failure (e.g., no node with this name 
		 exists), returns null.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the Node to be fetched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method retrieves a Node using a name. With [HTML 4.01] documents, 
		 it first searches for a Node with a matching id attribute. If it 
		 doesn't find one, it then searches for a Node with a matching name 
		 attribute, but only on those elements that are allowed a name attribute. 
		 With [XHTML 1.0] documents, this method only searches for Nodes with a 
		 matching id attribute. This method is case insensitive in HTML documents 
		 and case sensitive in XHTML documents. 
		 
		 <p><b>Note (IE):</b> Internet Explorer 8 and later. In IE8 mode, the namedItem method does not return collections if more than one named item is found; instead, it returns the first case-insensitive matched element.</p>
		 
		 <p><b>Note (IE):</b> The namedItem method was introduced in Microsoft Internet Explorer 6.</p>
		 
		 </apiDesc><example>
		 The following example shows how to use the namedItem method to retrieve a div and change its innerText property.
		 <codeblock>
		 &lt;div id="oDIV1"&gt;This text will not change.&lt;/div&gt;
		 &lt;div id="oDIV2"&gt;This text will change.&lt;/div&gt;
		 &lt;button onclick="document.all.namedItem('oDIV2').innerHTML='Changed!';"&gt;
		 Change Option
		 &lt;/button&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/HTMLCollection"><linktext>MDC: HTMLCollection</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms536634%28VS.85%29.aspx"><linktext>MSDN: namedItem Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-21069976"><linktext>W3C - DOM HTML: HTMLCollection.namedItem()</linktext></link></related-links></apiOperation><apiOperation id="dom.html.objects:HTMLCollection:tags"><apiName>tags</apiName><shortdesc>
		 Retrieves a collection of objects that have the specified HTML tag name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.html.objects:HTMLCollection</apiOperationClassifier><apiDesc>Returns a collection of element objects if successful, or null otherwise. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>tag</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies an HTML tag. It can be any one of the objects exposed by the DHTML Object Model.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves a collection of objects that have the specified HTML tag name. 
		 
		 <p><b>Note:</b> Successful execution includes the case where no elements having the given name are found. In this case, a collection containing zero elements is returned.</p>
		 
		 <p><b>Note:</b> NULL may be returned in cases where the collection cannot be constructed, such as inability to allocate memory for even a zero-length collection.</p>
		 
		 </apiDesc><example>
		 This example uses the tags method to retrieve a collection of all p elements in the document, and all body 
		 elements in the document. It displays some of the properties of the collections that are returned. It then 
		 displays selected elements of the collection.
		 
		 <p>There are no p elements in the document, and there is one body element in the document. So, this example 
		 illustrates both the cases where the collection is empty and where the collection is populated.</p>
		 <codeblock>
		 &lt;html&gt;
&lt;head&gt;
&lt;title&gt;document.all.tags example &lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;script type="text/jscript" language="jscript"&gt;

document.write("Here is how document.all.tags behaves when no tags are found.&lt;br&gt;");
var coll = document.all.tags("p");
document.write("list 'p' tags" + "&lt;br&gt;");
document.write("coll= " + coll + "&lt;br&gt;");
document.write("coll.length= " + coll.length + "&lt;br&gt;");
if (coll==null){
    document.write( "coll= is null &lt;br&gt;" );
} else {
    document.write( "coll= is not null &lt;br&gt;" );
}


if ( coll[0] != null ){
    document.write( "coll[0].attributes length " + coll[0].attributes.length  + "&lt;br&gt;");

    for ( i = 0; i&lt;coll[0].attributes.length ; i++ ){
        if (( coll[0].attributes[i].value       != "null"  )
           &amp;( coll[0].attributes[i].value.length &gt; 0       ))
        {
            document.write( "coll[0].attributes "        + i + ":"   );
            document.write(  coll[0].attributes[i].name      + ":            "   );
            document.write(  coll[0].attributes[i].value     + "&lt;br&gt;");
        }
    }
}

document.write( "&lt;br&gt;&lt;br&gt;" );
document.write( "Here is how document.all.tags behaves when at least 1 tag is found.&lt;br&gt;" );
var coll = document.all.tags( "body" );
document.write( "list 'body' tags"            + "&lt;br&gt;" );
document.write( "coll= "        + coll        + "&lt;br&gt;" );
document.write( "coll.length= " + coll.length + "&lt;br&gt;" );
if ( coll == null ){
    document.write( "coll= is null &lt;br&gt;" );
} else {
    document.write( "coll= is not null &lt;br&gt;" );
}

if ( coll[0] != null ){
    document.write( "coll[0].attributes length " + coll[0].attributes.length  + "&lt;br&gt;");

    for ( i = 0; i&lt;coll[0].attributes.length ; i++ ){
        if (( coll[0].attributes[i].value       != "null"  )
           &amp;( coll[0].attributes[i].value.length &gt; 0       ))
        {
            document.write( "coll[0].attributes "        + i + ":"   );
            document.write(  coll[0].attributes[i].name      + ":            "   );
            document.write(  coll[0].attributes[i].value     + "&lt;br&gt;");
        }
    }
}

&lt;/script&gt;

&lt;pre&gt;
=================================
== Here is what the above example should display in your browser
=================================
Here is how document.all.tags behaves when no tags are found.
list 'p' tags
coll= [object]
coll.length= 0
coll= is not null


Here is how document.all.tags behaves when at least 1 tag is found.
list 'body' tags
coll= [object]
coll.length= 1
coll= is not null
coll[0].attributes length 98
coll[0].attributes 21:hideFocus: false
coll[0].attributes 45:contentEditable: inherit
coll[0].attributes 59:disabled: false
coll[0].attributes 69:tabIndex: 0
coll[0].attributes 80:bottomMargin: 15
coll[0].attributes 81:noWrap: false
coll[0].attributes 90:leftMargin: 10
coll[0].attributes 92:topMargin: 15
coll[0].attributes 95:rightMargin: 10

&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536776%28VS.85%29.aspx"><linktext>MSDN: tags Method</linktext></link></related-links></apiOperation><apiOperation id="dom.html.objects:HTMLCollection:urns"><apiName>urns</apiName><shortdesc>
		 Retrieves a collection of all objects to which a specified behavior is attached.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.html.objects:HTMLCollection</apiOperationClassifier><apiDesc>Returns a collection of objects if successful, or null otherwise.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>urn</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the behavior's Uniform Resource Name (URN).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves a collection of all objects to which a specified behavior is attached.
		 
		 </apiDesc><example>
		 The following example shows how to use the urns method to retrieve a collection of all 
		 elements currently attached to the specified behavior and then display a comma-delimited 
		 list of these element IDs in a message box.
		 <codeblock>
		 &lt;script language="JScript"&gt;
		 	var coll  = document.all.urns("URN1");
		 	var sText = '';
		 
		 	if (coll != null) {
		 		for (i=0; i&lt;coll.length; i++) {
		 			sText += coll.item(i).id + ', ';
		 		}
		 
		 		window.alert(sText);
		 	}
		 &lt;/script&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536780%28VS.85%29.aspx"><linktext>MSDN: urns Method</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.html.objects:HTMLOptionsCollection"><apiName>HTMLOptionsCollection</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.html.objects:HTMLOptionsCollection:item"><apiName>item</apiName><shortdesc>
		 This method retrieves a node specified by ordinal index.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMHTML" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The Node at the corresponding position upon success. A value 
		 of null is returned if the index is out of range.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>The index of the node to be fetched. The index 
		 origin is 0
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method retrieves a node specified by ordinal index. Nodes are 
		 numbered in tree order (depth-first traversal order).
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/HTMLOptionsCollection"><linktext>MDC: HTMLOptionsCollection</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#HTMLOptionsCollection-item"><linktext>W3C DOM HTML Specification: HTMLOptionsCollection.item()</linktext></link></related-links></apiOperation><apiOperation id="dom.html.objects:HTMLOptionsCollection:namedItem"><apiName>namedItem</apiName><shortdesc>
		 This method retrieves a Node using a name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMHTML" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The Node with a name or id attribute whose value corresponds 
		 to the specified string. Upon failure (e.g., no node with this name 
		 exists), returns null.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the Node to be fetched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method retrieves a Node using a name. It first searches for a 
		 Node with a matching id attribute. If it doesn't find one, it then 
		 searches for a Node with a matching name attribute, but only on those 
		 elements that are allowed a name attribute. This method is case 
		 insensitive in HTML documents and case sensitive in XHTML documents.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/HTMLOptionsCollection"><linktext>MDC: HTMLOptionsCollection</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#HTMLOptionsCollection-namedItem"><linktext>W3C DOM HTML Specification: HTMLOptionsCollection.namedItem()</linktext></link></related-links></apiOperation></apiClassifier></apiPackage><apiPackage id="dom.html"><apiName>dom.html</apiName><apiClassifier id="dom.html:HTMLDirectoryElement"><apiName>HTMLDirectoryElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLScriptElement"><apiName>HTMLScriptElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLHtmlElement"><apiName>HTMLHtmlElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLHeadElement"><apiName>HTMLHeadElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLTitleElement"><apiName>HTMLTitleElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLFieldSetElement"><apiName>HTMLFieldSetElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLButtonElement"><apiName>HTMLButtonElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLParamElement"><apiName>HTMLParamElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLBaseElement"><apiName>HTMLBaseElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLTableSectionElement"><apiName>HTMLTableSectionElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.html:HTMLTableSectionElement:deleteRow"><apiName>deleteRow</apiName><shortdesc>
		 Delete a row from this section.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified index is 
		 greater than the number of rows or if the index is a negative number other than -1.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>The index of the row to be deleted, or -1 to delete the last row. This index starts from 0 
		 and is relative only to the rows contained inside this section, not all the rows in the table.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Delete a row from this section. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLTableSectionElement:insertRow"><apiName>insertRow</apiName><shortdesc>
		 Modified in DOM Level 2
		 
		 Insert a row into this section.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified index is 
		 greater than the number of rows or if the index is a negative number other than -1.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.html:HTMLElement</apiOperationClassifier><apiDesc>The newly created row.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>The row number where to insert a new row. This index starts from 0 and is relative only 
		 to the rows contained inside this section, not all the rows in the table.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Modified in DOM Level 2
		 
		 Insert a row into this section. The new row is inserted immediately before the current indexth row in 
		 this section. If index is -1 or equal to the number of rows in this section, the new row is appended.  
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="dom.html:HTMLParagraphElement"><apiName>HTMLParagraphElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLSelectElement"><apiName>HTMLSelectElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.html:HTMLSelectElement:add"><apiName>add</apiName><shortdesc>
		 Add a new element to the collection of OPTION elements for this SELECT.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_FOUND_ERR: Raised if before is not a 
		 descendant of the SELECT element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>dom.html:HTMLElement</apiOperationClassifier><apiDesc>The element to add.
		 </apiDesc></apiParam><apiParam><apiItemName>before</apiItemName><apiOperationClassifier>dom.html:HTMLElement</apiOperationClassifier><apiDesc>The element to insert before, or null for the tail 
		 of the list.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Add a new element to the collection of OPTION elements for this SELECT. 
		 This method is the equivalent of the appendChild method of the Node 
		 interface if the before parameter is null. It is equivalent to the 
		 insertBefore method on the parent of before in all other cases. This 
		 method may have no effect if the new element is not an OPTION or 
		 an OPTGROUP. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLSelectElement:blur"><apiName>blur</apiName><shortdesc>
		 Causes the element to lose focus and fires the onblur event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Causes the element to lose focus and fires the onblur event.
		 
		 This method shifts focus away from the element it is applied 
		 to but does not set focus on the next element in the tab order.
		 
		 <b>IE</b>
		 In Microsoft Internet Explorer 5 and greater, elements that expose 
		 the blur method must have the TABINDEX attribute set.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLSelectElement:focus"><apiName>focus</apiName><shortdesc>
		 Causes the element to receive the focus and executes the code specified 
		 by the onfocus event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Causes the element to receive the focus and executes the code specified 
		 by the onfocus event.
		 
		 This method fires the onfocus event.
		 
		 As of Microsoft Internet Explorer 5, elements that expose the focus method 
		 must have the TABINDEX attribute set.
		 
		 Elements cannot receive focus until the document finishes loading.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLSelectElement:remove"><apiName>remove</apiName><shortdesc>
		 Remove an element from the collection of OPTION elements for this 
		 SELECT.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>The index of the item to remove, starting from 0.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove an element from the collection of OPTION elements for this 
		 SELECT. Does nothing if no element has the given index. 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="dom.html:HTMLOListElement"><apiName>HTMLOListElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLAnchorElement"><apiName>HTMLAnchorElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.html:HTMLAnchorElement:blur"><apiName>blur</apiName><shortdesc>
		 Removes keyboard focus from this element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes keyboard focus from this element. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLAnchorElement:focus"><apiName>focus</apiName><shortdesc>
		 Gives keyboard focus to this element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Gives keyboard focus to this element. 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="dom.html:HTMLHeadingElement"><apiName>HTMLHeadingElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLTextAreaElement"><apiName>HTMLTextAreaElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.html:HTMLTextAreaElement:blur"><apiName>blur</apiName><shortdesc>
		 Removes keyboard focus from this element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes keyboard focus from this element. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLTextAreaElement:focus"><apiName>focus</apiName><shortdesc>
		 Gives keyboard focus to this element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Gives keyboard focus to this element. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLTextAreaElement:select"><apiName>select</apiName><shortdesc>
		 Select the contents of the TEXTAREA.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Select the contents of the TEXTAREA. 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="dom.html:HTMLModElement"><apiName>HTMLModElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLBaseFontElement"><apiName>HTMLBaseFontElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLLIElement"><apiName>HTMLLIElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLElement"><apiName>HTMLElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>dom.style.css:ElementCSSInlineStyle</apiBaseInterface><apiBaseClassifier>dom.core:Element</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLMapElement"><apiName>HTMLMapElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLOptGroupElement"><apiName>HTMLOptGroupElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLDivElement"><apiName>HTMLDivElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLHRElement"><apiName>HTMLHRElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLTableColElement"><apiName>HTMLTableColElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLDocument"><apiName>HTMLDocument</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>dom.xpath:XPathEvaluator</apiBaseInterface><apiBaseClassifier>dom.core:Document</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.html:HTMLDocument:captureEvents"><apiName>captureEvents</apiName><shortdesc>
		 Instructs the browser to grab events of a specific type before they reach their intended target document objects.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>eventTypeList</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A comma-separated list of case-sensitive event types as derived from the available 
		 Event object constants, such as Event.CLICK or Event.MOUSEMOVE.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Instructs the browser to grab events of a specific type before they reach their intended target document objects. 
		 The object invoking this method must then have event handlers defined for the given event types to process the event. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/document.captureEvents"><linktext>MDC - Document.captureEvents()</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:clear"><apiName>clear</apiName><shortdesc>
		 This method used to clear the whole specified document in early (pre-1.0) 
		 versions of Mozilla.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Deprecated" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8_no"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5_no"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This method used to clear the whole specified document in early (pre-1.0) 
		 versions of Mozilla.
		 
		 <p>In recent versions of Mozilla-based applications as well as in Internet 
		 Explorer and Netscape 4 this method does nothing. </p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536361%28VS.85%29.aspx"><linktext>MSDN - clear Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.clear"><linktext>MDC - Document.clear()</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:close"><apiName>close</apiName><shortdesc>
		 Closes a document stream opened by open() and forces rendering.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMHTML" version="1"/><apiSince version="DOMHTML 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Closes a document stream opened by open() and forces rendering. 
		 
		 </apiDesc><example>
		 <codeblock>
		 // open a document to write to it.
		 // write the content of the document.
		 // close the document.
		 document.open();
		 document.write("&lt;p&gt;The one and only content.&lt;/p&gt;");
		 document.close();</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536369%28VS.85%29.aspx"><linktext>MSDN - close Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.close"><linktext>MDC - Document.close()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-98948567"><linktext>W3C - HTMLDocument.close()</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:createExpression"><apiName>createExpression</apiName><shortdesc>
		 
		 Creates a parsed XPath expression with resolved namespaces.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMXPath" version="3"/><apiSince version="DOMXPath 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.xpath:XPathExpression</apiOperationClassifier><apiDesc>The compiled form of the XPath expression.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>expression</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The XPath expression string to be parsed.
		 </apiDesc></apiParam><apiParam><apiItemName>resolver</apiItemName><apiOperationClassifier>dom.xpath:XPathNSResolver</apiOperationClassifier><apiDesc>The resolver permits translation of all prefixes, including the xml 
		 namespace prefix, within the XPath expression into appropriate namespace URIs. If this 
		 is specified as null, any namespace prefix within the expression will result in 
		 DOMException being thrown with the code NAMESPACE_ERR.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Creates a parsed XPath expression with resolved namespaces. This is useful when an 
		 expression will be reused in an application since it makes it possible to compile the 
		 expression string into a more efficient internal form and preresolve all namespace 
		 prefixes which occur within the expression.
		 
		 <p><b>Note (Mozilla):</b> Prior to Firefox 3, you could call this method on documents other 
		 than the one you planned to run the XPath against. Under Firefox 3, you must call it on the 
		 same document.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.createExpression"><linktext>MDC - Document.createExpression()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathEvaluator-createExpression"><linktext>W3C - XPathEvaluator.createExpression()</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:createNSResolver"><apiName>createNSResolver</apiName><shortdesc>
		 
		 Adapts any DOM node to resolve namespaces so that an XPath expression can be easily evaluated 
		 relative to the context of the node where it appeared within the document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMXPath" version="3"/><apiSince version="DOMXPath 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.xpath:XPathNSResolver</apiOperationClassifier><apiDesc>XPathNSResolver which resolves namespaces with respect to the definitions in scope for a specified node.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>nodeResolver</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to be used as a context for namespace resolution.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Adapts any DOM node to resolve namespaces so that an XPath expression can be easily evaluated 
		 relative to the context of the node where it appeared within the document. This adapter works 
		 like the DOM Level 3 method lookupNamespaceURI  on nodes in resolving the namespaceURI from a 
		 given prefix using the current information available in the node's hierarchy at the time 
		 lookupNamespaceURI is called. also correctly resolving the implicit xml prefix.
		 
		 <p><b>Note:</b> XPath defines QNames without prefix to match only elements in the 
		 null namespace. There is no way in XPath to pick up the default namespace as applied to a regular 
		 element reference (e.g., <codeph>p[&amp;64;id='_myid']</codeph> for <codeph>xmlns='http://www.w3.org/1999/xhtml'</codeph>). 
		 To match default elements in a non-null namespace, you either have to refer to a particular element using 
		 a form such as <codeph>~~</codeph></p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.createNSResolver"><linktext>MDC - Document.createNSResolver()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathEvaluator-createNSResolver"><linktext>W3C - XPathEvaluator.createNSResolver()</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:evaluate"><apiName>evaluate</apiName><shortdesc>
		 
		 Evaluates an XPath expression string and returns a result of the specified type if possible.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMXPath" version="3"/><apiSince version="DOMXPath 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMObject</apiOperationClassifier><apiDesc>The result of the evaluation of the XPath expression. For XPath 1.0 results, this object 
		 will be of type XPathResult.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>expression</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The XPath expression string to be parsed and evaluated.
		 </apiDesc></apiParam><apiParam><apiItemName>contextNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The context is context node for the evaluation of this XPath expression. 
		 If the XPathEvaluator was obtained by casting the Document then this must be owned by the same 
		 document and must be a Document, Element, Attribute, Text, CDATASection, Comment, 
		 ProcessingInstruction, or XPathNamespace  node. If the context node is a Text or a CDATASection, 
		 then the context is interpreted as the whole logical text node as seen by XPath, unless the node 
		 is empty in which case it may not serve as the XPath context.
		 </apiDesc></apiParam><apiParam><apiItemName>resolver</apiItemName><apiOperationClassifier>dom.xpath:XPathNSResolver</apiOperationClassifier><apiDesc>The resolver permits translation of all prefixes, including the xml namespace 
		 prefix, within the XPath expression into appropriate namespace URIs. If this is specified as null, 
		 any namespace prefix within the expression will result in DOMException being thrown with the 
		 code NAMESPACE_ERR.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="Number"/><apiDesc>If a specific type is specified, then the result will be returned as the 
		 corresponding type. For XPath 1.0 results, this must be one of the codes of the XPathResult interface.
		 </apiDesc></apiParam><apiParam><apiItemName>result</apiItemName><apiOperationClassifier>dom.core.types:DOMObject</apiOperationClassifier><apiDesc>The result specifies a specific result object which may be reused and returned by 
		 this method. If this is specified as nullor the implementation does not reuse the specified result, 
		 a new result object will be constructed and returned. For XPath 1.0 results, this object will be 
		 of type XPathResult.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Evaluates an XPath expression string and returns a result of the specified type if possible.
		 
		 </apiDesc><example>
		 <codeblock>
		 var headings = document.evaluate("//h2", document, null, XPathResult.ANY_TYPE, null); 
		 /~~ Search the document for all h2 elements.  
		  ~~ The result will likely be an unordered node iterator. ~~/
		 var thisHeading = headings.iterateNext(); 
		 var alertText = "Level 2 headings in this document are:\n";
		 while (thisHeading) {
		 	alertText += thisHeading.textContent + "\n";
		 	thisHeading = headings.iterateNext();
		 }
		 alert(alertText); // Alerts the text of all h2 elements</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.evaluate"><linktext>MDC - Document.evaluate()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathEvaluator-evaluate"><linktext>W3C - XPathEvaluator.evaluate()</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:execCommand"><apiName>execCommand</apiName><shortdesc>
		 When an HTML document has been switched to designMode, the document object exposes the execCommand 
		 method which allows one to run commands to manipulate the contents of the editable region.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft/Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>True if successful, or an error value otherwise.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>aCommandName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the command 
		 </apiDesc></apiParam><apiParam><apiItemName>aShowDefaultUI</apiItemName><apiType value="Boolean"/><apiDesc>Whether the default user interface should be shown. This is not implemented in Mozilla.
		 </apiDesc></apiParam><apiParam><apiItemName>aValueArgument</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Some commands (such as insertimage) require an extra value argument (the image's url). 
		 Pass an argument of null if no argument is needed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 When an HTML document has been switched to designMode, the document object exposes the execCommand 
		 method which allows one to run commands to manipulate the contents of the editable region. Most 
		 commands affect the document's selection (bold, italics, etc), while others insert new elements 
		 (adding a link) or affect an entire line (indenting). When using contentEditable, calling execCommand 
		 will affect the currently active editable element.
		 
		 </apiDesc><example>
		 <codeblock>
		 //HTML:
		 &lt;button onclick="doRichEditCommand('bold')" style="font-weight:bold;"&gt;B&lt;/button&gt;
		 
		 //JavaScript:
		 function doRichEditCommand(aName, aArg){
		 	getIFrameDocument('editorWindow').execCommand(aName,false, aArg);
		 	document.getElementById('editorWindow').contentWindow.focus()
		 }</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa752577%28VS.85%29.aspx"><linktext>MSDN - IHTMLDocument2::execCommand Method</linktext></link><link href="http://developer.mozilla.org/En/Document.execCommand"><linktext>MDC - Document.execCommand()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms533049%28VS.85%29.aspx"><linktext>MSDN - Command Identifiers</linktext></link><link href="http://developer.mozilla.org/en/Rich-Text_Editing_in_Mozilla#Executing_Commands"><linktext>MDC - Executing Commands</linktext></link><link href="http://developer.mozilla.org/en/Midas#Supported_Commands"><linktext>MDC - Supported Commands</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:execCommandShowHelp"><apiName>execCommandShowHelp</apiName><shortdesc>
		 Displays help information for the given command identifier.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft/Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>True if successful, or an error value otherwise.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>aCommandName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Contains an identifier of a command. It can be any command identifier given in the list of  Command Identifiers.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Displays help information for the given command identifier.
		  
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa752578%28VS.85%29.aspx"><linktext>MSDN - IHTMLDocument2::execCommandShowHelp Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/document.execCommandShowHelp"><linktext>MDC - Document.execCommandShowHelp()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms533049%28VS.85%29.aspx"><linktext>MSDN - Command Identifiers</linktext></link><link href="http://developer.mozilla.org/en/Rich-Text_Editing_in_Mozilla#Executing_Commands"><linktext>MDC - Executing Commands</linktext></link><link href="http://developer.mozilla.org/en/Midas#Supported_Commands"><linktext>MDC - Supported Commands</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:fireEvent"><apiName>fireEvent</apiName><shortdesc>
		 Fires a specified event on the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Event fired successfully
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>String that specifies the name of the event to fire.
		 </apiDesc></apiParam><apiParam><apiItemName>event</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Object that specifies the event object from which to obtain event object properties.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Fires a specified event on the object.
		 
		 <p>If the event being fired cannot be cancelled, fireEvent always returns true.</p>
		 
		 <p>Regardless of their values specified in the event object, the values of the 
		 four event properties—cancelBubble, returnValue, srcElement, and type—are 
		 automatically initialized to the values shown in the following table.</p> 
		 
		 <ul>
		 <li>cancelBubble : false</li>
		 <li>returnValue : true</li>
		 <li>srcElement : element on which the event is fired</li>
		 <li>type : name of the event that is fired</li>
		 </ul>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536423%28VS.85%29.aspx"><linktext>MSDN - fireEvent Method</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:focus"><apiName>focus</apiName><shortdesc>
		 Causes the element to receive the focus and executes the code specified by the  onfocus event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Causes the element to receive the focus and executes the code specified by the  onfocus event. 
		 
		 <p><b>Note (IE):</b> This method raises the onfocus event. The effect depends on the object calling 
		 the method. When called for child windows (such as those created with the  open method of a  window object), 
		 focus brings the target window to the foreground.</p>
		 
		 <p><b>Note (IE):</b> Windows Internet Explorer 8 and later. The focus method no longer brings child windows 
		 (such as those created with the open method) to the foreground. Child windows now request focus from the user, 
		 usually by flashing the title bar. To directly bring the window to the foreground, add script to the child window 
		 that calls the focus method of its window object.</p>
		 
		 <p><b>Note:</b> Internet Explorer 7 and later. For security reasons, child windows will only respond to 
		 the focus method when the following conditions are true:
		 <ul>
		 <li>The child window does not have multiple tabs open.</li>
		 <li>The focus method was not triggered by a double-click action.</li>
		 </ul>
		 If any of these conditions are true, the child window ignores the focus event.
		 </p>
		 
		 <p><b>Note:</b> As of Microsoft Internet Explorer 5, elements that expose the focus method must have the TABINDEX attribute set.</p>
		 
		 <p><b>Note:</b> Elements cannot receive focus until the document finishes loading.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536425%28VS.85%29.aspx"><linktext>MSDN - focus Method</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:getBoxObjectFor"><apiName>getBoxObjectFor</apiName><shortdesc>
		 This particular method was a way for XUL elements to efficiently determine their position, amongst other things.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>gecko:nsIBoxObject</apiOperationClassifier><apiDesc>The dimensions of the element
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>Target element
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This particular method was a way for XUL elements to efficiently determine their position, amongst other things. 
		 A couple of years ago this feature started to be used by the general web-developer world. This was quickly 
		 realized to be a major mistake.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/document.getBoxObjectFor"><linktext>MDC - Document.getBoxObjectFor()</linktext></link><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=340571"><linktext>Bug 340571</linktext></link><link href="http://ejohn.org/blog/the-getboxobjectfor-apocalypse/"><linktext>John Resig - The getBoxObjectFor Apocalypse</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:getElementsByClassName"><apiName>getElementsByClassName</apiName><shortdesc>
		 Returns a set of elements with the given class name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/><apiSince version="HTML 5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier><apiDesc>A live NodeList object containing all the elements in the document, in tree order, that have 
		 all the classes specified in that argument, having obtained the classes by splitting a string on spaces. 
		 If there are no tokens specified in the argument, then returns an empty NodeList.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>classNames</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>An unordered set of unique space-separated tokens representing classes.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a set of elements with the given class name. When called on the document object, the 
		 complete document is searched, including the root node. You may also call getElementsByClassName 
		 on any element; it will return only elements under the specified root element with the given class name. 
		 
		 </apiDesc><example>
		 <p>Get all elements that have a class of 'test'</p>
		 
		 <codeblock>document.getElementsByClassName('test')</codeblock>
		 
		 <p>Get all elements that have a class of 'red' and 'test'</p>
		 
		 <codeblock>document.getElementsByClassName('red test')</codeblock>
		 
		 <p>Get all elements that have a class of 'test', inside of an element that has the ID of 'main'</p>
		 
		 <codeblock>document.getElementById('main').getElementsByClassName('test')</codeblock>
		 
		 <p>And if we go ahead and add in <xref href="http://developer.mozilla.org/en/New_in_JavaScript_1.6" rel="internal">JavaScript 1.6</xref>'s Array extras, we can do some really-cool matches.</p>
		 
		 <p>Find all div elements that have a class of 'test'</p>
		 
		 <codeblock>
		 Array.filter( document.getElementsByClassName('test'), function(elem) {
		 	return elem.nodeName == 'DIV';
		 });</codeblock>
		 
		 <p>Find all elements that have a class of 'test' (as do their parent element)</p>
		 
		 <codeblock>
		 var test = document.getElementsByClassName('test');
		 Array.filter( test, function(elem){
		 	return Array.indexOf( test, elem.parentNode ) &gt; -1;
		 });</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.getElementsByClassName"><linktext>MDC - Document.getElementsByClassName()</linktext></link><link href="http://www.whatwg.org/specs/web-apps/current-work/#dom-document-getelementsbyclassname"><linktext>WHATWG - HTMLDocument.getElementsByClassName()</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:getElementsByName"><apiName>getElementsByName</apiName><shortdesc>
		 Returns a list of elements with a given name in the (X)HTML document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMHTML" version="1"/><apiSince version="DOMHTML 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier><apiDesc>The matching elements.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>elementName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name attribute value for an element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a list of elements with a given name in the (X)HTML document. 
		 
		 </apiDesc><example>
		 <codeblock>// return some of the forms 
		 //&lt;form name="up"&gt;&lt;input type="text"/&gt;&lt;/form&gt; 
		 //&lt;form name="up"&gt;&lt;input type="text"/&gt;&lt;/form&gt; 
		 //&lt;form name="down"&gt;&lt;input type="text"/&gt;&lt;/div&gt; 
		 //&lt;form name="down"&gt;&lt;input type="text"/&gt;&lt;/div&gt; 
		 
		 up_forms = document.getElementsByName("up"); 
		 dump(up_forms.item(0).tagName); // returns "div"</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536438%28VS.85%29.aspx"><linktext>MSDN - getElementsByName Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.getElementsByName"><linktext>MDC - Document.getElementsByName()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-71555259"><linktext>W3C - HTMLDocument.getElementsByName()</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:getSelection"><apiName>getSelection</apiName><shortdesc>
		 Return the contents of selected text in the current document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The selected text
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Return the contents of selected text in the current document.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;INPUT TYPE="BUTTON" NAME="selectString" VALUE="Show 
		 any highlighted text" onClick="alert('The following text is 
		 selected:\n'+document.getSelection());"&gt; </codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/document.getSelection"><linktext>MDC - Document.getSelection()</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:hasFocus"><apiName>hasFocus</apiName><shortdesc>
		 The hasFocus method returns true if the focus is currently located anywhere inside the specified document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="HTML 5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Returns true if the document has focus; otherwise, returns false.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 The hasFocus method returns true if the focus is currently located anywhere inside the specified document.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536447%28VS.85%29.aspx"><linktext>MSDN - hasFocus Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.hasFocus"><linktext>MDC - Document.hasFocus()</linktext></link><link href="http://www.whatwg.org/specs/web-apps/current-work/#dom-document-hasfocus"><linktext>WHATWG - HTMLDocument.hasFocus()</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:open"><apiName>open</apiName><shortdesc>
		 Open a document stream for writing.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMHTML" version="1"/><apiSince version="DOMHTML 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>Returns a reference to the new  document object or the  window object. Use this reference to access properties and methods of the new document or window.
		 
		 </apiDesc></apiReturn><apiDefaultValue>text/html (Currently the only MIME type supported for this method.)
		 </apiDefaultValue><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>When a new document is opened, <codeph>url</codeph> is a String that specifies a MIME type for the document. 
		 When a new window is opened, <codeph>url</codeph> is a String that specifies the URL to render in the new window. If a <codeph>url</codeph> 
		 is not specified, a new window with about:blank is displayed.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	Optional. When a new document is opened, specify the String replace for <codeph>name</codeph> to specify 
		 that the new document replaces the current document in the history list. If the replace value is not specified 
		 when you open a document, a new entry is added to the history list. When a window is opened, this is a String 
		 that specifies the name of the window. The value of this parameter can be specified as the value of the  TARGET 
		 attribute for a  form or an  a element. This value defines this new window as the location to load a document. 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 
		 
		 <tgroup cols="2"><thead><row><entry>Value</entry><entry>Description</entry></row></thead><tbody><row>
		 		<entry>replace</entry><entry>This value is only used to open a new document, and specifies that the new document replaces the current entry in the history list. </entry>
		 	</row><row>
		 		<entry>_blank</entry><entry>When a window is opened, the <codeph>url</codeph> is loaded into a new, unnamed window.</entry>
		 	</row><row>
		 		<entry>_parent</entry><entry>When a new window is opened, the <codeph>url</codeph> is loaded into the current frame's parent. If the frame has no parent, this value acts as the value _self. </entry>
		 	</row><row>
		 		<entry>_search</entry><entry>Disabled in Windows Internet Explorer 7, see  Security and Compatibility in Internet Explorer 7 for details. Otherwise, when a window is opened, the <codeph>url</codeph> is opened in the browser's search pane in Microsoft Internet Explorer 5 or later. </entry>
		 	</row><row>
		 		<entry>_self</entry><entry>When a window id opened, the current document is replaced with the specified <codeph>url</codeph>.</entry>
		 	</row><row>
		 		<entry>_top</entry><entry><codeph>url</codeph> replaces any framesets that are loaded. If there are no framesets defined, this value acts as the _self value.</entry>
		 	</row><row>
		 		<entry>_media</entry><entry>The <codeph>url</codeph> is loaded in the Media Bar in Internet Explorer 6. Windows XP Service Pack 2 (SP2) and later. This feature is no longer supported. By default the <codeph>url</codeph> is loaded into a new browser window or tab.</entry>
		 	</row></tbody></tgroup></adobetable>
		 </apiDesc></apiParam><apiParam><apiItemName>features</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	Optional. A list of comma-separated items. Each item consists of an option and a value, separated 
		 by an equals sign (=), for example, "fullscreen=yes, toolbar=yes". The following features are supported.
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Value</entry><entry>Description</entry></row></thead><tbody><row>
		 		<entry>channelmode = { yes | no | 1 | 0 }</entry><entry>Specifies whether to display the window in theater mode. The default is no. Internet Explorer 7. channelmode = { yes | 1 } overrides the height value, the width value, the top value, and the left value. When active, the Navigation Bar is hidden, and the Title Bar is visible. The Channel Band is no longer supported in Internet Explorer 7. Prior to Internet Explorer 7 channelmode = { yes | 1 } displays the Channel Band in theatre mode. </entry>
		 	</row><row>
		 		<entry>directories = { yes | no | 1 | 0 }</entry><entry>Specifies whether to add directory buttons. The default is yes. Internet Explorer 7. This feature is no longer supported. </entry>
		 	</row><row>
		 		<entry>fullscreen = { yes | no | 1 | 0 }</entry><entry>Specifies whether to display the browser in full-screen mode. The default is no. Use full-screen mode carefully. Because this mode hides the browser's title bar and menus, you should always provide a button or other visual clue to help the user close the window. ALT+F4 closes the new window. Internet Explorer 7. A window in full-screen mode does not have to be in theatre mode. Prior to Internet Explorer 7, a window in full-screen mode must in theater mode (channelmode).</entry>
		 	</row><row>
		 		<entry>height = number</entry><entry>Internet Explorer 7. Sets the height of the window in pixels. The minimum value is 150, and specifies the minimum height of the browser content area. Prior to Internet Explorer 7, the minimum height value is 100. </entry>
		 	</row><row>
		 		<entry>left = number</entry><entry>Specifies the left position, in pixels. This value is relative to the upper-left corner of the screen. The value must be greater than or equal to zero.</entry>
		 	</row><row>
		 		<entry>location = { yes | no | 1 | 0 }</entry><entry>Internet Explorer 7. Specifies whether to display the navigation bar. The default is yes. Prior to Internet Explorer 7, this feature specifies whether to display the address bar. The Back command, the Forward command, and the Stop command are now located in the Navigation bar. Prior to Internet Explorer 7, navigation commands were located in the toolbar.</entry>
		 	</row><row>
		 		<entry>menubar = { yes | no | 1 | 0 }</entry><entry>Specifies whether to display the menu bar. The default is yes. Internet Explorer 7. By default the menu bar is hidden, unless it is revealed by the ALT key. menubar = { no | 0 } prohibits the menubar from appearing even when the ALT key is pressed. The combination of menubar = { no | 0 } and toolbar = { no | 0 } hides the toolbar and disables any additional third-party user interfaces. </entry>
		 	</row><row>
		 		<entry>resizable = { yes | no | 1 | 0 }</entry><entry>Specifies whether to display resize handles at the corners of the window. The default is yes. Internet Explorer 7. resizable = { no | 0 } disables tabs in a new window.</entry>
		 	</row><row>
		 		<entry>scrollbars = { yes | no | 1 | 0 }</entry><entry>Specifies whether to display horizontal and vertical scroll bars. The default is yes.</entry>
		 	</row><row>
		 		<entry>status = { yes | no | 1 | 0 }</entry><entry>Specifies whether to add a Status Bar at the bottom of the window. The default is yes.</entry>
		 	</row><row>
		 		<entry>titlebar = { yes | no | 1 | 0 }</entry><entry>Specifies whether to display a Title Bar for the window. The default is yes. Internet Explorer 5.5 and later. This feature is no longer supported. The Title Bar remains visible unless the fullscreen sFeature is active. This parameter is ignored prior to Internet Explorer 5.5. It applies only if the calling application is an HTML Application or a trusted dialog box.</entry>
		 	</row><row>
		 		<entry>toolbar = { yes | no | 1 | 0 }</entry><entry>Internet Explorer 7. Specifies whether to display the browser command bar, making buttons such as Favorites Center, Add to Favorites, and Tools available. The default is yes. The combination of menubar = { no | 0 } and toolbar = { no | 0 } turns off the Toolbar and any additional third-party user interfaces. Prior to Internet Explorer 7, the toolbar sFeature specifies whether to display the browser toolbar, making buttons such as Back, Forward, and Stop available. </entry>
		 	</row><row>
		 		<entry>top = number</entry><entry>Specifies the top position, in pixels. This value is relative to the upper-left corner of the screen. The value must be greater than or equal to zero.</entry>
		 	</row><row>
		 		<entry>width = number</entry><entry>Internet Explorer 7. Sets the width of the window in pixels. The minimum value is 250, and specifies the minimum width of the browser content area. Prior to Internet Explorer 7, the minimum height value is 100. </entry>
		 	</row></tbody></tgroup></adobetable>
		 </apiDesc></apiParam><apiParam><apiItemName>replace</apiItemName><apiType value="Boolean"/><apiDesc>Optional. When the <codeph>url</codeph> is loaded into the same window, this Boolean parameter specifies whether the <codeph>url</codeph> creates a new entry or replaces the current entry in the window's history list. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Open a document stream for writing. If a document exists in the target, 
		 this method clears it.
		 
		 <p><b>Note (IE):</b> All params are for IE only</p>
		 
		 <p><b>Note:</b> This method and the ones following allow a user to add to or 
		 replace the structure model of a document using strings of unparsed 
		 HTML. At the time of writing alternate methods for providing similar 
		 functionality for both HTML and XML documents were being considered.</p>
		 
		 <p><b>Note (Mozilla):</b> Also, an automatic document.open() call happens when 
		 document.write() is called after the page has loaded, but that's not defined in the W3C specification. </p>
		 
		 <p><b>IE Style</b></p>
		 
		 <p>Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the 
		 <codeph>url</codeph> parameter and the <codeph>name</codeph> parameter to collect the output of the  write method and the  writeln method.</p>
		 
		 </apiDesc><example>
		 W3C / Mozilla Example
		 <codeblock>
		 // In this example, the document contents are 
		 // overwritten as the document 
		 // is reinitialized on open(). 
		 document.write("&lt;html&gt;&lt;p&gt;remove me&lt;/p&gt;&lt;/html&gt;"); 
		 document.open(); 
		 // document is empty.</codeblock>
		 
		 <p><b>IE Style</b></p>
		 <p>The following example shows how to use the open method to replace the current document with a new document and display the HTML markup contained in the variable sMarkup. </p>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;First Document&lt;/title&gt;
		 &lt;script&gt;
		 function replace(){
		 	var oNewDoc = document.open("text/html", "replace");
		 	var sMarkup = "&lt;html&gt;&lt;head&gt;&lt;title&gt;New Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello, world&lt;/body&gt;&lt;/html&gt;";
		 	oNewDoc.write(sMarkup);
		 	oNewDoc.close();
		 }
		 
		 &lt;/script&gt;
		 &lt;/head&gt;
		 &lt;body&gt;
		 &lt;h1&gt;I just want to say&lt;/h1&gt;&lt;br&gt;
		 &lt;!--Button will call the replace function and replace the current page with a new one--&gt;
		 &lt;input type ="button" value = "Finish Sentence" onclick="replace();"&gt;
		 &lt;/body&gt;
		 
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536652%28VS.85%29.aspx"><linktext>MSDN - open Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.open"><linktext>MDC - Document.open()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-72161170"><linktext>W3C - HTMLDocument.open()</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:queryCommandEnabled"><apiName>queryCommandEnabled</apiName><shortdesc>
		 Determines whether the given command can be executed on the document in its current state.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft/Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>True if successful, or an error value otherwise.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>cmdId</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies a command identifier.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines whether the given command can be executed on the document in its current state. 
		 
		 <p><b>Note (IE):</b> Using  queryCommandEnabled ("delete") on a  TextRange object returns true, while  
		 queryCommandEnabled ("delete") on a  document object returns false. However,  execCommand ("delete") can still 
		 be used to delete the selected text. </p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536676%28VS.85%29.aspx"><linktext>MSDN - queryCommandEnabled Method</linktext></link><link href="http://developer.mozilla.org/en/Document.queryCommandEnabled"><linktext>MDC - Document.queryCommandEnabled()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms533049%28VS.85%29.aspx"><linktext>MSDN - Command Identifiers</linktext></link><link href="http://developer.mozilla.org/en/Rich-Text_Editing_in_Mozilla#Executing_Commands"><linktext>MDC - Executing Commands</linktext></link><link href="http://developer.mozilla.org/en/Midas#Supported_Commands"><linktext>MDC - Supported Commands</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:queryCommandIndeterm"><apiName>queryCommandIndeterm</apiName><shortdesc>
		 Determines whether the current selection is in an indetermined state.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft/Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>True if successful, or an error value otherwise.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>cmdId</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies a command identifier.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines whether the current selection is in an indetermined state. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa752630%28VS.85%29.aspx"><linktext>MSDN - IHTMLDocument2::queryCommandIndeterm Method</linktext></link><link href="http://developer.mozilla.org/en/Document.queryCommandEnabled"><linktext>MDC - Document.queryCommandIndeterm()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms533049%28VS.85%29.aspx"><linktext>MSDN - Command Identifiers</linktext></link><link href="http://developer.mozilla.org/en/Rich-Text_Editing_in_Mozilla#Executing_Commands"><linktext>MDC - Executing Commands</linktext></link><link href="http://developer.mozilla.org/en/Midas#Supported_Commands"><linktext>MDC - Supported Commands</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:queryCommandState"><apiName>queryCommandState</apiName><shortdesc>
		 Determines whether the given command has been executed on the current selection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft/Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>True if the command has been completed; false if the command has not completed; null if the state cannot be accurately determined.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>cmdId</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies a command identifier.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines whether the given command has been executed on the current selection. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa752631%28VS.85%29.aspx"><linktext>MSDN - IHTMLDocument2::queryCommandState Method</linktext></link><link href="http://developer.mozilla.org/en/Document.queryCommandEnabled"><linktext>MDC - Document.queryCommandState()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms533049%28VS.85%29.aspx"><linktext>MSDN - Command Identifiers</linktext></link><link href="http://developer.mozilla.org/en/Rich-Text_Editing_in_Mozilla#Executing_Commands"><linktext>MDC - Executing Commands</linktext></link><link href="http://developer.mozilla.org/en/Midas#Supported_Commands"><linktext>MDC - Supported Commands</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:queryCommandSupported"><apiName>queryCommandSupported</apiName><shortdesc>
		 Returns a Boolean value that indicates whether the current command is supported on the current range.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft/Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>True if successful, or an error value otherwise.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>cmdId</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies a command identifier.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a Boolean value that indicates whether the current command is supported on the current range.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa752632%28VS.85%29.aspx"><linktext>MSDN - IHTMLDocument2::queryCommandSupported Method</linktext></link><link href="http://developer.mozilla.org/en/Document.queryCommandEnabled"><linktext>MDC - Document.queryCommandSupported()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms533049%28VS.85%29.aspx"><linktext>MSDN - Command Identifiers</linktext></link><link href="http://developer.mozilla.org/en/Rich-Text_Editing_in_Mozilla#Executing_Commands"><linktext>MDC - Executing Commands</linktext></link><link href="http://developer.mozilla.org/en/Midas#Supported_Commands"><linktext>MDC - Supported Commands</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:queryCommandText"><apiName>queryCommandText</apiName><shortdesc>
		 Retrieves the string associated with a command.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft/Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The text associated with the command will be stored. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>cmdId</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies a command identifier.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the string associated with a command.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa752633%28VS.85%29.aspx"><linktext>MSDN - IHTMLDocument2::queryCommandText Method</linktext></link><link href="http://developer.mozilla.org/en/Document.queryCommandEnabled"><linktext>MDC - Document.queryCommandText()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms533049%28VS.85%29.aspx"><linktext>MSDN - Command Identifiers</linktext></link><link href="http://developer.mozilla.org/en/Rich-Text_Editing_in_Mozilla#Executing_Commands"><linktext>MDC - Executing Commands</linktext></link><link href="http://developer.mozilla.org/en/Midas#Supported_Commands"><linktext>MDC - Supported Commands</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:queryCommandValue"><apiName>queryCommandValue</apiName><shortdesc>
		 Determines the current value of the document, range, or current selection for the given command.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft/Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>True if successful, or an error value otherwise.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>cmdId</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies a command identifier.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines the current value of the document, range, or current selection for the given command. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa752634%28VS.85%29.aspx"><linktext>MSDN - IHTMLDocument2::queryCommandValue Method</linktext></link><link href="http://developer.mozilla.org/en/Document.queryCommandEnabled"><linktext>MDC - Document.queryCommandValue()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms533049%28VS.85%29.aspx"><linktext>MSDN - Command Identifiers</linktext></link><link href="http://developer.mozilla.org/en/Rich-Text_Editing_in_Mozilla#Executing_Commands"><linktext>MDC - Executing Commands</linktext></link><link href="http://developer.mozilla.org/en/Midas#Supported_Commands"><linktext>MDC - Supported Commands</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:recalc"><apiName>recalc</apiName><shortdesc>
		 Recalculates all dynamic properties in the current document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0b_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiDefaultValue>false
		 
		 </apiDefaultValue><apiParam><apiItemName>forceAll</apiItemName><apiType value="Boolean"/><apiDesc>Optional. A Boolean that specifies one of the following values. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Recalculates all dynamic properties in the current document.
		 
		 <p><b>Note:</b> Implicit dependencies, internal property changes, and related properties can cause 
		 some expressions not to recalculate, even though the referenced properties might have changed. For example, 
		 resizing the main window changes the  clientWidth property. Expressions that reference  clientWidth might not 
		 be recalculated, because the change might not be recognized.</p>
		 
		 <p><b>Note:</b> Implicit dependencies refer to properties that can be modified by changes in other 
		 properties. For example, the  height property of a  div object implicitly depends on the  innerHTML property of 
		 the div object. However, if an expression references the height property, a change in the innerHTML property, 
		 which might modify the height, does not cause a recalculation of the expression on a subsequent call to recalc.</p>
		 
		 <p><b>Note:</b> Related properties can access or manipulate data or behaviors through one or more other 
		 properties. For example,  pixelLeft and  posLeft can set or get the left position of the element. However, if an 
		 expression that references pixelLeft and posLeft is modified, the expression might not be recalculated on subsequent 
		 calls to recalc.</p>
		 
		 <p><b>Note:</b> Related properties that can cause this behavior include the following:  clientHeight,  
		 clientLeft,  clientTop, clientWidth, height,  left,  offsetHeight,  offsetLeft,  offsetTop,  offsetWidth,  
		 pixelHeight, pixelLeft,  pixelTop,  pixelWidth,  posHeight, posLeft,  posTop,  posWidth, and  top.</p>
		 
		 <p><b>Note:</b> To force the recalculation of all expressions, refer to the same property name or manually 
		 call recalc(true).</p>
		 
		 </apiDesc><example>
		 The following example uses the recalc method in HTML and script to help create a timer. If the calls to recalc are commented out, the timer does not work correctly.
		 <codeblock>
		 &lt;HTML&gt;
		 &lt;HEAD&gt; 
		 &lt;TITLE&gt;Recalc Example&lt;/TITLE&gt;
		 &lt;STYLE&gt;
		 BUTTON {font-size:14;width:150}
		 &lt;/STYLE&gt;
		 &lt;SCRIPT&gt;
		 
		 
		 var timerID = null;
		 var seconds = 0;
		 
		 //
		 // This function is called when the page loads. 
		 // It sets up a couple of expressions.
		 //
		 function init() {
		 	A.style.setExpression("width","seconds0");
		 	B.setExpression("innerText","seconds.toString()");
		 }
		 
		 //
		 // This function gets calls once a second and updates the seconds
		 // variable. Notice that without recalc, the expressions aren't
		 // updated until the mouse is moved.
		 //
		 function timer() {
		 	seconds++;
		 	document.recalc();
		 }
		 
		 //
		 // starts the timer
		 //
		 function starttimer() {
		 	if (timerID == null) {
		 		timerID = setInterval("timer()", 1000);
		 		startButton.disabled = true;
		 		stopButton.disabled = false;
		 	}
		 }
		 
		 //
		 // stops the timer
		 //
		 function stoptimer() {
		 	if (timerID != null) {
		 		clearInterval(timerID);
		 		timerID = null;
		 		startButton.disabled = false;
		 		stopButton.disabled = true;
		 	}
		 }
		 
		 //
		 //  resets the timer
		 //
		 function resettimer() {
		 	seconds = 0;
		 }
		 
		 &lt;/SCRIPT&gt;
		 &lt;/HEAD&gt;
		 &lt;BODY onload="init()"&gt;
		 
		 &lt;DIV id=A style="background-color:lightblue" &gt;&lt;/DIV&gt;
		 &lt;DIV id=B style="color:hotpink;font-weight:bold"&gt;&lt;/DIV&gt;
		 
		 &lt;BR&gt;
		 
		 &lt;BUTTON id="startButton" onclick="starttimer()"&gt;Start the Timer&lt;/BUTTON&gt;&lt;/BR&gt;
		 &lt;BUTTON id="stopButton" DISABLED="true" onclick="stoptimer()"&gt;Stop the Timer&lt;/BUTTON&gt;&lt;BR&gt;
		 &lt;BUTTON id="resetButton" onclick="resettimer()"&gt;Reset the Timer&lt;/BUTTON&gt;&lt;BR&gt;
		 
		 &lt;P style="width:320;color:peru;background-color:wheat"&gt;
		 
		 This example illustrates the use of document.recalc().  If the calls
		 to recalc are omitted in this example, expressions will not be updated 
		 until the mouse is moved.
		 &lt;/P&gt;
		 
		 &lt;/BODY&gt;
		 &lt;/HTML&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536689%28VS.85%29.aspx"><linktext>MSDN - releaseCapture Method</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:releaseCapture"><apiName>releaseCapture</apiName><shortdesc>
		 Removes mouse capture from the object in the current document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0b_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes mouse capture from the object in the current document.
		 
		 <p>For releaseCapture to have an effect, you must set mouse capture through 
		 the setCapture method.</p>
		 
		 <p>You can invoke the releaseCapture method on the document object. The 
		 releaseCapture method makes it unnecessary to determine which element 
		 has capture to programmatically release it. Other actions that release 
		 document capture include displaying a modal dialog box and switching 
		 focus to another application or browser window.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;BODY onload="oOwnCapture.setCapture();" onclick="document.releaseCapture();"&gt;
		 &lt;DIV ID=oOwnCapture onmousemove="oWriteLocation.value = event.clientX + event.clientY"; onlosecapture="alert(event.srcElement.id + ' has lost mouse capture.')"&gt;
		 &lt;TEXTAREA ID=oWriteLocation COLS=2&gt;&lt;/TEXTAREA&gt;
		 &lt;/DIV&gt;
		 &lt;HR&gt;
		 &lt;DIV ID=oNoCapture&gt;
		 &lt;P&gt;Click the document to invoke the releaseCapture method.&lt;/P&gt;
		 &lt;/DIV&gt;
		 &lt;/BODY&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536689%28VS.85%29.aspx"><linktext>MSDN - releaseCapture Method</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:releaseEvents"><apiName>releaseEvents</apiName><shortdesc>
		 The opposite of document.captureEvents( ), this method turns off event capture at the document level for 
		 one or more specific events named in the parameter list.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>eventTypeList</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A comma-separated list of case-sensitive event types as derived from the available 
		 Event object constants, such as Event.CLICK or Event.MOUSEMOVE.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The opposite of document.captureEvents( ), this method turns off event capture at the document level for 
		 one or more specific events named in the parameter list.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/document.releaseEvents"><linktext>MDC - Document.releaseEvents()</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:removeNode"><apiName>removeNode</apiName><shortdesc>
		 Removes the object from the document hierarchy.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Returns a reference to the object that is removed.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>removeChildren</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>If the childNodes collection of the object is removed
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the object from the document hierarchy.
		 
		 <p>This property is accessible at run time. If elements are removed at 
		 run time, before the closing tag is parsed, areas of the document 
		 might not render.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536708%28VS.85%29.aspx"><linktext>MSDN - removeNode Method</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:replaceNode"><apiName>replaceNode</apiName><shortdesc>
		 Replaces the object with another element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Returns a reference to the object that is replaced.
		 </apiDesc></apiReturn><apiParam><apiItemName>newNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies the new element to replace the object.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the object with another element.
		 
		 <p>When a node is replaced, all values that are associated with the 
		 replaced object are removed. For example, if a b object is replaced 
		 with an i object, any attributes and text between the opening and 
		 closing tags are also replaced. To preserve these values, copy them 
		 to the new element before the original object is replaced.</p>
		 
		 <p>This method is accessible at run time. If elements are removed at run 
		 time before the closing tag is parsed, areas of the document might 
		 not render.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;SCRIPT&gt;
		 function fnReplace() {
		 var sPreserve = oList.innerHTML;
		 var oNewNode = document.createElement("OL");
		 oList.replaceNode(oNewNode);
		 oNewNode.innerHTML = sPreserve;
		 }
		 &lt;/SCRIPT&gt;
		 
		 &lt;UL ID = oList&gt;
		 &lt;LI&gt;List Item 1
		 &lt;LI&gt;List Item 2
		 &lt;LI&gt;List Item 3
		 &lt;LI&gt;List Item 4
		 &lt;/UL&gt;
		 &lt;INPUT TYPE = button VALUE = "Replace List" onclick = "fnReplace()"&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536719%28VS.85%29.aspx"><linktext>MSDN - replaceNode Method</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:routeEvent"><apiName>routeEvent</apiName><shortdesc>
		 Used inside an event handler function, this method lets the event pass to its intended target object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>dom.events:Event</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Used inside an event handler function, this method lets the event pass to its intended target object.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/document.routeEvent"><linktext>MDC - Document.routeEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:swapNode"><apiName>swapNode</apiName><shortdesc>
		 Exchanges the location of two objects in the document hierarchy.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Returns a reference to the object that invoked the method.
		 </apiDesc></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies the existing element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Exchanges the location of two objects in the document hierarchy.
		 
		 <p>This method is accessible at run time. If elements are removed at 
		 run time, before the closing tag is parsed, areas of the document 
		 might not render.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;script&gt;
		 		function fnSwap() {
		 			oList.children(0).swapNode(oList.children(1));
		 		}
		 &lt;/script&gt;
		 
		 &lt;ul ID = oList&gt;
		 		&lt;li&gt;List Item 1&lt;/li&gt;
		 		&lt;li&gt;List Item 2&lt;/li&gt;
		 		&lt;li&gt;List Item 3&lt;/li&gt;
		 		&lt;li&gt;List Item 4&lt;/li&gt;
		 &lt;/ul&gt;
		 &lt;input type=button value="Swap List" onclick="fnSwap()"&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536774%28VS.85%29.aspx"><linktext>MSDN - swapNode Method</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:write"><apiName>write</apiName><shortdesc>
		 Write a string of text to a document stream opened by open().</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMHTML" version="1"/><apiSince version="DOMHTML 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The string to be parsed into some structure in the 
		 document structure model.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Write a string of text to a document stream opened by open(). Note that 
		 the function will produce a document which is not necessarily driven by 
		 a DTD and therefore might be produce an invalid result in the context 
		 of the document.
		 
		 <p><b>Note (Mozilla):</b> Writing to a document that has already loaded without calling 
		 document.open() will automatically perform a document.open call. Once you have finished 
		 writing, it is recommended to call document.close(), to tell the browser to finish loading 
		 the page. The text you write is parsed into the document's structure model. In the example 
		 above, the h1 element becomes a node in the document.</p>
		 
		 <p><b>Note (Mozilla):</b> If the document.write() call is embedded directly in the HTML code, 
		 then it will not call document.open(). For example:
		 <codeblock>
		 &lt;div&gt; 
		 	&lt;script type="text/javascript"&gt; 
		 		document.write("&lt;h1&gt;Main title&lt;/h1&gt;") 
		 	&lt;/script&gt; 
		 &lt;/div&gt;</codeblock>
		 </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 
		 &lt;head&gt;
		 &lt;title&gt;write example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function newContent() {
		 	alert("load new content");
		 	document.open();
		 	document.write("&lt;h1&gt;Out with the old - in with the new!&lt;/h1&gt;");
		 	document.close();
		 }
		 
		 
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body onload="newContent();"&gt;
		 	&lt;p&gt;Some original document content.&lt;/p&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536782%28VS.85%29.aspx"><linktext>MSDN - write Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.write"><linktext>MDC - Document.write()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-75233634"><linktext>W3C - HTMLDocument.write()</linktext></link></related-links></apiOperation><apiOperation id="dom.html:HTMLDocument:writeln"><apiName>writeln</apiName><shortdesc>
		 Write a string of text followed by a newline character to a document 
		 stream opened by open().</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMHTML" version="1"/><apiSince version="DOMHTML 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The string to be parsed into some structure in the 
		 document structure model.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Write a string of text followed by a newline character to a document 
		 stream opened by open(). Note that the function will produce a 
		 document which is not necessarily driven by a DTD and therefore 
		 might be produce an invalid result in the context of the document.
		 
		 <p><b>Note:</b> document.writeln is the same as document.write but adds a newline. </p>
		 
		 </apiDesc><example>
		 <codeblock>document.writeln("&lt;p&gt;enter password:&lt;/p&gt;"); </codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536783%28VS.85%29.aspx"><linktext>MSDN - writeln Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.writeln"><linktext>MDC - Document.writeln()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-35318390"><linktext>W3C - HTMLDocument.writeln()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.html:HTMLLabelElement"><apiName>HTMLLabelElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLOptionElement"><apiName>HTMLOptionElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLMenuElement"><apiName>HTMLMenuElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLBRElement"><apiName>HTMLBRElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLLegendElement"><apiName>HTMLLegendElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLImageElement"><apiName>HTMLImageElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLTableCellElement"><apiName>HTMLTableCellElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLQuoteElement"><apiName>HTMLQuoteElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLAreaElement"><apiName>HTMLAreaElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLLinkElement"><apiName>HTMLLinkElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLFormElement"><apiName>HTMLFormElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.html:HTMLFormElement:reset"><apiName>reset</apiName><shortdesc>
		 Restores a form element's default values.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Restores a form element's default values. It performs the same action 
		 as a reset button. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLFormElement:submit"><apiName>submit</apiName><shortdesc>
		 Submits the form.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Submits the form. It performs the same action as a submit button. 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="dom.html:HTMLFrameElement"><apiName>HTMLFrameElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLIsIndexElement"><apiName>HTMLIsIndexElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLInputElement"><apiName>HTMLInputElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.html:HTMLInputElement:blur"><apiName>blur</apiName><shortdesc>
		 Removes keyboard focus from this element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes keyboard focus from this element. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLInputElement:click"><apiName>click</apiName><shortdesc>
		 Simulate a mouse-click.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Simulate a mouse-click. For INPUT elements whose type attribute has one of 
		 the following values: "button", "checkbox", "radio", "reset", or "submit". 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLInputElement:focus"><apiName>focus</apiName><shortdesc>
		 Gives keyboard focus to this element.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Gives keyboard focus to this element. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLInputElement:select"><apiName>select</apiName><shortdesc>
		 Select the contents of the text area.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Select the contents of the text area. For INPUT elements whose type 
		 attribute has one of the following values: "text", "file", or "password". 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="dom.html:HTMLBodyElement"><apiName>HTMLBodyElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLFontElement"><apiName>HTMLFontElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLIFrameElement"><apiName>HTMLIFrameElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLObjectElement"><apiName>HTMLObjectElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLMetaElement"><apiName>HTMLMetaElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLAppletElement"><apiName>HTMLAppletElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLTableElement"><apiName>HTMLTableElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.html:HTMLTableElement:createCaption"><apiName>createCaption</apiName><shortdesc>
		 Create a new table caption object or return an existing one.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.html:HTMLElement</apiOperationClassifier><apiDesc>A CAPTION element.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Create a new table caption object or return an existing one.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLTableElement:createTFoot"><apiName>createTFoot</apiName><shortdesc>
		 Create a table footer row or return an existing one.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.html:HTMLElement</apiOperationClassifier><apiDesc>A footer element (TFOOT).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Create a table footer row or return an existing one. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLTableElement:createTHead"><apiName>createTHead</apiName><shortdesc>
		 Create a table header row or return an existing one.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.html:HTMLElement</apiOperationClassifier><apiDesc>A new table header element (THEAD).
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Create a table header row or return an existing one. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLTableElement:deleteCaption"><apiName>deleteCaption</apiName><shortdesc>
		 Delete the table caption, if one exists.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Delete the table caption, if one exists. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLTableElement:deleteRow"><apiName>deleteRow</apiName><shortdesc>
		 Delete a table row.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified index is greater 
		 than or equal to the number of rows or if the index is a negative number other than -1.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>The index of the row to be deleted. This index starts from 
		 0 and is relative to the logical order (not document order) of all the 
		 rows contained inside the table. If the index is -1 the last row in the 
		 table is deleted.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Delete a table row. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLTableElement:deleteTFoot"><apiName>deleteTFoot</apiName><shortdesc>
		 Delete the footer from the table, if one exists.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Delete the footer from the table, if one exists. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLTableElement:deleteTHead"><apiName>deleteTHead</apiName><shortdesc>
		 Delete the header from the table, if one exists.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Delete the header from the table, if one exists. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLTableElement:insertRow"><apiName>insertRow</apiName><shortdesc>
		 Insert a new empty row in the table.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified index is 
		 greater than the number of rows or if the index is a negative number other than -1.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.html:HTMLElement</apiOperationClassifier><apiDesc>The newly created row.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>The row number where to insert a new row. This index starts from 0 and 
		 is relative to the logical order (not document order) of all the rows contained inside the table.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Insert a new empty row in the table. The new row is inserted immediately before 
		 and in the same section as the current indexth row in the table. If index is -1 
		 or equal to the number of rows, the new row is appended. In addition, when the 
		 table is empty the row is inserted into a TBODY which is created and inserted 
		 into the table. 
		 
		 <p><b>Note:</b> A table row cannot be empty according to [HTML 4.01].</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="dom.html:HTMLPreElement"><apiName>HTMLPreElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLTableCaptionElement"><apiName>HTMLTableCaptionElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLFrameSetElement"><apiName>HTMLFrameSetElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLTableRowElement"><apiName>HTMLTableRowElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.html:HTMLTableRowElement:deleteCell"><apiName>deleteCell</apiName><shortdesc>
		 Modified in DOM Level 2
		 
		 Delete a cell from the current row.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified index is 
		 greater than the number of rows or if the index is a negative number other than -1.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>The index of the cell to delete, starting from 0. If the index is -1 the last cell in the row is deleted.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Modified in DOM Level 2
		 
		 Delete a cell from the current row. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.html:HTMLTableRowElement:insertCell"><apiName>insertCell</apiName><shortdesc>
		 Modified in DOM Level 2
		 
		 Insert an empty TD cell into this row.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified index is 
		 greater than the number of rows or if the index is a negative number other than -1.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.html:HTMLElement</apiOperationClassifier><apiDesc>The newly created cell.
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>The place to insert the cell, starting from 0.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Modified in DOM Level 2
		 
		 Insert an empty TD cell into this row. If index is -1 or equal to the number of cells, 
		 the new cell is appended. 
		 
		  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="dom.html:HTMLDListElement"><apiName>HTMLDListElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLUListElement"><apiName>HTMLUListElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.html:HTMLStyleElement"><apiName>HTMLStyleElement</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="dom.loadsave.types"><apiName>dom.loadsave.types</apiName><apiClassifier id="dom.loadsave.types:LSOutputStream"><apiName>LSOutputStream</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.loadsave.types:LSWriter"><apiName>LSWriter</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.loadsave.types:LSInputStream"><apiName>LSInputStream</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.loadsave.types:LSReader"><apiName>LSReader</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="dom.loadsave"><apiName>dom.loadsave</apiName><apiClassifier id="dom.loadsave:LSExceptionCode"><apiName>LSExceptionCode</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.loadsave:LSInput"><apiName>LSInput</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.loadsave:DocumentLS"><apiName>DocumentLS</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.loadsave:DocumentLS:dom.loadsave:DocumentLS:abort"><apiName>abort</apiName><shortdesc>
		 If the document is currently being loaded as a result of the method load being invoked the loading and parsing is immediately 
		 aborted.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 If the document is currently being loaded as a result of the method load being invoked the loading and parsing is immediately 
		 aborted. The possibly partial result of parsing the document is discarded and the document is cleared. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2002/WD-DOM-Level-3-ASLS-20020409/load-save.html#LS-DocumentLS-abort"><linktext>W3C - DocumentLS.abort()</linktext></link></related-links></apiOperation><apiOperation id="dom.loadsave:DocumentLS:dom.loadsave:DocumentLS:load"><apiName>load</apiName><shortdesc>
		 Replaces the content of the document with the result of parsing the given URI.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If async is set to true load returns true if the document load was successfully initiated. If an 
		 error occurred when initiating the document load load returns false. If async is set to false load returns 
		 true if the document was successfully loaded and parsed. If an error occurred when either loading or parsing 
		 the URI load returns false.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The URI reference for the XML file to be loaded. If this is a relative URI, the base URI used by the implementation is implementation dependent.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the content of the document with the result of parsing the given URI. Invoking this method 
		 will either block the caller or return to the caller immediately depending on the value of the async 
		 attribute. Once the document is fully loaded the document will fire a "load" event that the caller can 
		 register as a listener for. If an error occurs the document will fire an "error" event so that the caller 
		 knows that the load failed (see ParseErrorEvent). If this method is called on a document that is currently 
		 loading, the current load is interrupted and the new URI load is initiated. 
		 
		 <p><b>Note (Mozilla):</b> As of at least Gecko 1.9, this no longer supports cross-site loading 
		 of documents (Use XMLHttpRequest instead).</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var xmlDoc = document.implementation.createDocument("", "test", null);
		 function documentLoaded (e) {
		 	alert(new XMLSerializer().serializeToString(e.target)); // Gives querydata.xml contents as string
		 }
		 xmlDoc.addEventListener("load", documentLoaded, false);
		 xmlDoc.load('querydata.xml');</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.load"><linktext>MDC - Document.load()</linktext></link><link href="http://www.w3.org/TR/2002/WD-DOM-Level-3-ASLS-20020409/load-save.html#LS-DocumentLS-load"><linktext>W3C - DocumentLS.load()</linktext></link></related-links></apiOperation><apiOperation id="dom.loadsave:DocumentLS:dom.loadsave:DocumentLS:loadXML"><apiName>loadXML</apiName><shortdesc>
		 Replace the content of the document with the result of parsing the input string, this method is always synchronous.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if parsing the input string succeeded without errors, otherwise false.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string containing an XML document.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replace the content of the document with the result of parsing the input string, this method is always synchronous. 
		 This method always parses from a DOMString, which means the data is always UTF16. All other encoding information is ignored. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2002/WD-DOM-Level-3-ASLS-20020409/load-save.html#LS-DocumentLS-loadXML"><linktext>W3C - DocumentLS.loadXML()</linktext></link></related-links></apiOperation><apiOperation id="dom.loadsave:DocumentLS:dom.loadsave:DocumentLS:saveXML"><apiName>saveXML</apiName><shortdesc>
		 Save the document or the given node to a string (i.e.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if the node passed in as the node parameter is from an other document.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The serialized document or null.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>snode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies what to serialize, if this parameter is null the whole document is serialized, if it's non-null the given node is serialized.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Save the document or the given node to a string (i.e. serialize the document or node). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2002/WD-DOM-Level-3-ASLS-20020409/load-save.html#LS-DocumentLS-saveXML"><linktext>W3C - DocumentLS.saveXML()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.loadsave:LSLoadEvent"><apiName>LSLoadEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:Event</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.loadsave:LSSerializer"><apiName>LSSerializer</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.loadsave:LSSerializer:dom.loadsave:LSSerializer:write"><apiName>write</apiName><shortdesc>
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>nodeArg</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>destination</apiItemName><apiOperationClassifier>dom.loadsave:LSOutput</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSSerializer-write"><linktext>http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSSerializer-write</linktext></link></related-links></apiOperation><apiOperation id="dom.loadsave:LSSerializer:dom.loadsave:LSSerializer:writeToString"><apiName>writeToString</apiName><shortdesc>
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>nodeArg</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSSerializer-writeToString"><linktext>http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSSerializer-writeToString</linktext></link></related-links></apiOperation><apiOperation id="dom.loadsave:LSSerializer:dom.loadsave:LSSerializer:writeToURI"><apiName>writeToURI</apiName><shortdesc>
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>nodeArg</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSSerializer-writeToURI"><linktext>http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSSerializer-writeToURI</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.loadsave:LSOutput"><apiName>LSOutput</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.loadsave:DOMImplementationLS"><apiName>DOMImplementationLS</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.loadsave:DOMImplementationLS:dom.loadsave:DOMImplementationLS:createLSInput"><apiName>createLSInput</apiName><shortdesc>
		 Create a new empty input source object where LSInput.characterStream, LSInput.byteStream, LSInput.stringData  
		 LSInput.systemId, LSInput.publicId, LSInput.baseURI, and LSInput.encoding are null, and LSInput.certifiedText is false.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.loadsave:LSInput</apiOperationClassifier><apiDesc>The newly created input object. 
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Create a new empty input source object where LSInput.characterStream, LSInput.byteStream, LSInput.stringData  
		 LSInput.systemId, LSInput.publicId, LSInput.baseURI, and LSInput.encoding are null, and LSInput.certifiedText is false. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-DOMImplementationLS-createLSInput"><linktext>W3C - DOMImplementationLS.createLSInput()</linktext></link></related-links></apiOperation><apiOperation id="dom.loadsave:DOMImplementationLS:dom.loadsave:DOMImplementationLS:createLSOutput"><apiName>createLSOutput</apiName><shortdesc>
		 Create a new empty output destination object where LSOutput.characterStream, LSOutput.byteStream, LSOutput.systemId, 
		 LSOutput.encoding are null.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.loadsave:LSOutput</apiOperationClassifier><apiDesc>The newly created output object. 
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Create a new empty output destination object where LSOutput.characterStream, LSOutput.byteStream, LSOutput.systemId, 
		 LSOutput.encoding are null. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-DOMImplementationLS-createLSOutput"><linktext>W3C - DOMImplementationLS.createLSOutput()</linktext></link></related-links></apiOperation><apiOperation id="dom.loadsave:DOMImplementationLS:dom.loadsave:DOMImplementationLS:createLSParser"><apiName>createLSParser</apiName><shortdesc>
		 Create a new LSParser.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if the requested mode or schema type is not supported. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.loadsave:LSParser</apiOperationClassifier><apiDesc>The newly created LSParser object. This LSParser is either synchronous or asynchronous depending on the value of the mode argument. 
		 
		 <p><b>Note:</b> By default, the newly created LSParser does not contain a DOMErrorHandler, 
		 i.e. the value of the "error-handler" configuration parameter is null. However, implementations may provide 
		 a default error handler at creation time. In that case, the initial value of the "error-handler" configuration 
		 parameter on the new LSParser object contains a reference to the default error handler. </p>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>mode</apiItemName><apiType value="Number"/><apiDesc>The mode argument is either MODE_SYNCHRONOUS or MODE_ASYNCHRONOUS, if mode is 
		 MODE_SYNCHRONOUS then the LSParser that is created will operate in synchronous mode, if it's 
		 MODE_ASYNCHRONOUS then the LSParser that is created will operate in asynchronous mode. 
		 </apiDesc></apiParam><apiParam><apiItemName>schemaType</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>An absolute URI representing the type of the schema language used during 
		 the load of a Document using the newly created LSParser. Note that no lexical checking is done 
		 on the absolute URI. In order to create a LSParser for any kind of schema types (i.e. the LSParser 
		 will be free to use any schema found), use the value null. 
		 
		 <p><b>Note:</b> For W3C XML Schema [XML Schema Part 1], applications must use the value 
		 "http://www.w3.org/2001/XMLSchema". For XML DTD [XML 1.0], applications must use the value 
		 "http://www.w3.org/TR/REC-xml". Other Schema languages are outside the scope of the W3C and therefore 
		 should recommend an absolute URI in order to use this method. </p>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Create a new LSParser. The newly constructed parser may then be configured by means of its 
		 DOMConfiguration object, and used to parse documents by means of its parse method. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-DOMImplementationLS-createLSParser"><linktext>W3C - DOMImplementationLS.createLSParser()</linktext></link></related-links></apiOperation><apiOperation id="dom.loadsave:DOMImplementationLS:dom.loadsave:DOMImplementationLS:createLSSerializer"><apiName>createLSSerializer</apiName><shortdesc>
		 Create a new LSSerializer object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.loadsave:LSSerializer</apiOperationClassifier><apiDesc>The newly created LSSerializer object.
		 
		 <p><b>Note:</b> By default, the newly created LSSerializer  has no DOMErrorHandler, i.e. the value of the 
		 "error-handler" configuration parameter is null. However, implementations may provide a default error handler at creation time. 
		 In that case, the initial value of the "error-handler"  configuration parameter on the new LSSerializer object contains a 
		 reference to the default error handler. </p>
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Create a new LSSerializer object. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-DOMImplementationLS-createLSSerializer"><linktext>W3C - DOMImplementationLS.createLSSerializer()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.loadsave:LSParser"><apiName>LSParser</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.loadsave:LSParser:abort"><apiName>abort</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSParser-abort"><linktext>http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSParser-abort</linktext></link></related-links></apiOperation><apiOperation id="dom.loadsave:LSParser:parse"><apiName>parse</apiName><shortdesc>
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Document</apiOperationClassifier><apiDesc>
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSParser-parse"><linktext>http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSParser-parse</linktext></link></related-links></apiOperation><apiOperation id="dom.loadsave:LSParser:parseURI"><apiName>parseURI</apiName><shortdesc>
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Document</apiOperationClassifier><apiDesc>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSParser-parseURI"><linktext>http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSParser-parseURI</linktext></link></related-links></apiOperation><apiOperation id="dom.loadsave:LSParser:parseWithContext"><apiName>parseWithContext</apiName><shortdesc>
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>input</apiItemName><apiOperationClassifier>dom.loadsave.types:LSInputStream</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>contextArg</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>action</apiItemName><apiType value="Number"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSParser-parseWithContext"><linktext>http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSParser-parseWithContext</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.loadsave:DOMImplementationLSMode"><apiName>DOMImplementationLSMode</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.loadsave:LSSerializerFilter"><apiName>LSSerializerFilter</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.tr.traversal:NodeFilter</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.loadsave:LSResourceResolver"><apiName>LSResourceResolver</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.loadsave:LSResourceResolver:dom.loadsave:LSResourceResolver:resolveResource"><apiName>resolveResource</apiName><shortdesc>
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.loadsave:LSInput</apiOperationClassifier><apiDesc>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>publicId</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>systemId</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>baseURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSResourceResolver-resolveResource"><linktext>http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSResourceResolver-resolveResource</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.loadsave:LSParserFilter"><apiName>LSParserFilter</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.loadsave:LSParserFilter:acceptNode"><apiName>acceptNode</apiName><shortdesc>
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>nodeArg</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSParserFilter-acceptNode"><linktext>http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSParserFilter-acceptNode</linktext></link></related-links></apiOperation><apiOperation id="dom.loadsave:LSParserFilter:startElement"><apiName>startElement</apiName><shortdesc>
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>elementArg</apiItemName><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSParserFilter-startElement"><linktext>http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-LSParserFilter-startElement</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.loadsave:LSProgressEvent"><apiName>LSProgressEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:Event</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="dom.objects"><apiName>dom.objects</apiName><apiClassifier id="dom.objects:NavigatorOnLine"><apiName>NavigatorOnLine</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.objects:MessagePortArray"><apiName>MessagePortArray</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.objects:MimeType"><apiName>MimeType</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.objects:Location"><apiName>Location</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example>
	 Replace the current document with the one at the given URL: 
	 <codeblock>
	 function goMoz() {
	 	window.location = "http://www.mozilla.org";
	 } 
	 
	 // in html: &lt;button onclick="goMoz();"&gt;Mozilla&lt;/button&gt;</codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="dom.objects:Location:assign"><apiName>assign</apiName><shortdesc>
		 Load the document at the provided URL.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>WindowObject 1
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The URL of the document to load.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Load the document at the provided URL.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536342%28VS.85%29.aspx"><linktext>MSDN - assign Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/window.location"><linktext>MDC - window.location</linktext></link><link href="http://www.w3.org/TR/Window/#location"><linktext>W3C - Window.location</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Location:reload"><apiName>reload</apiName><shortdesc>
		 Reload the document from the current URL.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>WindowObject 1
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>forceget</apiItemName><apiType value="Boolean"/><apiDesc><b>Not in W3 specification</b> When it is true, causes the page to always be reloaded from 
		 the server. If it is false or not specified, the browser may reload the page 
		 from its cache.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Reload the document from the current URL.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536691%28VS.85%29.aspx"><linktext>MSDN - reload Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/window.location"><linktext>MDC - window.location</linktext></link><link href="http://www.w3.org/TR/Window/#location"><linktext>W3C - Window.location</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Location:replace"><apiName>replace</apiName><shortdesc>
		 Replace the current document with the one at the provided URL.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>WindowObject 1
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The URL to insert into the session history.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replace the current document with the one at the provided URL. The difference 
		 from the assign() method is that after using replace() the current page will 
		 not be saved in session history, meaning the user won't be able to use the 
		 Back button to navigate to it.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536712%28VS.85%29.aspx"><linktext>MSDN - replace Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/window.location"><linktext>MDC - window.location</linktext></link><link href="http://www.w3.org/TR/Window/#location"><linktext>W3C - Window.location</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.objects:NavigatorID"><apiName>NavigatorID</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.objects:CRMFRequest"><apiName>CRMFRequest</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.objects:MimeTypeArray"><apiName>MimeTypeArray</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.objects:MimeTypeArray:item"><apiName>item</apiName><shortdesc>
		 Retrieves a MimeType by index.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.objects:MimeType</apiOperationClassifier><apiDesc>The specified MimeType
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index of the MimeType
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves a MimeType by index.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/Navigator.mimeTypes"><linktext>MDC - window.navigator.mimeTypes</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:MimeTypeArray:nameItem"><apiName>nameItem</apiName><shortdesc>
		 Retrives a MimeType by name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.objects:MimeType</apiOperationClassifier><apiDesc>The specified MimeType
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Name of the MimeType
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrives a MimeType by name.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/Navigator.mimeTypes"><linktext>MDC - window.navigator.mimeTypes</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.objects:BarProp"><apiName>BarProp</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.objects:PluginArray"><apiName>PluginArray</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.objects:PluginArray:item"><apiName>item</apiName><shortdesc>
		 Retrieves a Plugins by index.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.objects:Plugin</apiOperationClassifier><apiDesc>The specified Plugins
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index of the Plugins
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves a Plugins by index.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536460%28VS.85%29.aspx"><linktext>MSDN - item Method</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:PluginArray:nameItem"><apiName>nameItem</apiName><shortdesc>
		 Retrives a Plugins by name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.objects:Plugin</apiOperationClassifier><apiDesc>The specified Plugins
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Name of the Plugins
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrives a Plugins by name.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536634%28VS.85%29.aspx"><linktext>MSDN - namedItem Method</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:PluginArray:refresh"><apiName>refresh</apiName><shortdesc>
		 Undocumented
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Undocumented
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.objects:PluginArray:tags"><apiName>tags</apiName><shortdesc>
		 Retrieves a collection of objects that have the specified HTML tag name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Retrieves a collection of objects that have the specified HTML tag name. 
		 
		 </apiDesc><example>
		 <codeblock>var coll = document.all.tags("p");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536776%28VS.85%29.aspx"><linktext>MSDN - tags Method</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.objects:History"><apiName>History</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.objects:History:back"><apiName>back</apiName><shortdesc>
		 Goes to the previous page in session history, the same action as when the user clicks the browser's Back button.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Goes to the previous page in session history, the same action as when the user clicks the browser's Back button.
		 
		 <p>Equivalent to history.go(-1).</p>
		 
		 <p>Calling this method to go back beyond the first page in the session history has no effect 
		 and doesn't raise an exception.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536346%28VS.85%29.aspx"><linktext>MSDN - back Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/window.history"><linktext>MDC - window.history</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:History:forward"><apiName>forward</apiName><shortdesc>
		 Goes to the next page in session history, the same action as when the user clicks the browser's Forward button.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Goes to the next page in session history, the same action as when the user clicks the browser's Forward button.
		 
		 <p>Equivalent to history.go(1).</p>
		 
		 <p>Calling this method to go back beyond the last page in the session history has no effect 
		 and doesn't raise an exception.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536426%28VS.85%29.aspx"><linktext>MSDN - forward Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/window.history"><linktext>MDC - window.history</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:History:go"><apiName>go</apiName><shortdesc>
		 Loads a page from the session history, identified by its relative location to the current page, for 
		 example -1 for the previous page or 1 for the next page.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>integerDelta</apiItemName><apiType value=""/><apiDesc>Specifies an integer or a string. An integer indicates the relative position of a URL in the History list. A string indicates an exact URL in the History list.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Loads a page from the session history, identified by its relative location to the current page, for 
		 example -1 for the previous page or 1 for the next page.
		 
		 <p>When integerDelta is out of bounds (e.g. -1 when there are no previously visited pages in the session 
		 history), the method doesn't do anything and doesn't raise an exception.</p>
		 
		 <p>Calling go() without parameters or with a non-integer argument has no effect (unlike Internet Explorer, 
		 which supports string URLs as the argument [1]).</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href=""><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms536426%28VS.85%29.aspx"><linktext>MSDN - forward Method MSDN - go Method</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms536443(VS.85).aspx"><linktext>MSDN - [1]</linktext></link><link href="http://developer.mozilla.org/en/DOM/window.history"><linktext>MDC - window.history</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.objects:MessagePort"><apiName>MessagePort</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.objects:MessagePort:dom.objects:MessagePort:close"><apiName>close</apiName><shortdesc>
		 Disconnects the port, so that it is no longer active.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Disconnects the port, so that it is no longer active.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/html5/comms.html#dom-messageport-close"><linktext>W3C - HTML5: MessagePort.start()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:MessagePort:dom.objects:MessagePort:postMessage"><apiName>postMessage</apiName><shortdesc>
		 Posts a message through the channel, optionally with the given ports.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_STATE_ERR: If the ports array is not null and it contains either null 
		 entries, duplicate ports, ports that are not entangled, or the source or target port.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiType value=""/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>ports</apiItemName><apiOperationClassifier>dom.objects:MessagePortArray</apiOperationClassifier><apiDesc>	 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Posts a message through the channel, optionally with the given ports.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/html5/comms.html#dom-messageport-postmessage"><linktext>W3C - HTML5: MessagePort.postMessage()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:MessagePort:dom.objects:MessagePort:start"><apiName>start</apiName><shortdesc>
		 Begins dispatching messages received on the port.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Begins dispatching messages received on the port.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/html5/comms.html#dom-messageport-start"><linktext>W3C - HTML5: MessagePort.start()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.objects:Crypto"><apiName>Crypto</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.objects:Crypto:alert"><apiName>alert</apiName><shortdesc> 
		 Undocumented
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> 
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/JavaScript_crypto"><linktext>MDC - JavaScript crypto</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Crypto:disableRightClick"><apiName>disableRightClick</apiName><shortdesc> 
		 Undocumented
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/JavaScript_crypto"><linktext>MDC - JavaScript crypto</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Crypto:generateCRMFRequest"><apiName>generateCRMFRequest</apiName><shortdesc>
		 This method will generate a sequence of CRMF requests that has N requests.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.objects:CRMFRequest</apiOperationClassifier><apiDesc>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>requestedDN</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>An RFC 1485 formatted DN to include in the certificate request.
		 </apiDesc></apiParam><apiParam><apiItemName>regToken</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A value used to authenticate the user to the RA/CA.
		 </apiDesc></apiParam><apiParam><apiItemName>authenticator</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A value that the user can authenticate with in the future when 
		 their private key is not available. Can be used for key recovery or revocation requests.
		 </apiDesc></apiParam><apiParam><apiItemName>escrowAuthorityCert</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>If this value is NULL, then no key escrow will be performed. 
		 This value specifies which KRA certificate should be used to wrap the private key being 
		 escrowed. The user will be prompted for confirmation whenever a key will be escrowed. 
		 Only key exchange keys will be escrowed. If a dual use key is being generated, it will 
		 not be escrowed. The value of this argument is a base-64 encoded certificate.
		 </apiDesc></apiParam><apiParam><apiItemName>CRMFGenerationDoneCode</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This parameter is JavaScript to execute when the CRMF generation is complete.
		 </apiDesc></apiParam><apiParam><apiItemName>keySizeN</apiItemName><apiType value="Number"/><apiDesc>The size in bits of the Nth key to generate
		 </apiDesc></apiParam><apiParam><apiItemName>keyParamsN</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This string is an optional algorithm dependent parameter value. For 
		 Diffie-Hellman it is used to specify p and g parameters. For DSA, it will be used to 
		 specify pqg. If the key generation requires parameters and the value passed in is NULL, 
		 then the client will generate the parameters on its own. Currently, this value is ignored.
		 </apiDesc></apiParam><apiParam><apiItemName>keyGenAlgN</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Which algorithm the generated key will support. Acceptable values are (the 
		 mentioned values for keyUsage pertain to the keyUsage value of the Certificate Extension that 
		 will ultimately be in the issued certificate):
		 <ul>
		 <li>"rsa-ex" - generate an RSA key for key exchange only (This will have eyEncipherment set for keyUsage.)</li>
		 <li>"rsa-dual-use" - generate a single RSA key for both signing and encryption. (This will have digitalSignature, keyEncipherment, and nonRepudiation set for keyUsage.)</li>
		 <li>"rsa-sign" - generate an RSA key for signing only. (This will have digitalSignature set for keyUsage.)</li>
		 <li>"rsa-nonrepudiation" - generate a single RSA key for nonRepudiation only. (This will have non-repudiation set for keyUsage.)</li>
		 <li>"rsa-sign-nonrepudiation" - generate a single RSA key use for both signing and nonRepudiation. (This will have both digitalSignature and nonRepudiation set for keyUsage.)</li>
		 <li>"dsa-sign" - generate a single DSA key for signing only. (This will have digitalSignature set for keyUsage.)</li>
		 <li>"dsa-nonrepudiation" - generate a single DSA key for nonRepudiation. (This will have nonRepudiation set for keyUsage.)</li>
		 <li>"dsa-sign-nonrepudiation" - generate a single DSA key for signing and non-repudiation. (This will have digitalSignature and nonRepudiation set for keyUsage.)</li>
		 <li>"dh-ex"</li>
		 <li>"ec-ex"</li>
		 <li>"ec-dual-use"</li>
		 <li>"ec-sign"</li>
		 <li>"ec-sign-nonrepudiation"</li>
		 <li>"ec-nonrepudiation"</li>
		 </ul>
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method will generate a sequence of CRMF requests that has N requests. One request 
		 for each key pair that is generated. The first three parameters will be applied to every 
		 request. The "escrowAuthorityCert" parameter will only be used for requests that pertain 
		 to a key that is being escrowed. After the "escrowAuthorityCert" parameter, the method 
		 takes some JavaScript code that is invoked when the CRMF request is ready. Finally, there 
		 are 1 or more sets of key generation arguments. Each key generation will be associated 
		 with its own request. All the requests will have the same DN.
		 
		 </apiDesc><example>
		 This generates a CRMF object with dummy settings and outputs to Firebug
		 <codeblock>
		 var crmfObject = null;
		 try {
		 	crmfObject = window.crypto.generateCRMFRequest("CN=vvv", "regToken", null, null, 'f' , 1024, null, "rsa-dual-use");
		 } catch(ex) {
		 	console.log("window.crypto.generateCRMFRequest() failed - " + ex + "\n");
		 }
		 function f() {
		 	console.log("done");
		 }
		 console.log(crmfObject);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/GenerateCRMFRequest"><linktext>MDC - crypto.generateCRMFRequest()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Crypto:importUserCertificates"><apiName>importUserCertificates</apiName><shortdesc>
		 Imports newly issued certificates for the user.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>If the import operation succeeds, an empty string will be returned. If it fails, one of 
		 the following error strings will be returned: 
		 <ul>
		 <li>"error:userCancel" -	The user canceled the import operation</li>
		 <li>"error:invalidCertificate" -	One of the certificate packages was incorrectly formatted</li>
		 <li>"error:internalError" -	The software encountered some internal error, such as out of memory</li>
		 <li>"error:invalidRequestID" -	The request ID in the response message does not match any outstanding request</li>
		 </ul>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>nicknameString</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This is the nickname that will be used to describe the certificate in the 
		 client's certificate management UI. It should serve to uniquely identify the certificate to the user. 
		 For example, "John Smith's VeriSign Class 3 Digital ID" or "John Smith's Ford ID Certificate". However, 
		 if this certificate has the same DN as one or more certificates that already exist in the user's 
		 certificate store, the nickname associated with the certificate(s) of the same DN in the certificate 
		 store is used, and the "nicknameString" parameter is ignored. If the string is null and no certificate 
		 with the same DN exists in the user's certificate store, Personal Security Manager uses the following 
		 pattern to derive the nickname: &lt;Common Name&gt;'s &lt;Issuer Name&gt; ID.
		 </apiDesc></apiParam><apiParam><apiItemName>certString</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This string is the CMMF Certification Response from the CA that contains the user's certificate(s). The response is base-64 encoded.
		 </apiDesc></apiParam><apiParam><apiItemName>forceBackup</apiItemName><apiType value="Boolean"/><apiDesc>It allows the CA or RA to indicate to the client whether to force the user to back up a newly issued certificate (PKCS #12).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Imports newly issued certificates for the user. The private key for the certificates must 
		 already reside in the user's personal private key database.
		 
		 The request ID in the response being imported must match the request ID in the associated 
		 Certification Request or Recovery Request.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/ImportUserCertificates"><linktext>MDC - crypto.importUserCertificates()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Crypto:logout"><apiName>logout</apiName><shortdesc> 
		 Undocumented
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/JavaScript_crypto"><linktext>MDC - JavaScript crypto</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Crypto:popChallengeResponse"><apiName>popChallengeResponse</apiName><shortdesc>
		 The popChallengeResponse() function returns a proof of key posession signed challenge which a CA can use 
		 to verify the client has the private key associated with it's claimed public key.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The resultString will either be a base-64 encoded POPODecKeyRespContent message, or one of the 
		 following error strings: 
		 <ul>
		 <li>"error:invalidParameter:XXX" 	The parameter XXX was an invalid value.</li>
		 <li>"error:internalError" 	The software encountered some internal error, such as out of memory</li>
		 </ul>
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>challengeString</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A base-64 encoded CMMF POPODecKeyChallContent message. The current implementation
		 does not conform to that defined in the CMMF draft, and we intend to change this implementation to that 
		 defined in the CMC RFC. See below for the current implementation.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The popChallengeResponse() function returns a proof of key posession signed challenge which a CA can use 
		 to verify the client has the private key associated with it's claimed public key. 
		 
		 </apiDesc><example>
		 <codeblock>
		 resultString = crypto.popChallengeResponse("challengeString");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/PopChallengeResponse"><linktext>MDC - crypto.popChallengeResponse()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Crypto:random"><apiName>random</apiName><shortdesc> 
		 Generates a random number of numBytes length.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>numBytes</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc> 
		 Generates a random number of numBytes length.
		 
		 <p><b>Note (Mozilla):</b> window.crypto.random() is not yet implemented in Mozilla browsers.</p>
		 
		 </apiDesc><example>
		 To obtain a ten byte random number using the cryptographic engine, simply call: 
		 <codeblock>var myrandom = window.crypto.random(10);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/JavaScript_crypto"><linktext>MDC - JavaScript crypto</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Crypto:signText"><apiName>signText</apiName><shortdesc> 
		 Undocumented
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>stringToSign</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiParam><apiParam><apiItemName>caOption</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> 
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/JavaScript_crypto"><linktext>MDC - JavaScript crypto</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.objects:Plugin"><apiName>Plugin</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.objects:Plugin:item"><apiName>item</apiName><shortdesc>
		 Retrieves a MimeType by index.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.objects:MimeType</apiOperationClassifier><apiDesc>The specified MimeType
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index of the MimeType
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves a MimeType by index.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536460%28VS.85%29.aspx"><linktext>MSDN - item Method</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Plugin:nameItem"><apiName>nameItem</apiName><shortdesc>
		 Retrives a MimeType by name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.objects:MimeType</apiOperationClassifier><apiDesc>The specified MimeType
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Name of the MimeType
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrives a MimeType by name.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536634%28VS.85%29.aspx"><linktext>MSDN - namedItem Method</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.objects:UserProfile"><apiName>UserProfile</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.objects:UserProfile:addReadRequest"><apiName>addReadRequest</apiName><shortdesc>
		 Adds an entry to the queue for read requests.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiPlatform description="" name="Obsolete" version="IE7"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>True if the request has been successfully added to the queue. False if the attribute name was not recognized or the attribute already appeared in the request queue.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>attributeName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies one of the standard vCard names. If anything else is used, the request is ignored and nothing is added to the read-requests queue.
		 </apiDesc></apiParam><apiParam><apiItemName>reserved</apiItemName><apiType value=""/><apiData>null</apiData><apiDesc>Windows Internet Explorer currently ignores this parameter.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds an entry to the queue for read requests.
		 
		 <p><b>Note:</b> This method appends a vCard name to the read-requests queue. The
		 read-requests queue is a list of read requests waiting to be initiated. To initiate the accumulated, 
		 or compound, read requests in the queue, call doReadRequest. To clear the queue, call clearRequest. </p>
		  
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms535929%28VS.85%29.aspx"><linktext>MSDN - addReadRequest Method</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:UserProfile:clearRequest"><apiName>clearRequest</apiName><shortdesc>
		 Clears all requests in the read-requests queue to prepare for new profile-information requests.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiPlatform description="" name="Obsolete" version="IE7"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Clears all requests in the read-requests queue to prepare for new profile-information requests.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536355%28VS.85%29.aspx"><linktext>MSDN - clearRequest Method</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:UserProfile:doReadRequest"><apiName>doReadRequest</apiName><shortdesc>
		 Performs all requests located in the read-requests queue.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiPlatform description="" name="Obsolete" version="IE7"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>usageCode</apiItemName><apiType value="Number"/><apiDesc>Specifies the code that notifies the user of the type of access requested. This usage 
		 code should be one of the following 13 codes defined by the Internet Privacy Working Group (IPWG).
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 	
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Title</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>0</entry><entry>Used for system administration.</entry>
		 	</row><row>
		 		<entry>1</entry><entry>Used for research and product development.</entry>
		 	</row><row>
		 		<entry>2</entry><entry>Used for completion and support of the current transaction.</entry>
		 	</row><row>
		 		<entry>3</entry><entry>Used to customize the content and design of a site.</entry>
		 	</row><row>
		 		<entry>4</entry><entry>Used to improve the content of a site that includes advertisements.</entry>
		 	</row><row>
		 		<entry>5</entry><entry>Used for notifying visitors about updates to the site.</entry>
		 	</row><row>
		 		<entry>6</entry><entry>Used for contacting visitors for marketing of services or products.</entry>
		 	</row><row>
		 		<entry>7</entry><entry>Used for linking other collected information.</entry>
		 	</row><row>
		 		<entry>8</entry><entry>Used by a site for other purposes.</entry>
		 	</row><row>
		 		<entry>9</entry><entry>Disclosed to others for customization or improvement of the content and design of the site.</entry>
		 	</row><row>
		 		<entry>10</entry><entry>Disclosed to others, who may contact the user, for marketing of services or products.</entry>
		 	</row><row>
		 		<entry>11</entry><entry>Disclosed to others, who may contact the user, for marketing of services or products. The user can ask a site not to do this.</entry>
		 	</row><row>
		 		<entry>12</entry><entry>Disclosed to others for any other purpose.</entry>
		 	</row></tbody></tgroup></adobetable>
		 </apiDesc></apiParam><apiParam><apiItemName>friendlyName</apiItemName><apiData>null</apiData><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the display name of the party requesting access to private information. 
		 For security reasons, it is not sufficient for the user agent to show this display name to the user. In addition 
		 to display name, the user agent must display the URL that originates the script requesting profile access. If 
		 this script originates from a secure connection (for example, SSL), the Web author can use the SSL certificate 
		 to reliably identify the party requesting access.
		 </apiDesc></apiParam><apiParam><apiItemName>domain</apiItemName><apiData>null</apiData><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the pages that the user's choice will apply to in addition to the current page. 
		 The specification follows the cookie standard.
		 </apiDesc></apiParam><apiParam><apiItemName>path</apiItemName><apiData>null</apiData><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the path to the domain server requesting access. When vExpiration is set, the path is saved with the requested attributes.
		 </apiDesc></apiParam><apiParam><apiItemName>expiration</apiItemName><apiType value=""/><apiData>null</apiData><apiDesc>Specifies the amount of time the site has requested access to these attributes. This is currently ignored by Windows Internet Explorer.
		 </apiDesc></apiParam><apiParam><apiItemName>reserved</apiItemName><apiType value=""/><apiData>null</apiData><apiDesc>This parameter is reserved.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Performs all requests located in the read-requests queue.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536413%28VS.85%29.aspx"><linktext>MSDN - doReadRequest Method</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:UserProfile:getAttribute"><apiName>getAttribute</apiName><shortdesc>
		 Returns the value of the named attribute from the userProfile object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiPlatform description="" name="Obsolete" version="IE7"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/><apiDesc>Returns a null value if read access for this attribute is not available.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>attributeName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One of the standard vCard names listed in Remarks. If one of these names is not used, the request is ignored.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the value of the named attribute from the userProfile object.
		 
		 <p><b>Note:</b> The following schema is used for the field names of the user data store. These names are 
		 specified when you use the getAttribute method on the userProfile object. Note that the format has changed from 
		 vCard_xxx to vCard.xxx, and that the older format no longer is supported.</p>
		 
		 <p><b>Note:</b> An asterisk ( denotes extensions to the vCard schema. Extensions are referenced 
		 as X- elements, as defined in the vCard schema.</p>
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="3"><thead><row><entry>vCard Names</entry></row></thead><tbody><row>
		 <entry>vCard.Business.City</entry>
		 <entry>vCard.Business.Country</entry>
		 <entry>vCard.Business.Fax</entry>
		 </row><row>
		 <entry>vCard.Business.Phone</entry>
		 <entry>vCard.Business.State</entry>
		 <entry>vCard.Business.StreetAddress</entry>
		 </row><row>
		 <entry>vCard.Business.URL</entry>
		 <entry>vCard.Business.Zipcode</entry>
		 <entry>vCard.Cellular</entry>
		 </row><row>
		 <entry>vCard.Company</entry>
		 <entry>vCard.Department</entry>
		 <entry>vCard.DisplayName</entry>
		 </row><row>
		 <entry>vCard.Email</entry>
		 <entry>vCard.FirstName</entry>
		 <entry>vCard.Gender~~</entry>
		 </row><row>
		 <entry>vCard.Home.City</entry>
		 <entry>vCard.Home.Country</entry>
		 <entry>vCard.Home.Fax</entry>
		 </row><row>
		 <entry>vCard.Home.Phone</entry>
		 <entry>vCard.Home.State</entry>
		 <entry>vCard.Home.StreetAddress</entry>
		 </row><row>
		 <entry>vCard.Home.Zipcode</entry>
		 <entry>vCard.Homepage</entry>
		 <entry>vCard.JobTitle</entry>
		 </row><row>
		 <entry>vCard.LastName</entry>
		 <entry>vCard.MiddleName</entry>
		 <entry>vCard.Notes</entry>
		 </row><row>
		 <entry>vCard.Office</entry>
		 <entry>vCard.Pager</entry>
		 <entry/>
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536431%28VS.85%29.aspx"><linktext>MSDN - getAttribute Method</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:UserProfile:setAttribute"><apiName>setAttribute</apiName><shortdesc>
		 Sets the value of the specified attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiPlatform description="" name="Obsolete" version="IE7"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>attrName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the attribute.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>The string, number, or Boolean to assign to the attribute. 
		 </apiDesc></apiParam><apiParam><apiItemName>caseSensitive</apiItemName><apiType value=""/><apiData>unknown</apiData><apiDesc>Whether to use a case-sensitive search to locate the attribute. Can be one of the following values: 
		 <ul>
		 <li>1 - The case of attrName is respected. </li>
		 <li>0 - TMatch attrName regardless of case. </li>
		 </ul>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the value of the specified attribute.
		 
		 <p><b>Note (IE8):</b>  Internet Explorer 8 and later. IE8 mode enables several enhancements to the setAttribute, getAttribute, and 
		 removeAttribute methods that are not available when pages are displayed in earlier document modes. 
		 
		 <ul>
		 <li>The attrName parameter requires the name of the desired content attribute and not the Document Object Model (DOM) attribute. 
		 For example, in IE8 mode, this method no longer requires attrName to be "className" when setting, getting, or removing a CLASS attribute. 
		 Earlier versions of Internet Explorer and Internet Explorer 8 in compatibility mode still require attrName to specify the corresponding 
		 DOM property name. </li>
		 <li>The attrName parameter is not case sensitive. As a result, the iCaseSensitive parameter is no longer supported and should not be used.</li>
		 <li>The methods support event handlers. For example, the following code example defines an event handler to call a function called SomeFunction 
		 when the body of the page is loaded. 
		 <codeblock>document.body.setAttribute('onload', 'SomeFunction()');</codeblock></li>
		 </ul>
		 
		 If the specified attribute is not already present, the setAttribute method adds the attribute to the object and sets the value.
		 </p>
		 
		 <p><b>Note:</b> If your pages are displayed in IE5 mode or IE7 mode, be careful when spelling attribute names. If you 
		 set caseSensitive to 1 and the attrName parameter does not have the same uppercase and lowercase letters as the attribute, a new 
		 attribute is created for the object. If two or more attributes have the same name, differing only in case, and caseSensitive is 
		 set to 0, this method assigns values only to the first attribute created with this name. All other attributes of the same name are ignored.</p>
		 
		 <p><b>Note (IE8):</b> Internet Explorer 8 and later. When pages are displayed in IE8 mode, the value parameter only supports 
		 string values. Non-string values are not automatically converted to string values. For best results, formally convert values to 
		 strings before using them as parameter values. For example, do not attempt to pass an object directly to the value parameter; 
		 call the object's toString method instead.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536431%28VS.85%29.aspx"><linktext>MSDN - getAttribute Method</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.objects:Navigator"><apiName>Navigator</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>dom.objects:NavigatorID</apiBaseInterface><apiBaseInterface>dom.objects:NavigatorOnLine</apiBaseInterface><apiBaseInterface>dom.objects:NavigatorAbilities</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.objects:Navigator:getStorageUpdates"><apiName>getStorageUpdates</apiName><shortdesc>
		 The getStorageUpdates()  method, when invoked, must, if the storage mutex is owned by the event loop of the task that resulted in the method 
		 being called, release the storage mutex so that it is once again free.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 The getStorageUpdates()  method, when invoked, must, if the storage mutex is owned by the event loop of the task that resulted in the method 
		 being called, release the storage mutex so that it is once again free. Otherwise, it must do nothing.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.whatwg.org/specs/web-apps/current-work/#dom-navigator-getstorageupdates"><linktext>W3C - HTML5: Navigator.getStorageUpdates()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Navigator:javaEnabled"><apiName>javaEnabled</apiName><shortdesc>
		 Indicates whether the host browser is Java-enabled or not.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Indicates whether the host browser is Java-enabled or not. 
		 
		 </apiDesc><example>
		 <codeblock>
		 if (window.navigator.javaEnabled()) {
		 	// browser has java
		 }</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536610%28VS.85%29.aspx"><linktext>MSDN - javaEnabled Method</linktext></link><link href="http://developer.mozilla.org/en/Navigator.javaEnabled"><linktext>MDC - window.navigator.javaEnabled()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Navigator:mozIsLocallyAvailable"><apiName>mozIsLocallyAvailable</apiName><shortdesc>
		 Allows code to determine whether or not a given resource is available.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>URI of the resource whose availability is to be checked, as a string. 
		 </apiDesc></apiParam><apiParam><apiItemName>ifOffline</apiItemName><apiType value="Boolean"/><apiDesc>Whether or not the offline resources cache should be checked; specify true to consider the offline resources cache. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Allows code to determine whether or not a given resource is available. 
		 
		 <p><b>Note:</b> Security exceptions can occur if the requested URI is not from the same origin.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var available = navigator.mozIsLocallyAvailable("my-image-file.png", true);
		 if (available) {
		 	/~~ the offline resource is present ~~/
		 } else {
		 	alert("Certain needed resources are not available until you connect to the network.");
		 }</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.objects:Navigator:preference"><apiName>preference</apiName><shortdesc>
		 Sets a user preference.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Function"/></apiReturn></apiOperationDef><apiDesc>
		 Sets a user preference. This method is only available to privileged code, 
		 and you should use XPCOM Preferences API instead. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/window.navigator.preference"><linktext>MDC - window.navigator.preference()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Navigator:registerContentHandler"><apiName>registerContentHandler</apiName><shortdesc>
		 Allows web sites to register themselves as possible handlers for content of a particular MIME type.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>mimeType</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The desired MIME type as a string.
		 </apiDesc></apiParam><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The URI to the handler as a string.
		 </apiDesc></apiParam><apiParam><apiItemName>title</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The title of the handler presented to the user as a string.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Allows web sites to register themselves as possible handlers for content of a particular MIME type. 
		 
		 <p><b>Note:</b> For Firefox 2, only the application/vnd.mozilla.maybe.feed, application/atom+xml, and 
		 application/rss+xml MIME types are supported. All values have the same effect, and the registered 
		 handler will receive feeds in all Atom and RSS versions. </p>
		 
		 <p><b>Note:</b> Web sites may only register content handlers for themselves. For security reasons, 
		 it's not possible for an extension or web site to register content handlers targeting other sites.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 navigator.registerContentHandler("application/vnd.mozilla.maybe.feed",
                                 "http://www.example.tld/?foo=%s",
                                 "My Feed Reader");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/window.navigator.registerContentHandler"><linktext>MDC - window.navigator.registerContentHandler()</linktext></link><link href="http://www.whatwg.org/specs/web-apps/current-work/#dom-navigator-registercontenthandler"><linktext>W3C - HTML5: Navigator.registerContentHandler()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Navigator:registerProtocolHandler"><apiName>registerProtocolHandler</apiName><shortdesc>
		 Allows web sites to register themselves as possible handlers for particular protocols.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>protocol</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The protocol the site wishes to handle, specified as a string. 
		 </apiDesc></apiParam><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The URI to the handler as a string. You can include "%s" to indicate where to insert the escaped URI of the document to be handled. 
		 </apiDesc></apiParam><apiParam><apiItemName>title</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The title of the handler presented to the user as a string. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Allows web sites to register themselves as possible handlers for particular protocols. 
		 
		 </apiDesc><example>If your web application is located at http://www.example.com, you can register a protocol handler for it to handle "mailto" like this: 
		 <codeblock>navigator.registerProtocolHandler("mailto", "http://www.example.com/?uri=%s", "Example Mail");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/window.navigator.registerProtocolHandler"><linktext>MDC - window.navigator.registerProtocolHandler()</linktext></link><link href="http://www.whatwg.org/specs/web-apps/current-work/#dom-navigator-registerprotocolhandler"><linktext>W3C - HTML5: Navigator.registerProtocolHandler()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Navigator:taintEnabled"><apiName>taintEnabled</apiName><shortdesc>
		 Returns whether data tainting is enabled.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Obsolete" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Function"/></apiReturn></apiOperationDef><apiDesc>
		 Returns whether data tainting is enabled. JavaScript taint/untaint functions removed in JavaScript 1.2[1].
		 
		 <p><b>Note (IE):</b> Microsoft Internet Explorer 5 and earlier does not support data tainting and therefore always returns false.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536778%28VS.85%29.aspx"><linktext>taintEnabled Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/window.navigator.taintEnabled"><linktext>MDC - window.navigator.taintEnabled()</linktext></link><link href="http://devedge-temp.mozilla.org/library/manuals/2000/javascript/1.3/reference/nav.html#1194117"><linktext>[1]</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.objects:NavigatorAbilities"><apiName>NavigatorAbilities</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.objects:NavigatorAbilities:dom.objects:NavigatorAbilities:getStorageUpdates"><apiName>getStorageUpdates</apiName><shortdesc>
		 The getStorageUpdates()  method, when invoked, must, if the storage mutex is owned by the event loop of the task that resulted in the method 
		 being called, release the storage mutex so that it is once again free.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 The getStorageUpdates()  method, when invoked, must, if the storage mutex is owned by the event loop of the task that resulted in the method 
		 being called, release the storage mutex so that it is once again free. Otherwise, it must do nothing.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.whatwg.org/specs/web-apps/current-work/#dom-navigator-getstorageupdates"><linktext>W3C - HTML5: Navigator.getStorageUpdates()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:NavigatorAbilities:dom.objects:NavigatorAbilities:registerContentHandler"><apiName>registerContentHandler</apiName><shortdesc>
		 Allows web sites to register themselves as possible handlers for content of a particular MIME type.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>mimeType</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The desired MIME type as a string.
		 </apiDesc></apiParam><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The URI to the handler as a string.
		 </apiDesc></apiParam><apiParam><apiItemName>title</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The title of the handler presented to the user as a string.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Allows web sites to register themselves as possible handlers for content of a particular MIME type. 
		 
		 <p><b>Note:</b> For Firefox 2, only the application/vnd.mozilla.maybe.feed, application/atom+xml, and 
		 application/rss+xml MIME types are supported. All values have the same effect, and the registered 
		 handler will receive feeds in all Atom and RSS versions. </p>
		 
		 <p><b>Note:</b> Web sites may only register content handlers for themselves. For security reasons, 
		 it's not possible for an extension or web site to register content handlers targeting other sites.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 navigator.registerContentHandler("application/vnd.mozilla.maybe.feed",
                                 "http://www.example.tld/?foo=%s",
                                 "My Feed Reader");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/window.navigator.registerContentHandler"><linktext>MDC - window.navigator.registerContentHandler()</linktext></link><link href="http://www.whatwg.org/specs/web-apps/current-work/#dom-navigator-registercontenthandler"><linktext>W3C - HTML5: Navigator.registerContentHandler()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:NavigatorAbilities:dom.objects:NavigatorAbilities:registerProtocolHandler"><apiName>registerProtocolHandler</apiName><shortdesc>
		 Allows web sites to register themselves as possible handlers for particular protocols.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>scheme</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The protocol the site wishes to handle, specified as a string. 
		 </apiDesc></apiParam><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The URI to the handler as a string. You can include "%s" to indicate where to insert the escaped URI of the document to be handled. 
		 </apiDesc></apiParam><apiParam><apiItemName>title</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The title of the handler presented to the user as a string. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Allows web sites to register themselves as possible handlers for particular protocols. 
		 
		 </apiDesc><example>If your web application is located at http://www.example.com, you can register a protocol handler for it to handle "mailto" like this: 
		 <codeblock>navigator.registerProtocolHandler("mailto", "http://www.example.com/?uri=%s", "Example Mail");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/window.navigator.registerProtocolHandler"><linktext>MDC - window.navigator.registerProtocolHandler()</linktext></link><link href="http://www.whatwg.org/specs/web-apps/current-work/#dom-navigator-registerprotocolhandler"><linktext>W3C - HTML5: Navigator.registerProtocolHandler()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.objects:Pkcs11"><apiName>Pkcs11</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.objects:Pkcs11:addModule"><apiName>addModule</apiName><shortdesc>
		 Loads a new PKCS #11 module.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Unknown
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>moduleName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Name of the module.
		 </apiDesc></apiParam><apiParam><apiItemName>libraryFullPath</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The filename of the library prepended with its full path.
		 </apiDesc></apiParam><apiParam><apiItemName>cryptoMechanismFlags</apiItemName><apiType value="Number"/><apiDesc>A bit vector indicating all cryptographic mechanisms should be turned on by default (see above).
		 </apiDesc></apiParam><apiParam><apiItemName>cipherFlags</apiItemName><apiType value="Number"/><apiDesc>A bit vector indicating all SSL or S/MIME cipher functions supported by the module (see above).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Loads a new PKCS #11 module.
		 
		 <p><b>Note (Mozilla):</b> The module will be placed in the NSS secmod.db database and will be loaded
		 automatically on application restart.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/JavaScript_crypto"><linktext>MDC - JavaScript crypto</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Pkcs11:deletemodule"><apiName>deletemodule</apiName><shortdesc>
		 Removes a PKCS #11 module.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Unknown
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>moduleName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Name of the module.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a PKCS #11 module.
		 
		 <p><b>Note (Mozilla):</b> In the delete case, the module is removed from the NSS secmod.db. This function 
		 will issue a user prompt to confirm the operation before the add or delete actually occurs.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/JavaScript_crypto"><linktext>MDC - JavaScript crypto</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.objects:Selection"><apiName>Selection</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><example>
	 Note the order of the branches: the Mozilla Selection should come first! The reason is that Opera 
	 supports both objects; if you use window.getSelection() to read out the user selection, Opera 
	 creates a Selection object, while if you use document.selection it creates a Text Range object.
	 <codeblock>
	 var userSelection;
	 if (window.getSelection) {
	 	userSelection = window.getSelection();
	 } else if (document.selection) { // should come last; Opera!
	 	userSelection = document.selection.createRange();
	 }</codeblock>
	 
	 </example></apiClassifierDetail><apiOperation id="dom.objects:Selection:addRange"><apiName>addRange</apiName><shortdesc>
		 Adds a range to the selection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>dom.tr.range:Range</apiOperationClassifier><apiDesc>A range object that will be added to the selection. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a range to the selection. 
		 
		 </apiDesc><example>
		 <codeblock>
		 // Select all STRONG elements in an HTML document
		 var strongs = document.getElementsByTagName("strong");
		 var s = window.getSelection();
		 if(s.rangeCount &gt; 0) s.removeAllRanges();
		 for(var i = 0; i &lt; strongs.length; i++) {
		   var range = document.createRange();
		   range.selectNode(strongs[i]);
		   s.addRange(range);
		 }</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/Selection/addRange"><linktext>MDC - Selection.addRange()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Selection:collapse"><apiName>collapse</apiName><shortdesc>
		 Collapses the current selection to a single point.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The caret location will be within this node. 
		 </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>
		 <ul>
		 <li>0 - Collapses the selection from the anchor to the beginning of parentNode's text.</li>
		 <li>1 - Collapses the selection from the anchor to the end of parentNode's text.</li></ul>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Collapses the current selection to a single point. The document is not modified. If the content is 
		 focused and editable, the caret will blink there.
		 
		 </apiDesc><example>
		 // Place the caret at the beginning of an HTML document's body.
		 var body = document.getElementsByTagName("body")[0];
		 window.getSelection().collapse(body,0);
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/Selection/collapse"><linktext>MDC - Selection.collapse()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Selection:collapseToEnd"><apiName>collapseToEnd</apiName><shortdesc>
		 Moves the anchor of the selection to the same point as the focus.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Moves the anchor of the selection to the same point as the focus.
		 
		 <p>The focus does not move. If the content is focused and editable, the caret will blink there. </p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/Selection/collapseToEnd"><linktext>MDC - Selection.collapseToEnd()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Selection:collapseToStart"><apiName>collapseToStart</apiName><shortdesc>
		 Moves the focus of the selection to the same point at the anchor.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Moves the focus of the selection to the same point at the anchor.
		 
		 <p>The anchor does not move. If the content is focused and editable, the caret will blink there. </p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/Selection/collapseToStart"><linktext>MDC - Selection.collapseToStart()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Selection:containsNode"><apiName>containsNode</apiName><shortdesc>
		 Indicates if the node is part of the selection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the node is part of the selection.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node that is being looked for whether it is part of the selection 
		 </apiDesc></apiParam><apiParam><apiItemName>partlyContained</apiItemName><apiType value="Boolean"/><apiDesc>When true, containsNode returns true when a part of the node is part of the selection. 
		 When false, containsNode only returns true when the entire node is part of the selection. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Indicates if the node is part of the selection. 
		 
		 </apiDesc><example>
		 // Check to see if anything inside the body element is selected
		 alert(window.getSelection().containsNode(document.body, true));
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/Selection/containsNode"><linktext>MDC - Selection.containsNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Selection:deleteFromDocument"><apiName>deleteFromDocument</apiName><shortdesc>
		 Deletes the actual text being represented by a selection object from the document's DOM.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Deletes the actual text being represented by a selection object from the document's DOM. 
		 
		 </apiDesc><example>
		 A user selects the (imaginary) text "ve two ea" from "Rabbits have two ears." on a web page. 
		 The user then clicks a button that executes the JavaScript snippet 
		 window.getSelection().deleteFromDocument(). The document's text becomes "Rabbits hars." 
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/Selection/deleteFromDocument"><linktext>MDC - Selection.deleteFromDocument()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Selection:extend"><apiName>extend</apiName><shortdesc>
		 Moves the focus of the selection to a specified point.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node within which the focus will be moved.
		 </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>The offset position within parentNode where the focus will be moved to.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Moves the focus of the selection to a specified point.
		 
		 <p>The anchor of the selection does not move. The selection will be from the anchor 
		 to the new focus regardless of direction.</p>
		  
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/Selection/extend"><linktext>MDC - Selection.extend()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Selection:getRangeAt"><apiName>getRangeAt</apiName><shortdesc>
		 Returns a range object representing one of the ranges currently selected.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.tr.range:Range</apiOperationClassifier><apiDesc>The range object that will be returned. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>The zero-based index of the range to return. A negative number or a number greater than or 
		 equal to rangeCount will result in an error.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a range object representing one of the ranges currently selected.
		 
		 </apiDesc><example>
		 <codeblock>
		 ranges = [];
		 sel = window.getSelection();
		 for(var i = 0; i &lt; sel.rangeCount; i++) {
		 	ranges[i] = sel.getRangeAt(i);
		 }
		 // Each item in the ranges array is now 
		 // a range object representing one of the 
		 // ranges in the current selection</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/Selection/getRangeAt"><linktext>MDC - Selection.getRangeAt()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Selection:removeAllRanges"><apiName>removeAllRanges</apiName><shortdesc>
		 Removes all ranges from the selection, leaving the anchorNode and focusNode 
		 properties equal to null and leaving nothing selected.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all ranges from the selection, leaving the anchorNode and focusNode 
		 properties equal to null and leaving nothing selected. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/Selection/removeAllRanges"><linktext>MDC - Selection.removeAllRanges()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Selection:removeRange"><apiName>removeRange</apiName><shortdesc>
		 Removes a range from the selection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>range</apiItemName><apiOperationClassifier>dom.tr.range:Range</apiOperationClassifier><apiDesc>A range object that will be removed to the selection. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a range from the selection. 
		 
		 </apiDesc><example>
		 <codeblock>
		 // Programmaticaly, more than one range can be selected.  
		 // This will remove all ranges except the first.
		 s = window.getSelection();
		 if(s.rangeCount &gt; 1) {
		   for(var i = 1; i &lt; s.rangeCount; i++) {
		     s.removeRange(s.getRangeAt(i));
		   }
		 }</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/Selection/removeRange"><linktext>MDC - Selection.removeRange()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Selection:selectAllChildren"><apiName>selectAllChildren</apiName><shortdesc>
		 Adds all the children of the specified node to the selection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>All children of parentNode will be selected. parentNode itself is not 
		 part of the selection. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds all the children of the specified node to the selection. Previous selection is lost. 
		 
		 </apiDesc><example>
		 footer = document.getElementById("footer");
		 window.getSelection().selectAllChildren(footer);
		 // Everything inside the footer is now selected
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/Selection/selectAllChildren"><linktext>MDC - Selection.selectAllChildren()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Selection:selectionLanguageChange"><apiName>selectionLanguageChange</apiName><shortdesc>
		 Undocumented
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/Selection/selectionLanguageChange"><linktext>MDC - Selection.selectionLanguageChange()</linktext></link></related-links></apiOperation><apiOperation id="dom.objects:Selection:toString"><apiName>toString</apiName><shortdesc>
		 Returns a string currently being represented by the selection object, i.e.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The string representation of selection. 
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns a string currently being represented by the selection object, i.e. the currently selected text. 
		 
		 <p><b>Note:</b> In JavaScript, this method is called automatically when a function the selection object is passed 
		 to requires a string: alert(window.getSelection()) // What is called alert(window.getSelection().toString()) 
		 // What is actually being effectively called.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/Selection/toString"><linktext>MDC - Selection.toString()</linktext></link></related-links></apiOperation></apiClassifier></apiPackage><apiPackage id="dom.style.css"><apiName>dom.style.css</apiName><apiClassifier id="dom.style.css:CSSRule"><apiName>CSSRule</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.css:CSSCharsetRule"><apiName>CSSCharsetRule</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.style.css:CSSRule</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.css:RGBColor"><apiName>RGBColor</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.css:CSSUnknownRule"><apiName>CSSUnknownRule</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.style.css:CSSRule</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.css:CSS2Properties"><apiName>CSS2Properties</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.css:CSSImportRule"><apiName>CSSImportRule</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.style.css:CSSRule</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.css:CSSMediaRule"><apiName>CSSMediaRule</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.style.css:CSSRule</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.style.css:CSSMediaRule:deleteRule"><apiName>deleteRule</apiName><shortdesc>
		 Used to delete a rule from the media block.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified index does not correspond 
		 to a rule in the media rule list.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if this media rule is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>The index within the media block's rule collection of the rule to remove.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Used to delete a rule from the media block. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/cssRule#CSSMediaRule"><linktext>MDC - cssRule: CSSMediaRule</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSMediaRule-deleteRule"><linktext>W3C - DOM Level 2 Style: CSSMediaRule.deleteRule()</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSMediaRule:insertRule"><apiName>insertRule</apiName><shortdesc>
		 Used to insert a new rule into the media block.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at the specified 
		 index, e.g., if an @import rule is inserted after a standard rule set or other at-rule.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified index is not a valid insertion point.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if this media rule is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>SYNTAX_ERR: Raised if the specified rule has a syntax error and is unparsable.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="Number"/><apiDesc>The index within the media block's rule collection of the newly inserted rule.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>rule</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The parsable text representing the rule. For rule sets this contains both 
		 the selector and the style declaration. For at-rules, this specifies both the at-identifier 
		 and the rule content.
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>The index within the media block's rule collection of the rule before which 
		 to insert the specified rule. If the specified index is equal to the length of the media 
		 blocks's rule collection, the rule will be added to the end of the media block.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Used to insert a new rule into the media block.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/cssRule#CSSMediaRule"><linktext>MDC - cssRule: CSSMediaRule</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSMediaRule-insertRule"><linktext>W3C - DOM Level 2 Style: CSSMediaRule.insertRule()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.style.css:Counter"><apiName>Counter</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.css:DocumentCSS"><apiName>DocumentCSS</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>dom.style.stylesheets:DocumentStyle</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.style.css:DocumentCSS:dom.style.css:DocumentCSS:getOverrideStyle"><apiName>getOverrideStyle</apiName><shortdesc>
		 This method is used to retrieve the override style declaration for a specified element and a specified pseudo-element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.style.css:CSSStyleDeclaration</apiOperationClassifier><apiDesc>The override style declaration.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>elt</apiItemName><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>The element whose style is to be modified. This parameter cannot be null.
		 </apiDesc></apiParam><apiParam><apiItemName>pseudoElt</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The pseudo-element or null if none.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method is used to retrieve the override style declaration for a specified element and a specified pseudo-element. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-DocumentCSS-getOverrideStyle"><linktext>W3C - DOM Level 2 Style: DocumentCSS.getOverrideStyle()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.style.css:CSSFontFaceRule"><apiName>CSSFontFaceRule</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.style.css:CSSRule</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.css:CSSRuleList"><apiName>CSSRuleList</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.style.css:CSSRuleList:item"><apiName>item</apiName><shortdesc>
		 Used to retrieve a CSS rule by ordinal index.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.style.css:CSSRule</apiOperationClassifier><apiDesc>The style rule at the index position in the CSSRuleList, or null if that is not a valid index.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into the collection
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Used to retrieve a CSS rule by ordinal index. 
		 
		 <p>The order in this collection represents the order of the 
		 rules in the CSS style sheet. If index is greater than or equal to the number of rules in the list, 
		 this returns null.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/cc304123%28VS.85%29.aspx"><linktext>MSDN - item Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSRuleList-item"><linktext>W3C - DOM Level 2 Style: CSSRuleList.item()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.style.css:Rect"><apiName>Rect</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.css:DOMImplementationCSS"><apiName>DOMImplementationCSS</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>dom.core:DOMImplementation</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.style.css:DOMImplementationCSS:dom.style.css:DOMImplementationCSS:createCSSStyleSheet"><apiName>createCSSStyleSheet</apiName><shortdesc>
		 Creates a new CSSStyleSheet.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>SYNTAX_ERR: Raised if the specified media string value 
		 has a syntax error and is unparsable.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.style.css:CSSStyleSheet</apiOperationClassifier><apiDesc>A new CSS style sheet.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>title</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The advisory title.
		 </apiDesc></apiParam><apiParam><apiItemName>media</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The comma-separated list of media associated with the new style sheet.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a new CSSStyleSheet. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-DOMImplementationCSS-createCSSStyleSheet"><linktext>W3C - DOM Level 2 Style: DOMImplementationCSS.createCSSStyleSheet()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.style.css:CSSStyleSheet"><apiName>CSSStyleSheet</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.style.stylesheets:StyleSheet</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.style.css:CSSStyleSheet:addImport"><apiName>addImport</apiName><shortdesc>
		 Adds a style sheet to the imports collection for the specified style sheet.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0b_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Returns a a zero-based index value indicating the position of the imported style sheet in the imports collection. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the location of the source file for the style sheet.
		 </apiDesc></apiParam><apiParam><apiItemName>indexRequest</apiItemName><apiType value="Number"/><apiDesc>(Optional) Specifies the requested position for the style sheet in the collection. If this value is not given, the style sheet is added to the end of the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a style sheet to the imports collection for the specified style sheet.
		 
		 <p><b>Note (IE):</b> Whether a CSS import is made in a CSS file itself (by using @import) or dynamically by 
		 JavaScript, the limit per stylesheet is 31. Beyond that number, all other imports in that stylesheet will be 
		 ignored. Additionally, when trying to add an import by JavaScript, the browser will return an "Invalid argument" error.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms531193%28VS.85%29.aspx"><linktext>MSDN: addImport Method</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSStyleSheet:addPageRule"><apiName>addPageRule</apiName><shortdesc>
		 Creates a new page object for a style sheet.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0b_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Reserved. Always returns -1.
		 
		 </apiDesc></apiReturn><apiDefaultValue>The page object is added to the end of the collection.
		 </apiDefaultValue><apiParam><apiItemName>selector</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the selector for the new page object.
		 </apiDesc></apiParam><apiParam><apiItemName>style</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the style assignments for this page object. This style takes the same form as an inline style specification. For example, "color:blue" is a valid style parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>Specifies the zero-based position in the pages collection where the new page object should be placed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a new page object for a style sheet.
		 
		 <p><b>Note (IE):</b> Each page object represents a style sheet that corresponds to a @page rule in the document.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms535928%28VS.85%29.aspx"><linktext>MSDN: addPageRule Method</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSStyleSheet:addRule"><apiName>addRule</apiName><shortdesc>
		 Creates a new rule for a style sheet.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5_no"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0b_no"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Reserved. Always returns -1.
		 
		 </apiDesc></apiReturn><apiDefaultValue>The page object is added to the end of the collection.
		 </apiDefaultValue><apiParam><apiItemName>selector</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the selector for the new rule. Single contextual selectors are valid. For example, 
		 "div p b" is a valid contextual selector.
		 </apiDesc></apiParam><apiParam><apiItemName>style</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the style assignments for this style rule. This style takes the same form as an inline 
		 style specification. For example, "color:blue" is a valid style parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>(Optional) Specifies the zero-based position in the rules collection where the new style rule should be placed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a new rule for a style sheet.
		 
		 <p><b>Note (IE):</b> You can add up to 4095 style rules with the addRule method. After that, the method returns an "Invalid Argument" exception.</p>
		 <p><b>Note (IE):</b> You can apply rules to a disabled styleSheet, but they do not apply to the document until you enable the styleSheet.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;style&gt;
		 &lt;/style&gt;
		 
		 &lt;div&gt;
		 	Internet Explorer makes &lt;b&gt;HTML&lt;/b&gt; dynamic.
		 &lt;/div&gt;
		 
		 &lt;script&gt;
		 	var new_rule;
		 	new_rule = document.styleSheets[0].addRule("div b", "color:blue", 0);
		 &lt;/script&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa358796%28VS.85%29.aspx"><linktext>MSDN: addRule Method</linktext></link><link href="http://www.quirksmode.org/dom/w3c_css.html#access"><linktext>Quirksmode: Accessing style sheets</linktext></link><link href="dom.style.css.xml#CSSStyleSheet/removeRule()"><linktext>removeRule()</linktext></link><link href="dom.style.css.xml#CSSStyleSheet/rules"><linktext>rules</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSStyleSheet:deleteRule"><apiName>deleteRule</apiName><shortdesc>
		 Used to delete a rule from the style sheet.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8_no"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0b"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified index does not 
		 correspond to a rule in the style sheet's rule list.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>The index within the style sheet's rule list of the rule to remove.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Used to delete a rule from the style sheet. 
		 
		 </apiDesc><example>
		 <codeblock>myStyles.deleteRule(0);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/stylesheet.deleteRule"><linktext>MDC - stylesheet: deleteRule Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet"><linktext>W3C - DOM Level 2 Style: CSSStyleSheet</linktext></link><link href="http://www.quirksmode.org/dom/w3c_css.html#access"><linktext>Quirksmode: Accessing style sheets</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSStyleSheet:insertRule"><apiName>insertRule</apiName><shortdesc>
		 Used to insert a new rule into the style sheet.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8_no"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0b"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if the rule cannot be inserted at 
		 the specified index e.g. if an @import rule is inserted after a standard rule set or other at-rule.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified index is not a valid insertion point.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if this style sheet is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>SYNTAX_ERR: Raised if the specified rule has a syntax error and is unparsable.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="Number"/><apiDesc>The index within the style sheet's rule collection of the newly inserted rule.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>rule</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The parsable text representing the rule. For rule sets this contains both the selector 
		 and the style declaration. For at-rules, this specifies both the at-identifier and the rule content.
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>The index within the style sheet's rule list of the rule before which to insert the 
		 specified rule. If the specified index is equal to the length of the style sheet's rule collection, 
		 the rule will be added to the end of the style sheet.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade. 
		 
		 </apiDesc><example>
		 <codeblock>
		 // push a new rule onto the top of my stylesheet
		 myStyle.insertRule("#blanc { color: white }", 0);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/stylesheet.insertRule"><linktext>MDC - stylesheet: insertRule Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet"><linktext>W3C - DOM Level 2 Style: CSSStyleSheet</linktext></link><link href="http://www.quirksmode.org/dom/w3c_css.html#access"><linktext>Quirksmode: Accessing style sheets</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSStyleSheet:removeImport"><apiName>removeImport</apiName><shortdesc>
		 Removes the imported style sheet from the imports collection based on ordinal position.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0b_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Indicates which imported style sheet to remove.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the imported style sheet from the imports collection based on ordinal position. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa358799%28VS.85%29.aspx"><linktext>MSDN: removeImport Method</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSStyleSheet:removeRule"><apiName>removeRule</apiName><shortdesc>
		 Deletes an existing style rule for the styleSheet object, and adjusts the index of the rules collection accordingly.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5_no"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0b_no"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>(Optional) Specifies the index value of the rule to be deleted from the style sheet. If an index is not provided, the first rule in the rules collection is removed.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Deletes an existing style rule for the styleSheet object, and adjusts the index of the rules collection accordingly. 
		 
		 <p><b>Note (IE):</b> The page does not automatically reflow when the rule is removed. To see the change, you 
		 must reflow the page. You can reflow the objects affected using a number of methods. For example, you can reflow 
		 the style change only on affected text by setting the text equal to itself. Alternately, you can reload the entire 
		 page using the reload method. When you use the refresh method on a table, its content is reflowed. </p>
		 
		 </apiDesc><example>
		 This example uses the removeRule method to delete a rule from the rules collection, which causes the text to reflow according to the new rules.
		 <codeblock>
		 &lt;STYLE&gt;
		 	P {color:green}
		 &lt;/STYLE&gt;
		 ...
		 &lt;SCRIPT&gt;
		 	function removeTheRule() {
		 		// Style sheets and rules are zero-based collections; therefore,
		 		// the first item is item 0 in the collection.
		 		var iSheets = document.styleSheets.length;
		 		var iRules = document.styleSheets[iSheets-1].rules.length;
		 		// make sure there is a rule to delete
		 		if (1 &lt; iRules) {            
		 			document.styleSheets[iSheets-1].removeRule(1);
		 			// Force the page to render the change.
		 			oEffectRules.innerHTML=oEffectRules.innerHTML;
		 		}
		 	}
		 &lt;/SCRIPT&gt;
		 ...
		 &lt;P ID=oEffectRules&gt;This text has the new style applied to it.&lt;/P&gt;
		 ...
		 &lt;BUTTON onclick="removeTheRule()"&gt;Remove the new rule.&lt;/BUTTON&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms531195%28VS.85%29.aspx"><linktext>MSDN: removeRule Method</linktext></link><link href="http://www.quirksmode.org/dom/w3c_css.html#access"><linktext>Quirksmode: Accessing style sheets</linktext></link><link href="dom.style.css.xml#CSSStyleSheet/addRule()"><linktext>addRule()</linktext></link><link href="dom.style.css.xml#CSSStyleSheet/rules"><linktext>rules</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.style.css:CSSStyleRule"><apiName>CSSStyleRule</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.style.css:CSSRule</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.css:CSSPageRule"><apiName>CSSPageRule</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.style.css:CSSRule</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.css:ElementCSSInlineStyle"><apiName>ElementCSSInlineStyle</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.css:CSSPrimitiveValue"><apiName>CSSPrimitiveValue</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.style.css:CSSValue</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.style.css:CSSPrimitiveValue:getFloatValue"><apiName>getFloatValue</apiName><shortdesc>
		 This method is used to get a float value in a specified unit.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a float value or if the 
		 float value can't be converted into the specified unit.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="Number"/><apiDesc>The float value in the specified unit.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>unitType</apiItemName><apiType value="Number"/><apiDesc>A unit code to get the float value. The unit code can only be a float unit type (i.e. CSS_NUMBER, 
		 CSS_PERCENTAGE, CSS_EMS, CSS_EXS, CSS_PX, CSS_CM, CSS_MM, CSS_IN, CSS_PT, CSS_PC, CSS_DEG, CSS_RAD, CSS_GRAD, CSS_MS, CSS_S, CSS_HZ, CSS_KHZ, CSS_DIMENSION).
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method is used to get a float value in a specified unit. If this CSS value doesn't contain a float value 
		 or can't be converted into the specified unit, a DOMException is raised.  
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSPrimitiveValue-getFloatValue"><linktext>W3C - DOM Level 2 Style: CSSPrimitiveValue.getFloatValue()</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSPrimitiveValue:getRGBColorValue"><apiName>getRGBColorValue</apiName><shortdesc>
		 This method is used to get the RGB color.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_ACCESS_ERR: Raised if the attached property can't return a RGB color value (e.g. 
		 this is not CSS_RGBCOLOR).
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.style.css:RGBColor</apiOperationClassifier><apiDesc>The RGB color value.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 This method is used to get the RGB color. If this CSS value doesn't contain a RGB color value, a DOMException is raised. 
		 Modification to the corresponding style property can be achieved using the RGBColor interface. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSPrimitiveValue-getRGBColorValue"><linktext>W3C - DOM Level 2 Style: CSSPrimitiveValue.getRGBColorValue()</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSPrimitiveValue:getRectValue"><apiName>getRectValue</apiName><shortdesc>
		 This method is used to get the Rect value.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a Rect value. (e.g. this is not CSS_RECT).
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.style.css:Rect</apiOperationClassifier><apiDesc>The Rect value.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 This method is used to get the Rect value. If this CSS value doesn't contain a rect value, a DOMException is raised. 
		 Modification to the corresponding style property can be achieved using the Rect interface. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSPrimitiveValue-getRectValue"><linktext>W3C - DOM Level 2 Style: CSSPrimitiveValue.getRectValue()</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSPrimitiveValue:getStringValue"><apiName>getStringValue</apiName><shortdesc>
		 This method is used to get the string value.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string value.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The string value in the current unit. The current primitiveType can only be a string unit type (i.e. CSS_STRING, 
		 CSS_URI, CSS_IDENT and CSS_ATTR).
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 This method is used to get the string value. If the CSS value doesn't contain a string value, a DOMException is raised.
		 
		 <p><b>Note:</b> Some properties (like 'font-family' or 'voice-family') convert a whitespace separated list of idents to a string.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSPrimitiveValue-getStringValue"><linktext>W3C - DOM Level 2 Style: CSSPrimitiveValue.getStringValue()</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSPrimitiveValue:setFloatValue"><apiName>setFloatValue</apiName><shortdesc>
		 A method to set the float value with a specified unit.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_ACCESS_ERR: Raised if the attached property doesn't support the float value or the unit type.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unitType</apiItemName><apiType value="Number"/><apiDesc>A unit code as defined above. The unit code can only be a float unit type (i.e. CSS_NUMBER, 
		 CSS_PERCENTAGE, CSS_EMS, CSS_EXS, CSS_PX, CSS_CM, CSS_MM, CSS_IN, CSS_PT, CSS_PC, CSS_DEG, CSS_RAD, CSS_GRAD, CSS_MS, CSS_S, 
		 CSS_HZ, CSS_KHZ, CSS_DIMENSION).
		 </apiDesc></apiParam><apiParam><apiItemName>floatValue</apiItemName><apiType value="Number"/><apiDesc>The new float value.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 A method to set the float value with a specified unit. If the property attached with this value can not accept the specified 
		 unit or the float value, the value will be unchanged and a DOMException will be raised. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSPrimitiveValue-setFloatValue"><linktext>W3C - DOM Level 2 Style: CSSPrimitiveValue.setFloatValue()</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSPrimitiveValue:setStringValue"><apiName>setStringValue</apiName><shortdesc>
		 A method to set the string value with the specified unit.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_ACCESS_ERR: Raised if the CSS value doesn't contain a string value or if the string value 
		 can't be converted into the specified unit.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stringType</apiItemName><apiType value="Number"/><apiDesc>A string code as defined above. The string code can only be a string unit type (i.e. CSS_STRING, 
		 CSS_URI, CSS_IDENT, and CSS_ATTR).
		 </apiDesc></apiParam><apiParam><apiItemName>stringValue</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The new string value.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 A method to set the string value with the specified unit. If the property attached to this value can't accept the specified unit 
		 or the string value, the value will be unchanged and a DOMException will be raised. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSPrimitiveValue-setStringValue"><linktext>W3C - DOM Level 2 Style: CSSPrimitiveValue.setStringValue()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.style.css:CSSValue"><apiName>CSSValue</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.css:ViewCSS"><apiName>ViewCSS</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>dom.views:AbstractView</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.style.css:ViewCSS:dom.style.css:ViewCSS:getComputedStyle"><apiName>getComputedStyle</apiName><shortdesc>
		 This method is used to get the computed style as it is defined in CSS2.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.style.css:CSSStyleDeclaration</apiOperationClassifier><apiDesc>The computed style. The CSSStyleDeclaration is read-only and contains only absolute values.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>elt</apiItemName><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>The element whose style is to be computed. This parameter cannot be null.
		 </apiDesc></apiParam><apiParam><apiItemName>pseudoElt</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The pseudo-element or null if none.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method is used to get the computed style as it is defined in CSS2. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var element = document.getElementById(“elemId”);
		 var style = document.defaultView.getComputedStyle(element, pseudoElt);</codeblock>
		 
		 <codeblock>
		 //practical example:
		 &lt;html&gt;
		 &lt;head&gt;
		 	&lt;style&gt;
		 		#elem_container{
		 			position: absolute;
		 			left: 100Px;
		 			top: 200px;
		 			height:100px;
		 		}
		 	&lt;/style&gt;
		 &lt;/head&gt;
		 &lt;body&gt;
		 	&lt;div id="elem_container"&gt;dummy&lt;/div&gt;
		 
		 	&lt;div id="output"&gt;&lt;/div&gt;  
		 	&lt;script&gt;
		 		function getTheStyle() {
		 			var elem=document.getElementById("elem_container");
		 			var theCSSprop=document.defaultView.getComputedStyle(elem,null).getPropertyValue("height");
		 			document.getElementById("output").innerHTML=theCSSprop;
		 		}
		 	getTheStyle();
		 	&lt;/script&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/window.getComputedStyle"><linktext>MDC - window.getComputedStyle</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSview-getComputedStyle"><linktext>W3C - DOM Level 2 Style: ViewCSS.getComputedStyle()</linktext></link><link href="http://www.w3.org/TR/1998/REC-CSS2-19980512/"><linktext>W3C - CSS2 Specification</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.style.css:CSSStyleDeclaration"><apiName>CSSStyleDeclaration</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.style.css:CSSStyleDeclaration:getPropertyCSSValue"><apiName>getPropertyCSSValue</apiName><shortdesc>
		 Used to retrieve the object representation of the value of a CSS property if it has been explicitly 
		 set within this declaration block.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.style.css:CSSValue</apiOperationClassifier><apiDesc>Returns the value of the property if it has been explicitly set for this declaration block. 
		 Returns null if the property has not been set.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the CSS property.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Used to retrieve the object representation of the value of a CSS property if it has been explicitly 
		 set within this declaration block. This method returns null if the property is a shorthand property. 
		 Shorthand property values can only be accessed and modified as strings, using the getPropertyValue 
		 and setProperty methods. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyCSSValue"><linktext>W3C - DOM Level 2 Style: CSSStyleDeclaration.getPropertyCSSValue()</linktext></link><link href="http://www.w3.org/TR/1998/REC-CSS2-19980512/propidx.html"><linktext>W3C - CSS2: CSS Property index</linktext></link><link href="dom.style.css.xml#CSS2Properties"><linktext>dom.style.css.CSS2Properties</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSStyleDeclaration:getPropertyPriority"><apiName>getPropertyPriority</apiName><shortdesc>
		 Used to retrieve the priority of a CSS property (e.g.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string representing the priority (e.g. "important") if one exists. The empty string if none exists.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the CSS property.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Used to retrieve the priority of a CSS property (e.g. the "important" qualifier) if the property 
		 has been explicitly set in this declaration block. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyPriority"><linktext>W3C - DOM Level 2 Style: CSSStyleDeclaration.getPropertyPriority()</linktext></link><link href="http://www.w3.org/TR/1998/REC-CSS2-19980512/propidx.html"><linktext>W3C - CSS2: CSS Property index</linktext></link><link href="dom.style.css.xml#CSS2Properties"><linktext>dom.style.css.CSS2Properties</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSStyleDeclaration:getPropertyValue"><apiName>getPropertyValue</apiName><shortdesc>
		 Used to retrieve the value of a CSS property if it has been explicitly set within this declaration block.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Returns the value of the property if it has been explicitly set for this declaration block. 
		 Returns the empty string if the property has not been set.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the CSS property.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Used to retrieve the value of a CSS property if it has been explicitly set within this declaration block. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyValue"><linktext>W3C - DOM Level 2 Style: CSSStyleDeclaration.getPropertyValue()</linktext></link><link href="http://www.w3.org/TR/1998/REC-CSS2-19980512/propidx.html"><linktext>W3C - CSS2: CSS Property index</linktext></link><link href="dom.style.css.xml#CSS2Properties"><linktext>dom.style.css.CSS2Properties</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSStyleDeclaration:item"><apiName>item</apiName><shortdesc>
		 Used to retrieve the properties that have been explicitly set in this declaration block.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the property at this ordinal position. The empty string if no property 
		 exists at this position.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index of the property name to retrieve.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Used to retrieve the properties that have been explicitly set in this declaration block. 
		 The order of the properties retrieved using this method does not have to be the order in 
		 which they were set. This method can be used to iterate over all properties in this 
		 declaration block. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-item"><linktext>W3C - DOM Level 2 Style: CSSStyleDeclaration.item()</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSStyleDeclaration:removeProperty"><apiName>removeProperty</apiName><shortdesc>
		 Used to remove a CSS property if it has been explicitly set within this declaration block.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration 
		 is readonly or the property is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Returns the value of the property if it has been explicitly set for this declaration 
		 block. Returns the empty string if the property has not been set or the property name does 
		 not correspond to a known CSS property.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the CSS property.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Used to remove a CSS property if it has been explicitly set within this declaration block. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-removeProperty"><linktext>W3C - DOM Level 2 Style: CSSStyleDeclaration.removeProperty()</linktext></link><link href="http://www.w3.org/TR/1998/REC-CSS2-19980512/propidx.html"><linktext>W3C - CSS2: CSS Property index</linktext></link><link href="dom.style.css.xml#CSS2Properties"><linktext>dom.style.css.CSS2Properties</linktext></link></related-links></apiOperation><apiOperation id="dom.style.css:CSSStyleDeclaration:setProperty"><apiName>setProperty</apiName><shortdesc>
		 Used to set a property value and priority within this declaration block.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>SYNTAX_ERR: Raised if the specified value has a syntax 
		 error and is unparsable.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration 
		 is readonly or the property is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the CSS property.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The new value of the property.
		 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The new priority of the property (e.g. "important").
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Used to set a property value and priority within this declaration block. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-setProperty"><linktext>W3C - DOM Level 2 Style: CSSStyleDeclaration.setProperty()</linktext></link><link href="http://www.w3.org/TR/1998/REC-CSS2-19980512/propidx.html"><linktext>W3C - CSS2: CSS Property index</linktext></link><link href="dom.style.css.xml#CSS2Properties"><linktext>dom.style.css.CSS2Properties</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.style.css:CSSValueList"><apiName>CSSValueList</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.style.css:CSSValue</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.style.css:CSSValueList:item"><apiName>item</apiName><shortdesc>
		 Used to retrieve a CSSValue by ordinal index.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.style.css:CSSValue</apiOperationClassifier><apiDesc>The CSSValue at the index position in the CSSValueList, or null if that is not a valid index.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Used to retrieve a CSSValue by ordinal index. The order in this collection represents the order of the values 
		 in the CSS style property. If index is greater than or equal to the number of values in the list, this returns null. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSValueList-item"><linktext>W3C - DOM Level 2 Style: CSSValueList.item()</linktext></link></related-links></apiOperation></apiClassifier></apiPackage><apiPackage id="dom.style.stylesheets"><apiName>dom.style.stylesheets</apiName><apiClassifier id="dom.style.stylesheets:DocumentStyle"><apiName>DocumentStyle</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.style.stylesheets:DocumentStyle:dom.style.stylesheets:DocumentStyle:enableStylesheetsForSet"><apiName>enableStylesheetsForSet</apiName><shortdesc>
		 Invoking this method must change the disabled attribute on each StyleSheet object with a title in the 
		 styleSheets attribute, so that all those whose title matches the name argument are enabled, and all others 
		 are disabled.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOM" version="0"/><apiSince version="CSSOM 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Invoking this method must change the disabled attribute on each StyleSheet object with a title in the 
		 styleSheets attribute, so that all those whose title matches the name argument are enabled, and all others 
		 are disabled. Title matches must be case-sensitive.
		 
		 <p>Invoking this method with the empty string value must disable all alternative and preferred style sheets
		 (but does not change the state of persistent style sheets).</p>
		 
		 <p>Invoking this method with the null value must have no effect.</p>
		 
		 <p>Style sheets that do not have a title are never affected by this method. This method does not change the 
		 values of the lastStyleSheetSet or preferredStyleSheetSet  attributes.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/document.enableStyleSheetsForSet"><linktext>MDC - Document.enableStylesheetsForSet()</linktext></link><link href="http://dev.w3.org/csswg/cssom/#documentstyle-enablestylesheetsforset"><linktext>W3C - DocumentStyle.enableStylesheetsForSet()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.style.stylesheets:MediaList"><apiName>MediaList</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.style.stylesheets:MediaList:appendMedium"><apiName>appendMedium</apiName><shortdesc>
		 Adds the medium newMedium to the end of the list.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: If the medium contains characters that are 
		 invalid in the underlying style language.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if this list is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newMedium</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The new medium to add.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds the medium newMedium to the end of the list. If the newMedium is already used, it is first removed. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/stylesheets.html#StyleSheets-MediaList"><linktext>W3C - DOM Level 2 Style: appendMedium Method</linktext></link></related-links></apiOperation><apiOperation id="dom.style.stylesheets:MediaList:deleteMedium"><apiName>deleteMedium</apiName><shortdesc>
		 Deletes the medium indicated by oldMedium from the list.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if this list is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if oldMedium is not in the list.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldMedium</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The medium to delete in the media list.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Deletes the medium indicated by oldMedium from the list. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/stylesheets.html#StyleSheets-MediaList"><linktext>W3C - DOM Level 2 Style: deleteMedium Method</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.style.stylesheets:LinkStyle"><apiName>LinkStyle</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.stylesheets:StyleSheet"><apiName>StyleSheet</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.style.stylesheets:StyleSheetList"><apiName>StyleSheetList</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.style.stylesheets:StyleSheetList:item"><apiName>item</apiName><shortdesc>
		 Used to retrieve a style sheet by ordinal index.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.style.stylesheets:StyleSheet</apiOperationClassifier><apiDesc>The style sheet at the index position in the StyleSheetList, or null if that is not a valid index.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into the collection
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Used to retrieve a style sheet by ordinal index. If index is greater than or equal to the number 
		 of style sheets in the list, this returns null. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.styleSheets"><linktext>MDC - Document.styleSheets</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Style/stylesheets.html#StyleSheets-StyleSheetList-item"><linktext>W3C - DOM Level 2 Style: StyleSheetList.itme()</linktext></link></related-links></apiOperation></apiClassifier></apiPackage><apiPackage id="dom.tr.range"><apiName>dom.tr.range</apiName><apiClassifier id="dom.tr.range:RangeExceptionCode"><apiName>RangeExceptionCode</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.tr.range:Range"><apiName>Range</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>cssom.view:RangeView</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.tr.range:Range:cloneContents"><apiName>cloneContents</apiName><shortdesc>
		 Duplicates the contents of a Range.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if a DocumentType node would be extracted 
		 into the new DocumentFragment.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:DocumentFragment</apiOperationClassifier><apiDesc>A DocumentFragment that contains content equivalent to this Range.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Duplicates the contents of a Range.
		 
		 <p><b>Note:</b> Event Listeners added using DOM Events are not copied during cloning. HTML attribute events 
		 are duplicated as they are for the DOM Core cloneNode method. HTML id attributes are also cloned, which can lead to an 
		 invalid document through cloning.</p>
		 
		 <p><b>Note:</b> Partially selected nodes include the parent tags necessary to make the document fragment valid.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 range.selectNode(document.getElementsByTagName("div").item(0));
		 documentFragment = range.cloneContents();
		 document.body.appendChild(documentFragment);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.cloneContents"><linktext>MDC - range.cloneContents()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-method-cloneContents"><linktext>W3C - DOM Level 2 Range: Range.cloneContents()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:cloneRange"><apiName>cloneRange</apiName><shortdesc>
		 Produces a new Range whose boundary-points are equal to the boundary-points of the Range.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.tr.range:Range</apiOperationClassifier><apiDesc>The duplicated Range.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Produces a new Range whose boundary-points are equal to the boundary-points of the Range. 
		 
		 <p><b>Note:</b> clone is copied by value, not reference, so a change in either Range does not effect the other. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 range.selectNode(document.getElementsByTagName("div").item(0));
		 clone = range.cloneRange();</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.cloneRange"><linktext>MDC - range.cloneRange()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-method-clone"><linktext>W3C - DOM Level 2 Range: Range.cloneRange()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:collapse"><apiName>collapse</apiName><shortdesc>
		 Collapse a Range onto one of its boundary-points 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>toStart</apiItemName><apiType value="Boolean"/><apiDesc>If TRUE, collapses the Range onto its start; if FALSE, collapses it onto its end.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Collapse a Range onto one of its boundary-points 
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 referenceNode = document.getElementsByTagName("div").item(0);
		 range.selectNode(referenceNode);
		 range.collapse(true);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.collapse"><linktext>MDC - range.collapse()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-method-collapse"><linktext>W3C - DOM Level 2 Range: Range.collapse()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:compareBoundaryPoints"><apiName>compareBoundaryPoints</apiName><shortdesc>
		 Compare the boundary-points of two Ranges in a document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if the two Ranges are not in the same Document or DocumentFragment.
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="Number"/><apiDesc>-1, 0 or 1 depending on whether the corresponding boundary-point of the Range is 
		 respectively before, equal to, or after the corresponding boundary-point of sourceRange.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>how</apiItemName><apiType value="Number"/><apiDesc>A code representing the type of comparison, as defined above.
		 </apiDesc></apiParam><apiParam><apiItemName>sourceRange</apiItemName><apiOperationClassifier>dom.tr.range:Range</apiOperationClassifier><apiDesc>The Range on which this current Range is compared to.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Compare the boundary-points of two Ranges in a document. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var range, sourceRange, compare;
		 range = document.createRange();
		 range.selectNode(document.getElementsByTagName("div")[0]);
		 sourceRange = document.createRange();
		 sourceRange.selectNode(document.getElementsByTagName("div")[1]);
		 compare = range.compareBoundaryPoints(Range.START_TO_END, sourceRange);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.compareBoundaryPoints"><linktext>MDC - range.compareBoundaryPoints()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-method-compareBoundaryPoints"><linktext>W3C - DOM Level 2 Range: Range.compareBoundaryPoints()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:compareNode"><apiName>compareNode</apiName><shortdesc>
		 Returns a constant (see notes).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata><asCustoms><as-of>Gecko 1.9
		 </as-of></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>refNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Returns a constant (see notes). 
		 
		 <p><b>Note:</b> This method is obsolete; you should use the W3C DOM Range methods (see compareBoundaryPoints()).</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 range.selectNode(document.getElementsByTagName("div").item(0));
		 returnValue = range.compareNode(document.getElementsByTagName("p").item(0));</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.compareNode"><linktext>MDC - range.compareNode()</linktext></link><link href="dom.tr.range.xml#Range/NODE_BEFORE"><linktext>dom.tr.range.Range.NODE_BEFORE</linktext></link><link href="dom.tr.range.xml#Range/NODE_AFTER"><linktext>dom.tr.range.Range.NODE_AFTER</linktext></link><link href="dom.tr.range.xml#Range/NODE_BEFORE_AND_AFTER"><linktext>dom.tr.range.Range.NODE_BEFORE_AND_AFTER</linktext></link><link href="dom.tr.range.xml#Range/NODE_INSIDE"><linktext>dom.tr.range.Range.NODE_INSIDE</linktext></link><link href="dom.tr.range.xml#Range/compareBoundaryPoints()"><linktext>dom.tr.range.Range.compareBoundaryPoints()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:comparePoint"><apiName>comparePoint</apiName><shortdesc>
		 If the referenceNode is a Node of type Text, Comment, or CDATASection, then offset is the number of characters 
		 from the start of referenceNode.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Returns -1, 0, or 1 depending on whether the referenceNode is before, the same as, or after the range. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>refNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The Node to compare with the Range. 
		 </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>An integer greater than or equal to zero representing the offset inside the referenceNode. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 If the referenceNode is a Node of type Text, Comment, or CDATASection, then offset is the number of characters 
		 from the start of referenceNode. For other Node types, offset is the number of child nodes between the start of the referenceNode.
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 range.selectNode(document.getElementsByTagName("div").item(0));
		 returnValue = range.comparePoint(document.getElementsByTagName("p").item(0),1);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.comparePoint"><linktext>MDC - range.comparePoint()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:createContextualFragment"><apiName>createContextualFragment</apiName><shortdesc>
		 This method takes a string and uses Mozilla's parser to convert it to a DOM tree.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:DocumentFragment</apiOperationClassifier><apiDesc>Returns a document fragment. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>tagString</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Text that contains text and tags to be converted to a document fragment. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method takes a string and uses Mozilla's parser to convert it to a DOM tree.
		 
		 </apiDesc><example>
		 <codeblock>
		 var tagString = "&lt;div&gt;I am a div node&lt;/div&gt;";
		 var range = document.createRange();
		 range.selectNode(document.getElementsByTagName("div").item(0));
		 var documentFragment = range.createContextualFragment(tagString);
		 document.body.appendChild(documentFragment);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.createContextualFragment"><linktext>MDC - range.createContextualFragment()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:deleteContents"><apiName>deleteContents</apiName><shortdesc>
		 Removes the contents of a Range from the containing document or document fragment without returning a reference 
		 to the removed content.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if any portion of the content of the Range is 
		 read-only or any of the nodes that contain any of the content of the Range are read-only.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes the contents of a Range from the containing document or document fragment without returning a reference 
		 to the removed content. 
		 
		 <p><b>Note:</b> Unlike extractContents, this method does not return a documentFragment containing the deleted content. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 range.selectNode(document.getElementsByTagName("div").item(0));
		 range.deleteContents();</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.deleteContents"><linktext>MDC - range.deleteContents()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-method-deleteContents"><linktext>W3C - DOM Level 2 Range: Range.deleteContents()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:detach"><apiName>detach</apiName><shortdesc>
		 Called to indicate that the Range is no longer in use and that the implementation may relinquish any resources 
		 associated with this Range.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Called to indicate that the Range is no longer in use and that the implementation may relinquish any resources 
		 associated with this Range. Subsequent calls to any methods or attribute getters on this Range will result in 
		 a DOMException being thrown with an error code of INVALID_STATE_ERR. 
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 range.selectNode(document.getElementsByTagName("div").item(0));
		 range.detach();</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.detach"><linktext>MDC - range.detach()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-method-detach"><linktext>W3C - DOM Level 2 Range: Range.detach()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:extractContents"><apiName>extractContents</apiName><shortdesc>
		 Moves the contents of a Range from the containing document or document fragment to a new DocumentFragment.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if any portion of the content of the Range is 
		 read-only or any of the nodes which contain any of the content of the Range are read-only.
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if a DocumentType node would be extracted into the 
		 new DocumentFragment.
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:DocumentFragment</apiOperationClassifier><apiDesc>A DocumentFragment containing the extracted contents.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Moves the contents of a Range from the containing document or document fragment to a new DocumentFragment. 
		 
		 <p><b>Note:</b> Event Listeners added using DOM Events are not retained during extraction. HTML 
		 attribute events are retained or duplicated as they are for the DOM Core cloneNode method. HTML id attributes 
		 are also cloned, which can lead to an invalid document if a partially-selected node is extracted and appened 
		 to the document. </p>
		 
		 <p><b>Note:</b> Partially selected nodes are cloned to include the parent tags necessary to make the document fragment valid. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 range.selectNode(document.getElementsByTagName("div").item(0));
		 documentFragment = range.extractContents();
		 document.body.appendChild(documentFragment);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.extractContents"><linktext>MDC - range.extractContents()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-method-extractContents"><linktext>W3C - DOM Level 2 Range: Range.extractContents()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:getBoundingClientRect"><apiName>getBoundingClientRect</apiName><shortdesc>
		 
		 Retrieves an object that specifies the bounds of a collection of TextRectangle objects.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.1b_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMTR 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>cssom.view:TextRectangle</apiOperationClassifier><apiDesc>The returned value is a TextRectangle object which is the union 
		 of the rectangles returned by getClientRects() for the element, i.e., 
		 the CSS border-boxes associated with the element.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 
		 Retrieves an object that specifies the bounds of a collection of TextRectangle objects.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/cssom-view/#rangeview-getboundingclientrect"><linktext>W3C - CSSOM View: RangeView.getBoundingClientRect()</linktext></link><link href="cssom.view.xml#ElementView/getBoundingClientRect()"><linktext>ElementView.getBoundingClientRect()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:getClientRects"><apiName>getClientRects</apiName><shortdesc>
		 
		 Retrieves a collection of rectangles that describes the layout of the 
		 contents of an object or range within the client.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.1b_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMTR 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>cssom.view:TextRectangleList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		 Retrieves a collection of rectangles that describes the layout of the 
		 contents of an object or range within the client. Each rectangle 
		 describes a single line.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/cssom-view/#rangeview-getclientrects"><linktext>W3C - CSSOM View: RangeView.getClientRects()</linktext></link><link href="cssom.view.xml#ElementView/getClientRects()"><linktext>ElementView.getClientRects()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:insertNode"><apiName>insertNode</apiName><shortdesc>
		 Inserts a node into the Document or DocumentFragment at the start of the Range.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if an ancestor container of the start of the Range is read-only.
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if newNode and the container of the start of the Range were not created from the same document.
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if the container of the start of the Range is of a type that does not allow children of the type of newNode or if newNode is an ancestor of the container.
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_NODE_TYPE_ERR: Raised if newNode is an Attr, Entity, Notation, or Document node.
		 
		 </apiDesc><apiItemName>RangeException</apiItemName><apiOperationClassifier>dom.tr.range:RangeException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to insert at the start of the Range
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts a node into the Document or DocumentFragment at the start of the Range.
		 
		 <p>If the container is a 
		 Text node, this will be split at the start of the Range (as if the Text node's splitText method was 
		 performed at the insertion point) and the insertion will occur between the two resulting Text nodes. 
		 Adjacent Text nodes will not be automatically merged. If the node to be inserted is a DocumentFragment 
		 node, the children will be inserted rather than the DocumentFragment node itself. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 newNode = document.createElement("p");
		 newNode.appendChild(document.createTextNode("New Node Inserted Here"));
		 range.selectNode(document.getElementsByTagName("div").item(0));
		 range.insertNode(newNode);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.insertNode"><linktext>MDC - range.insertNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-method-insertNode"><linktext>W3C - DOM Level 2 Range: Range.insertNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:intersectsNode"><apiName>intersectsNode</apiName><shortdesc>
		 Returns a boolean indicating whether the given node intersects the range.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Returns a boolean indicating whether the given node intersects the range. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>refNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The Node to compare with the Range. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a boolean indicating whether the given node intersects the range. 
		 
		 <p><b>Note:</b> This method is obsolete; you should instead use the W3C DOM Range methods (see compareBoundaryPoints()).</p>
		 
		 <p><b>Warning:</b> This method has been removed from Gecko 1.9 and will not exist in future versions of Firefox; you should switch to compareBoundaryPoints() as soon as possible.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 range.selectNode(document.getElementsByTagName("div").item(0));
		 bool = range.intersectsNode(document.getElementsByTagName("p").item(0));</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.intersectsNode"><linktext>MDC - range.intersectsNode()</linktext></link><link href="dom.tr.range.xml#Range/compareBoundaryPoints()"><linktext>dom.tr.range.Range.compareBoundaryPoints()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:isPointInRange"><apiName>isPointInRange</apiName><shortdesc>
		 Returns true if the point (cursor position) at offset within ReferenceNode is within this range.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Returns a boolean indicating whether the given point is in the range. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>refNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The Node to compare with the Range. 
		 </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>The offset into Node of the point to compare with the Range. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns true if the point (cursor position) at offset within ReferenceNode is within this range.
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 range.selectNode(document.getElementsByTagName("div").item(0));
		 bool = range.isPointInRange(document.getElementsByTagName("p").item(0),1);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.isPointInRange"><linktext>MDC - range.isPointInRange()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:selectNode"><apiName>selectNode</apiName><shortdesc>
		 Select a node and its contents 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_NODE_TYPE_ERR: Raised if an ancestor of refNode is an Entity, Notation or DocumentType node or if refNode is a Document, DocumentFragment, Attr, Entity, or Notation node.
		 </apiDesc><apiItemName>RangeException</apiItemName><apiOperationClassifier>dom.tr.range:RangeException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>refNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to select.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Select a node and its contents 
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 referenceNode = document.getElementsByTagName("div").item(0);
		 range.selectNode(referenceNode);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.selectNode"><linktext>MDC - range.selectNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-method-selectNode"><linktext>W3C - DOM Level 2 Range: Range.selectNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:selectNodeContents"><apiName>selectNodeContents</apiName><shortdesc>
		 Select the contents within a node 
		 
		 Note: The parent Node of the start and end of the Range will be the referenceNode.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_NODE_TYPE_ERR: Raised if refNode or an ancestor of refNode is an Entity, Notation or DocumentType node.
		 </apiDesc><apiItemName>RangeException</apiItemName><apiOperationClassifier>dom.tr.range:RangeException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>refNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Node to select from
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Select the contents within a node 
		 
		 <p><b>Note:</b> The parent Node of the start and end of the Range will be the referenceNode. The startOffset is 0, and the endOffset is the number of child Nodes or number of characters contained in the reference node. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 referenceNode = document.getElementsByTagName("div")[0];
		 range.selectNodeContents(referenceNode);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.selectNodeContents"><linktext>MDC - range.selectNodeContents()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-method-selectNodeContents"><linktext>W3C - DOM Level 2 Range: Range.selectNodeContents()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:setEnd"><apiName>setEnd</apiName><shortdesc>
		 Sets the attributes describing the end of a Range.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_NODE_TYPE_ERR: Raised if refNode or an ancestor of refNode is an Entity, Notation, or DocumentType node.
		 </apiDesc><apiItemName>RangeException</apiItemName><apiOperationClassifier>dom.tr.range:RangeException</apiOperationClassifier></apiException><apiException><apiDesc>INDEX_SIZE_ERR: Raised if offset is negative or greater than the number of child units in refNode. Child units are 16-bit units if refNode is a type of CharacterData node (e.g., a Text or Comment node) or a ProcessingInstruction node. Child units are Nodes in all other cases.
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>refNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The refNode value. This parameter must be different from null.
		 </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>The endOffset value.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the attributes describing the end of a Range. 
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 endNode = document.getElementsByTagName("p").item(3);
		 endOffset = document.getElementsByTagName("p").item(3).childNodes.length;
		 range.setEnd(endNode,endOffset);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.setEnd"><linktext>MDC - range.setEnd()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-method-setEnd"><linktext>W3C - DOM Level 2 Range: Range.setEnd()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:setEndAfter"><apiName>setEndAfter</apiName><shortdesc>
		 Sets the end of a Range to be after a node 
		 
		 Note: The parent Node of end of the Range will be the same as that for the referenceNode.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_NODE_TYPE_ERR: Raised if the root container of refNode is not an Attr, Document or DocumentFragment node or if refNode is a Document, DocumentFragment, Attr, Entity, or Notation node.
		 </apiDesc><apiItemName>RangeException</apiItemName><apiOperationClassifier>dom.tr.range:RangeException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>refNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Range ends after refNode.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the end of a Range to be after a node 
		 
		 <p><b>Note:</b> The parent Node of end of the Range will be the same as that for the referenceNode. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 referenceNode = document.getElementsByTagName("div").item(0);
		 range.setEndAfter(referenceNode);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.setEndAfter"><linktext>MDC - range.setEndAfter()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-setEndAfter"><linktext>W3C - DOM Level 2 Range: Range.setEndAfter()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:setEndBefore"><apiName>setEndBefore</apiName><shortdesc>
		 Sets the end position to be before a node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_NODE_TYPE_ERR: Raised if the root container of refNode is not an Attr, Document, or DocumentFragment node or if refNode is a Document, DocumentFragment, Attr, Entity, or Notation node.
		 </apiDesc><apiItemName>RangeException</apiItemName><apiOperationClassifier>dom.tr.range:RangeException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>refNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Range ends before refNode
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the end position to be before a node. 
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 referenceNode = document.getElementsByTagName("div").item(0);
		 range.setEndBefore(referenceNode);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.setEndBefore"><linktext>MDC - range.setEndBefore()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-setEndBefore"><linktext>W3C - DOM Level 2 Range: Range.setEndBefore()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:setStart"><apiName>setStart</apiName><shortdesc>
		 Sets the attributes describing the start of the Range.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_NODE_TYPE_ERR: Raised if refNode or an ancestor of refNode is an Entity, Notation, or DocumentType node.
		 </apiDesc><apiItemName>RangeException</apiItemName><apiOperationClassifier>dom.tr.range:RangeException</apiOperationClassifier></apiException><apiException><apiDesc>INDEX_SIZE_ERR: Raised if offset is negative or greater than the number of child units in refNode. Child units are 16-bit units if refNode is a type of CharacterData node (e.g., a Text or Comment node) or a ProcessingInstruction node. Child units are Nodes in all other cases.
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>refNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The refNode value. This parameter must be different from null.
		 </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>The startOffset value.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the attributes describing the start of the Range. 
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 startNode = document.getElementsByTagName("p").item(2);
		 startOffset = 0;
		 range.setStart(startNode,startOffset);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.setStart"><linktext>MDC - range.setStart()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-method-setStart"><linktext>W3C - DOM Level 2 Range: Range.setStart()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:setStartAfter"><apiName>setStartAfter</apiName><shortdesc>
		 Sets the start position to be after a node 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_NODE_TYPE_ERR: Raised if the root container of refNode is not an Attr, Document, or DocumentFragment node or if refNode is a Document, DocumentFragment, Attr, Entity, or Notation node.
		 </apiDesc><apiItemName>RangeException</apiItemName><apiOperationClassifier>dom.tr.range:RangeException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>refNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Range starts after refNode
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the start position to be after a node 
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 referenceNode = document.getElementsByTagName("div").item(0);
		 range.setStartAfter(referenceNode);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.setStartAfter"><linktext>MDC - range.setStartAfter()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-setStartAfter"><linktext>W3C - DOM Level 2 Range: Range.setStartAfter()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:setStartBefore"><apiName>setStartBefore</apiName><shortdesc>
		 Sets the start position to be before a node 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_NODE_TYPE_ERR: Raised if the root container of refNode is not an Attr, Document, or DocumentFragment node or if refNode is a Document, DocumentFragment, Attr, Entity, or Notation node.
		 </apiDesc><apiItemName>RangeException</apiItemName><apiOperationClassifier>dom.tr.range:RangeException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>refNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Range starts before refNode
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the start position to be before a node 
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 referenceNode = document.getElementsByTagName("div").item(0);
		 range.setStartBefore(referenceNode);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.setStartBefore"><linktext>MDC - range.setStartBefore()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-setStartBefore"><linktext>W3C - DOM Level 2 Range: Range.setStartBefore()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:surroundContents"><apiName>surroundContents</apiName><shortdesc>
		 Reparents the contents of the Range to the given node and inserts the node at the position of the start of the Range.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if an ancestor container of either boundary-point of the Range is read-only.
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if newParent and the container of the start of the Range were not created from the same document.
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if the container of the start of the Range is of a type that does not allow children of the type of newParent or if newParent is an ancestor of the container or if node would end up with a child node of a type not allowed by the type of node.
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>BAD_BOUNDARYPOINTS_ERR: Raised if the Range partially selects a non-text node.
		 </apiDesc><apiItemName>RangeException</apiItemName><apiOperationClassifier>dom.tr.range:RangeException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_NODE_TYPE_ERR: Raised if node is an Attr, Entity, DocumentType, Notation, Document, or DocumentFragment node.
		 
		 </apiDesc><apiItemName>RangeException</apiItemName><apiOperationClassifier>dom.tr.range:RangeException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newParent</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to surround the contents with.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Reparents the contents of the Range to the given node and inserts the node at the position of the start of the Range. 
		 
		 <p><b>Note:</b> surroundContents is equivalent to newNode.appendChild(range.extractContents()); range.insertNode(newNode). After surrounding, the boundary points of the range include newNode.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var range = document.createRange();
		 var newNode = document.createElement("p");
		 range.selectNode(document.getElementsByTagName("div").item(0));
		 range.surroundContents(newNode);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.surroundContents"><linktext>MDC - range.surroundContents()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-method-surroundContents"><linktext>W3C - DOM Level 2 Range: Range.surroundContents()</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.range:Range:toString"><apiName>toString</apiName><shortdesc>
		 Returns the contents of a Range as a string.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_STATE_ERR: Raised if detach() has already been invoked on this object.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The contents of the Range.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the contents of a Range as a string. This string contains only the data characters, not any markup. 
		 
		 <p><b>Note:</b> Alerting the contents of a Range makes an implicit toString() call, so comparing range and text through an alert dialog is ineffective </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 range = document.createRange();
		 range.selectNode(document.getElementsByTagName("div").item(0));
		 text = range.toString();</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/range.toString"><linktext>MDC - range.toString()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level2-Range-method-toString"><linktext>W3C - DOM Level 2 Range: Range.toString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.tr.range:RangeException"><apiName>RangeException</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.tr.range:DocumentRange"><apiName>DocumentRange</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.tr.range:DocumentRange:dom.tr.range:DocumentRange:createRange"><apiName>createRange</apiName><shortdesc>
		 This interface can be obtained from the object implementing the Document interface using binding-specific 
		 casting methods.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.tr.range:Range</apiOperationClassifier><apiDesc>The initial state of the Range returned from this method is such that both of its boundary-points 
		 are positioned at the beginning of the corresponding Document, before any content. The Range returned can 
		 only be used to select content associated with this Document, or with DocumentFragments and Attrs for which 
		 this Document is the ownerDocument.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 This interface can be obtained from the object implementing the Document interface using binding-specific 
		 casting methods. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var range = document.createRange();
		 range.setStart(startNode, startOffset);
		 range.setEnd(endNode, endOffset);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536394%28VS.85%29.aspx"><linktext>MSDN: createRange Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.createRange"><linktext>MDC - Document: createRange Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-DocumentRange-idl"><linktext>W3C - DOM Level 2 Range: DocumentRange</linktext></link></related-links></apiOperation></apiClassifier></apiPackage><apiPackage id="dom.tr.traversal"><apiName>dom.tr.traversal</apiName><apiClassifier id="dom.tr.traversal:DocumentTraversal"><apiName>DocumentTraversal</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.tr.traversal:DocumentTraversal:dom.tr.traversal:DocumentTraversal:createNodeIterator"><apiName>createNodeIterator</apiName><shortdesc>
		 Create a new NodeIterator over the subtree rooted at the specified node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if the specified <codeph>root</codeph> is <codeph>null</codeph>.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.tr.traversal:NodeIterator</apiOperationClassifier><apiDesc>The newly created NodeIterator.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>root</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node which will be iterated together with its children. The iterator is initially positioned 
		 just before this node. The <codeph>whatToShow</codeph> flags and the filter, if any, are not considered when setting this position. The <codeph>root</codeph> must not be <codeph>null</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>whatToShow</apiItemName><apiType value="Number"/><apiDesc>This flag specifies which node types may appear in the logical view of the tree presented 
		 by the iterator. These flags can be combined using OR.
		 </apiDesc></apiParam><apiParam><apiItemName>filter</apiItemName><apiOperationClassifier>dom.tr.traversal:NodeFilter</apiOperationClassifier><apiDesc>The <codeph>NodeFilter</codeph> to be used with this <codeph>TreeWalker</codeph>, or <codeph>null</codeph> to indicate no filter.
		 </apiDesc></apiParam><apiParam><apiItemName>entityReferenceExpansion</apiItemName><apiType value="Boolean"/><apiDesc>The value of this flag determines whether entity reference nodes are expanded.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Create a new NodeIterator over the subtree rooted at the specified node. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var nodeIterator = document.createNodeIterator(
		 	document.body,
		 	NodeFilter.SHOW_ELEMENT,
		 	{ acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },
		 	false
		 	);
		 var nodeList = new Array();
		 var currentNode;
		 
		 while (currentNode = nodeIterator.nextNode()) {
		 	nodeList.push(currentNode);
		 }</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Document.createNodeIterator"><linktext>MDC - Document: createNodeIterator Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-Document"><linktext>W3C - DOM Level 2 Traversal: createNodeIterator Method</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.traversal:DocumentTraversal:dom.tr.traversal:DocumentTraversal:createTreeWalker"><apiName>createTreeWalker</apiName><shortdesc>
		 Create a new TreeWalker over the subtree rooted at the specified node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if the specified <codeph>root</codeph> is <codeph>null</codeph>.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.tr.traversal:TreeWalker</apiOperationClassifier><apiDesc>The newly created <codeph>TreeWalker</codeph>.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>root</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node which will serve as the <codeph>root</codeph> for the TreeWalker. The whatToShow flags and the NodeFilter 
		 are not considered when setting this value; any node type will be accepted as the <codeph>root</codeph>. The <codeph>currentNode</codeph> of the 
		 TreeWalker is initialized to this node, whether or not it is visible. The <codeph>root</codeph> functions as a stopping point for 
		 traversal methods that look upward in the document structure, such as <codeph>parentNode</codeph> and nextNode. The <codeph>root</codeph> must not 
		 be <codeph>null</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>whatToShow</apiItemName><apiType value="Number"/><apiDesc>This flag specifies which node types may appear in the logical view of the tree presented by 
		 the tree-walker. These flags can be combined using OR.
		 </apiDesc></apiParam><apiParam><apiItemName>filter</apiItemName><apiOperationClassifier>dom.tr.traversal:NodeFilter</apiOperationClassifier><apiDesc>The <codeph>NodeFilter</codeph> to be used with this <codeph>TreeWalker</codeph>, or <codeph>null</codeph> to indicate no filter.
		 </apiDesc></apiParam><apiParam><apiItemName>entityReferenceExpansion</apiItemName><apiType value="Boolean"/><apiDesc>If this flag is false, the contents of <codeph>EntityReference</codeph> nodes are not presented in the logical view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Create a new TreeWalker over the subtree rooted at the specified node. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var treeWalker = document.createTreeWalker(
		 	document.body,
		 	NodeFilter.SHOW_ELEMENT,
		 	{ acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },
		 	false
		 	);
		 var nodeList = new Array();
		 while(treeWalker.nextNode()) nodeList.push(treeWalker.currentNode);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Document.createNodeIterator"><linktext>MDC - Document: createNodeIterator Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-Document"><linktext>W3C - DOM Level 2 Traversal: createNodeIterator Method</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.tr.traversal:TreeWalker"><apiName>TreeWalker</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.tr.traversal:TreeWalker:dom.tr.traversal:TreeWalker:firstChild"><apiName>firstChild</apiName><shortdesc>
		 Moves the TreeWalker to the first visible child of the current node, and returns the new node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The new node, or <codeph>null</codeph> if the current node has no visible children in the <codeph>TreeWalker</codeph>'s logical view.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Moves the <codeph>TreeWalker</codeph> to the first visible child of the current node, and returns the new node. If the current 
		 node has no visible children, returns <codeph>null</codeph>, and retains the current node. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/treeWalker.firstChild"><linktext>MDC - treeWalker: firstChild Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-TreeWalker"><linktext>W3C - DOM Level 2 Traversal: firstChild Method</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.traversal:TreeWalker:dom.tr.traversal:TreeWalker:lastChild"><apiName>lastChild</apiName><shortdesc>
		 Moves the TreeWalker to the last visible child of the current node, and returns the new node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The new node, or <codeph>null</codeph> if the current node has no children in the <codeph>TreeWalker</codeph>'s logical view.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Moves the <codeph>TreeWalker</codeph> to the last visible child of the current node, and returns the new node. If the current 
		 node has no visible children, returns <codeph>null</codeph>, and retains the current node. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/treeWalker.lastChild"><linktext>MDC - treeWalker: lastChild Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-TreeWalker"><linktext>W3C - DOM Level 2 Traversal: lastChild Method</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.traversal:TreeWalker:dom.tr.traversal:TreeWalker:nextNode"><apiName>nextNode</apiName><shortdesc>
		 Moves the TreeWalker to the next visible node in document order relative to the current node, and returns the 
		 new node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The new node, or <codeph>null</codeph> if the current node has no next node in the <codeph>TreeWalker</codeph>'s logical view.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Moves the <codeph>TreeWalker</codeph> to the next visible node in document order relative to the current node, and returns the 
		 new node. If the current node has no next node, or if the search for nextNode attempts to step upward from the 
		 <codeph>TreeWalker</codeph>'s root node, returns <codeph>null</codeph>, and retains the current node. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/treeWalker.nextNode"><linktext>MDC - treeWalker: nextNode Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-TreeWalker"><linktext>W3C - DOM Level 2 Traversal: nextNode Method</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.traversal:TreeWalker:dom.tr.traversal:TreeWalker:nextSibling"><apiName>nextSibling</apiName><shortdesc>
		 Moves the TreeWalker to the next sibling of the current node, and returns the new node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The new node, or <codeph>null</codeph> if the current node has no next sibling. in the <codeph>TreeWalker</codeph>'s logical view.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Moves the <codeph>TreeWalker</codeph> to the next sibling of the current node, and returns the new node. If the current node has 
		 no visible next sibling, returns <codeph>null</codeph>, and retains the current node. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/treeWalker.nextSibling"><linktext>MDC - treeWalker: nextSibling Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-TreeWalker"><linktext>W3C - DOM Level 2 Traversal: nextSibling Method</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.traversal:TreeWalker:dom.tr.traversal:TreeWalker:parentNode"><apiName>parentNode</apiName><shortdesc>
		 Moves to and returns the closest visible ancestor node of the current node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The new parent node, or <codeph>null</codeph> if the current node has no parent in the <codeph>TreeWalker</codeph>'s logical view.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Moves to and returns the closest visible ancestor node of the current node. If the search for <codeph>parentNode</codeph> attempts 
		 to step upward from the <codeph>TreeWalker</codeph>'s root node, or if it fails to find a visible ancestor node, this method 
		 retains the current position and returns <codeph>null</codeph>. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/treeWalker.currentNode"><linktext>MDC - treeWalker: parentNode Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-TreeWalker"><linktext>W3C - DOM Level 2 Traversal: parentNode Method</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.traversal:TreeWalker:dom.tr.traversal:TreeWalker:previousNode"><apiName>previousNode</apiName><shortdesc>
		 Moves the TreeWalker to the previous visible node in document order relative to the current node, and returns the 
		 new node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The new node, or <codeph>null</codeph> if the current node has no previous node in the <codeph>TreeWalker</codeph>'s logical view.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Moves the <codeph>TreeWalker</codeph> to the previous visible node in document order relative to the current node, and returns the 
		 new node. If the current node has no previous node, or if the search for previousNode attempts to step upward from 
		 the <codeph>TreeWalker</codeph>'s root node, returns <codeph>null</codeph>, and retains the current node. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/treeWalker.previousNode"><linktext>MDC - treeWalker: previousNode Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-TreeWalker"><linktext>W3C - DOM Level 2 Traversal: previousNode Method</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.traversal:TreeWalker:dom.tr.traversal:TreeWalker:previousSibling"><apiName>previousSibling</apiName><shortdesc>
		 Moves the TreeWalker to the previous sibling of the current node, and returns the new node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The new node, or <codeph>null</codeph> if the current node has no previous sibling. in the <codeph>TreeWalker</codeph>'s logical view.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Moves the <codeph>TreeWalker</codeph> to the previous sibling of the current node, and returns the new node. If the current node has 
		 no visible previous sibling, returns <codeph>null</codeph>, and retains the current node. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/treeWalker.previousSibling"><linktext>MDC - treeWalker: previousSibling Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-TreeWalker"><linktext>W3C - DOM Level 2 Traversal: previousSibling Method</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.tr.traversal:NodeIterator"><apiName>NodeIterator</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.tr.traversal:NodeIterator:dom.tr.traversal:NodeIterator:detach"><apiName>detach</apiName><shortdesc>
		 Detaches the NodeIterator from the set over which it iterates, releasing any resources used by the set 
		 and setting the iterator's state to INVALID.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Detaches the NodeIterator from the set over which it iterates, releasing any resources used by the set 
		 and setting the iterator's state to INVALID.
		 
		 <p>Once this method has been called, calls to other methods on NodeIterator will raise the 
		 INVALID_STATE_ERR exception.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var nodeIterator = document.createNodeIterator(
		 	document.body,
		 	NodeFilter.SHOW_ELEMENT,
		 	{ acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },
		 	false
		 	);
		 nodeIterator.detach(); // detaches the iterator
		 
		 nodeIterator.nextNode(); // throws an INVALID_STATE_ERR exception</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NodeIterator.detach"><linktext>MDC - NodeIterator: detach Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-NodeIterator"><linktext>W3C - DOM Level 2 Traversal: detach Method</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.traversal:NodeIterator:dom.tr.traversal:NodeIterator:nextNode"><apiName>nextNode</apiName><shortdesc>
		 Returns the next node in the set represented by the NodeIterator and advances the position of the iterator within the set.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_STATE_ERR: Raised if this method is called after the detach method was invoked.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The next Node in the set being iterated over, or null if there are no more members in that set.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the next node in the set represented by the NodeIterator and advances the position of the iterator within the set.  The first call to nextNode() returns the first node in the set.
		 
		 </apiDesc><example>
		 <codeblock>
		 var nodeIterator = document.createNodeIterator(
		 	document.body,
		 	NodeFilter.SHOW_ELEMENT,
		 	{ acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },
		 	false
		 	);
		 currentNode = nodeIterator.nextNode(); // returns the next node</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NodeIterator.nextNode"><linktext>MDC - NodeIterator: nextNode Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-NodeIterator"><linktext>W3C - DOM Level 2 Traversal: nextNode Method</linktext></link></related-links></apiOperation><apiOperation id="dom.tr.traversal:NodeIterator:dom.tr.traversal:NodeIterator:previousNode"><apiName>previousNode</apiName><shortdesc>
		 Returns the previous node in the set and moves the position of the NodeIterator backwards in the set.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_STATE_ERR: Raised if this method is called after the detach method was invoked.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The previous Node in the set being iterated over, or null if there are no more members in that set.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Returns the previous node in the set and moves the position of the NodeIterator backwards in the set.
		 
		 <p>This method returns null when the current node is the first node in the set.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var nodeIterator = document.createNodeIterator(
		 	document.body,
		 	NodeFilter.SHOW_ELEMENT,
		 	{ acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },
		 	false
		 	);
		 currentNode = nodeIterator.nextNode(); // returns the next node
		 previousNode = nodeIterator.previousNode(); // same result, since we backtracked to the previous node</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NodeIterator.previousNode"><linktext>MDC - NodeIterator: previousNode Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-NodeIterator"><linktext>W3C - DOM Level 2 Traversal: previousNode Method</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.tr.traversal:NodeFilter"><apiName>NodeFilter</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.tr.traversal:NodeFilter:acceptNode"><apiName>acceptNode</apiName><shortdesc>
		 Test whether a specified node is visible in the logical view of a TreeWalker or NodeIterator.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A constant to determine whether the node is accepted, rejected, or skipped.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>n</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to check to see if it passes the filter or not.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Test whether a specified node is visible in the logical view of a TreeWalker or NodeIterator. This function will be 
		 called by the implementation of TreeWalker and NodeIterator; it is not normally called directly from user code. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NodeIterator.filter"><linktext>MDC - NodeIterator: filter Property</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-NodeFilter"><linktext>W3C - DOM Level 2 Traversal: acceptNode Method</linktext></link></related-links></apiOperation></apiClassifier></apiPackage><apiPackage id="dom.validation"><apiName>dom.validation</apiName><apiClassifier id="dom.validation:ExceptionVAL"><apiName>ExceptionVAL</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.validation:CharacterDataEditVAL"><apiName>CharacterDataEditVAL</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>dom.validation:NodeEditVAL</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.validation:CharacterDataEditVAL:dom.validation:CharacterDataEditVAL:canAppendData"><apiName>canAppendData</apiName><shortdesc>
		 Determines if character data can be appended.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Data to be appended.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines if character data can be appended.
		  
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-CharacterDataEditVAL-canAppendData"><linktext>W3C - CharacterDataEditVAL.canAppendData()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:CharacterDataEditVAL:dom.validation:CharacterDataEditVAL:canDeleteData"><apiName>canDeleteData</apiName><shortdesc>
		 Determines if character data can be deleted.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified offset is negative or greater than the number of 16-bit units in data, or if the specified count is negative. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>Offset.
		 </apiDesc></apiParam><apiParam><apiItemName>count</apiItemName><apiType value="Number"/><apiDesc>Number of 16-bit units to delete.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines if character data can be deleted.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-CharacterDataEditVAL-canDeleteData"><linktext>W3C - CharacterDataEditVAL.canDeleteData()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:CharacterDataEditVAL:dom.validation:CharacterDataEditVAL:canInsertData"><apiName>canInsertData</apiName><shortdesc>
		 Determines if character data can be inserted.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified offset is negative or greater than the number of 16-bit units in data. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>Offset.
		 </apiDesc></apiParam><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Argument to be set.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines if character data can be inserted.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-CharacterDataEditVAL-canInsertData"><linktext>W3C - CharacterDataEditVAL.canInsertData()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:CharacterDataEditVAL:dom.validation:CharacterDataEditVAL:canReplaceData"><apiName>canReplaceData</apiName><shortdesc>
		 Determines if character data can be replaced.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified offset is negative or greater than the number of 16-bit units in data, or if the specified count is negative. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>Offset.
		 </apiDesc></apiParam><apiParam><apiItemName>count</apiItemName><apiType value="Number"/><apiDesc>Replacement.
		 </apiDesc></apiParam><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Argument to be set.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines if character data can be replaced.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-CharacterDataEditVAL-canReplaceData"><linktext>W3C - CharacterDataEditVAL.canReplaceData()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:CharacterDataEditVAL:dom.validation:CharacterDataEditVAL:canSetData"><apiName>canSetData</apiName><shortdesc>
		 Determines if character data can be set.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Argument to be set.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines if character data can be set.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-CharacterDataEditVAL-canSetData"><linktext>W3C - CharacterDataEditVAL.canSetData()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:CharacterDataEditVAL:dom.validation:CharacterDataEditVAL:isWhitespaceOnly"><apiName>isWhitespaceOnly</apiName><shortdesc>
		 Determines if character data is only whitespace.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Determines if character data is only whitespace. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-CharacterDataEditVAL-isWhitespaceOnly"><linktext>W3C - CharacterDataEditVAL.isWhitespaceOnly()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.validation:ElementEditVAL"><apiName>ElementEditVAL</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>dom.validation:NodeEditVAL</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.validation:ElementEditVAL:dom.validation:ElementEditVAL:canRemoveAttribute"><apiName>canRemoveAttribute</apiName><shortdesc>
		 Verifies if an attribute by the given name can be removed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>attrname</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Name of attribute.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Verifies if an attribute by the given name can be removed.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-ElementEditVAL-canRemoveAttribute"><linktext>W3C - ElementEditVAL.canRemoveAttribute()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:ElementEditVAL:dom.validation:ElementEditVAL:canRemoveAttributeNS"><apiName>canRemoveAttributeNS</apiName><shortdesc>
		 Verifies if an attribute by the given local name and namespace can be removed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the attribute to remove.
		 </apiDesc></apiParam><apiParam><apiItemName>localName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Local name of the attribute to be removed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Verifies if an attribute by the given local name and namespace can be removed.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-ElementEditVAL-canRemoveAttributeNS"><linktext>W3C - ElementEditVAL.canRemoveAttributeNS()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:ElementEditVAL:dom.validation:ElementEditVAL:canRemoveAttributeNode"><apiName>canRemoveAttributeNode</apiName><shortdesc>
		 Determines if an attribute node can be removed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>attrNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The Attr node to remove from the attribute list.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines if an attribute node can be removed.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-ElementEditVAL-canRemoveAttributeNode"><linktext>W3C - ElementEditVAL.canRemoveAttributeNode()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:ElementEditVAL:dom.validation:ElementEditVAL:canSetAttribute"><apiName>canSetAttribute</apiName><shortdesc>
		 Determines if the value for specified attribute can be set.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>attrname</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Name of attribute.
		 </apiDesc></apiParam><apiParam><apiItemName>attrval</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Value to be assigned to the attribute.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines if the value for specified attribute can be set.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-ElementEditVAL-ElementEditVAL-canSetAttribute"><linktext>W3C - ElementEditVAL.canSetAttribute()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:ElementEditVAL:dom.validation:ElementEditVAL:canSetAttributeNS"><apiName>canSetAttributeNS</apiName><shortdesc>
		 Determines if the attribute with given namespace and qualified name can be created if not already present in the attribute list 
		 of the element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>namespaceURI of namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>qualifiedName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Qualified name of attribute.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Value to be assigned to the attribute.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines if the attribute with given namespace and qualified name can be created if not already present in the attribute list 
		 of the element. If the attribute with the same qualified name and namespaceURI is already present in the element's attribute list, 
		 it tests whether the value of the attribute and its prefix can be set to the new value. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-ElementEditVAL-canSetAttributeNS"><linktext>W3C - ElementEditVAL.canSetAttributeNS()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:ElementEditVAL:dom.validation:ElementEditVAL:canSetAttributeNode"><apiName>canSetAttributeNode</apiName><shortdesc>
		 Determines if an attribute node can be added.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>attrNode</apiItemName><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>Node in which the attribute can possibly be set.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines if an attribute node can be added. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-ElementEditVAL-canSetAttributeNode"><linktext>W3C - ElementEditVAL.canSetAttributeNode()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:ElementEditVAL:dom.validation:ElementEditVAL:canSetTextContent"><apiName>canSetTextContent</apiName><shortdesc>
		 Determines if the text content of this node and its descendants can be set to the string passed in.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>possibleTextContent</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Possible text content string.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines if the text content of this node and its descendants can be set to the string passed in. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-ElementEditVAL-canSetTextContent"><linktext>W3C - ElementEditVAL.canSetTextContent()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:ElementEditVAL:dom.validation:ElementEditVAL:isElementDefined"><apiName>isElementDefined</apiName><shortdesc>
		 Determines if name is defined in the schema.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Name of element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines if name is defined in the schema. This only applies to global declarations. This method is for non-namespace aware schemas. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-ElementEditVAL-isElementDefined"><linktext>W3C - ElementEditVAL.isElementDefined()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:ElementEditVAL:dom.validation:ElementEditVAL:isElementDefinedNS"><apiName>isElementDefinedNS</apiName><shortdesc>
		 Determines if name in this namespace is defined in the current context.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>namespaceURI of namespace.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Name of element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines if name in this namespace is defined in the current context. Thus not only does this apply to global declarations, 
		 but depending on the content, this may also apply to local definitions. This method is for namespace aware schemas. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-ElementEditVAL-isElementDefinedNS"><linktext>W3C - ElementEditVAL.isElementDefinedNS()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.validation:ValidationState"><apiName>ValidationState</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.validation:ValidationType"><apiName>ValidationType</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.validation:ContentTypeVAL"><apiName>ContentTypeVAL</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.validation:DocumentEditVAL"><apiName>DocumentEditVAL</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>dom.validation:NodeEditVAL</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.validation:DocumentEditVAL:dom.validation:DocumentEditVAL:getDefinedElements"><apiName>getDefinedElements</apiName><shortdesc>
		 Returns list of all element information item names of global declaration, belonging to the specified namespace.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:NameList</apiOperationClassifier><apiDesc>List of all element information item names belonging to the specified namespace or null if no schema is available. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>namespaceURI of namespace. For DTDs, this is null.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns list of all element information item names of global declaration, belonging to the specified namespace. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#DocumentEditVAL-getDefinedElements"><linktext>W3C - DocumentEditVAL.getDefinedElements()</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:DocumentEditVAL:dom.validation:DocumentEditVAL:validateDocument"><apiName>validateDocument</apiName><shortdesc>
		 Validates the document against the schema, e.g., a DTD or an W3C XML schema or another.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Validates the document against the schema, e.g., a DTD or an W3C XML schema or another. Any attempt to modify any part 
		 of the document while validating results in implementation-dependent behavior. In addition, the validation operation itself 
		 cannot modify the document, e.g., for default attributes. This method makes use of the error handler, as described in the 
		 DOM Level 3 Core DOMConfiguration interface, with all errors being SEVERITY_ERROR as defined in the DOMError interface. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#DocumentEditVAL-validateDocument"><linktext>W3C - DocumentEditVAL.validateDocument()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.validation:NodeEditVAL"><apiName>NodeEditVAL</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.validation:NodeEditVAL:dom.validation:NodeEditVAL:canAppendChild"><apiName>canAppendChild</apiName><shortdesc>
		 Determines whether the Node.appendChild operation would make this document not compliant with the VAL_INCOMPLETE validity type.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>newChild</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Node to be appended.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines whether the Node.appendChild operation would make this document not compliant with the VAL_INCOMPLETE validity type. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-NodeEditVAL-canAppendChild"><linktext>W3C - NodeEditVAL.canAppendChild()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:NodeEditVAL:dom.validation:NodeEditVAL:canInsertBefore"><apiName>canInsertBefore</apiName><shortdesc>
		 Determines whether the Node.insertBefore operation would make this document not compliant with the VAL_INCOMPLETE  validity type.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>newChild</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Node to be inserted.
		 </apiDesc></apiParam><apiParam><apiItemName>refChild</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Reference Node.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines whether the Node.insertBefore operation would make this document not compliant with the VAL_INCOMPLETE  validity type. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-NodeEditVAL-canInsertBefore"><linktext>W3C - NodeEditVAL.canInsertBefore()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:NodeEditVAL:dom.validation:NodeEditVAL:canRemoveChild"><apiName>canRemoveChild</apiName><shortdesc>
		 Determines whether the Node.removeChild operation would make this document not compliant with the VAL_INCOMPLETE  validity type.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>oldChild</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Node to be removed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines whether the Node.removeChild operation would make this document not compliant with the VAL_INCOMPLETE  validity type. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-NodeEditVAL-canRemoveChild"><linktext>W3C - NodeEditVAL.canRemoveChild()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:NodeEditVAL:dom.validation:NodeEditVAL:canReplaceChild"><apiName>canReplaceChild</apiName><shortdesc>
		 Determines whether the Node.replaceChild operation would make this document not compliant with the VAL_INCOMPLETE validity type.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>newChild</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>New Node.
		 </apiDesc></apiParam><apiParam><apiItemName>oldChild</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Node to be replaced.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines whether the Node.replaceChild operation would make this document not compliant with the VAL_INCOMPLETE validity type.  
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#VAL-Interfaces-NodeEditVAL-canReplaceChild"><linktext>W3C - NodeEditVAL.canReplaceChild()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation><apiOperation id="dom.validation:NodeEditVAL:dom.validation:NodeEditVAL:nodeValidity"><apiName>nodeValidity</apiName><shortdesc>
		 Determines if the node is valid relative to the validation type  specified in valType.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMVAL" version="3"/><apiSince version="DOMVAL 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A validation state constant. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>valType</apiItemName><apiType value="Number"/><apiDesc>Flag to indicate the validation type  checking to be done. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Determines if the node is valid relative to the validation type  specified in valType. This operation doesn't normalize 
		 before checking if it is valid. To do so, one would need to explicitly call a normalize method. The difference between 
		 this method and the DocumentEditVAL.validateDocument method is that the latter method only checks to determine whether 
		 the entire document is valid. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Val/validation.html#NodeEditVAL-nodeValidity"><linktext>W3C - NodeEditVAL.nodeValidity()</linktext></link><link href="dom.validation.xml#ValidationState"><linktext>dom.validation.ValidationState</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.validation:ExceptionVALCode"><apiName>ExceptionVALCode</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="dom.views"><apiName>dom.views</apiName><apiClassifier id="dom.views:DocumentView"><apiName>DocumentView</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.views:AbstractView"><apiName>AbstractView</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="dom"><apiName>dom</apiName><apiClassifier id="dom:WindowProxy"><apiName>WindowProxy</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom:Window</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom:Window"><apiName>Window</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>dom.style.css:ViewCSS</apiBaseInterface><apiBaseInterface>dom.views:AbstractView</apiBaseInterface><apiBaseInterface>cssom.view:WindowView</apiBaseInterface><apiBaseInterface>dom.events:EventTarget</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom:Window:GeckoActiveXObject"><apiName>GeckoActiveXObject</apiName><shortdesc>
		 Undocumented
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Window.GeckoActiveXObject"><linktext>http://developer.mozilla.org/En/DOM/Window.GeckoActiveXObject</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:QueryInterface"><apiName>QueryInterface</apiName><shortdesc>
		 Undocumented
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Window.QueryInterface"><linktext>http://developer.mozilla.org/En/DOM/Window.QueryInterface</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:XPCNativeWrapper"><apiName>XPCNativeWrapper</apiName><shortdesc>
		 Undocumented
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Window.XPCNativeWrapper"><linktext>http://developer.mozilla.org/En/DOM/Window.XPCNativeWrapper</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:XPCSafeJSObjectWrapper"><apiName>XPCSafeJSObjectWrapper</apiName><shortdesc>
		 Undocumented
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Window.XPCSafeJSObjectWrapper"><linktext>http://developer.mozilla.org/En/DOM/Window.XPCSafeJSObjectWrapper</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 
		 Associates a function with a particular event and binds the event to the current node.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string representing the event to bind, without the "on" prefix. For example, "click", "mousedown" etc.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The function or method to associate with the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Whether to bind the event as it is propagating towards the target node, (event Capture), or as the 
		 event bubbles upwards from the target (event bubble). Set to true or false, respectively.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Associates a function with a particular event and binds the event to the current node.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:addEventListenerNS"><apiName>addEventListenerNS</apiName><shortdesc>
		 
		 Registers an event listener, depending on the useCapture parameter, on the 
		 capture phase of the DOM event flow or its target and bubbling phases.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.namespaceURI associated with the event for which the user is registering.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string representing the event to bind, without the "on" prefix. For example, "click", "mousedown" etc.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The function or method to associate with the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Whether to bind the event as it is propagating towards the target node, (event Capture), or as the 
		 event bubbles upwards from the target (event bubble). Set to true or false, respectively.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Registers an event listener, depending on the useCapture parameter, on the 
		 capture phase of the DOM event flow or its target and bubbling phases.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:alert"><apiName>alert</apiName><shortdesc>
		 DOM Level 0 
		 
		 Display an alert dialog with the specified content and an OK button.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Text you want to display in the alert dialog, or, alternatively, an 
		 object that is converted into a string and displayed.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Display an alert dialog with the specified content and an OK button.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="dom.xml#Window/confirm()"><linktext>dom.Window.confirm()</linktext></link><link href="dom.xml#Window/prompt()"><linktext>dom.Window.prompt()</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:atob"><apiName>atob</apiName><shortdesc>
		 DOM Level 0 
		 
		 Decodes a string of data which has been encoded using base-64 encoding.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The decoded string
		 </apiDesc></apiReturn><apiParam><apiItemName>encodedData</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The encoded string
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Decodes a string of data which has been encoded using base-64 encoding. 
		 
		 </apiDesc><example>
		 var encodedData = window.btoa("Hello, world"); // encode a string
		 var decodedData = atob(encodedData); // decode the string
		 
		 </example></apiOperationDetail><related-links><link href="dom.xml#Window/btoa()"><linktext>dom.Window.btoa()</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:back"><apiName>back</apiName><shortdesc>
		 DOM Level 0 
		 
		 Returns the window to the previous item in the history.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Returns the window to the previous item in the history. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:blur"><apiName>blur</apiName><shortdesc>
		 DOM Level 0 
		 
		 Shifts focus away from the window.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Shifts focus away from the window. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:btoa"><apiName>btoa</apiName><shortdesc>
		 DOM Level 0
		 
		 Creates a base-64 encoded ASCII string from a string of binary data.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The encoded string
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>stringToEncode</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The string to encode
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b>
		 
		 Creates a base-64 encoded ASCII string from a string of binary data. 
		 
		 </apiDesc><example>
		 var encodedData = window.btoa("Hello, world"); // encode a string
		 var decodedData = atob(encodedData); // decode the string
		 
		 </example></apiOperationDetail><related-links><link href="dom.xml#Window/atob()"><linktext>dom.Window.atob()</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:captureEvents"><apiName>captureEvents</apiName><shortdesc>
		 DOM Level 0 | OBSOLETE
		 
		 Registers the window to capture all events of the specified type.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The event type to capture.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0 | OBSOLETE</b>
		 
		 Registers the window to capture all events of the specified type. 
		 
		 Note: This method is obsolete as of Gecko 1.9, in favor of W3C DOM Events methods 
		 (see addEventListener). The support for this method has been removed from Gecko 1.9. 
		 
		 Note: Events raised in the DOM by user activity (such as clicking buttons or shifting 
		 focus away from the current document) generally pass through the high-level window and 
		 document objects first before arriving at the object that initiated the event. 
		 
		 Note: When you call the captureEvents() method on the window, events of the type you 
		 specify (for example, Event.CLICK) no longer pass through to "lower" objects in the 
		 hierarchy. In order for events to "bubble up" in the way that they normally do, you 
		 must call window.releaseEvents() (Obsolete ) on the window to keep it from trapping events. 
		 
		 Note: Note that you can pass a list of events to this method using the following syntax: 
		 window.caputureEvents(Event.KEYPRESS | Event.KEYDOWN | Event.KEYUP). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="dom.xml#Window/releaseEvents()"><linktext>dom.Window.releaseEvents()</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:clearInterval"><apiName>clearInterval</apiName><shortdesc>
		 DOM Level 0 
		 
		 Cancels repeated action which was set up using setInterval().</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>timerID</apiItemName><apiType value="Number"/><apiDesc>The identifier of the repeated action you want to cancel.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Cancels repeated action which was set up using setInterval(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="dom.xml#Window/setInterval()"><linktext>setInterval()</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:clearTimeout"><apiName>clearTimeout</apiName><shortdesc>
		 DOM Level 0 
		 
		 Clears the delay set by window.setTimeout().</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>timerID</apiItemName><apiType value="Number"/><apiDesc>The ID of the timeout you wish you clear
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Clears the delay set by window.setTimeout(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="dom.xml#Window/setTimeout()"><linktext>setTimeout()</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:close"><apiName>close</apiName><shortdesc>
		 DOM Level 0 
		 
		 Closes the current window, or a referenced window.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Closes the current window, or a referenced window. 
		 
		 <p>When this method is called, the referenced window is closed.</p>
		 
		 <p>This method is only allowed to be called for windows that were 
		 opened by a script using the window.open method. If the window 
		 was not opened by a script, the following error appears in the 
		 JavaScript Console: Scripts may not close windows that were not
		 opened by script.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536367(VS.85).aspx"><linktext>http://msdn.microsoft.com/en-us/library/ms536367(VS.85).aspx</linktext></link><link href="http://developer.mozilla.org/en/DOM/window.close"><linktext>http://developer.mozilla.org/en/DOM/window.close</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:confirm"><apiName>confirm</apiName><shortdesc>
		 DOM Level 0 
		 
		 Displays a modal dialog with a message and two buttons, OK and Cancel.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Value indicating whether OK or Cancel was selected (true means OK). 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The string to be displayed in the dialog. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Displays a modal dialog with a message and two buttons, OK and Cancel. 
		 
		 <p>Dialog boxes are modal windows - they prevent the user from accessing the 
		 rest of the program's interface until the dialog box is closed. For this 
		 reason, you should not overuse any function that creates a dialog box (or 
		 modal window).</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="dom.xml#Window/alert()"><linktext>dom.Window.alert()</linktext></link><link href="dom.xml#Window/prompt()"><linktext>dom.Window.prompt()</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:disableExternalCapture"><apiName>disableExternalCapture</apiName><shortdesc>
		 Undocumented
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/window.disableExternalCapture"><linktext>http://developer.mozilla.org/En/DOM/window.disableExternalCapture</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
		 
		 Dispatches an event to fire on a node artificially.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Indicates whether any of the listeners which handled the 
		 event called Event.preventDefault(). If Event.preventDefault() was 
		 called the returned value is false, else it is true.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>dom.events:Event</apiOperationClassifier><apiDesc>The event to be dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Dispatches an event to fire on a node artificially.
		 
		 <p><b>Note (IE):</b> IE's equivalent of dispatchEvent() is fireEvent().</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:dump"><apiName>dump</apiName><shortdesc>
		 DOM Level 0 
		 
		 Prints messages to the console.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Message to log. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Prints messages to the console. 
		 
		 <p>Note: In Gecko dump is disabled by default – it doesn't do anything but doesn't raise 
		 an error either. To see the dump output you have to enable it by setting the preference 
		 browser.dom.window.dump.enabled to true. You can set the preference in about:config or 
		 in a user.js file. Note: this preference is not listed in about:config by default, you 
		 may need to create it (right-click the content area -&gt; New -&gt; Boolean). </p>
		 
		 <p>Note: On Windows, you will need a console to actually see anything. If you don't have one 
		 already, closing the application and re-opening it with the command line parameter -console 
		 should create the console. On other operating systems, it's enough to launch the application 
		 from a terminal. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:enableExternalCapture"><apiName>enableExternalCapture</apiName><shortdesc>
		 Undocumented
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/window.enableExternalCapture"><linktext>http://developer.mozilla.org/En/DOM/window.enableExternalCapture</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:escape"><apiName>escape</apiName><shortdesc>
		 DOM Level 0 
		 
		 Encodes a string, replacing certain characters with a hexadecimal escape sequence.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The encoded string. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>regular</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A regular string. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Encodes a string, replacing certain characters with a hexadecimal escape sequence. 
		 
		 <p>Note: The escape() method converts special characters (any characters that are 
		 not regular text or numbers) into hexadecimal characters, which is especially 
		 necessary for setting the values of cookies. Also useful when passing name=value 
		 pairs in the URL of a GET request, or an AJAX GET/POST request. </p>
		 
		 </apiDesc><example>alert(escape("http://www.cnn.com")); // displays: http%3A//www.cnn.com
		 </example></apiOperationDetail><related-links><link href="dom.xml#Window/unescape()"><linktext>dom.Window.unescape()</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:find"><apiName>find</apiName><shortdesc>
		 DOM Level 0 
		 
		 Finds a string in a window.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true if the string is found; otherwise, false. 
		 </apiDesc></apiReturn><apiParam><apiItemName>string</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The text string for which to search. 
		 </apiDesc></apiParam><apiParam><apiItemName>caseSensitive</apiItemName><apiType value="Boolean"/><apiDesc>If true, specifies a case-sensitive search. 
		 </apiDesc></apiParam><apiParam><apiItemName>backwards</apiItemName><apiType value="Boolean"/><apiDesc>If true, specifies a backward search. 
		 </apiDesc></apiParam><apiParam><apiItemName>wrapAround</apiItemName><apiType value="Boolean"/><apiDesc>If true, specifies a wrap around search. 
		 </apiDesc></apiParam><apiParam><apiItemName>wholeWord</apiItemName><apiType value="Boolean"/><apiDesc>If true, specifies a whole word search. 
		 </apiDesc></apiParam><apiParam><apiItemName>searchInFrames</apiItemName><apiType value="Boolean"/><apiDesc>If true, specifies a search in frames. 
		 </apiDesc></apiParam><apiParam><apiItemName>showDialog</apiItemName><apiType value="Boolean"/><apiDesc>If true, specifies a show Dialog. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Finds a string in a window. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:focus"><apiName>focus</apiName><shortdesc>
		 DOM Level 0 
		 
		 Sets focus on the window.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Sets focus on the window. 
		 
		 </apiDesc><example>if (clicked) { window.focus(); }
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom:Window:forward"><apiName>forward</apiName><shortdesc>
		 DOM Level 0 
		 
		 Moves the window one document forward in the history.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Moves the window one document forward in the history. 
		 
		 </apiDesc><example>function goForward() { if ( canGoForward) window.forward(); }
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom:Window:getAttention"><apiName>getAttention</apiName><shortdesc>
		 DOM Level 0 
		 
		 Attempts to get the user's attention.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Attempts to get the user's attention. How this happens varies based on OS and window manager.
		 
		 <p>Note: On Windows, the taskbar button for the window flashes, if this hasn't been disabled by the user.</p>
		 
		 <p>Note: On Linux, the behaviour varies from window manager to window manager - some flash the taskbar button, 
		 others focus the window immediately. This may be configurable as well.</p>
		 
		 <p>Note: On Macintosh, the icon in the upper right corner of the desktop flashes.</p>
		 
		 <p>Note: The function is disabled for web content. Neither Gecko nor Internet Explorer supports this feature 
		 now for web content. getAttention will still work when used from chrome in a Gecko application.</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:getAttentionWithCycleCount"><apiName>getAttentionWithCycleCount</apiName><shortdesc>
		 Undocumented
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/window.getAttentionWithCycleCount"><linktext>http://developer.mozilla.org/En/DOM/window.getAttentionWithCycleCount</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:getComputedStyle"><apiName>getComputedStyle</apiName><shortdesc>
		 
		 This method is used to get the computed style as it is defined in CSS2.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.style.css:CSSStyleDeclaration</apiOperationClassifier><apiDesc>The computed style. The CSSStyleDeclaration is read-only and contains only absolute values.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>elt</apiItemName><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>The element whose style is to be computed. This parameter cannot be null.
		 </apiDesc></apiParam><apiParam><apiItemName>pseudoElt</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The pseudo-element or null if none.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 This method is used to get the computed style as it is defined in CSS2. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:getSelection"><apiName>getSelection</apiName><shortdesc>
		 DOM Level 0 
		 
		 Returns a selection object representing the range of text selected by the user.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.objects:Selection</apiOperationClassifier><apiDesc>A Selection object. 
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Returns a selection object representing the range of text selected by the user. 
		 
		 <p>In JavaScript, when a selection object is passed to a function expecting a string (like window.alert  or 
		 document.write ), a string representation of it (i.e. the selected text) is passed instead. This makes the 
		 selection object appear like a string, when it is really an object with its own properties and methods. 
		 Specifically, the return value of calling the toString() method of the Selection object is passed. </p>
		 
		 </apiDesc><example>
		 function foo() {
		    var selObj = window.getSelection();
		    alert(selObj);
		    var selRange = selObj.getRangeAt(0);
		    // do stuff with the range
		 }
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom:Window:home"><apiName>home</apiName><shortdesc>
		 DOM Level 0 
		 
		 Returns the window to the home page.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Returns the window to the home page. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:maximize"><apiName>maximize</apiName><shortdesc>
		 Undocumented
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/window.maximize"><linktext>http://developer.mozilla.org/En/DOM/window.maximize</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:minimize"><apiName>minimize</apiName><shortdesc>
		 Undocumented
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/window.minimize"><linktext>http://developer.mozilla.org/En/DOM/window.minimize</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:moveBy"><apiName>moveBy</apiName><shortdesc>
		 DOM Level 0 
		 
		 Moves the current window by a specified amount.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>deltaX</apiItemName><apiType value="Number"/><apiDesc>Amount of pixels to move the window horizontally. 
		 </apiDesc></apiParam><apiParam><apiItemName>deltaY</apiItemName><apiType value="Number"/><apiDesc>Amount of pixels to move the window vertically. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Moves the current window by a specified amount. 
		 
		 <p>Note: You can use negative numbers as parameters for this function. This function makes 
		 a relative move while window.moveTo makes an absolute move. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 function budge() {
		    moveBy(10, -10);
		 }
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom:Window:moveTo"><apiName>moveTo</apiName><shortdesc>
		 DOM Level 0 
		 
		 Moves the window to the specified coordinates.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>The horizontal coordinate to be moved to. 
		 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>The vertical coordinate to be moved to. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Moves the window to the specified coordinates. 
		 
		 <p>Note: This function moves the window absolutely while window.moveBy moves the window relative to its current location. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 function origin() {
		   // moves to top left corner of screen
		   window.moveTo(0, 0)
		 }
		 </codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom:Window:open"><apiName>open</apiName><shortdesc>
		 DOM Level 0 
		 
		 Creates a new secondary browser window and loads the referenced resource.</shortdesc><prolog><asCustoms><exampleText>
		 <h3>Best practices</h3>
		 <p>The above code solves a few usability problems related to links opening secondary window. The purpose of the return false in 
		 the code is to cancel default action of the link: if the onclick event handler is executed, then there is no need to execute the 
		 default action of the link. But if javascript support is disabled or non-existent on the user's browser, then the onclick event 
		 handler is ignored and the browser loads the referenced resource in the target frame or window that has the name 
		 "PromoteFirefoxWindowName". If no frame nor window has the name "PromoteFirefoxWindowName", then the browser will create a new 
		 window and will name it "PromoteFirefoxWindowName".</p>
		 
		 </exampleText></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom:WindowProxy</apiOperationClassifier><apiDesc>This is the reference pointing to the newly created browser window. This reference is the return value of the 
		 open() method; it will be null if for some reasons the execution did not succeed to open the window. A global variable 
		 is best used to store such reference. You can then, for example, use it to look for properties of the new window or access 
		 its methods, assuming that your main versus secondary window relationship complies with Same origin policy security requirements.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This is the URL to be loaded in the newly opened window. It can be an HTML document on the web, 
		 it can be an image file or any type of file which is supported by the browser.
		 </apiDesc></apiParam><apiParam><apiItemName>windowName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This is the string that just names the new window. Such string can be used to be the target 
		 of links and forms when the target attribute of an &lt;a&gt; element or of a &lt;form&gt; is specified. This string parameter 
		 should not contain any blank space. strWindowName does not specify the title of the new window.
		 </apiDesc></apiParam><apiParam><apiItemName>windowFeatures</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Optional parameter. This parameter is the string which lists the requested window features 
		 (window functionalities and toolbars) of the new browser window. This string parameter must not contain any blank space. 
		 Each requested window feature must be separated by a comma inside the character string.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Creates a new secondary browser window and loads the referenced resource.
		 
		 <p>The open() method creates a new secondary browser window, similar to choosing New Window from the File menu. The strUrl 
		 parameter specifies the URL to be fetched and loaded in the new window. If strUrl is an empty string, then a new blank, empty 
		 window (URL about:blank loaded) is created with the default toolbars of the main window.</p>
		 
		 <p>Note: Note that remote URLs won't load immediately. When window.open() returns, the window always contains about:blank. The 
		 actual fetching of the URL is deferred and starts after the current script block finishes executing. The window creation and 
		 the loading of the referenced resource are done asynchronously.</p>
		 
		 <p>Note: If you use the strWindowFeatures parameter, then only list the features you want to include in the new window, that 
		 you want to be enabled or rendered; the others (except titlebar and close) will be disabled, removed.</p>
		 
		 <h3>Position and size features</h3>
		 <p>
		 	<dl>
		 		<dt>left</dt>
		 		<dd>Specifies the distance the new window is placed from the left side of the work area for applications of the user's operating system to the leftmost border (resizing handle) of the browser window. The new window can not be initially positioned offscreen.</dd>
		 		<dd> Supported in: <adobeimage alt="Internet Explorer 5+" href="images/MSIE_ico.png"/>, <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/>, <adobeimage alt="Opera 6+" href="images/Opera6.gif"/></dd>
		 	</dl>
		 	<dl>
		 		<dt>top</dt>
		 		<dd>Specifies the distance the new window is placed from the top side of the work area for applications of the user's operating system to the topmost border (resizing handle) of the browser window. The new window can not be initially positioned offscreen. </dd>
		 		<dd> Supported in: <adobeimage alt="Internet Explorer 5+" href="images/MSIE_ico.png"/>, <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/>, <adobeimage alt="Opera 6+" href="images/Opera6.gif"/></dd>
		 	</dl>
		 	<dl>
		 		<dt>height</dt>
		 		<dd>Specifies the height of the content area, viewing area of the new secondary window in pixels. The height value includes the height of the horizontal scrollbar if present. The minimum required value is 100.</dd>
		 		<dd> Supported in: <adobeimage alt="Internet Explorer 5+" href="images/MSIE_ico.png"/>, <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/>, <adobeimage alt="Opera 6+" href="images/Opera6.gif"/></dd>
		 	</dl>
		 	<dl>
		 		<dt>width</dt>
		 		<dd>Specifies the width of the content area, viewing area of the new secondary window in pixels. The width value includes the width of the vertical scrollbar if present. The width value does not include the sidebar if it is expanded. The minimum required value is 100. </dd>
		 		<dd> Supported in: <adobeimage alt="Internet Explorer 5+" href="images/MSIE_ico.png"/>, <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/>, <adobeimage alt="Opera 6+" href="images/Opera6.gif"/></dd>
		 	</dl>
		 	<dl>
		 		<dt>screenX</dt>
		 		<dd>Deprecated. Same as left but only supported by Netscape and Mozilla-based browsers. </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>screenY</dt>
		 		<dd>Deprecated. Same as top but only supported by Netscape and Mozilla-based browsers. </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>centerscreen</dt>
		 		<dd>Centers the window in relation to its parent's size and position. Requires chrome=yes. </dd>
		 	</dl>
		 	<dl>
		 		<dt>outerHeight</dt>
		 		<dd>Specifies the height of the whole browser window in pixels. This outerHeight value includes any/all present toolbar, window horizontal scrollbar (if present) and top and bottom window resizing borders. Minimal required value is 100. </dd>
		 		<dd><b>Note</b>: since titlebar is always rendered, then requesting outerHeight=100 will make the innerHeight of the browser window under the minimal 100 pixels. </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>outerWidth</dt>
		 		<dd>Specifies the width of the whole browser window in pixels. This outerWidth value includes the window vertical scrollbar (if present) and left and right window resizing borders. </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>innerHeight</dt>
		 		<dd>Same as height but only supported by Netscape and Mozilla-based browsers. Specifies the height of the content area, viewing area of the new secondary window in pixels. The <var>innerHeight</var> value includes the height of the horizontal scrollbar if present. Minimal required value is 100. </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>innerWidth</dt>
		 		<dd>Same as width but only supported by Netscape and Mozilla-based browsers. Specifies the width of the content area, viewing area of the new secondary window in pixels. The innerWidth value includes the width of the vertical scrollbar if present. The innerWidth value does not include the sidebar if it is expanded. Minimal required value is 100. </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 </p>
		 
		 <h3>Toolbar and chrome features</h3>
		 <p>
		 	<dl>
		 		<dt>menubar</dt>
		 		<dd>If this feature is set to yes, then the new secondary window renders the menubar. </dd>
		 		<dd>Supported in: <adobeimage alt="Internet Explorer 5+" href="images/MSIE_ico.png"/>, <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>toolbar</dt>
		 		<dd>If this feature is set to <var>yes</var>, then the new secondary window renders the Navigation Toolbar (Back, Forward, Reload, Stop buttons). In addition to the Navigation Toolbar, Mozilla-based browsers will render the Tab Bar if it is visible, present in the parent window. (If this feature is set to <var>no</var> all toolbars in the window will be invisible, for example extension toolbars). </dd>
		 		<dd>Supported in: <adobeimage alt="Internet Explorer 5+" href="images/MSIE_ico.png"/>, <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>location</dt>
		 		<dd>If this feature is set to <var>yes</var>, then the new secondary window renders the Location bar in Mozilla-based browsers. MSIE 5+ and Opera 7.x renders the Address Bar. </dd>
		 		<dd>Supported in: <adobeimage alt="Internet Explorer 5+" href="images/MSIE_ico.png"/>, <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/>, <adobeimage alt="Opera 6+" href="images/Opera6.gif"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>directories</dt>
		 		<dd>If this feature is set to <var>yes</var>, then the new secondary window renders the Personal Toolbar in Netscape 6.x, Netscape 7.x and Mozilla browser. It renders the Bookmarks Toolbar in Firefox 1.x and, in MSIE 5+, it renders the Links bar. In addition to the Personal Toolbar, Mozilla browser will render the Site Navigation Bar if such toolbar is visible, present in the parent window. </dd>
		 		<dd>Supported in: <adobeimage alt="Internet Explorer 5+" href="images/MSIE_ico.png"/>, <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>personalbar</dt>
		 		<dd>Same as <var>directories</var> but only supported by Netscape and Mozilla-based browsers. </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>status</dt>
		 		<dd>If this feature is set to <var>yes</var>, then the new secondary window has a status bar. Users can force the rendering of status bar in all Mozilla-based browsers, in MSIE 6 SP2 and in Opera 6+. The default preference setting in recent Mozilla-based browser releases and in Firefox 1.0 is to force the presence of the status bar. </dd>
		 		<dd> Supported in: <adobeimage alt="Internet Explorer 5+" href="images/MSIE_ico.png"/>, <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 </dl>
		 </p>
		 
		 <h3>Window functionality features</h3>
		 <p>
		 	<dl>
		 		<dt>resizable</dt>
		 		<dd>If this feature is set to <var>yes</var>, the new secondary window will be resizable. </dd>
		 		<dd><b>Note</b>: Starting with version 1.4, Mozilla-based browsers have a window resizing grippy at the right end of the status bar, this ensures that users can resize the browser window even if the web author requested this secondary window to be non-resizable. In such case, the maximize/restore icon in the window's titlebar will be disabled and the window's borders won't allow resizing but the window will still be resizable via that grippy in the status bar. </dd>
		 		<dd>Supported in: <adobeimage alt="Internet Explorer 5+" href="images/MSIE_ico.png"/>, <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>scrollbars</dt>
		 		<dd>If this feature is set to <var>yes</var>, the new secondary window will show horizontal and/or vertical scrollbar(s) if the document doesn't fit into the window's viewport. </dd>
		 		<dd>Supported in: <adobeimage alt="Internet Explorer 5+" href="images/MSIE_ico.png"/>, <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>dependent</dt>
		 		<dd>If set to <var>yes</var>, the new window is said to be dependent of its parent window. A dependent window closes when its parent window closes. A dependent window is minimized on the Windows task bar only when its parent window is minimized. On Windows platforms, a dependent window does not show on the task bar. A dependent window also stays in front of the parent window. </dd>
		 		<dd>Dependent windows are not implemented on MacOS X, this option will be ignored. </dd>
		 		<dd>The dependent feature is currently under revision to be removed.</dd>
		 		<dd>In MSIE 6, the nearest equivalent to this feature is the <codeph>showModelessDialog()</codeph> method. </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>dialog</dt>
		 		<dd>The <codeph>dialog</codeph> feature removes all icons (restore, minimize, maximize) from the window's titlebar, leaving only the close button. Mozilla 1.2+ and Netscape 7.1 will render the other menu system commands (in FF 1.0 and in NS 7.0x, the command system menu is not identified with the Firefox/NS 7.0x icon on the left end of the titlebar: that's probably a bug. You can access the command system menu with a right-click on the titlebar). Dialog windows are windows which have no minimize system command icon and no maximize/restore down system command icon on the titlebar nor in correspondent menu item in the command system menu. They are said to be dialog because their normal, usual purpose is to only notify info and to be dismissed, closed. On Mac systems, dialog windows have a different window border and they may get turned into a sheet. </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>minimizable</dt>
		 		<dd>This setting can only apply to dialog windows; "minimizable" requires <codeph>dialog=yes</codeph>. If <codeph>minimizable</codeph> is set to <var>yes</var>, the new dialog window will have a minimize system command icon in the titlebar and it will be minimizable. Any non-dialog window is always minimizable and <codeph>minimizable=no</codeph> will be ignored. </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>fullscreen</dt>
		 		<dd>Do not use. Not implemented in Mozilla. There are no plans to implement this feature in Mozilla. </dd>
		 		<dd>This feature no longer works in MSIE 6 SP2 the way it worked in MSIE 5.x. The Windows taskbar, as well as the titlebar and the status bar of the window are not visible, nor accessible when fullscreen is enabled in MSIE 5.x. </dd>
		 		<dd><codeph>fullscreen</codeph> always upsets users with large monitor screen or with dual monitor screen. Forcing <codeph>fullscreen</codeph> onto other users is also extremely unpopular and is considered an outright rude attempt to impose web author's viewing preferences onto users. </dd>
		 		<dd>Supported in: <adobeimage alt="Internet Explorer 5+" href="images/MSIE_ico.png"/> </dd><dd> <codeph>fullscreen</codeph> does not really work in MSIE 6 SP2. </dd>
		 	</dl>
		 </p>
		 
		 
		 <h3>Features requiring privileges</h3>
		 <p>
		 	The following features require the UniversalBrowserWrite privilege, otherwise they will be ignored. Chrome scripts have this privilege automatically, others have to request it from the PrivilegeManager.
		 	<dl>
		 		<dt>chrome</dt>
		 		<dd><b>Note</b>: Starting with Mozilla 1.7/Firefox 0.9, this feature requires the <codeph>UniversalBrowserWrite</codeph> privilege. Without this privilege, it is ignored. </dd>
		 		<dd>If set to <var>yes</var>, the page is loaded as window's only content, without any of the browser's interface elements. There will be no context menu defined by default and none of the standard keyboard shortcuts will work. The page is supposed to provide a user interface of its own, usually this feature is used to open XUL documents (standard dialogs like the JavaScript Console are opened this way). </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>modal</dt>
		 		<dd><b>Note</b>: Starting with Mozilla 1.2.1, this feature requires the <codeph>UniversalBrowserWrite</codeph> privilege. Without this privilege, it is ignored. </dd>
		 		<dd>If set to <var>yes</var>, the new window is said to be modal. The user cannot return to the main window until the modal window is closed. A typical modal window is created by the <xref href="http://developer.mozilla.org/en/DOM/window.alert">alert() function</xref>. </dd>
		 		<dd>The exact behavior of modal windows depends on the platform and on the Mozilla release version. </dd>
		 		<dd>Note: The MSIE 6 equivalent to this feature is the showModalDialog() method. For compatibility reasons, it is now also supported in Firefox 3.</dd>
		 		<dd>Supported in: <adobeimage alt="Internet Explorer 5+" href="images/MSIE_ico.png"/>, <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/>, <adobeimage alt="Opera 6+" href="images/Opera6.gif"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>titlebar</dt>
		 		<dd>By default, all new secondary windows have a titlebar. If set to <var>no</var>, this feature removes the titlebar from the new secondary window. </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>alwaysRaised</dt>
		 		<dd>If set to <var>yes</var>, the new window will always be displayed on top of other browser windows, regardless of whether it is active or not. </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>alwaysLowered</dt>
		 		<dd>If set to <var>yes</var>, the new created window floats below, under its own parent when the parent window is not minimized. alwaysLowered windows are often referred as pop-under windows. The alwaysLowered window can not be on top of the parent but the parent window can be minimized. In NS 6.x, the alwaysLowered window has no minimize system command icon and no restore/maximize system command. </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 	<dl>
		 		<dt>z-lock</dt>
		 		<dd>Same as <codeph>alwaysLowered</codeph>. </dd>
		 	</dl>
		 	<dl>
		 		<dt>close</dt>
		 		<dd>When set to <var>no</var>, this feature removes the system close command icon and system close menu item. It will only work for dialog windows (<codeph>dialog</codeph> feature set). <codeph>close=no</codeph> will override <codeph>minimizable=yes</codeph>. </dd>
		 		<dd>Supported in: <adobeimage alt="Netscape 6.x" href="images/Ns6.gif"/>, <adobeimage alt="Netscape 7.x" href="images/NS7_ico4.gif"/>, <adobeimage alt="Mozilla 1.x" href="images/Mozilla1_ico.png"/>, <adobeimage alt="Firefox 1.x" href="images/FF1x.png"/> </dd>
		 	</dl>
		 </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;script type="text/javascript"&gt;
		 var WindowObjectReference = null; // global variable
		 
		 function openFFPromotionPopup()	{
		 	if(WindowObjectReference == null || WindowObjectReference.closed) {
		 		//if the pointer to the window object in memory does not exist or if such pointer exists but the window was closed
		 		WindowObjectReference = window.open("http://www.spreadfirefox.com/", "PromoteFirefoxWindowName", "resizable=yes,scrollbars=yes,status=yes");
		 		// then create it. The new window will be created and will be brought on top of any other window.
		 	} else {
		 		WindowObjectReference.focus();
		 		// else the window reference must exist and the window is not closed; therefore, we can bring it back on top of any other window with the focus() method. There would be no need to re-create the window or to reload the referenced resource.
		 	};
		 }
		 &lt;/script&gt;
		 
		 (...)
		 
		 &lt;p&gt;&lt;a href="http://www.spreadfirefox.com/" target="PromoteFirefoxWindowName" onclick="openFFPromotionPopup(); return false;" title="This link will create a new window or will re-use an already opened one"&gt;Promote Firefox adoption&lt;/a&gt;&lt;/p&gt;
		 
		 </codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.evolt.org/article/Links_and_JavaScript_Living_Together_in_Harmony/17/20938/"><linktext>Links &amp; JavaScript Living Together in Harmony</linktext></link><link href="http://www.cs.tut.fi/~jkorpela/www/links.html"><linktext>Links Want To Be Links</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:openDialog"><apiName>openDialog</apiName><shortdesc>
		 DOM Level 0 
		 
		 window.openDialog is an extension to window.open.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom:WindowProxy</apiOperationClassifier><apiDesc>The opened window 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This is the URL to be loaded in the newly opened window. It can be an HTML document on the web, 
		 it can be an image file or any type of file which is supported by the browser.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This is the string that just names the new window. Such string can be used to be the target 
		 of links and forms when the target attribute of an &lt;a&gt; element or of a &lt;form&gt; is specified. This string parameter 
		 should not contain any blank space. strWindowName does not specify the title of the new window.
		 </apiDesc></apiParam><apiParam><apiItemName>features</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Optional parameter. This parameter is the string which lists the requested window features 
		 (window functionalities and toolbars) of the new browser window. This string parameter must not contain any blank space. 
		 Each requested window feature must be separated by a comma inside the character string.
		 </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>The arguments to be passed to the new window (optional). 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 window.openDialog is an extension to window.open. It behaves the same, except that it can optionally take one or more parameters past windowFeatures, and windowFeatures itself is treated a little differently. 
		 
		 <p>The optional parameters, if present, will be bundled up in a JavaScript Array object and added to the newly created window as a property named window.arguments. They may be referenced in the JavaScript of the window at 
		 any time, including during the execution of a load handler. These parameters may be used, then, to pass arguments to and from the dialog window. </p>
		 
		 <p>Note: The call to openDialog() returns immediately. If you want the call to block until the user has closed the dialog, supply modal as a 
		 windowFeatures parameter.</p>
		 
		 <p>Note: This also means the user won't be able to interact with the opener window until he closes the modal dialog. </p>
		 
		 <h3>Passing extra parameters to the dialog</h3>
		 <p>
		 To pass extra parameters into the dialog, you can simply supply them after the windowFeatures parameter: 
		 <codeblock>openDialog("http://example.tld/zzz.xul", "dlg", "", "pizza", 6.98);</codeblock>
		 The extra parameters will then get packed into a property named arguments of type Array, and this property gets added to the newly opened dialog window. 
		 </p>
		 
		 <p>
		 To access these extra parameters from within dialog code, use the following scheme: 
		 
		 <codeblock>
		 var food  = window.arguments[0];
		 var price = window.arguments[1];</codeblock>
		 
		 Note that you can access this property from within anywhere in the dialog code. 
		 </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var win = openDialog("http://example.tld/zzz.xul", "dlg", "", "pizza", 6.98);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom:Window:postMessage"><apiName>postMessage</apiName><shortdesc>
		 HTML5 | Firefox 3 
		 
		 window.postMessage is a method for safely enabling cross-origin communication.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>String data to be sent to the other window. 
		 </apiDesc></apiParam><apiParam><apiItemName>targetOrigin</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies what the origin of otherWindow must be for the event to be dispatched, either as the literal 
		 string "~~" (indicating no preference) or as a URI. If at the time the event is scheduled to be dispatched the scheme, hostname, 
		 or port of otherWindow's document does not match that provided in targetOrigin, the event will not be dispatched; only if all 
		 three match will the event be dispatched. This mechanism provides control over where messages are sent; for example, if 
		 postMessage were used to transmit a password, it would be absolutely critical that this argument be a URI whose origin is the
		 same as the intended receiver of the message containing the password, to prevent interception of the password by a malicious third party. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>HTML5 | Firefox 3</b> 
		 
		 window.postMessage is a method for safely enabling cross-origin communication.
		 
		 <p>Normally, scripts on different pages are only allowed to access each other if and only if the pages which executed them 
		 are at locations with the same protocol (usually both http), port number (80 being the default for http), and host (modulo 
		 document.domain being set by both pages to the same value). window.postMessage provides a controlled mechanism to circumvent 
		 this restriction in a way which is secure when properly used.</p>
		 
		 <p>window.postMessage, when called, causes a MessageEvent to be dispatched at the target window when any pending script that 
		 must be executed completes (e.g. remaining event handlers if window.postMessage is called from an event handler, previously-set 
		 pending timeouts, etc.). The MessageEvent has the type message, a data property which is set to the string value of the first 
		 argument provided to window.postMessage, an origin property corresponding to the origin of the main document in the window 
		 calling window.postMessage at the time window.postMessage was called, and a source property which is the window from which 
		 window.postMessage is called. (Other standard properties of events are present with their expected values.)</p>
		 
		 <p>Note: Any window may access this method on any other window, at any time, regardless of the location of the document in 
		 the window, to send it a message. Consequently, any event listener used to receive messages must first check the identity of 
		 the sender of the message, using the origin and possibly source properties. This cannot be understated: Failure to check the 
		 origin and possibly source properties enables cross-site scripting attacks.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // otherWindow: A reference to another window; such a reference may be obtained, for example, using the 
		 // contentWindow property of an iframe element, the object returned by window.open, or by named or 
		 // numeric index on window.frames. 
		 otherWindow.postMessage(message, targetOrigin);</codeblock>
		 
		 <codeblock>
		 // In window A's scripts, with A being on &lt;http://example.com:8080&gt;:
		 
		 var popup = window.open(...popup details...);
		 
		 // When the popup has fully loaded, if not blocked by a popup blocker:
		 
		 // This does nothing, assuming the window hasn't changed its location.
		 popup.postMessage("The user is 'bob' and the password is 'secret'", "http://secure.example.net");
		 
		 // This will successfully queue a message to be sent to the popup, assuming the window hasn't changed its location.
		 popup.postMessage("hello there!", "http://example.org");
		 
		 function receiveMessage(event) {
		 		// Do we trust the sender of this message?  (might be different from what we originally opened, for example).
		 		if (event.origin !== "http://example.org") return;
		 
		 		// event.source is popup
		 		// event.data is "hi there yourself!  the secret response is: rheeeeet!"
		 }
		 window.addEventListener("message", receiveMessage, false);</codeblock>
		 
		 <codeblock>
		 // In the popup's scripts, running on &lt;http://example.org&gt;:
		 
		 // Called sometime after postMessage is called
		 function receiveMessage(event) {
		 		// Do we trust the sender of this message?
		 		if (event.origin !== "http://example.com:8080") return;
		 
		 		// event.source is window.opener
		 		// event.data is "hello there!"
		 
		 		// Assuming you've verified the origin of the received message (which
		 		// you must do in any case), a convenient idiom for replying to a
		 		// message is to call postMessage on event.source and provide event.origin as the targetOrigin.
		 		event.source.postMessage("hi there yourself!  the secret response " + "is: rheeeeet!", event.origin);
		 }
		 
		 window.addEventListener("message", receiveMessage, false);</codeblock>
		 </example></apiOperationDetail><related-links><link href="dom.events.xml#MessageEvent"><linktext>dom.events.MessageEvent</linktext></link><link href="dom.core.xml#Document/domain"><linktext>dom.core.Document.domain</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:print"><apiName>print</apiName><shortdesc>
		 DOM Level 0 
		 
		 Opens the Print Dialog to print the current document.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Opens the Print Dialog to print the current document. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:prompt"><apiName>prompt</apiName><shortdesc>
		 DOM Level 0 
		 
		 Displays a dialog with a message prompting the user to input some text.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The text entered by the user, or the value null. 
		 </apiDesc></apiReturn><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Text to display to the user. 
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The default value displayed in the text input field. It is an optional parameter. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Displays a dialog with a message prompting the user to input some text. 
		 
		 <p>Note: A prompt dialog contains a single-line textbox, a Cancel button, and an OK button, and returns the 
		 (possibly empty) text the user inputted into that textbox. </p>
		 
		 <p>Note: Dialog boxes are modal windows - they prevent the user from accessing the rest of the program's interface 
		 until the dialog box is closed. For this reason, you should not overuse any function that creates a dialog box 
		 (or modal window). </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:releaseEvents"><apiName>releaseEvents</apiName><shortdesc>
		 DOM Level 0 | OBSOLETE
		 
		 Releases the window from trapping events of a specific type.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The event type to release.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0 | OBSOLETE</b>
		 
		 Releases the window from trapping events of a specific type. 
		 
		 <p>Note: that you can pass a list of events to this method using the following syntax: 
		 window.releaseEvents(Event.KEYPRESS | Event.KEYDOWN | Event.KEYUP). </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 window.releaseEvents(Event.KEYPRESS)</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="dom.xml#Window/captureEvents()"><linktext>dom.Window.captureEvents()</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 
		 Removes an event listener.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.type for which the user registered 
		 the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The EventListener to be removed.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether the EventListener being removed 
		 was registered for the capture phase or not. If a listener was 
		 registered twice, once for the capture phase and once for the target 
		 and bubbling phases, each must be removed separately. Removal of an 
		 event listener registered for the capture phase does not affect the 
		 same event listener registered for the target and bubbling phases, 
		 and vice versa.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Removes an event listener.
		 
		 <p>Calling removeEventListener with arguments 
		 which do not identify any currently registered EventListener on the 
		 EventTarget has no effect. The Event.namespaceURI for which the user 
		 registered the event listener is implied and is null.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:removeEventListenerNS"><apiName>removeEventListenerNS</apiName><shortdesc>
		 
		 Removes an event listener.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.namespaceURI associated with the event for which the user registered the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.type for which the user registered 
		 the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The EventListener to be removed.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether the EventListener being removed 
		 was registered for the capture phase or not. If a listener was 
		 registered twice, once for the capture phase and once for the target 
		 and bubbling phases, each must be removed separately. Removal of an 
		 event listener registered for the capture phase does not affect the 
		 same event listener registered for the target and bubbling phases, 
		 and vice versa.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Removes an event listener. Calling removeEventListenerNS with arguments 
		 which do not identify any currently registered EventListener on the 
		 EventTarget has no effect. 
		  
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:resizeBy"><apiName>resizeBy</apiName><shortdesc>
		 DOM Level 0 
		 
		 Resizes the current window by a certain amount.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>xDelta</apiItemName><apiType value="Number"/><apiDesc>The number of pixels to grow the window horizontally. 
		 </apiDesc></apiParam><apiParam><apiItemName>yDelta</apiItemName><apiType value="Number"/><apiDesc>The number of pixels to grow the window vertically. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Resizes the current window by a certain amount. 
		 
		 <p>Note: This method resizes the window relative to its current size. To resize the window 
		 in absolute terms, use window.resizeTo. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // shrink the window 
		 window.resizeBy(-200, -200);</codeblock>
		 </example></apiOperationDetail><related-links><link href="dom.xml#Window/resizeTo()"><linktext>dom.Window.resizeTo()</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:resizeTo"><apiName>resizeTo</apiName><shortdesc>
		 DOM Level 0 
		 
		 Dynamically resizes window.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>The new width in pixels. 
		 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>The new height in pixels. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Dynamically resizes window. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="dom.xml#Window/resizeBy()"><linktext>dom.Window.resizeBy()</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:restore"><apiName>restore</apiName><shortdesc>
		 Undocumented
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/window.restore"><linktext>http://developer.mozilla.org/En/DOM/window.restore</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:routeEvent"><apiName>routeEvent</apiName><shortdesc>
		 Undocumented
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Window.routeEvent"><linktext>http://developer.mozilla.org/En/DOM/Window.routeEvent</linktext></link><link href="dom.xml#Window/captureEvents()"><linktext>dom.Window.captureEvents()</linktext></link><link href="dom.xml#Window/releaseEvents()"><linktext>dom.Window.releaseEvents()</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:scroll"><apiName>scroll</apiName><shortdesc>
		 DOM Level 0 
		 
		 Scrolls the window to a particular place in the document.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>xCoord</apiItemName><apiType value="Number"/><apiDesc>The pixel along the horizontal axis of the document that you want displayed in the upper left. 
		 </apiDesc></apiParam><apiParam><apiItemName>yCoord</apiItemName><apiType value="Number"/><apiDesc>The pixel along the vertical axis of the document that you want displayed in the upper left. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Scrolls the window to a particular place in the document. 
		 
		 </apiDesc><example>
		 <codeblock>
		 // put the 100th vertical pixel at the top of the window 
		 &lt;button onClick="scroll(0, 100);"&gt;click to scroll down 100 pixels&lt;/button&gt;</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom:Window:scrollBy"><apiName>scrollBy</apiName><shortdesc>
		 DOM Level 0 
		 
		 Scrolls the document in the window by the given amount.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>the offset in pixels to scroll horizontally. 
		 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>the offset in pixels to scroll vertically. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Scrolls the document in the window by the given amount. 
		 
		 <p>Note: Positive co-ordinates will scroll to the right and down the page. Negative values 
		 will scroll to the left and up the page. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // scroll one page 
		 window.scrollBy(0, window.innerHeight);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom:Window:scrollByLines"><apiName>scrollByLines</apiName><shortdesc>
		 DOM Level 0 
		 
		 Scrolls the document by the given number of lines.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>lines</apiItemName><apiType value="Number"/><apiDesc>The number of lines to scroll the document by. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Scrolls the document by the given number of lines. 
		 
		 </apiDesc><example>
		 <codeblock>
		 // scroll down the document by 5 lines.
		 &lt;button onclick="scrollByLines(5);"&gt;down 5 lines&lt;/button&gt;</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom:Window:scrollByPages"><apiName>scrollByPages</apiName><shortdesc>
		 DOM Level 0 
		 
		 Scrolls the current document by the specified number of pages.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>pages</apiItemName><apiType value="Number"/><apiDesc>The number of pages to scroll. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Scrolls the current document by the specified number of pages. 
		 
		 </apiDesc><example>
		 <codeblock>
		 // scroll down the document by 1 page 
		 window.scrollByPages(1);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom:Window:scrollTo"><apiName>scrollTo</apiName><shortdesc>
		 DOM Level 0 
		 
		 Scrolls to a particular set of coordinates in the document.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>xCoord</apiItemName><apiType value="Number"/><apiDesc>The pixel along the horizontal axis of the document that you want displayed in the upper left. 
		 </apiDesc></apiParam><apiParam><apiItemName>yCoord</apiItemName><apiType value="Number"/><apiDesc>The pixel along the vertical axis of the document that you want displayed in the upper left. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Scrolls to a particular set of coordinates in the document. 
		 
		 </apiDesc><example>
		 <codeblock>window.scrollTo(0, 1000);</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom:Window:setCursor"><apiName>setCursor</apiName><shortdesc>
		 DOM Level 0 
		 
		 Changes the cursor for the current window.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>state</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>What state to set the cursor to. Valid settings can be: "wait", "auto"...
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Changes the cursor for the current window. 
		 
		 <p>Note: The cursor isn't reset until it's set back to auto.</p>
		 
		 <p>Note: This function is unavailable to web pages, which can use CSS cursor property instead.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:setInterval"><apiName>setInterval</apiName><shortdesc>
		 DOM Level 0 
		 
		 Calls a function repeatedly, with a fixed time delay between each call to that function.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>A unique interval ID
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>func</apiItemName><apiType value="Function"/><apiDesc>The function you want to be called repeatedly.
		 </apiDesc></apiParam><apiParam><apiItemName>delay</apiItemName><apiType value="Number"/><apiDesc>The number of milliseconds (thousandths of a second) that the setInterval() function should wait before each call to func.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Calls a function repeatedly, with a fixed time delay between each call to that function.
		 
		 Note: setInterval() will pass the number of milliseconds late the callback was called into 
		 the callback function, which can confuse it if it expects something else as an argument. To 
		 sidestep that problem, use an anonymous function to call your callback.
		 
		 Note: When you pass a method to setInterval() (or any other function, for that matter), it 
		 will be invoked with a wrong <codeph>this</codeph> value.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="dom.xml#Window/clearInterval()"><linktext>clearInterval()</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:setResizable"><apiName>setResizable</apiName><shortdesc>
		 Undocumented
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Undocumented
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/window.setResizable"><linktext>http://developer.mozilla.org/En/DOM/window.setResizable</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:setTimeout"><apiName>setTimeout</apiName><shortdesc>
		 DOM Level 0 
		 
		 Executes a code snippet or a function after specified delay.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>The ID of the timeout
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>func</apiItemName><apiType value="Function"/><apiDesc>The function you want to execute after delay milliseconds. 
		 </apiDesc></apiParam><apiParam><apiItemName>delay</apiItemName><apiType value="Number"/><apiDesc>The number of milliseconds (thousandths of a second) that the function call should be delayed by. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Executes a code snippet or a function after specified delay. 
		 
		 Note: Code executed by setTimeout() is run in a separate execution context to the function from 
		 which it was called. As a consequence, the <codeph>this</codeph> keyword for the called function will be set to 
		 the window (or global) object, it will not be the same as the <codeph>this</codeph> value for the function that 
		 called setTimeout.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="dom.xml#Window/clearTimeout()"><linktext>clearTimeout()</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:showModalDialog"><apiName>showModalDialog</apiName><shortdesc>
		 Non-Standard | IE4 Firefox3 
		 
		 Creates and displays a modal dialog box containing a specified HTML document.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>The returnValue property as set by the window of the document specified by uri. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The URI of the document to display in the dialog box. 
		 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiData>null</apiData><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>An optional variant that contains values that should be passed to the dialog box; these are made available in the window object's window.dialogArguments property. 
		 </apiDesc></apiParam><apiParam><apiItemName>options</apiItemName><apiType value=""/><apiData>null</apiData><apiDesc>An optional string that specifies window ornamentation for the dialog box, using one or more semicolon delimited values: 
		 <dl><dt>center: {on | off | yes | no | 1 | 0 }</dt><dd>If this argument's value is on, yes, or 1, the dialog window is centered on the desktop; otherwise it's hidden. The default value is yes. </dd></dl>
		 <dl>dialogheight: <i>height</i><dt/><dd>	Specifies the height of the dialog box; by default, the size is specified in pixels. </dd></dl>
		 <dl><dt>dialogleft: <i>left</i></dt><dd>	Specifies the horizontal position of the dialog box in relation to the upper-left corner of the desktop. </dd></dl>
		 <dl><dt>dialogwidth: <i>width</i></dt><dd>Specifies the width of the dialog box; by default, the size is specified in pixels. </dd></dl>
		 <dl><dt>dialogtop: <i>top</i></dt><dd>Specifies the vertical position of the dialog box in relation to the upper-left corner of the desktop. </dd></dl>
		 <dl><dt>resizable: {on | off | yes | no | 1 | 0 }</dt><dd>If this argument's value is on, yes, or 1, the dialog window can be resized by the user; otherwise its size is fixed. The default value is no. </dd></dl>
		 <dl><dt>scroll: {on | off | yes | no | 1 | 0 }</dt><dd>If this argument's value is on, yes, or 1, the dialog window has scroll bars; otherwise its size is fixed. The default value is no. </dd></dl>
		 <dl><dt>dialogHide:{ yes | no | 1 | 0 | on | off }</dt><dd>Specifies whether the dialog window is hidden when printing or using print preview. This feature is only available when a dialog box is opened from a trusted application. The default is no.</dd></dl>
		 <dl><dt>edge:{ sunken | raised }</dt><dd>Specifies the edge style of the dialog window. The default is raised.</dd></dl>
		 <dl><dt>status:{ yes | no | 1 | 0 | on | off }</dt><dd>Specifies whether the dialog window displays a status bar. The default is yes for untrusted dialog windows and no for trusted dialog windows.</dd></dl>
		 <dl><dt>unadorned:{ yes | no | 1 | 0 | on | off }</dt><dd>Specifies whether the dialog window displays the border window chrome. This feature is only available when a dialog box is opened from a trusted application. The default is no.</dd></dl>
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>Non-Standard | IE4 Firefox3</b> 
		 
		 Creates and displays a modal dialog box containing a specified HTML document. 
		 
		 <p>Note: Firefox does not implement the dialogHide, edge, status, or unadorned arguments.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536759(VS.85).aspx"><linktext>MSDN: showModalDialog Method</linktext></link></related-links></apiOperation><apiOperation id="dom:Window:sizeToContent"><apiName>sizeToContent</apiName><shortdesc>
		 DOM Level 0 
		 
		 Sizes the window according to its content.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Sizes the window according to its content. 
		 
		 <p>The DOM content should be loaded when this function is called, for example after the DOMContentLoaded event. </p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:stop"><apiName>stop</apiName><shortdesc>
		 DOM Level 0 
		 
		 This method stops window loading.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 This method stops window loading. 
		 
		 <p>Note: The stop() method is exactly equivalent to clicking the stop button in the browser. Because of the order 
		 in which scripts are loaded, the stop() method cannot stop the document in which it is contained from loading, but
		 it will stop the loading of large images, new windows, and other objects whose loading is deferred.</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom:Window:unescape"><apiName>unescape</apiName><shortdesc>
		 DOM Level 0 
		 
		 Decodes a value that has been encoded in hexadecimal (e.g., a cookie).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The decoded string. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>escaped</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The encoded string. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Decodes a value that has been encoded in hexadecimal (e.g., a cookie). 
		 
		 </apiDesc><example>
		 <codeblock>
		 alert(unescape("%5C")); // displays "\"</codeblock>
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom:Window:updateCommands"><apiName>updateCommands</apiName><shortdesc>
		 DOM Level 0 
		 
		 Updates the state of commands of the current chrome window (UI).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A particular string which describes what kind of update event this is (e.g. whether we are in bold right now). 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 0</b> 
		 
		 Updates the state of commands of the current chrome window (UI). 
		 
		 <p>Note: This enables or disables items (setting or clearing the "disabled" attribute on the command 
		 node as appropriate), or ensures that the command state reflects the state of the selection by setting 
		 current state information in the "state" attribute of the XUL command nodes. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage><apiPackage id="dom.xpath"><apiName>dom.xpath</apiName><apiClassifier id="dom.xpath:XPathEvaluator"><apiName>XPathEvaluator</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.xpath:XPathEvaluator:dom.xpath:XPathEvaluator:createExpression"><apiName>createExpression</apiName><shortdesc>
		 Creates a parsed XPath expression with resolved namespaces.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMXPath" version="3"/><apiSince version="DOMXPath 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_EXPRESSION_ERR: Raised if the expression is 
		 not legal according to the rules of the XPathEvaluator.
		 
		 </apiDesc><apiItemName>XPathException</apiItemName><apiOperationClassifier>dom.xpath:XPathException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the expression contains 
		 namespace prefixes  which cannot be resolved by the specified XPathNSResolver.
		 
		 </apiDesc><apiItemName>EventException</apiItemName><apiOperationClassifier>dom.events:EventException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.xpath:XPathExpression</apiOperationClassifier><apiDesc>The compiled form of the XPath expression.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>expression</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The XPath expression string to be parsed.
		 </apiDesc></apiParam><apiParam><apiItemName>resolver</apiItemName><apiOperationClassifier>dom.xpath:XPathNSResolver</apiOperationClassifier><apiDesc>The resolver permits translation of all prefixes, including the xml 
		 namespace prefix, within the XPath expression into appropriate namespace URIs. If this 
		 is specified as null, any namespace prefix within the expression will result in 
		 DOMException being thrown with the code NAMESPACE_ERR.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a parsed XPath expression with resolved namespaces. This is useful when an 
		 expression will be reused in an application since it makes it possible to compile the 
		 expression string into a more efficient internal form and preresolve all namespace 
		 prefixes which occur within the expression.
		 
		 <p><b>Note (Mozilla):</b> Prior to Firefox 3, you could call this method on documents other 
		 than the one you planned to run the XPath against. Under Firefox 3, you must call it on the 
		 same document.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.createExpression"><linktext>MDC - Document.createExpression()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathEvaluator-createExpression"><linktext>W3C - XPathEvaluator.createExpression()</linktext></link></related-links></apiOperation><apiOperation id="dom.xpath:XPathEvaluator:dom.xpath:XPathEvaluator:createNSResolver"><apiName>createNSResolver</apiName><shortdesc>
		 Adapts any DOM node to resolve namespaces so that an XPath expression can be easily evaluated 
		 relative to the context of the node where it appeared within the document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMXPath" version="3"/><apiSince version="DOMXPath 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.xpath:XPathNSResolver</apiOperationClassifier><apiDesc>XPathNSResolver which resolves namespaces with respect to the definitions in scope for a specified node.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>nodeResolver</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to be used as a context for namespace resolution.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adapts any DOM node to resolve namespaces so that an XPath expression can be easily evaluated 
		 relative to the context of the node where it appeared within the document. This adapter works 
		 like the DOM Level 3 method lookupNamespaceURI  on nodes in resolving the namespaceURI from a 
		 given prefix using the current information available in the node's hierarchy at the time 
		 lookupNamespaceURI is called. also correctly resolving the implicit xml prefix.
		 
		 <p><b>Note:</b> XPath defines QNames without prefix to match only elements in the 
		 null namespace. There is no way in XPath to pick up the default namespace as applied to a regular 
		 element reference (e.g., <codeph>p[&amp;64;id='_myid']</codeph> for <codeph>xmlns='http://www.w3.org/1999/xhtml'</codeph>). 
		 To match default elements in a non-null namespace, you either have to refer to a particular element using 
		 a form such as <codeph>~~</codeph></p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.createNSResolver"><linktext>MDC - Document.createNSResolver()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathEvaluator-createNSResolver"><linktext>W3C - XPathEvaluator.createNSResolver()</linktext></link></related-links></apiOperation><apiOperation id="dom.xpath:XPathEvaluator:dom.xpath:XPathEvaluator:evaluate"><apiName>evaluate</apiName><shortdesc>
		 Evaluates an XPath expression string and returns a result of the specified type if possible.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMXPath" version="3"/><apiSince version="DOMXPath 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_EXPRESSION_ERR: Raised if the expression is not legal according to the rules of the XPathEvaluator.
		 
		 </apiDesc><apiItemName>XPathException</apiItemName><apiOperationClassifier>dom.xpath:XPathException</apiOperationClassifier></apiException><apiException><apiDesc>TYPE_ERR: Raised if the result cannot be converted to return the specified type.
		 
		 </apiDesc><apiItemName>XPathException</apiItemName><apiOperationClassifier>dom.xpath:XPathException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the expression contains namespace prefixes  which cannot be resolved by the specified XPathNSResolver.
		 
		 </apiDesc><apiItemName>EventException</apiItemName><apiOperationClassifier>dom.events:EventException</apiOperationClassifier></apiException><apiException><apiDesc>WRONG_DOCUMENT_ERR: The Node is from a document that is not supported by the XPathEvaluator that created this XPathExpression.
		 
		 </apiDesc><apiItemName>EventException</apiItemName><apiOperationClassifier>dom.events:EventException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: The Node is not a type permitted as an XPath context node or the request type is not permitted by this XPathExpression.
		 
		 </apiDesc><apiItemName>EventException</apiItemName><apiOperationClassifier>dom.events:EventException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core.types:DOMObject</apiOperationClassifier><apiDesc>The result of the evaluation of the XPath expression. For XPath 1.0 results, this object 
		 will be of type XPathResult.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>expression</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The XPath expression string to be parsed and evaluated.
		 </apiDesc></apiParam><apiParam><apiItemName>contextNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The context is context node for the evaluation of this XPath expression. 
		 If the XPathEvaluator was obtained by casting the Document then this must be owned by the same 
		 document and must be a Document, Element, Attribute, Text, CDATASection, Comment, 
		 ProcessingInstruction, or XPathNamespace  node. If the context node is a Text or a CDATASection, 
		 then the context is interpreted as the whole logical text node as seen by XPath, unless the node 
		 is empty in which case it may not serve as the XPath context.
		 </apiDesc></apiParam><apiParam><apiItemName>resolver</apiItemName><apiOperationClassifier>dom.xpath:XPathNSResolver</apiOperationClassifier><apiDesc>The resolver permits translation of all prefixes, including the xml namespace 
		 prefix, within the XPath expression into appropriate namespace URIs. If this is specified as null, 
		 any namespace prefix within the expression will result in DOMException being thrown with the 
		 code NAMESPACE_ERR.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="Number"/><apiDesc>If a specific type is specified, then the result will be returned as the 
		 corresponding type. For XPath 1.0 results, this must be one of the codes of the XPathResult interface.
		 </apiDesc></apiParam><apiParam><apiItemName>result</apiItemName><apiOperationClassifier>dom.core.types:DOMObject</apiOperationClassifier><apiDesc>The result specifies a specific result object which may be reused and returned by 
		 this method. If this is specified as nullor the implementation does not reuse the specified result, 
		 a new result object will be constructed and returned. For XPath 1.0 results, this object will be 
		 of type XPathResult.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Evaluates an XPath expression string and returns a result of the specified type if possible.
		 
		 </apiDesc><example>
		 <codeblock>
		 var headings = document.evaluate("//h2", document, null, XPathResult.ANY_TYPE, null); 
		 /~~ Search the document for all h2 elements.  
		  ~~ The result will likely be an unordered node iterator. ~~/
		 var thisHeading = headings.iterateNext(); 
		 var alertText = "Level 2 headings in this document are:\n";
		 while (thisHeading) {
		 	alertText += thisHeading.textContent + "\n";
		 	thisHeading = headings.iterateNext();
		 }
		 alert(alertText); // Alerts the text of all h2 elements</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.evaluate"><linktext>MDC - Document.evaluate()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathEvaluator-evaluate"><linktext>W3C - XPathEvaluator.evaluate()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.xpath:XPathResult"><apiName>XPathResult</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.xpath:XPathResult:iterateNext"><apiName>iterateNext</apiName><shortdesc>
		 Iterates and returns the next node from the node set or nullif there are no more nodes.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMXPath" version="3"/><apiSince version="DOMXPath 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>TYPE_ERR: Raised if resultType is not UNORDERED_NODE_ITERATOR_TYPE or ORDERED_NODE_ITERATOR_TYPE.
		 
		 </apiDesc><apiItemName>XPathException</apiItemName><apiOperationClassifier>dom.xpath:XPathException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_STATE_ERR: The document has been mutated since the result was returned.
		 
		 </apiDesc><apiItemName>EventException</apiItemName><apiOperationClassifier>dom.events:EventException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Returns the next node.
		 
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Iterates and returns the next node from the node set or nullif there are no more nodes. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathResult-iterateNext"><linktext>W3C - XPathResult.iterateNext()</linktext></link></related-links></apiOperation><apiOperation id="dom.xpath:XPathResult:snapshotItem"><apiName>snapshotItem</apiName><shortdesc>
		 Returns the indexth item in the snapshot collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMXPath" version="3"/><apiSince version="DOMXPath 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>TYPE_ERR: Raised if resultType is not UNORDERED_NODE_SNAPSHOT_TYPE or ORDERED_NODE_SNAPSHOT_TYPE.
		 
		 </apiDesc><apiItemName>XPathException</apiItemName><apiOperationClassifier>dom.xpath:XPathException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node at the indexth position in the NodeList, or null if that is not a valid index.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into the snapshot collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the indexth item in the snapshot collection. If index is greater than or equal to the number of nodes in the list, 
		 this method returns null. Unlike the iterator result, the snapshot does not become invalid, but may not correspond to the 
		 current document if it is mutated.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathResult-snapshotItem"><linktext>W3C - XPathResult.snapshotItem()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.xpath:XPathException"><apiName>XPathException</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.xpath:XPathExpression"><apiName>XPathExpression</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.xpath:XPathExpression:dom.xpath:XPathExpression:evaluate"><apiName>evaluate</apiName><shortdesc>
		 Evaluates this XPath expression and returns a result.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMXPath" version="3"/><apiSince version="DOMXPath 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>TYPE_ERR: Raised if the result cannot be converted to return the specified type.
		 
		 </apiDesc><apiItemName>XPathException</apiItemName><apiOperationClassifier>dom.xpath:XPathException</apiOperationClassifier></apiException><apiException><apiDesc>WRONG_DOCUMENT_ERR: The Node is from a document that is not supported by the XPathEvaluator that created this XPathExpression.
		 
		 </apiDesc><apiItemName>EventException</apiItemName><apiOperationClassifier>dom.events:EventException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: The Node is not a type permitted as an XPath context node or the request type is not permitted by this XPathExpression.
		 
		 </apiDesc><apiItemName>EventException</apiItemName><apiOperationClassifier>dom.events:EventException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core.types:DOMObject</apiOperationClassifier><apiDesc>The result of the evaluation of the XPath expression. For XPath 1.0 results, this object will 
		 be of type XPathResult.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>expression</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The context is context node for the evaluation of this XPath expression. 
		 If the XPathEvaluator was obtained by casting the Document then this must be owned by the same 
		 document and must be a Document, Element, Attribute, Text, CDATASection, Comment, ProcessingInstruction, 
		 or XPathNamespace node. If the context node is a Text or a CDATASection, then the context is 
		 interpreted as the whole logical text node as seen by XPath, unless the node is empty in which 
		 case it may not serve as the XPath context.
		 </apiDesc></apiParam><apiParam><apiItemName>contextNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>If a specific type is specified, then the result will be coerced to return the specified 
		 type relying on XPath conversions and fail if the desired coercion is not possible. This must be one of 
		 the type codes of XPathResult.
		 </apiDesc></apiParam><apiParam><apiItemName>resolver</apiItemName><apiOperationClassifier>dom.xpath:XPathNSResolver</apiOperationClassifier><apiDesc>The result specifies a specific result object which may be reused and returned by this 
		 method. If this is specified as nullor the implementation does not reuse the specified result, a new 
		 result object will be constructed and returned. For XPath 1.0 results, this object will be of type XPathResult.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>result</apiItemName><apiOperationClassifier>dom.core.types:DOMObject</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 Evaluates this XPath expression and returns a result.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathExpression-evaluate"><linktext>W3C - XPathExpression.evaluate()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.xpath:XPathNSResolver"><apiName>XPathNSResolver</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="dom.xpath:XPathNSResolver:dom.xpath:XPathNSResolver:lookupNamespaceURI"><apiName>lookupNamespaceURI</apiName><shortdesc>
		 Look up the namespace URI associated to the given namespace prefix.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMXPath" version="3"/><apiSince version="DOMXPath 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Returns the associated namespace URI or null if none is found.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>prefix</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The prefix to look for.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Look up the namespace URI associated to the given namespace prefix. The XPath evaluator must 
		 never call this with a null or empty argument, because the result of doing this is undefined.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathNSResolver-lookupNamespaceURI"><linktext>W3C - XPathNSResolver.lookupNamespaceURI()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.xpath:XPathNamespace"><apiName>XPathNamespace</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="dom.xpath:XPathExceptionCode"><apiName>XPathExceptionCode</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="elementtraversal"><apiName>elementtraversal</apiName><apiClassifier id="elementtraversal:ElementTraversal"><apiName>ElementTraversal</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="gecko.dom.objects"><apiName>gecko.dom.objects</apiName><apiClassifier id="gecko.dom.objects:Sidebar"><apiName>Sidebar</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="gecko.dom.objects:Sidebar:addMicrosummaryGenerator"><apiName>addMicrosummaryGenerator</apiName><shortdesc>
		 Firefox 2+
		 
		 Installs a microsummary generator.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>generatorURL</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>Firefox 2+</b>
		 
		 Installs a microsummary generator.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gecko.dom.objects:Sidebar:addPanel"><apiName>addPanel</apiName><shortdesc>
		 Note: the third empty parameter is required! 
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>title</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>contentURL</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>customizeURL</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Note: the third empty parameter is required! 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gecko.dom.objects:Sidebar:addPersistentPanel"><apiName>addPersistentPanel</apiName><shortdesc>
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>title</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>contentURL</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>customizeURL</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gecko.dom.objects:Sidebar:addSearchEngine"><apiName>addSearchEngine</apiName><shortdesc>
		 Installs a search engine.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>engineURL</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>iconURL</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>suggestedTitle</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>suggestedCategory</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Installs a search engine.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage><apiPackage id="gecko.events"><apiName>gecko.events</apiName><apiClassifier id="gecko.events:nsIDOMEventTarget"><apiName>nsIDOMEventTarget</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="gecko.events:MouseEvent"><apiName>MouseEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:MouseEvent</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="gecko"><apiName>gecko</apiName><apiClassifier id="gecko:nsIBoxObject"><apiName>nsIBoxObject</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="gecko:nsIURI"><apiName>nsIURI</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="gecko:nsIURI:clone"><apiName>clone</apiName><shortdesc>
		 Clones the URI, returning a new nsIURI object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>gecko:nsIURI</apiOperationClassifier><apiDesc>An nsIURI object that represents the same URI as the current 
		 nsIURI.
		 </apiDesc></apiReturn></apiOperationDef><apiDesc>
		 Clones the URI, returning a new nsIURI object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gecko:nsIURI:equals"><apiName>equals</apiName><shortdesc>
		 Compares the current URI with another URI, returning true if the two 
		 represent the same location.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the two URIs represent the same location
		 </apiDesc></apiReturn><apiParam><apiItemName>other</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Another nsIURI to compare to. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Compares the current URI with another URI, returning true if the two 
		 represent the same location.
		 
		 Note: This is more than a string comparison, as two different URI 
		 strings can represent the same location.  For example, comparing 
		 "http://foo.com:80/" and "http://foo.com/" will return true.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gecko:nsIURI:resolve"><apiName>resolve</apiName><shortdesc>
		 Resolves a relative URI string, using this URI as the base.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The resolved absolute URI string.
		 </apiDesc></apiReturn><apiParam><apiItemName>relativePath</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The relative path to resolve. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Resolves a relative URI string, using this URI as the base.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="gecko:nsIURI:schemeIs"><apiName>schemeIs</apiName><shortdesc>
		 Quickly reports whether the nsIURI represents a URI with the specified 
		 scheme.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>If the URI is for the specified scheme
		 </apiDesc></apiReturn><apiParam><apiItemName>scheme</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string representing the scheme to compare to. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Quickly reports whether the nsIURI represents a URI with the specified 
		 scheme.  This comparison is case-insensitive.
		 
		 Note: This is an optimization, allowing you to check the scheme of the 
		 URI without having to get the scheme and do the comparison yourself; 
		 this saves memory allocations.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="gecko:nsIDOMOfflineResourceList"><apiName>nsIDOMOfflineResourceList</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="gecko:nsIPrincipal"><apiName>nsIPrincipal</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="gecko:nsIXPCComponents"><apiName>nsIXPCComponents</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="selectors"><apiName>selectors</apiName><apiClassifier id="selectors:NodeSelector"><apiName>NodeSelector</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="selectors:NodeSelector:selectors:NodeSelector:querySelector"><apiName>querySelector</apiName><shortdesc>
		 Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Selectors" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0b_unknown"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NAMESPACE_ERR: May be raised if the group of selectors include namespace prefixes that need to be resolved.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>The first matching Element node within the node’s subtree. If there is no such node, returns null. 
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>selectors</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One or more selectors
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;Selectors API Example&lt;/title&gt;
		 	&lt;/head&gt;
		 	&lt;body&gt;
		 
		 		&lt;div id="foo"&gt;
		 			&lt;p class="warning"&gt;This is a sample warning&lt;/p&gt;
		 			&lt;p class="error"&gt;This is a sample error&lt;/p&gt;
		 		&lt;/div&gt;
		 		&lt;div id="bar"&gt;
		 			&lt;p&gt;...&lt;/p&gt;
		 		&lt;/div&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 x would contain the first element in the document with an ID of either foo or bar (or both). In the sample document above, it would select the div element with the ID of foo because it is first in document order.
		 <codeblock>var x = document.querySelector("#foo, #bar");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/cc288169%28VS.85%29.aspx"><linktext>MSDN - querySelector Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Document.querySelector"><linktext>MDC - Document.querySelector()</linktext></link><link href="http://www.w3.org/TR/selectors-api/#nodeselector"><linktext>W3C - NodeSelector.querySelector()</linktext></link></related-links></apiOperation><apiOperation id="selectors:NodeSelector:selectors:NodeSelector:querySelectorAll"><apiName>querySelectorAll</apiName><shortdesc>
		 Returns a list of all elements descended from the element on which it is invoked that match the specified group of selectors.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Selectors" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0b"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NAMESPACE_ERR: May be raised if the group of selectors include namespace prefixes that need to be resolved.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier><apiDesc>A NodeList containing all of the matching Element nodes within the node’s subtree, in document order. If there are no such nodes, returns an empty NodeList.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>selectors</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One or more selectors
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a list of all elements descended from the element on which it is invoked that match the specified group of selectors.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;Selectors API Example&lt;/title&gt;
		 	&lt;/head&gt;
		 	&lt;body&gt;
		 
		 		&lt;div id="foo"&gt;
		 			&lt;p class="warning"&gt;This is a sample warning&lt;/p&gt;
		 			&lt;p class="error"&gt;This is a sample error&lt;/p&gt;
		 		&lt;/div&gt;
		 		&lt;div id="bar"&gt;
		 			&lt;p&gt;...&lt;/p&gt;
		 		&lt;/div&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 The following example would select all p elements in the document that have a class of either "error" or "warning".
		 <codeblock>var alerts = document.querySelectorAll("p.warning, p.error");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/cc304115%28VS.85%29.aspx"><linktext>MSDN - querySelectorAll Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Document.querySelectorAll"><linktext>MDC - Document.querySelectorAll()</linktext></link><link href="http://www.w3.org/TR/selectors-api/#nodeselector"><linktext>W3C - NodeSelector.querySelectorAll()</linktext></link><link href="http://www.quirksmode.org/dom/w3c_core.html#gettingelements"><linktext>Quirksmode: Getting elements</linktext></link></related-links></apiOperation></apiClassifier></apiPackage><apiPackage id="webstorage"><apiName>webstorage</apiName><apiClassifier id="webstorage:Storage"><apiName>Storage</apiName><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiOperation id="webstorage:Storage:webstorage:Storage:clear"><apiName>clear</apiName><shortdesc>
		 Empties the object of all key/value pairs, if there are any.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="WebStorage" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5b4_incomplete"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0_no"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0b_no"/><apiSince version="HTML 5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Empties the object of all key/value pairs, if there are any.
		 
		 </apiDesc><example>
		 <codeblock>&lt;button onclick="localStorage.clear()"&gt;Clear Stored Values&lt;/button&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/cc288131%28VS.85%29.aspx"><linktext>MSDN: clear Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/Storage"><linktext>MDC - DOM Storage</linktext></link><link href="http://www.w3.org/TR/webstorage/#the-storage-interface"><linktext>W3C - Web Storage: clear Method</linktext></link><link href="http://quirksmode.org/dom/html5.html#localstorage"><linktext>Quirksmode: Local storage and session storage</linktext></link><link href="webstorage.xml#Storage/removeItem()"><linktext>removeItem()</linktext></link></related-links></apiOperation><apiOperation id="webstorage:Storage:webstorage:Storage:getItem"><apiName>getItem</apiName><shortdesc>
		 NameGetter
		 
		 The getItem(key) method must return the current value associated with the given key.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="WebStorage" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5b4"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0_no"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0b_no"/><apiSince version="HTML 5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>key</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 NameGetter
		 
		 The getItem(key) method must return the current value associated with the given key.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/cc197039%28VS.85%29.aspx"><linktext>MSDN: getItem Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/Storage"><linktext>MDC - DOM Storage</linktext></link><link href="http://www.w3.org/TR/webstorage/#the-storage-interface"><linktext>W3C - Web Storage: getItem Method</linktext></link><link href="http://quirksmode.org/dom/html5.html#localstorage"><linktext>Quirksmode: Local storage and session storage</linktext></link><link href="webstorage.xml#Storage/setItem()"><linktext>setItem()</linktext></link></related-links></apiOperation><apiOperation id="webstorage:Storage:webstorage:Storage:key"><apiName>key</apiName><shortdesc>
		 IndexGetter
		 
		 Returns the value at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="WebStorage" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5b4"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0_no"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0b_no"/><apiSince version="HTML 5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: May be raised if <codeph>index</codeph> is greater than or 
		 equal to the number of key/value pairs in the object. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
		 IndexGetter
		 
		 Returns the value at the specified index.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/cc197042%28VS.85%29.aspx"><linktext>MSDN: key Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/Storage"><linktext>MDC - DOM Storage</linktext></link><link href="http://www.w3.org/TR/webstorage/#the-storage-interface"><linktext>W3C - Web Storage: key Method</linktext></link><link href="http://quirksmode.org/dom/html5.html#localstorage"><linktext>Quirksmode: Local storage and session storage</linktext></link><link href="webstorage.xml#Storage/getItem()"><linktext>getItem()</linktext></link></related-links></apiOperation><apiOperation id="webstorage:Storage:webstorage:Storage:removeItem"><apiName>removeItem</apiName><shortdesc>
		 NameDeleter
		 
		 The removeItem(key) method must cause the key/value pair with the given 
		 key to be removed from the list associated with the object, if it exists.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="WebStorage" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5b4"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0_no"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0b_no"/><apiSince version="HTML 5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the key, or the empty string.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 NameDeleter
		 
		 The removeItem(key) method must cause the key/value pair with the given 
		 key to be removed from the list associated with the object, if it exists.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/cc197047%28VS.85%29.aspx"><linktext>MSDN: removeItem Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/Storage"><linktext>MDC - DOM Storage</linktext></link><link href="http://www.w3.org/TR/webstorage/#the-storage-interface"><linktext>W3C - Web Storage: removeItem Method</linktext></link><link href="http://quirksmode.org/dom/html5.html#localstorage"><linktext>Quirksmode: Local storage and session storage</linktext></link><link href="webstorage.xml#Storage/clear()"><linktext>clear()</linktext></link></related-links></apiOperation><apiOperation id="webstorage:Storage:webstorage:Storage:setItem"><apiName>setItem</apiName><shortdesc>
		 NameSetter
		 
		 Adds the data based on the key name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="WebStorage" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5b4"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0_no"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0b_no"/><apiSince version="HTML 5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>QUOTA_EXCEEDED_ERR: May be raised if setting fails. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiParam><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 NameSetter
		 
		 Adds the data based on the key name. If the key already exists, that data is updated
		 with the new data.
		 
		 </apiDesc><example>
		 <codeblock>
		 sessionStorage.setItem('myKey', '...');
		 sessionStorage['myKey'] = '...'; 
		 sessionStorage.myKey = '...';</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/cc197050%28VS.85%29.aspx"><linktext>MSDN: setItem Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/Storage"><linktext>MDC - DOM Storage</linktext></link><link href="http://www.w3.org/TR/webstorage/#the-storage-interface"><linktext>W3C - Web Storage: setItem Method</linktext></link><link href="http://quirksmode.org/dom/html5.html#localstorage"><linktext>Quirksmode: Local storage and session storage</linktext></link><link href="webstorage.xml#Storage/getItem()"><linktext>getItem()</linktext></link><link href="webstorage.xml#Storage/remainingSpace"><linktext>remainingSpace</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="webstorage:StorageEvent"><apiName>StorageEvent</apiName><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.events:Event</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="webstorage:StorageEvent:initStorageEvent"><apiName>initStorageEvent</apiName><shortdesc>
		 Initializes attributes of an Event created through the 
		 DocumentEvent.createEvent method.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="WebStorage" version="0"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Event.type, the local name of the 
		 event type.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.bubbles. This parameter overrides 
		 the intrinsic bubbling behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Specifies Event.cancelable. This parameter 
		 overrides the intrinsic cancelable behavior of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>keyArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The key being changed.
		 </apiDesc></apiParam><apiParam><apiItemName>oldValueArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The old value of the key being changed.
		 </apiDesc></apiParam><apiParam><apiItemName>newValueArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The new value of the key being changed.
		 </apiDesc></apiParam><apiParam><apiItemName>urlArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The address of the document whose key changed.
		 </apiDesc></apiParam><apiParam><apiItemName>sourceArg</apiItemName><apiOperationClassifier>dom:WindowProxy</apiOperationClassifier><apiDesc>The WindowProxy object of the browsing context of the document whose key changed.
		 </apiDesc></apiParam><apiParam><apiItemName>storageAreaArg</apiItemName><apiOperationClassifier>webstorage:Storage</apiOperationClassifier><apiDesc>The Storage object that was affected.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of an Event created through the 
		 DocumentEvent.createEvent method.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/webstorage/#the-storage-event"><linktext>W3C - Web Storage: initStorageEvent Method</linktext></link></related-links></apiOperation><apiOperation id="webstorage:StorageEvent:initStorageEventNS"><apiName>initStorageEventNS</apiName><shortdesc>
		 Initializes attributes of a StorageEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="WebStorage" version="0"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Refer to the Event.initEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>typeArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Refer to the Event.initEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>canBubbleArg</apiItemName><apiType value="Boolean"/><apiDesc>Refer to the Event.initEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelableArg</apiItemName><apiType value="Boolean"/><apiDesc>Refer to the Event.initEventNS() method for a description of this parameter.
		 </apiDesc></apiParam><apiParam><apiItemName>keyArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies StorageEvent.key.
		 </apiDesc></apiParam><apiParam><apiItemName>oldValueArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies StorageEvent.oldValue.
		 </apiDesc></apiParam><apiParam><apiItemName>newValueArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies StorageEvent.newValue.
		 </apiDesc></apiParam><apiParam><apiItemName>urlArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies StorageEvent.url.
		 </apiDesc></apiParam><apiParam><apiItemName>sourceArg</apiItemName><apiOperationClassifier>dom:WindowProxy</apiOperationClassifier><apiDesc>Specifies StorageEvent.source.
		 </apiDesc></apiParam><apiParam><apiItemName>storageAreaArg</apiItemName><apiOperationClassifier>webstorage:Storage</apiOperationClassifier><apiDesc>Specifies StorageEvent.storageArea.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Initializes attributes of a StorageEvent object. This method has 
		 the same behavior as Event.initEventNS(). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/webstorage/#the-storage-event"><linktext>W3C - Web Storage: initStorageEvent Method</linktext></link><link href="dom.events.xml#Event/initEventNS()"><linktext>dom.events.Event.initEventNS()</linktext></link></related-links></apiOperation></apiClassifier></apiPackage></allClasses>