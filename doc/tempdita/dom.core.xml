<apiPackage id="dom.core"><apiName>dom.core</apiName><apiDetail/><apiClassifier id="dom.core:CharacterData"><apiName>CharacterData</apiName><shortdesc>
	 Provides text manipulation methods that are used by several objects.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Provides text manipulation methods that are used by several objects.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms767515%28VS.85%29.aspx"><linktext>MSDN - IXMLDOMCharacterData</linktext></link><link href="http://developer.mozilla.org/En/DOM/CharacterData"><linktext>MDC - CharacterData</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-FF21A306"><linktext>W3C - CharacterData</linktext></link></related-links><adobeApiEvent id="dom.core:CharacterData_DOMCharacterDataModified_DOMCharacterDataModified"><apiName>DOMCharacterDataModified</apiName><shortdesc>
	 Occurs after CharacterData.data or ProcessingInstruction.data have been
	 modified but the node itself has not been inserted or deleted.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMCharacterDataModified</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Occurs after CharacterData.data or ProcessingInstruction.data have been
	 modified but the node itself has not been inserted or deleted. The target 
	 node of this event is the CharacterData node or the 
	 ProcessingInstruction node.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:CharacterData_DOMNodeInsertedIntoDocument_DOMNodeInsertedIntoDocument"><apiName>DOMNodeInsertedIntoDocument</apiName><shortdesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeInsertedIntoDocument</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 after the insertion has taken place. The target node of this event is the 
	 node being inserted. If the node is being directly inserted, the event type 
	 DOMNodeInserted occurs before this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:CharacterData_DOMNodeRemovedFromDocument_DOMNodeRemovedFromDocument"><apiName>DOMNodeRemovedFromDocument</apiName><shortdesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeRemovedFromDocument</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 before the removal takes place. The target node of this event type is 
	 the node being removed. If the node is being directly removed, the event 
	 type DOMNodeRemoved occurs before this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:CharacterData_DOMNodeRemoved_DOMNodeRemoved"><apiName>DOMNodeRemoved</apiName><shortdesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeRemoved</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement. This event is dispatched before the 
	 removal takes place. The target node of this event is the node 
	 being removed.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:CharacterData_DOMNodeInserted_DOMNodeInserted"><apiName>DOMNodeInserted</apiName><shortdesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeInserted</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element. This event is dispatched after 
	 the insertion has taken place. The target node of this event is the 
	 node being inserted.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="dom.core:CharacterData:appendData"><apiName>appendData</apiName><shortdesc>
		 Append the string to the end of the character data of the node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The DOMString to append.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Append the string to the end of the character data of the node. 
		 Upon success, data provides access to the concatenation of data and 
		 the DOMString specified.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms756985%28VS.85%29.aspx"><linktext>MSDN - appendData Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/CharacterData.appendData"><linktext>MDC - CharacterData.appendData()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-32791A2F"><linktext>W3C - CharacterData.appendData()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:CharacterData:deleteData"><apiName>deleteData</apiName><shortdesc>
		 Remove a range of 16-bit units  from the node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified 
		 offset is negative or greater than the number of 16-bit units in data,
		 or if the specified count is negative.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>The offset from which to start removing.
		 </apiDesc></apiParam><apiParam><apiItemName>count</apiItemName><apiType value="Number"/><apiDesc>The number of 16-bit units to delete. If the sum of offset 
		 and count exceeds length then all 16-bit units from offset  to the end of 
		 the data are deleted.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove a range of 16-bit units  from the node. Upon success, data and 
		 length reflect the change.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms754600%28VS.85%29.aspx"><linktext>MSDN - deleteData Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/CharacterData.deleteData"><linktext>MDC - CharacterData.deleteData()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-7C603781"><linktext>W3C - CharacterData.deleteData()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:CharacterData:insertData"><apiName>insertData</apiName><shortdesc>
		 Insert a string at the specified 16-bit unit offset.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified 
		 offset is negative or greater than the number of 16-bit units in data.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>The character offset at which to insert.
		 </apiDesc></apiParam><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The DOMString to insert.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Insert a string at the specified 16-bit unit offset.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms762794%28VS.85%29.aspx"><linktext>MSDN - insertData Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/CharacterData.insertData"><linktext>MDC - CharacterData.insertData()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-3EDB695F"><linktext>W3C - CharacterData.insertData()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:CharacterData:replaceData"><apiName>replaceData</apiName><shortdesc>
		 Replace the characters starting at the specified 16-bit unit offset 
		 with the specified string.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified 
		 offset is negative or greater than the number of 16-bit units in data, 
		 or if the specified count is negative.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>The offset from which to start replacing.
		 </apiDesc></apiParam><apiParam><apiItemName>count</apiItemName><apiType value="Number"/><apiDesc>The number of 16-bit units to replace. If the sum of 
		 offset and count exceeds length, then all 16-bit units to the end of 
		 the data are replaced; (i.e., the effect is the same as a remove 
		 method call with the same range, followed by an append method invocation).
		 </apiDesc></apiParam><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The DOMString with which the range must be replaced.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replace the characters starting at the specified 16-bit unit offset 
		 with the specified string.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms766416%28VS.85%29.aspx"><linktext>MSDN - replaceData Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/CharacterData.replaceData"><linktext>MDC - CharacterData.replaceData()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-E5CBA7FB"><linktext>W3C - CharacterData.replaceData()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:CharacterData:substringData"><apiName>substringData</apiName><shortdesc>
		 Extracts a range of data from the node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR: Raised if the specified 
		 offset is negative or greater than the number of 16-bit units in data, 
		 or if the specified count is negative.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>DOMSTRING_SIZE_ERR: Raised if the specified 
		 range of text does not fit into a DOMString.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The specified substring. If the sum of offset and count exceeds 
		 the length, then all 16-bit units to the end of the data are returned.
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>Start offset of substring to extract.
		 </apiDesc></apiParam><apiParam><apiItemName>count</apiItemName><apiType value="Number"/><apiDesc>The number of 16-bit units to extract.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Extracts a range of data from the node.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms755744%28VS.85%29.aspx"><linktext>MSDN - substringData Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/CharacterData.substringData"><linktext>MDC - CharacterData.substringData()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-6531BCCF"><linktext>W3C - CharacterData.substringData()</linktext></link></related-links></apiOperation><apiValue id="dom.core:CharacterData:data:get"><apiName>data</apiName><shortdesc>
		 The character data of the node that implements this interface.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised when 
		 the node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>DOMSTRING_SIZE_ERR: Raised when it would 
		 return more characters than fit in a DOMString variable on the 
		 implementation platform.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 The character data of the node that implements this interface.
		 
		 <p>The DOM implementation may not put arbitrary limits on the amount of data 
		 that may be stored in a CharacterData node. However, implementation 
		 limits may mean that the entirety of a node's data may not fit into 
		 a single DOMString. In such cases, the user may call substringData 
		 to retrieve the data in appropriately sized pieces.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms765506%28VS.85%29.aspx"><linktext>MSDN - data Property (IXMLDOMCharacterData)</linktext></link><link href="http://developer.mozilla.org/En/DOM/CharacterData.data"><linktext>MDC - CharacterData.data</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-72AB8359"><linktext>W3C - CharacterData.data</linktext></link></related-links></apiValue><apiValue id="dom.core:CharacterData:length:get"><apiName>length</apiName><shortdesc>
		 The number of 16-bit units that are available through data and the 
		 substringData method below.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The number of 16-bit units that are available through data and the 
		 substringData method below. This may have the value zero, i.e., 
		 CharacterData nodes may be empty.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms760351%28VS.85%29.aspx"><linktext>MSDN - length Property (IXMLDOMCharacterData)</linktext></link><link href="http://developer.mozilla.org/En/DOM/CharacterData.length"><linktext>MDC - CharacterData.length</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-7D61178C"><linktext>W3C - CharacterData.length</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:DOMConfiguration"><apiName>DOMConfiguration</apiName><shortdesc>
	 Used by Document.normalizeDocument(), and DOM Level 3 DOMParser() and DOMSerializer.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 Used by Document.normalizeDocument(), and DOM Level 3 DOMParser() and DOMSerializer.
	 
	 <p>Using the configuration, it is possible to change Document.normalizeDocument() 
	 behavior, such as replacing the CDATASection nodes with Text nodes 
	 or specifying the type of the schema that must be used when the 
	 validation of the Document is requested. DOMConfiguration objects are 
	 also used in [DOM Level 3 Load and Save] in the DOMParser and 
	 DOMSerializer interfaces.</p>
	 
	 <p><b>Note (Mozilla):</b> This is not implemented in Mozilla.</p>
	 
	 <p>The following list of parameters defined in the DOM: 
	 <adobetable class="innertable">
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 <tgroup cols="3"><thead><row><entry>Parameter</entry><entry>Value</entry><entry>Description</entry></row></thead><tbody><row>
	 		<entry>"canonical-form"</entry><entry><codeph>true</codeph> [optional]</entry><entry>Canonicalize the document according to the rules 
	 specified in [Canonical XML], such as removing the DocumentType node (if any) from the tree, or removing 
	 superfluous namespace declarations from each element. Note that this is limited to what can be represented 
	 in the DOM; in particular, there is no way to specify the order of the attributes in the DOM. In addition, 
	 Setting this parameter to true will also set the state of the parameters listed below. Later changes to the 
	 state of one of those parameters will revert "canonical-form" back to false. Parameters set to false: 
	 "entities", "normalize-characters", "cdata-sections". Parameters set to true: "namespaces", 
	 "namespace-declarations", "well-formed", "element-content-whitespace". Other parameters are not changed unless 
	 explicitly specified in the description of the parameters.</entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph> [required] (default)</entry><entry>Do not canonicalize the document.</entry>
	 	</row><row>
	 		<entry>"cdata-sections"</entry><entry><codeph>true</codeph> [required] (default)</entry><entry>Keep CDATASection nodes in the document.</entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph> [required]</entry><entry>Transform CDATASection nodes in the document into Text nodes. The new Text  node is then combined with any adjacent Text  node.</entry>
	 	</row><row>
	 		<entry>"check-character-normalization"</entry><entry><codeph>true</codeph> [optional]</entry><entry>Check if the characters in the document are fully normalized, as defined in appendix B of XML 1.1. When a sequence of characters is encountered that fails normalization checking, an error with the DOMError.type equals to "check-character-normalization-failure" is issued. </entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph> [required] (default)</entry><entry>Do not check if characters are normalized.</entry>
	 	</row><row>
	 		<entry>"comments"</entry><entry><codeph>true</codeph> [required] (default)</entry><entry>Keep Comment nodes in the document.</entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph> [required]</entry><entry>Discard Comment nodes in the document.</entry>
	 	</row><row>
	 		<entry>"datatype-normalization"</entry><entry><codeph>true</codeph> [optional]</entry><entry>Expose schema normalized values in the tree, such as XML Schema normalized values in the case of XML Schema. Since this parameter requires to have schema information, the "validate" parameter will also be set to true. Having this parameter activated when "validate" is false has no effect and no schema-normalization will happen. </entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph> [required] (default)</entry><entry>Do not perform schema normalization on the tree. </entry>
	 	</row><row>
	 		<entry>"element-content-whitespace"</entry><entry><codeph>true</codeph> [required] (default)</entry><entry>Keep all whitespaces in the document.</entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph> [optional]</entry><entry>Discard all Text nodes that contain whitespaces in element content, as described in [element content whitespace]. The implementation is expected to use the attribute Text.isElementContentWhitespace to determine if a Text node should be discarded or not.</entry>
	 	</row><row>
	 		<entry>"entities"</entry><entry><codeph>true</codeph> [required] (default)</entry><entry>Keep EntityReference nodes in the document.</entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph> [required]</entry><entry>Remove all EntityReference nodes from the document, putting the entity expansions directly in their place. Text nodes are normalized, as defined in Node.normalize. Only unexpanded entity references are kept in the document.<p><b>Note:</b> This parameter does not affect Entity nodes.</p></entry>
	 	</row><row>
	 		<entry>"error-handler"</entry><entry>[required]</entry><entry>Contains a DOMErrorHandler object. If an error is encountered in the document, the implementation will call back the DOMErrorHandler registered using this parameter. The implementation may provide a default DOMErrorHandler object. When called, DOMError.relatedData will contain the closest node to where the error occurred. If the implementation is unable to determine the node where the error occurs, DOMError.relatedData will contain the Document node. Mutations to the document from within an error handler will result in implementation dependent behavior. </entry>
	 	</row><row>
	 		<entry>"infoset"</entry><entry><codeph>true</codeph> [required]</entry><entry>Keep in the document the information defined in the XML Information Set. This forces the following parameters to false: "validate-if-schema", "entities", "datatype-normalization", "cdata-sections". This forces the following parameters to true: "namespace-declarations", "well-formed", "element-content-whitespace", "comments", "namespaces". Other parameters are not changed unless explicitly specified in the description of the parameters. Note that querying this parameter with getParameter returns true only if the individual parameters specified above are appropriately set.</entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph></entry><entry>Setting infoset to false  has no effect.</entry>
	 	</row><row>
	 		<entry>"namespaces"</entry><entry><codeph>true</codeph> [required] (default)</entry><entry>Perform the namespace processing as defined in Namespace Normalization. </entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph> [optional]</entry><entry>Do not perform the namespace processing. </entry>
	 	</row><row>
	 		<entry>"namespace-declarations"</entry><entry/><entry>This parameter has no effect if the parameter "namespaces" is set to false. </entry>
	 	</row><row>
	 		<entry/><entry><codeph>true</codeph> [required] (default)</entry><entry>Include namespace declaration attributes, specified or defaulted from the schema, in the document.</entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph> [required]</entry><entry>Discard all namespace declaration attributes. The namespace prefixes (Node.prefix) are retained even if this parameter is set to false.</entry>
	 	</row><row>
	 		<entry>"normalize-characters"</entry><entry><codeph>true</codeph> [optional]</entry><entry>Fully normalized the characters in the document as defined in appendix B of [XML 1.1].</entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph> [required] (default)</entry><entry>Do not perform character normalization.</entry>
	 	</row><row>
	 		<entry>"schema-location"</entry><entry>[optional]</entry><entry>Represent a DOMString object containing a list of URIs, separated by whitespaces (characters matching the nonterminal production S defined in section 2.3 [XML 1.0]), that represents the schemas against which validation should occur, i.e. the current schema. The types of schemas referenced in this list must match the type specified with schema-type, otherwise the behavior of an implementation is undefined. The schemas specified using this property take precedence to the schema information specified in the document itself. For namespace aware schema, if a schema specified using this property and a schema specified in the document instance (i.e. using the schemaLocation attribute) in a schema document (i.e. using schema import mechanisms) share the same targetNamespace, the schema specified by the user using this property will be used. If two schemas specified using this property share the same targetNamespace or have no namespace, the behavior is implementation dependent. If no location has been provided, this parameter is null.<p><b>Note:</b> The "schema-location" parameter is ignored unless the "schema-type" parameter value is set. It is strongly recommended that Document.documentURI will be set so that an implementation can successfully resolve any external entities referenced.</p></entry>
	 	</row><row>
	 		<entry>"schema-type"</entry><entry>[optional]</entry><entry>Represent a DOMString object containing an absolute URI and representing the type of the schema language used to validate a document against. Note that no lexical checking is done on the absolute URI. If this parameter is not set, a default value may be provided by the implementation, based on the schema languages supported and on the schema language used at load time. If no value is provided, this parameter is null.<p><b>Note:</b> For XML Schema, applications must use the value "http://www.w3.org/2001/XMLSchema". For XML DTD, applications must use the value "http://www.w3.org/TR/REC-xml". Other schema languages are outside the scope of the W3C and therefore should recommend an absolute URI in order to use this method.</p></entry>
	 	</row><row>
	 		<entry>"split-cdata-sections"</entry><entry><codeph>true</codeph> [required] (default)</entry><entry>Split CDATA sections containing the CDATA section termination marker ']]&gt;'. When a CDATA section is split a warning is issued with a DOMError.type equals to "cdata-sections-splitted" and DOMError.relatedData equals to the first CDATASection node in document order resulting from the split.</entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph> [required]</entry><entry>Signal an error if a CDATASection contains an unrepresentable character.</entry>
	 	</row><row>
	 		<entry>"validate"</entry><entry><codeph>true</codeph> [optional]</entry><entry>Require the validation against a schema (i.e. XML schema, DTD, any other type or representation of schema) of the document as it is being normalized as defined by [XML 1.0]. If validation errors are found, or no schema was found, the error handler is notified. Schema-normalized values will not be exposed according to the schema in used unless the parameter "datatype-normalization" is true. This parameter will reevaluate:<ul><li>Attribute nodes with Attr.specified equals to false, as specified in the description of the Attr interface;</li><li>The value of the attribute Text.isElementContentWhitespace for all Text nodes;</li><li>The value of the attribute Attr.isId for all Attr nodes;</li><li>The attributes Element.schemaTypeInfo and Attr.schemaTypeInfo.</li></ul><p><b>Note:</b> "validate-if-schema" and "validate" are mutually exclusive, setting one of them to true will set the other one to false. Applications should also consider setting the parameter "well-formed" to true, which is the default for that option, when validating the document.</p></entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph> [required] (default)</entry><entry>Do not accomplish schema processing, including the internal subset processing. Default attribute values information are kept. Note that validation might still happen if "validate-if-schema" is true. </entry>
	 	</row><row>
	 		<entry>"validate-if-schema"</entry><entry><codeph>true</codeph> [optional]</entry><entry>Enable validation only if a declaration for the document element can be found in a schema (independently of where it is found, i.e. XML schema, DTD, or any other type or representation of schema). If validation is enabled, this parameter has the same behavior as the parameter "validate" set to true.<p><b>Note:</b> "validate-if-schema" and "validate" are mutually exclusive, setting one of them to true will set the other one to false.</p></entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph> [required] (default)</entry><entry>No schema processing should be performed if the document has a schema, including internal subset processing. Default attribute values information are kept. Note that validation must still happen if "validate" is true. </entry>
	 	</row><row>
	 		<entry>"well-formed"</entry><entry><codeph>true</codeph> [required] (default)</entry><entry>Check if all nodes are XML well formed according to the XML version in use in Document.xmlVersion: <ul><li>check if the attribute Node.nodeName contains invalid characters according to its node type and generate a DOMError of type "wf-invalid-character-in-node-name", with a DOMError.SEVERITY_ERROR severity, if necessary;</li><li>check if the text content inside Attr, Element, Comment, Text, CDATASection nodes for invalid characters and generate a DOMError of type "wf-invalid-character", with a DOMError.SEVERITY_ERROR severity, if necessary;</li><li>check if the data inside ProcessingInstruction nodes for invalid characters and generate a DOMError of type "wf-invalid-character", with a DOMError.SEVERITY_ERROR severity, if necessary;</li></ul></entry>
	 	</row><row>
	 		<entry/><entry><codeph>false</codeph> [optional]</entry><entry>Do not check for XML well-formedness. </entry>
	 	</row></tbody></tgroup></adobetable>
	 </p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMConfiguration"><linktext>MDC - DOMConfiguration</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMConfiguration"><linktext>W3C - DOMConfiguration</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-LS/"><linktext>W3C - DOM 3 Load and Save Specification</linktext></link><link href="http://www.w3.org/TR/2004/REC-xml-infoset-20040204#infoitem.character"><linktext>W3C - [element content whitespace]</linktext></link><link href="http://www.w3.org/TR/xml11/"><linktext>W3C - [XML 1.1]</linktext></link><link href="http://www.w3.org/TR/REC-xml/"><linktext>W3C - [XML 1.0]</linktext></link><link href="http://www.w3.org/TR/xml-c14n"><linktext>W3C - [Canonical XML]</linktext></link></related-links><apiOperation id="dom.core:DOMConfiguration:dom.core:DOMConfiguration:canSetParameter"><apiName>canSetParameter</apiName><shortdesc>
		 Check if setting a parameter to a specific value is supported.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the parameter could be successfully set to the specified value
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the parameter to check.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>dom.core.types:DOMUserData</apiOperationClassifier><apiDesc>An object. if null, the returned value is true. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check if setting a parameter to a specific value is supported.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMConfiguration.canSetParameter"><linktext>MDC - DOMConfiguration.canSetParameter()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMConfiguration-canSetParameter"><linktext>W3C - DOMConfiguration.canSetParameter()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMConfiguration:dom.core:DOMConfiguration:getParameter"><apiName>getParameter</apiName><shortdesc>
		 Return the value of a parameter if known.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_FOUND_ERR: Raised when the parameter 
		 name is not recognized. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The current object associated with the specified parameter or n
		 ull if no object has been associated or if the parameter is not supported. 
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMUserData</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the parameter. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Return the value of a parameter if known. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMConfiguration.getParameter"><linktext>MDC - DOMConfiguration.getParameter()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMConfiguration-getParameter"><linktext>W3C - DOMConfiguration.getParameter()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMConfiguration:dom.core:DOMConfiguration:setParameter"><apiName>setParameter</apiName><shortdesc>
		 Set the value of a parameter.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_FOUND_ERR: Raised when the parameter 
		 name is not recognized. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised when the 
		 parameter name is recognized but the requested value cannot be set. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>TYPE_MISMATCH_ERR: Raised if the value 
		 type for this parameter name is incompatible with the expected 
		 value type. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the parameter to set.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>dom.core.types:DOMUserData</apiOperationClassifier><apiDesc>The new value or null if the user wishes to unset the 
		 parameter. While the type of the value parameter is defined as 
		 DOMUserData, the object type must match the type defined by the definition 
		 of the parameter. For example, if the parameter is "error-handler", the 
		 value must be of type DOMErrorHandler. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Set the value of a parameter.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMConfiguration.setParameter"><linktext>MDC - DOMConfiguration.setParameter()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMConfiguration-property"><linktext>W3C - DOMConfiguration.setParameter()</linktext></link></related-links></apiOperation><apiValue id="dom.core:DOMConfiguration:dom.core:DOMConfiguration:parameterNames:get"><apiName>parameterNames</apiName><shortdesc>
		 The list of the parameters supported by this DOMConfiguration object 
		 and for which at least one value can be set by the application.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:DOMStringList</apiValueClassifier></apiValueDef><apiDesc>
		 The list of the parameters supported by this DOMConfiguration object 
		 and for which at least one value can be set by the application. Note 
		 that this list can also contain parameter names defined outside 
		 this specification. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMConfiguration.parameterNames"><linktext>MDC - DOMConfiguration.parameterNames</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMConfiguration-parameterNames"><linktext>W3C - DOMConfiguration.parameterNames</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:Attr"><apiName>Attr</apiName><shortdesc>
	 This type represents a DOM element's attribute as an object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This type represents a DOM element's attribute as an object. In most DOM methods, you 
	 will probably directly retrieve the attribute as a string (e.g., getAttribute), but 
	 certain functions (e.g., getAttributeNode()) or means of iterating give Attr types.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/dd347043%28VS.85%29.aspx"><linktext>MSDN - Attr Prototype</linktext></link><link href="http://developer.mozilla.org/En/DOM/Attr"><linktext>MDC - Attr</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-637646024"><linktext>W3C - Attr</linktext></link></related-links><adobeApiEvent id="dom.core:Attr_DOMNodeInsertedIntoDocument_DOMNodeInsertedIntoDocument"><apiName>DOMNodeInsertedIntoDocument</apiName><shortdesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeInsertedIntoDocument</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 after the insertion has taken place. The target node of this event is the 
	 node being inserted. If the node is being directly inserted, the event type 
	 DOMNodeInserted occurs before this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Attr_DOMNodeRemovedFromDocument_DOMNodeRemovedFromDocument"><apiName>DOMNodeRemovedFromDocument</apiName><shortdesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeRemovedFromDocument</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 before the removal takes place. The target node of this event type is 
	 the node being removed. If the node is being directly removed, the event 
	 type DOMNodeRemoved occurs before this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Attr_DOMNodeRemoved_DOMNodeRemoved"><apiName>DOMNodeRemoved</apiName><shortdesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeRemoved</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement. This event is dispatched before the 
	 removal takes place. The target node of this event is the node 
	 being removed.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Attr_DOMNodeInserted_DOMNodeInserted"><apiName>DOMNodeInserted</apiName><shortdesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeInserted</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element. This event is dispatched after 
	 the insertion has taken place. The target node of this event is the 
	 node being inserted.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Attr_DOMSubtreeModified_DOMSubtreeModified"><apiName>DOMSubtreeModified</apiName><shortdesc>
	 This is a general event for notification of all changes to the 
	 document.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMSubtreeModified</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 This is a general event for notification of all changes to the 
	 document. It can be used instead of the more specific mutation and 
	 mutation name events listed below. It may be dispatched after a 
	 single modification to the document or, at the implementation's 
	 discretion, after multiple changes have occurred. The latter use 
	 should generally be used to accommodate multiple changes which occur 
	 either simultaneously or in rapid succession. The target of this 
	 event is the lowest common parent of the changes which have taken 
	 place. This event is dispatched after any other events caused by the 
	 mutation(s) have occurred.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiValue id="dom.core:Attr:expando:get"><apiName>expando</apiName><shortdesc>
		 Sets or retrieves a value indicating whether arbitrary variables can be created within the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
		 
		 </apiDefaultValue></apiValueDef><apiDesc>
		 Sets or retrieves a value indicating whether arbitrary variables can be created within the object.
		 
		 <p><b>Note:</b> You can extend the properties on an object by creating arbitrary properties 
		 with values. You should be careful, however, because you can unintentionally set a property value when 
		 scripting in a case-sensitive language such as Microsoft JScript. For example, if the property value 
		 is borderColor and you type the value "bordercolor = 'blue'", you have, in fact, created another property 
		 on the style object called bordercolor with the value 'blue'. If you query the value of the property, 
		 the value "blue" is returned. However, the borders for the element do not turn blue.</p>
		 
		 <p><b>Note:</b> Setting the  expando property of the  document object to false precludes the 
		 functionality of all expandos within the document.</p>
		 
		 </apiDesc><example>
		 The following example demonstrates that, by setting the expando property of the document object to false, 
		 the document ignores the  UNSELECTABLE expando on the  span and allows you to select the text.
		 <codeblock>
		 &lt;html&gt;
		 
		 &lt;head&gt;
		 &lt;script type="text/javascript"&gt;
		 	//Set the expando property to false.
		 	document.expando = false;
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body&gt;
		 
		 &lt;div&gt;
		 &lt;span id="oSpan" unselectable="on"&gt;This text should be selectable.&lt;/span&gt;
		 &lt;/div&gt;
		 
		 &lt;/body&gt;
		 
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms533747%28VS.85%29.aspx"><linktext>MSDN - expando Property</linktext></link></related-links></apiValue><apiValue id="dom.core:Attr:isId:get"><apiName>isId</apiName><shortdesc>
		 Returns whether this attribute is known to be of type ID (i.e.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Returns whether this attribute is known to be of type ID (i.e. to 
		 contain an identifier for its owner element) or not. 
		 
		 <p>When it is and its value is unique, the ownerElement of this 
		 attribute can be retrieved using the method Document.getElementById.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Attr.isId"><linktext>MDC - Attr.isId</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Attr-isId"><linktext>W3C - Attr.isId</linktext></link></related-links></apiValue><apiValue id="dom.core:Attr:name:get"><apiName>name</apiName><shortdesc>
		 Returns the name of this attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the name of this attribute. If Node.localName is different 
		 from null, this attribute is a qualified name.
		 
		 <p><b>Note (IE8):</b>  Internet Explorer 8 and later. In IE8 mode, dynamically setting the name attribute on an input type=radio button correctly applies that button to the same named group.</p>
		 
		 <p><b>Note (IE):</b> When submitting a form, use the name property to bind the value of the control. The name is not the value displayed for the input type=button, input type=reset, and input type=submit input types. The internally stored value is submitted with the form, not the displayed value.</p>
		 
		 <p><b>Note (IE):</b> Microsoft JScript allows the name to be changed at run time. This does not cause the name in the programming model to change in the collection of elements, but it does change the name used for submitting elements.</p>
		 
		 <p><b>Note (IE8):</b>  Internet Explorer 8 and later can set the NAME attribute at run time on elements dynamically created with the createElement method. To create an element with a NAME attribute in earlier versions of Internet Explorer, include the attribute and its value when using the createElement method.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var inp = document.createElement('input');
		 inp.setAttribute('type',  'radio');
		 inp.setAttribute('name',  'Q'+count);
		 inp.setAttribute('value', answers[i]);</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms534184%28VS.85%29.aspx"><linktext>MSDN - NAME Attribute | name Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Attr.name"><linktext>MDC - Attr.name</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1112119403"><linktext>W3C - Attr.name</linktext></link></related-links></apiValue><apiValue id="dom.core:Attr:ownerElement:get"><apiName>ownerElement</apiName><shortdesc>
		 The Element node this attribute is attached to or null if this 
		 attribute is not in use.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Element</apiValueClassifier></apiValueDef><apiDesc>
		 The Element node this attribute is attached to or null if this 
		 attribute is not in use.
		 
		 <p><b>Note (IE8):</b> This property is new as of Internet Explorer 8. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/dd347028%28VS.85%29.aspx"><linktext>MSDN - ownerElement Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Attr.ownerElement"><linktext>MDC - Attr.ownerElement</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Attr-ownerElement"><linktext>W3C - Attr.ownerElement</linktext></link></related-links></apiValue><apiValue id="dom.core:Attr:schemeTypeInfo:get"><apiName>schemeTypeInfo</apiName><shortdesc>
		 The type information associated with this attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:TypeInfo</apiValueClassifier></apiValueDef><apiDesc>
		 The type information associated with this attribute.
		 
		 <p>While the type 
		 information contained in this attribute is guarantee to be correct 
		 after loading the document or invoking Document.normalizeDocument(), 
		 schemaTypeInfo may not be reliable if the node was moved. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Attr.schemaTypeInfo"><linktext>MDC - Attr.schemeTypeInfo</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Attr-schemaTypeInfo"><linktext>W3C - Attr.schemeTypeInfo</linktext></link></related-links></apiValue><apiValue id="dom.core:Attr:specified:get"><apiName>specified</apiName><shortdesc>
		 True if this attribute was explicitly given a value in the instance 
		 document, false otherwise.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 True if this attribute was explicitly given a value in the instance 
		 document, false otherwise. 
		 
		 <p>If the application changed the value of 
		 this attribute node (even if it ends up having the same value as the 
		 default value) then it is set to true. The implementation may handle 
		 attributes with default values from other schemas similarly but 
		 applications should use Document.normalizeDocument() to guarantee 
		 this information is up-to-date.</p>
		 
		 </apiDesc><example>
		 his example uses the specified property to determine the attributes set for an object. 
		 The function checks each attribute, and lists all of the attributes of the object and the 
		 value of each attribute. In addition, each attribute that is set is displayed.
		 <codeblock>
		 &lt;script&gt;
		 function fnFindSpecified(){
		 	var oAttributes=oList.attributes;
		 	alert(oAttributes(0).nodeName);
		 	for(var i=0;i&lt;oAttributes.length;i++){
		 		var oNode=document.createElement("LI");
		 		var oNodeValue=document.createTextNode(i + " "
		 			+ oAttributes(i).nodeName + " = "
		 			+ oAttributes(i).nodeValue);
		 		oList.appendChild(oNode);
		 		oNode.appendChild(oNodeValue);
		 		if(oAttributes(i).nodeValue!=null){
         			alert(oAttributes(i).nodeName
         			+ " specified: " + oAttributes(i).specified);
		 		}
		 	}
		 }
		 &lt;/script&gt;
		 
		 &lt;ul id=oList onclick="fnFindSpecified()"&gt;
		 &lt;li&gt;Click to Find Specified Attributes&lt;/li&gt;
		 &lt;/ul&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms534637%28VS.85%29.aspx"><linktext>MSDN - specified Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Attr.specified"><linktext>MDC - Attr.specified</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-862529273"><linktext>W3C - Attr.specified</linktext></link></related-links></apiValue><apiValue id="dom.core:Attr:value:get"><apiName>value</apiName><shortdesc>
		 On retrieval, the value of the attribute is returned as a string.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised when 
		 the node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 On retrieval, the value of the attribute is returned as a string. 
		 Character and general entity references are replaced with their 
		 values.
		 
		 <p>On setting, this creates a Text node with the unparsed contents of 
		 the string, i.e. any characters that an XML processor would 
		 recognize as markup are instead treated as literal text.</p>
		 
		 <p><b>Note (IE8):</b>  Internet Explorer 8 or later. In IE8 mode, the value property 
		 is correctly reported as a canonical attribute name. For example, &lt;input type="text" readonly&gt; 
		 and &lt;input type="text" readonly="readonly"&gt; would both set the input text field to read-only. 
		 In IE8 mode, the value is evaluated as a cannonical value, "readonly". In earlier document 
		 compatibility modes, it is evaluated as a Boolean value, true.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms535129%28VS.85%29.aspx"><linktext>MSDN - value Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Attr.value"><linktext>MDC - Attr.value</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-221662474"><linktext>W3C - Attr.value</linktext></link><link href="dom.core.xml#Element/getAttribute"><linktext>dom.core.Element.getAttribute</linktext></link><link href="dom.core.xml#Element/setAttribute"><linktext>dom.core.Element.setAttribute</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:DOMImplementationList"><apiName>DOMImplementationList</apiName><shortdesc>
	 Returned by DOMImplementationSource.getDOMImplementationList() and 
	 DOMImplementationRegistry.getDOMImplementationList().</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 Returned by DOMImplementationSource.getDOMImplementationList() and 
	 DOMImplementationRegistry.getDOMImplementationList(). Can be iterated with 0-based index.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementationList"><linktext>MDC - DOMImplementationList</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMImplementationList"><linktext>W3C - DOMImplementationList</linktext></link><link href="dom.core.xml#DOMImplementationSource/getDOMImplementationList()"><linktext>dom.core.DOMImplementationSource.getDOMImplementationList()</linktext></link></related-links><apiOperation id="dom.core:DOMImplementationList:dom.core:DOMImplementationList:item"><apiName>item</apiName><shortdesc>
		 Returns the indexth item in the collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The DOMImplementation at the indexth position in the 
		 DOMImplementationList, or null if that is not a valid index. 
		 
		 </apiDesc><apiOperationClassifier>dom.core:DOMImplementation</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the indexth item in the collection.
		 
		 <p>If index is greater than 
		 or equal to the number of DOMImplementations in the list, this 
		 returns null. </p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementationList.item"><linktext>MDC - DOMImplementationList.item()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMImplementationList-item"><linktext>W3C - DOMImplementationList.item()</linktext></link></related-links></apiOperation><apiValue id="dom.core:DOMImplementationList:dom.core:DOMImplementationList:length:get"><apiName>length</apiName><shortdesc>
		 The number of DOMImplementations in the list.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The number of DOMImplementations in the list. 
		 
		 <p>The range of valid child node indices is 0 to length-1  inclusive.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementationList.length"><linktext>MDC - DOMImplementationList.length</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMImplementationList-length"><linktext>W3C - DOMImplementationList.length</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:NamedNodeMap"><apiName>NamedNodeMap</apiName><shortdesc>
	 Objects implementing the NamedNodeMap interface are used to represent 
	 collections of nodes that can be accessed by name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 2
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 Objects implementing the NamedNodeMap interface are used to represent 
	 collections of nodes that can be accessed by name. Note that NamedNodeMap 
	 does not inherit from NodeList; NamedNodeMaps are not maintained in 
	 any particular order. Objects contained in an object implementing 
	 NamedNodeMap may also be accessed by an ordinal index, but this is simply 
	 to allow convenient enumeration of the contents of a NamedNodeMap, and 
	 does not imply that the DOM specifies an order to these Nodes. 
	 
	 <p><b>Note:</b> NamedNodeMap objects in the DOM are live.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms763824%28VS.85%29.aspx"><linktext>MSDN - IXMLDOMNamedNodeMap</linktext></link><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1780488922"><linktext>W3C - NamedNodeMap</linktext></link></related-links><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:getNamedItem"><apiName>getNamedItem</apiName><shortdesc>
		 Gets a node by name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A Node (of any type) with the specified nodeName, or null 
		 if it does not identify any node in this map.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The nodeName of a node to retrieve.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Gets a node by name.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms767592%28VS.85%29.aspx"><linktext>MSDN - getNamedItem Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1074577549"><linktext>W3C - NamedNodeMap.getNamedItem()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:getNamedItemNS"><apiName>getNamedItemNS</apiName><shortdesc>
		 Gets a node by namespace and localName.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>A Node (of any type) with the specified local name and namespace 
		 URI, or null if they do not identify any node in this map.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>nameSpaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the node to retrieve.
		 </apiDesc></apiParam><apiParam><apiItemName>localName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The local name of the node to retrieve.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Gets a node by namespace and localName.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-getNamedItemNS"><linktext>W3C - NamedNodeMap.getNamedItemNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:getQualifiedItem"><apiName>getQualifiedItem</apiName><shortdesc>
		 Returns the attribute with the specified namespace and attribute name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An object. Returns the attribute node specified by the baseName and namespaceURI parameters. 
		 Returns Null if the attribute is not in the collection or if the item is not an attribute.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>baseName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The string specifying the base name of the attribute, without namespace qualification.
		 </apiDesc></apiParam><apiParam><apiItemName>nameSpaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The string specifying the namespace prefix that qualifies the attribute name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the attribute with the specified namespace and attribute name.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757075%28VS.85%29.aspx"><linktext>MSDN - getQualifiedItem Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:item"><apiName>item</apiName><shortdesc>
		 Returns the item at the given index (or null if the index is higher or equal to the number of nodes).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The node at the index position in the map, or null if that 
		 is not a valid index.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into this map.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the item at the given index (or null if the index is higher or equal to the number of nodes).
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms759220%28VS.85%29.aspx"><linktext>MSDN - item Method (IXMLDOMNamedNodeMap)</linktext></link><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-349467F9"><linktext>W3C - NamedNodeMap.item()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:nextNode"><apiName>nextNode</apiName><shortdesc>
		 Returns the next node in the collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An IXMLDOMNode, which refers to the next node in the collection. Returns Null if there is no next node.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns the next node in the collection.
		 
		 <p><b>Note:</b> The iterator initially points before the first node in the list so that the first call 
		 to the nextNode method returns the first node in the list.</p>
		 
		 <p><b>Note:</b> This method returns Null when the current node is the last node or there are no items 
		 in the list. When the current node is removed from the list, subsequent calls to nextNode return Null. The 
		 iterator must be reset by calling the reset method.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757847%28VS.85%29.aspx"><linktext>MSDN - nextNode Method (IXMLDOMNamedNodeMap)</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:removeNamedItem"><apiName>removeNamedItem</apiName><shortdesc>
		 Removes a node (or if an attribute, may reveal a default if present).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_FOUND_ERR: Raised if there is no node 
		 named name  in this map.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this map is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The node removed from this map if a node with such a name exists.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The nodeName of the node to remove.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a node (or if an attribute, may reveal a default if present).
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms762291%28VS.85%29.aspx"><linktext>MSDN - removeNamedItem Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-D58B193"><linktext>W3C - NamedNodeMap.removeNamedItem()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:removeNamedItemNS"><apiName>removeNamedItemNS</apiName><shortdesc>
		 Removes a node (or if an attribute, may reveal a default if present).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_FOUND_ERR: Raised if there is no 
		 node with the specified namespaceURI and localName in this map.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised 
		 if this map is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if 
		 the implementation does not support the feature "XML" and the 
		 language exposed through the Document does not support XML Namespaces. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The node removed from this map if a node with such a local 
		 name and namespace URI exists.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>nameSpaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the node to remove.
		 </apiDesc></apiParam><apiParam><apiItemName>localName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The local name of the node to remove.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a node (or if an attribute, may reveal a default if present).
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-removeNamedItemNS"><linktext>W3C - NamedNodeMap.removeNamedItemNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:reset"><apiName>reset</apiName><shortdesc>
		 Resets the iterator.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Resets the iterator.
		 
		 <p><b>Note:</b> Implemented in: MSXML 3.0 and later.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms762655%28VS.85%29.aspx"><linktext>MSDN - reset Method (IXMLDOMNamedNodeMap)</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:setNamedItem"><apiName>setNamedItem</apiName><shortdesc>
		 Adds (or replaces) a node by its nodeName.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if arg was 
		 created from a different document than the one that created this map.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if
		 this map is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INUSE_ATTRIBUTE_ERR: Raised if arg is 
		 an Attr that is already an attribute of another Element object. The 
		 DOM user must explicitly clone Attr nodes to re-use them in 
		 other elements.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if an 
		 attempt is made to add a node doesn't belong in this NamedNodeMap. 
		 Examples would include trying to insert something other than an Attr 
		 node into an Element's map of attributes, or a non-Entity node into 
		 the DocumentType's map of Entities.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>If the new Node replaces an existing node the replaced 
		 Node is returned, otherwise null is returned.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>A node to store in this map. The node will later be 
		 accessible using the value of its nodeName attribute.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds (or replaces) a node by its nodeName.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms764702%28VS.85%29.aspx"><linktext>MSDN - setNamedItem Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1025163788"><linktext>W3C - NamedNodeMap.setNamedItem()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:setNamedItemNS"><apiName>setNamedItemNS</apiName><shortdesc>
		 Adds (or replaces) a node by its localName and namespaceURI.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if arg was 
		 created from a different document than the one that created this map.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this map is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INUSE_ATTRIBUTE_ERR: Raised if arg is an 
		 Attr that is already an attribute of another Element object. The DOM 
		 user must explicitly clone Attr nodes to re-use them in other elements.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if an 
		 attempt is made to add a node doesn't belong in this NamedNodeMap. 
		 Examples would include trying to insert something other than an Attr 
		 node into an Element's map of attributes, or a non-Entity node into 
		 the DocumentType's map of Entities.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>If the new Node replaces an existing node the replaced Node 
		 is returned, otherwise null is returned.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>A node to store in this map. The node will later be 
		 accessible using the value of its namespaceURI and localName attributes.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds (or replaces) a node by its localName and namespaceURI.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap"><linktext>MDC - NamedNodeMap</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-setNamedItemNS"><linktext>W3C - NamedNodeMap.setNamedItemNS()</linktext></link></related-links></apiOperation><apiValue id="dom.core:NamedNodeMap:dom.core:NamedNodeMap:length:get"><apiName>length</apiName><shortdesc>
		 The number of nodes in this map.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The number of nodes in this map. The range of valid child node 
		 indices is 0 to length-1 inclusive.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms753799%28VS.85%29.aspx"><linktext>MSDN - length Property (IXMLDOMNamedNodeMap)</linktext></link><link href="http://developer.mozilla.org/En/DOM/NamedNodeMap.length"><linktext>MDC - NamedNodeMap.length</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-6D0FB19E"><linktext>W3C - NamedNodeMap.length</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:UserDataHandler"><apiName>UserDataHandler</apiName><shortdesc>
	 When associating user data with a key on a node, Node.setUserData()
	 can also accept, in its third argument, a handler which will be 
	 called when the object is cloned, imported, deleted, renamed, or 
	 adopted.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 When associating user data with a key on a node, Node.setUserData()
	 can also accept, in its third argument, a handler which will be 
	 called when the object is cloned, imported, deleted, renamed, or 
	 adopted. Per the specification, exceptions should not be thrown in 
	 a UserDataHandler. In both document.importNode() and Node.cloneNode(), 
	 although user data is not copied over, the handler will be called. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/En/DOM/UserDataHandler"><linktext>MDC - UserDataHandler</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#UserDataHandler"><linktext>W3C - UserDataHandler</linktext></link></related-links><apiOperation id="dom.core:UserDataHandler:handle"><apiName>handle</apiName><shortdesc>
		 This method is called whenever the node for which this handler is 
		 registered is imported or cloned.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>operation</apiItemName><apiType value="Number"/><apiDesc>Specifies the type of operation that is being performed on the node.
		 </apiDesc></apiParam><apiParam><apiItemName>key</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the key for which this handler is being called. 
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Specifies the data for which this handler is being called. 
		 </apiDesc></apiParam><apiParam><apiItemName>src</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies the node being cloned, adopted, imported, or renamed. This is null when the node is being deleted.
		 </apiDesc></apiParam><apiParam><apiItemName>dst</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies the node newly created if any, or null.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method is called whenever the node for which this handler is 
		 registered is imported or cloned.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/UserDataHandler.handle"><linktext>MDC - UserDataHandler.handle()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-handleUserDataEvent"><linktext>W3C - UserDataHandler.handle()</linktext></link></related-links></apiOperation><apiValue id="dom.core:UserDataHandler:NODE_ADOPTED"><apiName>NODE_ADOPTED</apiName><shortdesc>
		 The node is adopted, using Document.adoptNode().</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>5</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is adopted, using Document.adoptNode().
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:UserDataHandler:NODE_CLONED"><apiName>NODE_CLONED</apiName><shortdesc>
		 The node is cloned, using Node.cloneNode().</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is cloned, using Node.cloneNode().
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:UserDataHandler:NODE_DELETED"><apiName>NODE_DELETED</apiName><shortdesc>
		 The node is deleted.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is deleted.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:UserDataHandler:NODE_IMPORTED"><apiName>NODE_IMPORTED</apiName><shortdesc>
		 The node is imported, using Document.importNode().</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is imported, using Document.importNode().
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:UserDataHandler:NODE_RENAMED"><apiName>NODE_RENAMED</apiName><shortdesc>
		 The node is renamed, using Document.renameNode().</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is renamed, using Document.renameNode().
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="dom.core:DOMErrorHandler"><apiName>DOMErrorHandler</apiName><shortdesc>
	 DOMErrorHandler is a callback interface that the DOM implementation can
	 call when reporting errors that happens while processing XML data, or 
	 when doing some other processing (e.g.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 DOMErrorHandler is a callback interface that the DOM implementation can
	 call when reporting errors that happens while processing XML data, or 
	 when doing some other processing (e.g. validating a document). A 
	 DOMErrorHandler  object can be attached to a Document using the 
	 "error-handler" on the DOMConfiguration interface. If more than one error 
	 needs to be reported during an operation, the sequence and numbers of 
	 the errors passed to the error handler are implementation dependent. 
	 
	 <p><b>Note:</b> This is not implemented in Mozilla.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMErrorHandler"><linktext>MDC - DOMErrorHandler</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ERROR-Interfaces-DOMErrorHandler"><linktext>W3C - DOMErrorHandler</linktext></link></related-links><apiOperation id="dom.core:DOMErrorHandler:dom.core:DOMErrorHandler:handleError"><apiName>handleError</apiName><shortdesc>
		 This method is called on the error handler when an error occurs.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the handleError method returns false, the DOM implementation should stop
		 the current processing when possible. If the method returns true, the 
		 processing may continue depending on DOMError.severity. 
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>error</apiItemName><apiOperationClassifier>dom.core:DOMError</apiOperationClassifier><apiDesc>The error object that describes the error. This object may be reused 
		 by the DOM implementation across multiple calls to the handleError method. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method is called on the error handler when an error occurs.
		 If an exception is thrown from this method, it is considered to be 
		 equivalent of returning true. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMErrorHandler.handleError"><linktext>MDC - DOMErrorHandler.handleError()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-ERRORS-DOMErrorHandler-handleError"><linktext>W3C - DOMErrorHandler.handleError()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:DOMImplementationRegistry"><apiName>DOMImplementationRegistry</apiName><shortdesc>
	 This is a global variable used to get a single DOMImplementation or DOMImplementationList 
	 depending on the registered objects with the specified features.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 This is a global variable used to get a single DOMImplementation or DOMImplementationList 
	 depending on the registered objects with the specified features.
	 
	 <p><b>Note (Mozilla):</b> This is not implemented in Mozilla</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementationRegistry"><linktext>MDC - DOMImplementationRegistry</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Bootstrap"><linktext>W3C - Bootstrapping</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/ecma-script-binding.html#Level-3-ECMAScript-Binding-Extension-h2"><linktext>W3C - ECMAScript Binding Extension</linktext></link></related-links><apiOperation id="dom.core:DOMImplementationRegistry:dom.core:DOMImplementationRegistry:getDOMImplementation"><apiName>getDOMImplementation</apiName><shortdesc conref="dom.core.DOMImplementationSource#getDOMImplementation()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:DOMImplementation</apiOperationClassifier><apiDesc>The first DOM implementation that support the desired features, or 
		 null if this source has none.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>feature</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string that specifies which features and versions are 
		 required. This is a space separated list in which each feature is specified 
		 by its name optionally followed by a space and a version number.
		 This method returns the first item of the list returned by getDOMImplementationList.
		 As an example, the string "XML 3.0 Traversal +Events 2.0" will request a DOM 
		 implementation that supports the module "XML" for its 3.0 version, a module 
		 that support of the "Traversal" module for any version, and the module 
		 "Events" for its 2.0 version. The module "Events" must be accessible using the 
		 method Node.getFeature() and DOMImplementation.getFeature(). 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="dom.core.DOMImplementationSource#getDOMImplementation()">
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementationRegistry.getDOMImplementation"><linktext>MDC - DOMImplementationRegistry.getDOMImplementation()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Bootstrap"><linktext>W3C - Bootstrapping</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMImplementationRegistry:dom.core:DOMImplementationRegistry:getDOMImplementationList"><apiName>getDOMImplementationList</apiName><shortdesc conref="dom.core.DOMImplementationSource#getDOMImplementationList()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:DOMImplementationList</apiOperationClassifier><apiDesc>A list of DOM implementations that support the desired features.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>feature</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string that specifies which features and versions are required. 
		 This is a space separated list in which each feature is specified by its name 
		 optionally followed by a space and a version number. This is something like: 
		 "XML 3.0 Traversal +Events 2.0"
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="dom.core.DOMImplementationSource#getDOMImplementationList()">
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementationRegistry.getDOMImplementationList"><linktext>MDC - DOMImplementationRegistry.getDOMImplementationList()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Bootstrap"><linktext>W3C - Bootstrapping</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:DOMImplementation"><apiName>DOMImplementation</apiName><shortdesc>
	 The DOMImplementation interface provides a number of methods for 
	 performing operations that are independent of any particular 
	 instance of the document object model.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 The DOMImplementation interface provides a number of methods for 
	 performing operations that are independent of any particular 
	 instance of the document object model. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/dd347056(VS.85).aspx"><linktext>MSDN - DOMImplementation Prototype</linktext></link><link href="http://developer.mozilla.org/En/DOM/DOMImplementation"><linktext>MDC - DOMImplementation</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-102161490"><linktext>W3C - DOMImplementation</linktext></link></related-links><apiOperation id="dom.core:DOMImplementation:dom.core:DOMImplementation:createDocument"><apiName>createDocument</apiName><shortdesc>
		 This method creates a DOM document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified qualified name is not an XML name according to [XML 1.0].
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the 
		 qualifiedName is malformed, if the qualifiedName has a prefix and the 
		 namespaceURI is null, or if the qualifiedName is null and the 
		 namespaceURI is different from null, or if the qualifiedName has a 
		 prefix that is "xml" and the namespaceURI is different from 
		 "http://www.w3.org/XML/1998/namespace" [XML Namespaces], or if the DOM 
		 implementation does not support the "XML" feature but a non-null 
		 namespace URI was provided, since namespaces were defined by XML.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if doctype has 
		 already been used with a different document or was created from a 
		 different implementation.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>A new Document object with its document element. If the NamespaceURI, 
		 qualifiedName, and doctype are null, the returned Document is empty with 
		 no document element.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Document</apiOperationClassifier></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the document element to 
		 create or null.
		 </apiDesc></apiParam><apiParam><apiItemName>qualifiedName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The qualified name of the document element to 
		 be created or null.
		 </apiDesc></apiParam><apiParam><apiItemName>doctype</apiItemName><apiOperationClassifier>dom.core:DocumentType</apiOperationClassifier><apiDesc>The type of document to be created or null.
		 When doctype is not null, its Node.ownerDocument attribute is set to 
		 the document being created.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method creates a DOM document.
		 
		 </apiDesc><example>
		 <codeblock>
		 var doc = document.implementation.createDocument ('http://www.w3.org/1999/xhtml', 'html', null);
		 var body = document.createElementNS('http://www.w3.org/1999/xhtml', 'body');
		 body.setAttribute('id', 'abc');
		 doc.documentElement.appendChild(body);
		 alert(doc.getElementById('abc')); // [object HTMLBodyElement]</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementation.createDocument"><linktext>MDC - DOMImplementation.createDocument()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Level-2-Core-DOM-createDocument"><linktext>W3C - DOMImplementation.createDocument()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMImplementation:dom.core:DOMImplementation:createDocumentType"><apiName>createDocumentType</apiName><shortdesc>
		 Creates an empty DocumentType node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified qualified name is not an XML name according to [XML 1.0].
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the 
		 qualifiedName is malformed.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if 
		 the implementation does not support the feature "XML" and the 
		 language exposed through the Document does not support XML Namespaces. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>A new DocumentType node with Node.ownerDocument set to null.
		 
		 </apiDesc><apiOperationClassifier>dom.core:DocumentType</apiOperationClassifier></apiReturn><apiParam><apiItemName>qualifiedName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The qualified name  of the document type to be created.
		 </apiDesc></apiParam><apiParam><apiItemName>publicId</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The external subset public identifier.
		 </apiDesc></apiParam><apiParam><apiItemName>systemId</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The external subset system identifier.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates an empty DocumentType node.
		 
		 <p>Entity declarations and notations 
		 are not made available. Entity reference expansions and default 
		 attribute additions do not occur.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var dt = document.implementation.createDocumentType('svg:svg', '-//W3C//DTD SVG 1.1//EN', 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd');
		 var d = document.implementation.createDocument('http://www.w3.org/2000/svg', 'svg:svg', dt);
		 alert(d.doctype.publicId); // -//W3C//DTD SVG 1.1//EN</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementation.createDocumentType"><linktext>MDC - DOMImplementation.createDocumentType()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Level-2-Core-DOM-createDocType"><linktext>W3C - DOMImplementation.createDocumentType()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMImplementation:dom.core:DOMImplementation:getFeature"><apiName>getFeature</apiName><shortdesc>
		 This method returns a specialized object which implements the 
		 specialized APIs of the specified feature and version, as specified 
		 in DOM Features.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns an object which implements the specialized APIs of the 
		 specified feature and version, if any, or null if there is no object 
		 which implements interfaces associated with that feature. If the DOMObject 
		 returned by this method implements the DOMImplementation  interface, it 
		 must delegate to the primary core DOMImplementation and not return results 
		 inconsistent with the primary core DOMImplementation such as hasFeature, 
		 getFeature, etc. 
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>feature</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the feature requested. Note that any plus 
		 sign "+" prepended to the name of the feature will be ignored since it 
		 is not significant in the context of this method. 
		 </apiDesc></apiParam><apiParam><apiItemName>version</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This is the version number of the feature to test. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method returns a specialized object which implements the 
		 specialized APIs of the specified feature and version, as specified 
		 in DOM Features. 
		 
		 <p>The specialized object may also be obtained by using 
		 binding-specific casting methods but is not necessarily expected to, 
		 as discussed in Mixed DOM Implementations. This method also allow 
		 the implementation to provide specialized objects which do not support 
		 the DOMImplementation interface. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 if (myNode.isSupported("+Events", "3.0")) {
		 	// (the plus sign "+" is irrelevant for the getFeature method itself and is ignored by this method anyway)
		 	EventTarget evt = (EventTarget) myNode.getFeature("Events", "3.0");
		 	// ...
		 }</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementation.getFeature"><linktext>MDC - DOMImplementation.getFeature()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMImplementation3-getFeature"><linktext>W3C - DOMImplementation.getFeature()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMFeatures"><linktext>W3C - DOM Features</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMImplementation:dom.core:DOMImplementation:hasFeature"><apiName>hasFeature</apiName><shortdesc>
		 Test if the DOM implementation implements a specific feature and version, 
		 as specified in DOM Features.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the feature is implemented in the specified version.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>feature</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the feature to test. 
		 </apiDesc></apiParam><apiParam><apiItemName>version</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This is the version number of the feature to test. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Test if the DOM implementation implements a specific feature and version, 
		 as specified in DOM Features.
		 
		 </apiDesc><example>
		 The following example uses the hasFeature method to test whether the object implements the DOM HTML standard.
		 <codeblock>var bSupported = document.implementation.hasFeature("HTML","1.0");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536446(VS.85).aspx"><linktext>MSDN - hasFeature Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/DOMImplementation.hasFeature"><linktext>MDC - DOMImplementation.hasFeature()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-5CED94D7"><linktext>W3C - DOMImplementation.hasFeature()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMFeatures"><linktext>W3C - DOM Features</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:DOMException"><apiName>DOMException</apiName><shortdesc>
	 DOM operations only raise exceptions in "exceptional" circumstances.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 DOM operations only raise exceptions in "exceptional" circumstances. For example,
	 when an operation is impossible to perform (either for logical reasons, 
	 because data is lost, or because the implementation has become unstable). 
	 In general, DOM methods return specific error values in ordinary processing 
	 situations, such as out-of-bound errors when using NodeList.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMException"><linktext>MDC - DOMException</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-17189187"><linktext>W3C - DOMException</linktext></link></related-links><apiValue id="dom.core:DOMException:dom.core:DOMException:code:get"><apiName>code</apiName><shortdesc>
		 An integer indicating the type of error generated.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 An integer indicating the type of error generated.
		 
		 </apiDesc></apiValueDetail><related-links><link href="dom.core.xml#ExceptionCode"><linktext>dom.core.ExceptionCode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:DocumentType"><apiName>DocumentType</apiName><shortdesc>
	 Each Document has a doctype attribute whose value is either null or a 
	 DocumentType  object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 2
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Each Document has a doctype attribute whose value is either null or a 
	 DocumentType  object. The DocumentType interface in the DOM Core provides 
	 an interface to the list of entities that are defined for the document, 
	 and little else because the effect of namespaces and the various XML schema 
	 efforts on DTD representation are not clearly understood as of this writing.
	 
	 <p><b>Note:</b> DOM Level 3 doesn't support editing DocumentType nodes. DocumentType nodes 
	 are read-only.</p>
	 
	 <p><b>Note (Mozilla):</b> This interface is not fully supported in Mozilla at present, 
	 including for indicating internalSubset information which Gecko generally does otherwise support.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms762752%28VS.85%29.aspx"><linktext>MSDN - IXMLDOMDocumentType</linktext></link><link href="http://developer.mozilla.org/En/DOM/DocumentType"><linktext>MDC - DocumentType</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-412266927"><linktext>W3C - DocumentType</linktext></link></related-links><adobeApiEvent id="dom.core:DocumentType_DOMNodeInsertedIntoDocument_DOMNodeInsertedIntoDocument"><apiName>DOMNodeInsertedIntoDocument</apiName><shortdesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeInsertedIntoDocument</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 after the insertion has taken place. The target node of this event is the 
	 node being inserted. If the node is being directly inserted, the event type 
	 DOMNodeInserted occurs before this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:DocumentType_DOMNodeRemovedFromDocument_DOMNodeRemovedFromDocument"><apiName>DOMNodeRemovedFromDocument</apiName><shortdesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeRemovedFromDocument</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 before the removal takes place. The target node of this event type is 
	 the node being removed. If the node is being directly removed, the event 
	 type DOMNodeRemoved occurs before this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:DocumentType_DOMNodeRemoved_DOMNodeRemoved"><apiName>DOMNodeRemoved</apiName><shortdesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeRemoved</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement. This event is dispatched before the 
	 removal takes place. The target node of this event is the node 
	 being removed.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:DocumentType_DOMNodeInserted_DOMNodeInserted"><apiName>DOMNodeInserted</apiName><shortdesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeInserted</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element. This event is dispatched after 
	 the insertion has taken place. The target node of this event is the 
	 node being inserted.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiValue id="dom.core:DocumentType:entities:get"><apiName>entities</apiName><shortdesc>
		 A NamedNodeMap containing the general entities, both external and internal, 
		 declared in the DTD.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:NamedNodeMap</apiValueClassifier></apiValueDef><apiDesc>
		 A NamedNodeMap containing the general entities, both external and internal, 
		 declared in the DTD. Parameter entities are not contained. Duplicates 
		 are discarded.
		 
		 <p>Internal (Parsed) Entities define entity references in order to replace certain strings by a replacement text. The content of the entity is given in the declaration.</p>
		 
		 <p>External (Parsed) Entities refer to external storage objects.</p>
		 
		 <p><b>Note:</b> The DOM Level 2 does not support editing entities, therefore entities 
		 cannot be altered in any way.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;!DOCTYPE ex SYSTEM "ex.dtd" [
		 	&lt;!ENTITY bat "bat"&gt;       
		 	&lt;!ENTITY bar "bar"&gt;       
		 ]&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757817%28VS.85%29.aspx"><linktext>MSDN - entities Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/DocumentType.entities"><linktext>MDC - DocumentType.entities</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1788794630"><linktext>W3C - DocumentType.entities</linktext></link></related-links></apiValue><apiValue id="dom.core:DocumentType:internalSubset:get"><apiName>internalSubset</apiName><shortdesc>
		 The internal subset as a string, or null if there is none.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The internal subset as a string, or null if there is none. This is does 
		 not contain the delimiting square brackets.
		 
		 <p><b>Note:</b> The actual content returned depends on how much information is 
		 available to the implementation. This may vary depending on various 
		 parameters, including the XML processor used to build the document.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
		 	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"
		 	[
		 	&lt;!ATTLIST input validate CDATA #IMPLIED&gt;
		 	&lt;!ATTLIST input range CDATA #IMPLIED&gt;
		 ]&gt;
		 // internalSubset : &lt;!ATTLIST input validate CDATA #IMPLIED&gt;&lt;!ATTLIST input range CDATA #IMPLIED&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DocumentType.internalSubset"><linktext>MDC - DocumentType.internalSubset</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-Core-DocType-internalSubset"><linktext>W3C - DocumentType.internalSubset</linktext></link></related-links></apiValue><apiValue id="dom.core:DocumentType:name:get"><apiName>name</apiName><shortdesc>
		 The name of DTD; i.e., the name immediately following the DOCTYPE keyword.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The name of DTD; i.e., the name immediately following the DOCTYPE keyword.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
		 // name : html</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms754603%28VS.85%29.aspx"><linktext>MSDN - name Property (IXMLDOMDocumentType)</linktext></link><link href="http://developer.mozilla.org/En/DOM/DocumentType.name"><linktext>MDC - DocumentType.name</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1844763134"><linktext>W3C - DocumentType.name</linktext></link></related-links></apiValue><apiValue id="dom.core:DocumentType:notations:get"><apiName>notations</apiName><shortdesc>
		 A NamedNodeMap containing the notations declared in the DTD.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:NamedNodeMap</apiValueClassifier></apiValueDef><apiDesc>
		 A NamedNodeMap containing the notations declared in the DTD. Duplicates 
		 are discarded. Every node in this map also implements the Notation interface.
		 
		 <p><b>Note:</b> The DOM Level 2 does not support editing notations, therefore notations 
		 cannot be altered in any way.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;!DOCTYPE ex SYSTEM "ex.dtd" [
		 	&lt;!NOTATION GIF system "image/gif"&gt;    
		 ]&gt;
		 </codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms762714%28VS.85%29.aspx"><linktext>MSDN - notations Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/DocumentType.notations"><linktext>MDC - DocumentType.notations</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-D46829EF"><linktext>W3C - DocumentType.notations</linktext></link></related-links></apiValue><apiValue id="dom.core:DocumentType:publicId:get"><apiName>publicId</apiName><shortdesc>
		 The public identifier of the external subset.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The public identifier of the external subset.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
		 // publicId : -//W3C//DTD XHTML 1.0 Transitional//EN</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms760313%28VS.85%29.aspx"><linktext>MSDN - publicId Property (IXMLDOMEntity)</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms765397%28VS.85%29.aspx"><linktext>MSDN - publicId Property (IXMLDOMNotation)</linktext></link><link href="http://developer.mozilla.org/En/DOM/DocumentType.publicId"><linktext>MDC - DocumentType.publicId</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-Core-DocType-publicId"><linktext>W3C - DocumentType.publicId</linktext></link></related-links></apiValue><apiValue id="dom.core:DocumentType:systemId:get"><apiName>systemId</apiName><shortdesc>
		 The system identifier of the external subset.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The system identifier of the external subset. This may be an absolute URI or not.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
		 // systemId : http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms764731%28VS.85%29.aspx"><linktext>MSDN - systemId Property (IXMLDOMEntity)</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms754668%28VS.85%29.aspx"><linktext>MSDN - systemId Property (IXMLDOMNotation)</linktext></link><link href="http://developer.mozilla.org/En/DOM/DocumentType.systemId"><linktext>MDC - DocumentType.systemId</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-Core-DocType-systemId"><linktext>W3C - DocumentType.systemId</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:ExceptionCode"><apiName>ExceptionCode</apiName><shortdesc>
	 An integer indicating the type of error generated.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An integer indicating the type of error generated.
	 
	 <p><b>Note:</b> Other numeric codes are reserved for W3C for possible future use.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-258A00AF"><linktext>W3C - DOM 3 Core: ExceptionCode</linktext></link></related-links><apiValue id="dom.core:ExceptionCode:DOMSTRING_SIZE_ERR"><apiName>DOMSTRING_SIZE_ERR</apiName><shortdesc>
		 If the specified range of text does not fit into a DOMString.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If the specified range of text does not fit into a DOMString.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:HIERARCHY_REQUEST_ERR"><apiName>HIERARCHY_REQUEST_ERR</apiName><shortdesc>
		 If any Node is inserted somewhere it doesn't belong.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If any Node is inserted somewhere it doesn't belong.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:INDEX_SIZE_ERR"><apiName>INDEX_SIZE_ERR</apiName><shortdesc>
		 If index or size is negative, or greater than the allowed value.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If index or size is negative, or greater than the allowed value.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:INUSE_ATTRIBUTE_ERR"><apiName>INUSE_ATTRIBUTE_ERR</apiName><shortdesc>
		 If an attempt is made to add an attribute that is already in use elsewhere.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If an attempt is made to add an attribute that is already in use elsewhere.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:INVALID_ACCESS_ERR"><apiName>INVALID_ACCESS_ERR</apiName><shortdesc>
		 If a parameter or an operation is not supported by the underlying object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>15</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If a parameter or an operation is not supported by the underlying object.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:INVALID_CHARACTER_ERR"><apiName>INVALID_CHARACTER_ERR</apiName><shortdesc>
		 If an invalid or illegal character is specified, such as in an XML name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>5</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If an invalid or illegal character is specified, such as in an XML name.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:INVALID_MODIFICATION_ERR"><apiName>INVALID_MODIFICATION_ERR</apiName><shortdesc>
		 If an attempt is made to modify the type of the underlying object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>13</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If an attempt is made to modify the type of the underlying object.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:INVALID_STATE_ERR"><apiName>INVALID_STATE_ERR</apiName><shortdesc>
		 If an attempt is made to use an object that is not, or is no longer, usable.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>11</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If an attempt is made to use an object that is not, or is no longer, usable.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:NAMESPACE_ERR"><apiName>NAMESPACE_ERR</apiName><shortdesc>
		 If an attempt is made to create or change an object in a way which is 
		 incorrect with regard to namespaces.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>14</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If an attempt is made to create or change an object in a way which is 
		 incorrect with regard to namespaces.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:NOT_FOUND_ERR"><apiName>NOT_FOUND_ERR</apiName><shortdesc>
		 If an attempt is made to reference a Node in a context where it does not exist.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>8</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If an attempt is made to reference a Node in a context where it does not exist.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:NOT_SUPPORTED_ERR"><apiName>NOT_SUPPORTED_ERR</apiName><shortdesc>
		 If the implementation does not support the requested type of object or operation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>9</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If the implementation does not support the requested type of object or operation.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:NO_DATA_ALLOWED_ERR"><apiName>NO_DATA_ALLOWED_ERR</apiName><shortdesc>
		 If data is specified for a Node which does not support data.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>6</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If data is specified for a Node which does not support data.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:NO_MODIFICATION_ALLOWED_ERR"><apiName>NO_MODIFICATION_ALLOWED_ERR</apiName><shortdesc>
		 If an attempt is made to modify an object where modifications are not allowed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>7</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If an attempt is made to modify an object where modifications are not allowed.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:SYNTAX_ERR"><apiName>SYNTAX_ERR</apiName><shortdesc>
		 If an invalid or illegal string is specified.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>12</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If an invalid or illegal string is specified.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:TYPE_MISMATCH_ERR"><apiName>TYPE_MISMATCH_ERR</apiName><shortdesc>
		 If the type of an object is incompatible with the expected type of the 
		 parameter associated to the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>17</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If the type of an object is incompatible with the expected type of the 
		 parameter associated to the object.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:VALIDATION_ERR"><apiName>VALIDATION_ERR</apiName><shortdesc>
		 If a call to a method such as insertBefore or removeChild would make the 
		 Node invalid with respect to "partial validity", this exception would be 
		 raised and the operation would not be done.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>16</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If a call to a method such as insertBefore or removeChild would make the 
		 Node invalid with respect to "partial validity", this exception would be 
		 raised and the operation would not be done. This code is used in [DOM 
		 Level 3 Validation]. Refer to this specification for further information.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:ExceptionCode:WRONG_DOCUMENT_ERR"><apiName>WRONG_DOCUMENT_ERR</apiName><shortdesc>
		 If a Node is used in a different document than the one that created it (that doesn't support it).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>5</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If a Node is used in a different document than the one that created it (that doesn't support it).
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="dom.core:NameList"><apiName>NameList</apiName><shortdesc>
	 The NameList interface provides the abstraction of an ordered collection 
	 of parallel pairs of name and namespace values (which could be null 
	 values), without defining or constraining how this collection is 
	 implemented.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 The NameList interface provides the abstraction of an ordered collection 
	 of parallel pairs of name and namespace values (which could be null 
	 values), without defining or constraining how this collection is 
	 implemented. The items in the NameList are accessible via an integral 
	 index, starting from 0.
	 
	 <p><b>Note (Mozilla):</b> Although there is an XPCOM interface for it, this does not seem to be implemented in Mozilla</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NameList"><linktext>MDC - NameList</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#NameList"><linktext>W3C - NameList</linktext></link></related-links><apiOperation id="dom.core:NameList:dom.core:NameList:contains"><apiName>contains</apiName><shortdesc>
		 Test if a name is part of this NameList.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the name has been found.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>str</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name to look for. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Test if a name is part of this NameList. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NameList.contains"><linktext>MDC - NameList.contains()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#NameList-contains"><linktext>W3C - NameList.contains()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NameList:dom.core:NameList:containsNS"><apiName>containsNS</apiName><shortdesc>
		 Test if the pair namespaceURI/name is part of this NameList.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the pair namespaceURI/name has been found.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI to look for. 
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name to look for. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Test if the pair namespaceURI/name is part of this NameList. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NameList.containsNS"><linktext>MDC - NameList.containsNS()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#NameList-containsNS"><linktext>W3C - NameList.containsNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NameList:dom.core:NameList:getName"><apiName>getName</apiName><shortdesc>
		 Returns the indexth name item in the collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The name at the indexth position in the NameList, or null if 
		 there is no name for the specified index or if the index is out of range. 
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the indexth name item in the collection. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NameList.getName"><linktext>MDC - NameList.getName()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#NameList-getName"><linktext>W3C - NameList.getName()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NameList:dom.core:NameList:getNamespaceURI"><apiName>getNamespaceURI</apiName><shortdesc>
		 Returns the indexth namespaceURI item in the collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The namespace URI at the indexth position in the NameList, or null 
		 if there is no name for the specified index or if the index is out of range. 
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the indexth namespaceURI item in the collection. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NameList.getNamespaceURI"><linktext>MDC - NameList.getNamespaceURI()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#NameList-getNamespaceURI"><linktext>W3C - NameList.getNamespaceURI()</linktext></link></related-links></apiOperation><apiValue id="dom.core:NameList:dom.core:NameList:length:get"><apiName>length</apiName><shortdesc>
		 The number of pairs (name and namespaceURI) in the list.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The number of pairs (name and namespaceURI) in the list. The range 
		 of valid child node indices is 0 to length-1  inclusive. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/NameList.length"><linktext>MDC - NameList.length</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#NameList-length"><linktext>W3C - NameList.length</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:EntityReference"><apiName>EntityReference</apiName><shortdesc>
	 Read-only reference to an entity reference in the DOM tree.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Read-only reference to an entity reference in the DOM tree.
	 
	 <p><b>Note:</b> Character references and references to predefined entities 
	 are considered to be expanded by the HTML or XML processor so that 
	 characters are represented by their Unicode equivalent rather than by an 
	 entity reference. Moreover, the XML processor may completely expand 
	 references to entities while building the Document, instead of providing 
	 EntityReference  nodes. If it does provide such nodes, then for an 
	 EntityReference node that represents a reference to a known entity an Entity 
	 exists, and the subtree of the EntityReference node is a copy of the Entity 
	 node subtree. However, the latter may not be true when an entity contains 
	 an unbound namespace prefix. In such a case, because the namespace prefix 
	 resolution depends on where the entity reference is, the descendants of the 
	 EntityReference node may be bound to different namespace URIs. When an 
	 EntityReference node represents a reference to an unknown entity, the node has 
	 no children and its replacement value, when used by Attr.value for example, 
	 is empty.</p>
	 
	 <p><b>Note:</b> As for Entity nodes, EntityReference nodes and all their descendants are readonly.</p>
	 
	 <p><b>Note:</b> EntityReference nodes may cause element content and attribute value normalization 
	 problems when, such as in XML 1.0 and XML Schema, the normalization is performed 
	 after entity reference are expanded.</p>
	 
	 <p><b>Note (Mozilla):</b> This is not implemented in Mozilla.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms755427%28VS.85%29.aspx"><linktext>MSDN - IXMLDOMEntityReference</linktext></link><link href="http://developer.mozilla.org/En/DOM/EntityReference"><linktext>MDC - EntityReference</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-11C98490"><linktext>W3C - EntityReference</linktext></link></related-links><adobeApiEvent id="dom.core:EntityReference_DOMNodeInsertedIntoDocument_DOMNodeInsertedIntoDocument"><apiName>DOMNodeInsertedIntoDocument</apiName><shortdesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeInsertedIntoDocument</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 after the insertion has taken place. The target node of this event is the 
	 node being inserted. If the node is being directly inserted, the event type 
	 DOMNodeInserted occurs before this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:EntityReference_DOMNodeRemovedFromDocument_DOMNodeRemovedFromDocument"><apiName>DOMNodeRemovedFromDocument</apiName><shortdesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeRemovedFromDocument</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 before the removal takes place. The target node of this event type is 
	 the node being removed. If the node is being directly removed, the event 
	 type DOMNodeRemoved occurs before this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:EntityReference_DOMNodeRemoved_DOMNodeRemoved"><apiName>DOMNodeRemoved</apiName><shortdesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeRemoved</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement. This event is dispatched before the 
	 removal takes place. The target node of this event is the node 
	 being removed.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:EntityReference_DOMNodeInserted_DOMNodeInserted"><apiName>DOMNodeInserted</apiName><shortdesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeInserted</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element. This event is dispatched after 
	 the insertion has taken place. The target node of this event is the 
	 node being inserted.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent></apiClassifier><apiClassifier id="dom.core:DOMLocator"><apiName>DOMLocator</apiName><shortdesc>
	 Indicates a location such as where an error occurred.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 Indicates a location such as where an error occurred. Returned by DOMError.location.
	 
	 <p><b>Note (Mozilla):</b> This is not implemented in Mozilla</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMLocator"><linktext>MDC - DOMLocator</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Interfaces-DOMLocator"><linktext>W3C - DOMLocator</linktext></link><link href="dom.core.xml#DOMError/location"><linktext>dom.core.DOMError.location</linktext></link></related-links><apiValue id="dom.core:DOMLocator:dom.core:DOMLocator:byteOffset:get"><apiName>byteOffset</apiName><shortdesc>
		 The byte offset into the input source this locator is pointing to or -1 
		 if there is no byte offset available.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The byte offset into the input source this locator is pointing to or -1 
		 if there is no byte offset available.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMLocator.byteOffset"><linktext>MDC - DOMLocator.byteOffset</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMLocator-byteOffset"><linktext>W3C - DOMLocator.byteOffset</linktext></link></related-links></apiValue><apiValue id="dom.core:DOMLocator:dom.core:DOMLocator:columnNumber:get"><apiName>columnNumber</apiName><shortdesc>
		 The column number this locator is pointing to, or -1 if there is no 
		 column number available.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The column number this locator is pointing to, or -1 if there is no 
		 column number available.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMLocator.columnNumber"><linktext>MDC - DOMLocator.columnNumber</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMLocator-column-number"><linktext>W3C - DOMLocator.columnNumber</linktext></link></related-links></apiValue><apiValue id="dom.core:DOMLocator:dom.core:DOMLocator:lineNumber:get"><apiName>lineNumber</apiName><shortdesc>
		 The line number this locator is pointing to, or -1 if there is no 
		 column number available.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The line number this locator is pointing to, or -1 if there is no 
		 column number available.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMLocator.lineNumber"><linktext>MDC - DOMLocator.lineNumber</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMLocator-line-number"><linktext>W3C - DOMLocator.lineNumber</linktext></link></related-links></apiValue><apiValue id="dom.core:DOMLocator:dom.core:DOMLocator:relatedNode:get"><apiName>relatedNode</apiName><shortdesc>
		 The node this locator is pointing to, or null if no node is available.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Node</apiValueClassifier></apiValueDef><apiDesc>
		 The node this locator is pointing to, or null if no node is available.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMLocator.relatedNode"><linktext>MDC - DOMLocator.relatedNode</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMLocator-node"><linktext>W3C - DOMLocator.relatedNode</linktext></link></related-links></apiValue><apiValue id="dom.core:DOMLocator:dom.core:DOMLocator:uri:get"><apiName>uri</apiName><shortdesc>
		 The URI this locator is pointing to, or null if no URI is available.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The URI this locator is pointing to, or null if no URI is available.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMLocator.uri"><linktext>MDC - DOMLocator.uri</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMLocator-uri"><linktext>W3C - DOMLocator.uri</linktext></link></related-links></apiValue><apiValue id="dom.core:DOMLocator:dom.core:DOMLocator:utf16Offset:get"><apiName>utf16Offset</apiName><shortdesc>
		 The UTF-16, as defined in [Unicode] and Amendment 1 of [ISO/IEC 10646], 
		 offset into the input source this locator is pointing to or -1 if there 
		 is no UTF-16 offset available.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The UTF-16, as defined in [Unicode] and Amendment 1 of [ISO/IEC 10646], 
		 offset into the input source this locator is pointing to or -1 if there 
		 is no UTF-16 offset available.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMLocator.utf16Offset"><linktext>MDC - DOMLocator.utf16Offset</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMLocator-utf16Offset"><linktext>W3C - DOMLocator.utf16Offset</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:Document"><apiName>Document</apiName><shortdesc>
	 In the DOM, the document object provides a general way to represent HTML, 
	 XHTML, and XML documents.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>dom.style.css:DocumentCSS</apiBaseInterface><apiBaseInterface>dom.style.stylesheets:DocumentStyle</apiBaseInterface><apiBaseInterface>cssom.view:DocumentView</apiBaseInterface><apiBaseInterface>dom.views:DocumentView</apiBaseInterface><apiBaseInterface>dom.tr.range:DocumentRange</apiBaseInterface><apiBaseInterface>dom.events:DocumentEvent</apiBaseInterface><apiBaseInterface>dom.tr.traversal:DocumentTraversal</apiBaseInterface><apiBaseInterface>selectors:NodeSelector</apiBaseInterface><apiBaseInterface>dom.loadsave:DOMImplementationLS</apiBaseInterface><apiBaseInterface>dom.loadsave:DocumentLS</apiBaseInterface><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef><apiDesc>
	 In the DOM, the document object provides a general way to represent HTML, 
	 XHTML, and XML documents. Document objects implement the general DOM Core 
	 document interface (which itself implements the Node interface).
	 
	 <p>In addition to the generalized DOM Core document interface, HTML documents 
	 also implement the DOM HTMLDocument interface, which is a more specialized 
	 interface for dealing with HTML documents (e.g., document.cookie, 
	 document.alinkColor). Methods listed here that are part of this more 
	 specialized interface have an asterisk (~~) next to them.</p>
	 
	 <p>The document is contained by the window object and may contain any number 
	 of elements.</p>
	 
	 <p>The document interface provides access to things such as the document type, 
	 its color and formatting, plugins and applets, as well providing methods 
	 for creating and manipulating all of the document's child nodes, or elements, 
	 such as BODY and TABLE elements.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms531073%28VS.85%29.aspx"><linktext>MSDN - document Object</linktext></link><link href="http://developer.mozilla.org/en/DOM/document"><linktext>MDC - Document</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#i-Document"><linktext>W3C - Document</linktext></link></related-links><adobeApiEvent id="dom.core:Document_offline_offline"><apiName>offline</apiName><shortdesc>
	 Is fired when the browser switches between online and offline mode.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>offline</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Is fired when the browser switches between online and offline mode.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Document_online_online"><apiName>online</apiName><shortdesc>
	 Is fired when the browser switches between online and offline mode.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>online</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Is fired when the browser switches between online and offline mode.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Document_scroll_scroll"><apiName>scroll</apiName><shortdesc>
	 A document view or an element has been scrolled.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>scroll</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A document view or an element has been scrolled. The scroll occured before 
	 the dispatch of this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Document_resize_resize"><apiName>resize</apiName><shortdesc>
	 A document view or an element has been resized.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>resize</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A document view or an element has been resized. The resize occured before 
	 the dispatch of this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Document_unload_unload"><apiName>unload</apiName><shortdesc>
	 The DOM implementation removes from the environment the resource 
	 (such as the document) or any dependent resources (such as images, 
	 style sheets, scripts).</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>unload</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 The DOM implementation removes from the environment the resource 
	 (such as the document) or any dependent resources (such as images, 
	 style sheets, scripts). The document is unloaded after the dispatch 
	 of this event type. If this event type is dispatched, implementations 
	 are required to dispatch this event at least on the Document node.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Document_load_load"><apiName>load</apiName><shortdesc>
	 The DOM Implementation finishes loading the resource (such as the 
	 document) and any dependent resources (such as images, style sheets, 
	 or scripts).</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>load</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 The DOM Implementation finishes loading the resource (such as the 
	 document) and any dependent resources (such as images, style sheets, 
	 or scripts). Dependent resources that fail to load will not prevent 
	 this event from firing if the resource that loaded them is still 
	 accessible via the DOM. If this event type is dispatched, 
	 implementations are required to dispatch this event at least on the 
	 Document node.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Document_DOMSubtreeModified_DOMSubtreeModified"><apiName>DOMSubtreeModified</apiName><shortdesc>
	 This is a general event for notification of all changes to the 
	 document.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMSubtreeModified</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 This is a general event for notification of all changes to the 
	 document. It can be used instead of the more specific mutation and 
	 mutation name events listed below. It may be dispatched after a 
	 single modification to the document or, at the implementation's 
	 discretion, after multiple changes have occurred. The latter use 
	 should generally be used to accommodate multiple changes which occur 
	 either simultaneously or in rapid succession. The target of this 
	 event is the lowest common parent of the changes which have taken 
	 place. This event is dispatched after any other events caused by the 
	 mutation(s) have occurred.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Document_mousewheel_mousewheel"><apiName>mousewheel</apiName><shortdesc>
	 A mouse wheel has been rotated around the y-axis.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mousewheel</apiEventType><adobeApiEventClassifier>dom.events.MouseWheelEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A mouse wheel has been rotated around the y-axis.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Document_mousemultiwheel_mousemultiwheel"><apiName>mousemultiwheel</apiName><shortdesc>
	 A mouse wheel has been rotated.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mousemultiwheel</apiEventType><adobeApiEventClassifier>dom.events.MouseMultiWheelEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A mouse wheel has been rotated. A default action of user agent 
	 generated event objects of this type causes implementations to 
	 dispatch a mousewheel event iff it supports that event type and 
	 MouseMultiWheelEvent.wheelDeltaY is non-zero.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="dom.core:Document:abort"><apiName>abort</apiName><shortdesc>
		 
		 If the document is currently being loaded as a result of the method load being invoked the loading and parsing is immediately 
		 aborted.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 If the document is currently being loaded as a result of the method load being invoked the loading and parsing is immediately 
		 aborted. The possibly partial result of parsing the document is discarded and the document is cleared. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2002/WD-DOM-Level-3-ASLS-20020409/load-save.html#LS-DocumentLS-abort"><linktext>W3C - DocumentLS.abort()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:adoptNode"><apiName>adoptNode</apiName><shortdesc>
		 Attempts to adopt a node from another document to this document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if the source 
		 node is of type DOCUMENT, DOCUMENT_TYPE.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised when 
		 the source node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The adopted node, or null if this operation fails, such as when 
		 the source node comes from a different implementation.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to move into this document.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Attempts to adopt a node from another document to this document. If supported, 
		 it changes the ownerDocument of the source node, its children, as well as the 
		 attached attribute nodes if there are any. If the source node has a parent it 
		 is first removed from the child list of its parent. This effectively allows 
		 moving a subtree from one document to another (unlike importNode() which create 
		 a copy of the source node instead of moving it). When it fails, applications 
		 should use Document.importNode() instead. Note that if the adopted node is 
		 already part of this document (i.e. the source and target document are the same), 
		 this method still has the effect of removing the source node from the child 
		 list of its parent, if any. The following list describes the specifics for 
		 each type of node.
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Attribute</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry>ATTRIBUTE_NODE</entry>
		 		<entry>The ownerElement attribute is set to null and the specified flag is set to true on the adopted Attr. The descendants of the source Attr are recursively adopted.</entry>
		 	</row><row>
		 		<entry>DOCUMENT_FRAGMENT_NODE</entry>
		 		<entry>The descendants of the source node are recursively adopted.</entry>
		 	</row><row>
		 		<entry>DOCUMENT_NODE</entry>
		 		<entry>Document nodes cannot be adopted.</entry>
		 	</row><row>
		 		<entry>DOCUMENT_TYPE_NODE</entry>
		 		<entry>DocumentType nodes cannot be adopted.</entry>
		 	</row><row>
		 		<entry>ELEMENT_NODE</entry>
		 		<entry>Specified attribute nodes of the source element are adopted. Default attributes are discarded, though if the document being adopted into defines default attributes for this element name, those are assigned. The descendants of the source element are recursively adopted.</entry>
		 	</row><row>
		 		<entry>ENTITY_NODE</entry>
		 		<entry>Entity nodes cannot be adopted.</entry>
		 	</row><row>
		 		<entry>ENTITY_REFERENCE_NODE</entry>
		 		<entry>Only the EntityReference node itself is adopted, the descendants are discarded, since the source and destination documents might have defined the entity differently. If the document being imported into provides a definition for this entity name, its value is assigned.</entry>
		 	</row><row>
		 		<entry>NOTATION_NODE</entry>
		 		<entry>Notation nodes cannot be adopted.</entry>
		 	</row><row>
		 		<entry>PROCESSING_INSTRUCTION_NODE, TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE</entry>
		 		<entry>These 
		 nodes can all be adopted. No specifics.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 <p><b>Note:</b> Since it does not create new nodes unlike the Document.importNode() method, 
		 this method does not raise an INVALID_CHARACTER_ERR exception, and applications 
		 should use the Document.normalizeDocument() method to check if an imported name 
		 is not an XML name according to the XML version in use.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.adoptNode"><linktext>MDC - Document.adoptNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Document3-adoptNode"><linktext>W3C - Document.adoptNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:attachEvent"><apiName>attachEvent</apiName><shortdesc>
		 Binds the specified function to an event, so that the function gets called whenever 
		 the event fires on the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true (successful) or false (failed).
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The event string should include the "on" prefix (ie: "onload", "onclick" etc).
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The function or method to associate with the event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Binds the specified function to an event, so that the function gets called whenever 
		 the event fires on the object.
		 
		 </apiDesc><example>
		 <codeblock>if (window.attachEvent) window.attachEvent("onload", statusreport); //invoke function</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx"><linktext>MSDN - attachEvent Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:canDispatch"><apiName>canDispatch</apiName><shortdesc>
		 
		 Tests if the implementation can generate events of a specified type.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the implementation can generate and dispatch this event type
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.namespaceURI of the event.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.type of the event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Tests if the implementation can generate events of a specified type. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-DocumentEvent-canDispatch"><linktext>W3C - DOM 3 Events: DocumentEvent.canDispatch()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createAttribute"><apiName>createAttribute</apiName><shortdesc>
		 Creates an Attr of the given name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified name is not an XML name according to the XML version 
		 in use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>A new Attr object with the nodeName  attribute set to name, 
		 and localName, prefix, and namespaceURI set to null. The value of 
		 the attribute is the empty string.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Attr</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the attribute.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates an Attr of the given name. Note that the Attr instance can 
		 then be set on an Element  using the setAttributeNode method.
		 To create an attribute with a qualified name and namespace URI, use 
		 the createAttributeNS method.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 
		 &lt;head&gt;
		 &lt;title&gt; create/set/get Attribute example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function doAttrib() {
		 	var node = document.getElementById("div1");
		 	var a = document.createAttribute("my_attrib");
		 	a.nodeValue = "newVal";
		 	node.setAttributeNode(a);
		 	alert(node.getAttribute("my_attrib")); // "newVal"
		 }
		 
		 // alternative form not actually using createAttribute
		 //function doAttrib() {
		 //var node = document.getElementById("div1");
		 //node.setAttribute("my_attrib", "newVal");
		 //alert(node.getAttribute("my_attrib")); // "newVal"
		 //}
		 
		 &lt;/script&gt;
		 
		 &lt;/head&gt;
		 
		 &lt;body onload="doAttrib();"&gt;
		 	&lt;div id="div1"&gt;
		 		&lt;p&gt;Some content here&lt;/p&gt;
		 	&lt;/div&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536379%28VS.85%29.aspx"><linktext>MSDN - createAttribute Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.createAttribute"><linktext>MDC - Document.createAttribute()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1084891198"><linktext>W3C - Document.createAttribute()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createAttributeNS"><apiName>createAttributeNS</apiName><shortdesc>
		 Creates an attribute of the given qualified name and namespace URI.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified qualifiedName  is not an XML name according to the XML 
		 version in use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the qualifiedName 
		 is a malformed qualified name, if the qualifiedName has a prefix and 
		 the namespaceURI is null, if the qualifiedName has a prefix that is 
		 "xml" and the namespaceURI is different from 
		 "http://www.w3.org/XML/1998/namespace", if the qualifiedName or its 
		 prefix is "xmlns" and the namespaceURI is different from 
		 "http://www.w3.org/2000/xmlns/", or if the namespaceURI is 
		 "http://www.w3.org/2000/xmlns/" and neither the qualifiedName nor its 
		 prefix is "xmlns".
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: Always thrown if the 
		 current document does not support the "XML" feature, since namespaces 
		 were defined by XML.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>A new Attr object with the following attributes:
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Attribute</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry><codeph>Node.nodeName</codeph></entry>
		 		<entry>qualifiedName</entry>
		 	</row><row>
		 		<entry><codeph>Node.namespaceURI</codeph></entry>
		 		<entry><codeph>namespaceURI</codeph></entry>
		 	</row><row>
		 		<entry><codeph>Node.prefix</codeph></entry>
		 		<entry>prefix, extracted from <codeph>qualifiedName</codeph>, or <codeph>null</codeph> if there is no	prefix</entry>
		 	</row><row>
		 		<entry><codeph>Node.localName</codeph></entry>
		 		<entry>local name, extracted from <codeph>qualifiedName</codeph></entry>
		 	</row><row>
		 		<entry><codeph>Attr.name</codeph></entry>
		 		<entry>qualifiedName</entry>
		 	</row><row>
		 		<entry><codeph>Node.nodeValue</codeph></entry>
		 		<entry>the empty string</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc><apiOperationClassifier>dom.core:Attr</apiOperationClassifier></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the attribute to create.
		 </apiDesc></apiParam><apiParam><apiItemName>qualifiedName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The qualified name of the attribute to instantiate.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates an attribute of the given qualified name and namespace URI.
		 Per XML Namespaces, applications must use the value null as the 
		 namespaceURI parameter for methods if they wish to have no namespace.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.createAttributeNS"><linktext>MDC - Document.createAttributeNS()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-DocCrAttrNS"><linktext>W3C - Document.createAttributeNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createCDATASection"><apiName>createCDATASection</apiName><shortdesc>
		 Creates a CDATASection node whose value is the specified string.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if this 
		 document is an HTML document.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The new CDATASection object.
		 
		 </apiDesc><apiOperationClassifier>dom.core:CDATASection</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The data for the CDATASection contents.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a CDATASection node whose value is the specified string.
		 
		 <p><b>Note (Mozilla):</b> Will throw a NS_ERROR_DOM_INVALID_CHARACTER_ERR exception if one tries to 
		 submit the closing CDATA sequence ("]]&gt;") as part of the data, so unescaped user-provided data cannot 
		 be safely used without with this method getting this exception (createTextNode() can often be used in 
		 its place). </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var docu = new DOMParser().parseFromString('&lt;xml&gt;&lt;/xml&gt;',  "application/xml");
		 
		 var cdata = docu.createCDATASection('Some &lt;CDATA&gt; data &amp; then some');
		 
		 docu.getElementsByTagName('xml')[0].appendChild(cdata);
		 
		 alert(new XMLSerializer().serializeToString(docu));
		 // Displays: &lt;xml&gt;&lt;![CDATA[Some &lt;CDATA&gt; data &amp; then some]]&gt;&lt;/xml&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.createCDATASection"><linktext>MDC - Document.createCDATASection()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-D26C0AF8"><linktext>W3C - Document.createCDATASection()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createComment"><apiName>createComment</apiName><shortdesc>
		 Creates a Comment node given the specified string.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The new Comment object.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Comment</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The data for the node.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a Comment node given the specified string.
		 
		 <p><b>Note (Mozilla):</b> Will throw a NS_ERROR_DOM_INVALID_CHARACTER_ERR exception if one tries to 
		 include the "--" sequence as part of the data, so if based on user data, this potential string would 
		 need to be escaped or have its exception caught. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var docu = new DOMParser().parseFromString('&lt;xml&gt;&lt;/xml&gt;',  "application/xml");
		 
		 var comment = docu.createComment('This is a not-so-secret comment in your document');
		 
		 docu.getElementsByTagName('xml')[0].appendChild(comment);
		 
		 alert(new XMLSerializer().serializeToString(docu));
		 // Displays: &lt;xml&gt;&lt;!--This is a not-so-secret comment in your document--&gt;&lt;/xml&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536383%28VS.85%29.aspx"><linktext>MSDN - createComment Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.createComment"><linktext>MDC - Document.createComment()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1334481328"><linktext>W3C - Document.createComment()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createDocumentFragment"><apiName>createDocumentFragment</apiName><shortdesc>
		 Creates an empty DocumentFragment object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A new DocumentFragment.
		 
		 </apiDesc><apiOperationClassifier>dom.core:DocumentFragment</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Creates an empty DocumentFragment object. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var frag = document.createDocumentFragment();
		 frag.appendChild(document.createTextNode('Ipsum Lorem'));
		 document.body.appendChild(frag);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536387%28VS.85%29.aspx"><linktext>MSDN - createDocumentFragment Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.createDocumentFragment"><linktext>MDC - Document.createDocumentFragment()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-35CB04B5"><linktext>W3C - Document.createDocumentFragment()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createElement"><apiName>createElement</apiName><shortdesc>
		 Creates an element of the type specified.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified name is not an XML name according to the XML version in 
		 use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>A new Element object with the nodeName attribute set to tagName, 
		 and localName, prefix, and namespaceURI set to null.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Element</apiOperationClassifier></apiReturn><apiParam><apiItemName>tagName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the element type to instantiate. For XML, 
		 this is case-sensitive, otherwise it depends on the case-sensitivity 
		 of the markup language in use. In that case, the name is mapped to 
		 the canonical form of that markup by the DOM implementation.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates an element of the type specified. Note that the instance
		 returned implements the Element interface, so attributes can be 
		 specified directly on the returned object.
		 In addition, if there are known attributes with default values, 
		 Attr nodes representing them are automatically created and attached 
		 to the element.
		 To create an element with a qualified name and namespace URI, use 
		 the createElementNS method.
		 
		 <p><b>Note (Mozilla):</b> Gecko implementation of createElement doesn't conform 
		 to the DOM spec for XUL and XHTML documents: localName and namespaceURI are not set 
		 to null on the created element. See bug 280692 for details.</p>
		 
		 <p><b>Note (IE):</b> In Microsoft Internet Explorer 4.0, the only new elements you can create are  img,  area, and  
		 option. As of Internet Explorer 5, you can create all elements programmatically, except  frame and  
		 iframe. The properties of these created elements are read/write and can be accessed programmatically.
		 Before you use new objects, you must explicitly add them to their respective collections or to the 
		 document. To insert new elements into the current document, use the  insertBefore method or the  
		 appendChild method. </p>
		 
		 <p><b>Note (IE):</b> You must perform a second step when you use createElement to create the  
		 input element. The createElement method generates an input text box, because that is the default input 
		 type property. To insert any other kind of input element, first invoke createElement for input, and then 
		 set the type property to the appropriate value in the next line of code. </p>
		 
		 <p><b>Note (IE):</b> Attributes can be included with the tagName as long as the entire string is valid 
		 HTML. To include the  NAME attribute at run time on objects created with the createElement method, use the tagName.</p>
		 
		 <p><b>Note (IE):</b> Use the tagName to include attributes when form elements are created that will be reset 
		 using the  reset method or a  BUTTON with a  TYPE attribute value of reset.</p>
		 
		 </apiDesc><example>
		 This creates a new &lt;div&gt; and inserts it before the element with id "org_div1":
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;||Working with elements||&lt;/title&gt;
		 &lt;/head&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 var my_div = null;
		 var newDiv = null;
		 
		 function addElement() {
		 // create a new div element
		 // and give it some content
		 newDiv = document.createElement("div");
		 newDiv.innerHTML = "&lt;h1&gt;Hi there and greetings!&lt;/h1&gt;";
		 
		 // add the newly created element and it's content into the DOM
		 my_div = document.getElementById("org_div1");
		 document.body.insertBefore(newDiv, my_div);
		 }
		 
		 
		 &lt;/script&gt;
		 
		 &lt;body onload="addElement()"&gt;
		 	&lt;div id='org_div1'&gt; The text above has been created dynamically.&lt;/div&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536389%28VS.85%29.aspx"><linktext>MSDN - createElement Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.createElement"><linktext>MDC - Document.createElement()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-2141741547"><linktext>W3C - Document.createElement()</linktext></link><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=280692"><linktext>bug 280692</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createElementNS"><apiName>createElementNS</apiName><shortdesc>
		 Creates an element of the given qualified name and namespace URI.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified qualifiedName is not an XML name according to the XML 
		 version in use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the qualifiedName 
		 is a malformed qualified name, if the qualifiedName has a prefix and the 
		 namespaceURI is null, or if the qualifiedName has a prefix that is "xml" 
		 and the namespaceURI is different from 
		 "http://www.w3.org/XML/1998/namespace" [XML Namespaces], or if the 
		 qualifiedName or its prefix is "xmlns" and the namespaceURI is different 
		 from "http://www.w3.org/2000/xmlns/", or if the namespaceURI is 
		 "http://www.w3.org/2000/xmlns/" and neither the qualifiedName nor its 
		 prefix is "xmlns".
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: Always thrown if the 
		 current document does not support the "XML" feature, since namespaces 
		 were defined by XML.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>A new Element object with the following attributes:
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Attribute</entry><entry>Value</entry></row></thead><tbody><row>
		 		<entry><codeph>Node.nodeName</codeph></entry>
		 		<entry>qualifiedName</entry>
		 	</row><row>
		 		<entry><codeph>Node.namespaceURI</codeph></entry>
		 		<entry><codeph>namespaceURI</codeph></entry>
		 	</row><row>
		 		<entry><codeph>Node.prefix</codeph></entry>
		 		<entry>prefix, extracted from <codeph>qualifiedName</codeph>, or <codeph>null</codeph> if there is no	prefix</entry>
		 	</row><row>
		 		<entry><codeph>Node.localName</codeph></entry>
		 		<entry>local name, extracted from <codeph>qualifiedName</codeph></entry>
		 	</row><row>
		 		<entry><codeph>Element.tagName</codeph></entry>
		 		<entry>qualifiedName</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc><apiOperationClassifier>dom.core:Element</apiOperationClassifier></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the element to create.
		 </apiDesc></apiParam><apiParam><apiItemName>qualifiedName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The qualified name of the element type to instantiate.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates an element of the given qualified name and namespace URI.
		 Per XML Namespaces, applications must use the value null as the 
		 namespaceURI parameter for methods if they wish to have no namespace.
		 
		 </apiDesc><example>
		 This creates a new &lt;div&gt; element in the XHTML namespace and appends it to the vbox element. Although 
		 this is not an extremely useful XUL document, it does demonstrate the use of elements from two different 
		 namespaces within a single document:
		 <codeblock>
		 &lt;?xml version="1.0"?&gt;
		 &lt;page xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
		 		xmlns:html="http://www.w3.org/1999/xhtml"
		 		title="||Working with elements||"
		 		onload="init()"&gt;
		 
		 &lt;script type="text/javascript"&gt;&lt;![CDATA[
		 var container;
		 var newdiv;
		 var txtnode;
		 
		 function init(){
		 	container = document.getElementById("ContainerBox");
		 	newdiv = document.createElementNS("http://www.w3.org/1999/xhtml","html:div");
		 	txtnode = document.createTextNode("This is text that was constructed dynamically with createElementNS and createTextNode then inserted into the document using appendChild.");
		 	newdiv.appendChild(txtnode);
		 	container.appendChild(newdiv);
		 }
		 
		 ]]&gt;&lt;/script&gt;
		 
		 	&lt;vbox id='ContainerBox' flex='1'&gt;
		 		&lt;html:div&gt;
		 			The script on this page will add dynamic content below:
		 		&lt;/html:div&gt;
		 	&lt;/vbox&gt;
		 &lt;/page&gt;</codeblock>
		 
		 <p>The example given above uses inline script which is not recommended in XHTML documents. This particular 
		 example is actually an XUL document with embedded XHTML, however, the recommendation still applies. Inline 
		 script does not cause any problems for this short example, however, for any serious work you should learn 
		 about Properly Using CSS and JavaScript in XHTML Documents. </p>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.createElementNS"><linktext>MDC - Document.createElementNS()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-DocCrElNS"><linktext>W3C - Document.createElementNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createEntityReference"><apiName>createEntityReference</apiName><shortdesc>
		 Creates an EntityReference object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified name is not an XML name according to the XML version in 
		 use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if this document 
		 is an HTML document.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The new EntityReference object.
		 
		 </apiDesc><apiOperationClassifier>dom.core:EntityReference</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the entity to reference.
		 Unlike Document.createElementNS or Document.createAttributeNS, no 
		 namespace well-formed checking is done on the entity name. Applications 
		 should invoke Document.normalizeDocument() with the parameter "namespaces" 
		 set to true in order to ensure that the entity name is namespace well-formed. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates an EntityReference object. In addition, if the referenced 
		 entity is known, the child list of the EntityReference node is made 
		 the same as that of the corresponding Entity node.
		 
		 <p><b>Note:</b> If any descendant of the Entity node has an unbound namespace 
		 prefix, the corresponding descendant of the created EntityReference 
		 node is also unbound; (its namespaceURI is null). The DOM Level 2 and 
		 3 do not support any mechanism to resolve namespace prefixes in this case.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.createEntityReference"><linktext>MDC - Document.createEntityReference()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-392B75AE"><linktext>W3C - Document.createEntityReference()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createEvent"><apiName>createEvent</apiName><shortdesc>
		 
		 Creates an event object of the type specified.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The newly created event object.
		 
		 </apiDesc><apiOperationClassifier>dom.events:Event</apiOperationClassifier></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The eventType parameter specifies the name of the 
		 DOM Events interface to be supported by the created event object, 
		 e.g. "Event", "MouseEvent", "MutationEvent" and so on. If the Event 
		 is to be dispatched via the EventTarget.dispatchEvent() method the 
		 appropriate event initialization method must be called after creation 
		 in order to initialize the Event's values.
		 
		 As an example, a user wishing to synthesize some kind of UIEvent would 
		 invoke DocumentEvent.createEvent("UIEvent"). The UIEvent.initUIEventNS() 
		 ethod could then be called on the newly created UIEvent object to 
		 set the specific type of user interface event to be dispatched, DOMActivate 
		 for example, and set its context information, e.g. UIEvent.detail in 
		 this example.
		 
		 For backward compatibility reason, "UIEvents", "MouseEvents", "MutationEvents", 
		 and "HTMLEvents" feature names are valid values for the parameter eventType 
		 and represent respectively the interfaces "UIEvent", "MouseEvent", 
		 "MutationEvent", and "Event", and the characters 'a'..'z' are considered 
		 equivalent to the characters 'A'..'Z'.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Creates an event object of the type specified. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-DocumentEvent-createEvent"><linktext>W3C - DOM 3 Events: DocumentEvent.createEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createEventObject"><apiName>createEventObject</apiName><shortdesc>
		 Generates an  event object to pass event context information when you use the  fireEvent method.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns an event object.
		 
		 </apiDesc><apiOperationClassifier>dom.events:Event</apiOperationClassifier></apiReturn><apiParam><apiItemName>existingEvent</apiItemName><apiOperationClassifier>dom.events:Event</apiOperationClassifier><apiData>null</apiData><apiDesc>A object that specifies an existing event object on which to base the new object.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Generates an  event object to pass event context information when you use the  fireEvent method.
		 
		 </apiDesc><example>
		 The following sample shows how to use the createEventObject method with the fireEvent method.
		 <codeblock>
		 &lt;html&gt;
		 &lt;body&gt;
		 &lt;script&gt;
		 	function OuterClick() {
		 		if(event.expando == "from_inner") {
		 			alert("Event actually fired by clicking on inner DIV!")
		 		} else {
		 			alert("Event fired by clicking on outer DIV!")
		 		}
		 	}
		 	function InnerClick() {
		 		var eventObj = document.createEventObject();
		 		// Set an expando property on the event object. This will be used by the 
		 		// event handler to determine what element was clicked on.
		 		eventObj.expando = "from_inner";
		 		parent.document.all.Outer.fireEvent("onclick",eventObj);
		 		event.cancelBubble = true;
		 	}
		 &lt;/script&gt;
		 &lt;div id="Outer" onclick="OuterClick()" style="height:200;width:200;padding:50;background-color:mistyrose"&gt;
		 	&lt;div id="Inner" onclick="InnerClick()" style="height:100;width:100;padding:25;background-color:lavender"&gt;&lt;/div&gt;
		 &lt;/div&gt;
		 
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536390%28VS.85%29.aspx"><linktext>MSDN - createEventObject Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createLSInput"><apiName>createLSInput</apiName><shortdesc>
		 
		 Create a new empty input source object where LSInput.characterStream, LSInput.byteStream, LSInput.stringData  
		 LSInput.systemId, LSInput.publicId, LSInput.baseURI, and LSInput.encoding are null, and LSInput.certifiedText is false.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The newly created input object. 
		 
		 </apiDesc><apiOperationClassifier>dom.loadsave:LSInput</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		 Create a new empty input source object where LSInput.characterStream, LSInput.byteStream, LSInput.stringData  
		 LSInput.systemId, LSInput.publicId, LSInput.baseURI, and LSInput.encoding are null, and LSInput.certifiedText is false. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-DOMImplementationLS-createLSInput"><linktext>W3C - DOMImplementationLS.createLSInput()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createLSOutput"><apiName>createLSOutput</apiName><shortdesc>
		 
		 Create a new empty output destination object where LSOutput.characterStream, LSOutput.byteStream, LSOutput.systemId, 
		 LSOutput.encoding are null.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The newly created output object. 
		 
		 </apiDesc><apiOperationClassifier>dom.loadsave:LSOutput</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		 Create a new empty output destination object where LSOutput.characterStream, LSOutput.byteStream, LSOutput.systemId, 
		 LSOutput.encoding are null. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-DOMImplementationLS-createLSOutput"><linktext>W3C - DOMImplementationLS.createLSOutput()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createLSParser"><apiName>createLSParser</apiName><shortdesc>
		 
		 Create a new LSParser.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The newly created LSParser object. This LSParser is either synchronous or asynchronous depending on the value of the mode argument. 
		 
		 <p><b>Note:</b> By default, the newly created LSParser does not contain a DOMErrorHandler, 
		 i.e. the value of the "error-handler" configuration parameter is null. However, implementations may provide 
		 a default error handler at creation time. In that case, the initial value of the "error-handler" configuration 
		 parameter on the new LSParser object contains a reference to the default error handler. </p>
		 
		 </apiDesc><apiOperationClassifier>dom.loadsave:LSParser</apiOperationClassifier></apiReturn><apiParam><apiItemName>mode</apiItemName><apiType value="Number"/><apiDesc>The mode argument is either MODE_SYNCHRONOUS or MODE_ASYNCHRONOUS, if mode is 
		 MODE_SYNCHRONOUS then the LSParser that is created will operate in synchronous mode, if it's 
		 MODE_ASYNCHRONOUS then the LSParser that is created will operate in asynchronous mode. 
		 </apiDesc></apiParam><apiParam><apiItemName>schemaType</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>An absolute URI representing the type of the schema language used during 
		 the load of a Document using the newly created LSParser. Note that no lexical checking is done 
		 on the absolute URI. In order to create a LSParser for any kind of schema types (i.e. the LSParser 
		 will be free to use any schema found), use the value null. 
		 
		 <p><b>Note:</b> For W3C XML Schema [XML Schema Part 1], applications must use the value 
		 "http://www.w3.org/2001/XMLSchema". For XML DTD [XML 1.0], applications must use the value 
		 "http://www.w3.org/TR/REC-xml". Other Schema languages are outside the scope of the W3C and therefore 
		 should recommend an absolute URI in order to use this method. </p>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Create a new LSParser. The newly constructed parser may then be configured by means of its 
		 DOMConfiguration object, and used to parse documents by means of its parse method. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-DOMImplementationLS-createLSParser"><linktext>W3C - DOMImplementationLS.createLSParser()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createLSSerializer"><apiName>createLSSerializer</apiName><shortdesc>
		 
		 Create a new LSSerializer object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiSince version="DOMLS 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The newly created LSSerializer object.
		 
		 <p><b>Note:</b> By default, the newly created LSSerializer  has no DOMErrorHandler, i.e. the value of the 
		 "error-handler" configuration parameter is null. However, implementations may provide a default error handler at creation time. 
		 In that case, the initial value of the "error-handler"  configuration parameter on the new LSSerializer object contains a 
		 reference to the default error handler. </p>
		 
		 </apiDesc><apiOperationClassifier>dom.loadsave:LSSerializer</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		 Create a new LSSerializer object. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-LS/load-save.html#LS-DOMImplementationLS-createLSSerializer"><linktext>W3C - DOMImplementationLS.createLSSerializer()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createNodeIterator"><apiName>createNodeIterator</apiName><shortdesc>
		 
		 Create a new NodeIterator over the subtree rooted at the specified node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The newly created NodeIterator.
		 
		 </apiDesc><apiOperationClassifier>dom.tr.traversal:NodeIterator</apiOperationClassifier></apiReturn><apiParam><apiItemName>root</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node which will be iterated together with its children. The iterator is initially positioned 
		 just before this node. The <codeph>whatToShow</codeph> flags and the filter, if any, are not considered when setting this position. The <codeph>root</codeph> must not be <codeph>null</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>whatToShow</apiItemName><apiType value="Number"/><apiDesc>This flag specifies which node types may appear in the logical view of the tree presented 
		 by the iterator. These flags can be combined using OR.
		 </apiDesc></apiParam><apiParam><apiItemName>filter</apiItemName><apiOperationClassifier>dom.tr.traversal:NodeFilter</apiOperationClassifier><apiDesc>The <codeph>NodeFilter</codeph> to be used with this <codeph>TreeWalker</codeph>, or <codeph>null</codeph> to indicate no filter.
		 </apiDesc></apiParam><apiParam><apiItemName>entityReferenceExpansion</apiItemName><apiType value="Boolean"/><apiDesc>The value of this flag determines whether entity reference nodes are expanded.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Create a new NodeIterator over the subtree rooted at the specified node. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var nodeIterator = document.createNodeIterator(
		 	document.body,
		 	NodeFilter.SHOW_ELEMENT,
		 	{ acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },
		 	false
		 	);
		 var nodeList = new Array();
		 var currentNode;
		 
		 while (currentNode = nodeIterator.nextNode()) {
		 	nodeList.push(currentNode);
		 }</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Document.createNodeIterator"><linktext>MDC - Document: createNodeIterator Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-Document"><linktext>W3C - DOM Level 2 Traversal: createNodeIterator Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createProcessingInstruction"><apiName>createProcessingInstruction</apiName><shortdesc>
		 Creates a ProcessingInstruction node given the specified name and 
		 data strings.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the specified
		 target is not an XML name according to the XML version in use specified in 
		 the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if this document is 
		 an HTML document.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The new ProcessingInstruction object.
		 
		 </apiDesc><apiOperationClassifier>dom.core:ProcessingInstruction</apiOperationClassifier></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The target part of the processing instruction.
		 Unlike Document.createElementNS or Document.createAttributeNS, no namespace 
		 well-formed checking is done on the target name. Applications should invoke 
		 Document.normalizeDocument() with the parameter "namespaces" set to true in 
		 order to ensure that the target name is namespace well-formed. 
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The data for the node.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a ProcessingInstruction node given the specified name and 
		 data strings.
		 
		 </apiDesc><example>
		 <codeblock>
		 var docu = new DOMParser().parseFromString('&lt;xml&gt;&lt;/xml&gt;',  "application/xml");
		 
		 var pi = docu.createProcessingInstruction('xml-stylesheet', 'href="mycss.css" type="text/css"');
		 
		 docu.getElementsByTagName('xml')[0].appendChild(pi);
		 
		 alert(new XMLSerializer().serializeToString(docu));
		 // Displays: &lt;xml&gt;&lt;?xml-stylsheet href="mycss.css" type="text/css"?&gt;&lt;/xml&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.createProcessingInstruction"><linktext>MDC - Document.createProcessingInstruction()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-135944439"><linktext>W3C - Document.createProcessingInstruction()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createRange"><apiName>createRange</apiName><shortdesc>
		 
		 This interface can be obtained from the object implementing the Document interface using binding-specific 
		 casting methods.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The initial state of the Range returned from this method is such that both of its boundary-points 
		 are positioned at the beginning of the corresponding Document, before any content. The Range returned can 
		 only be used to select content associated with this Document, or with DocumentFragments and Attrs for which 
		 this Document is the ownerDocument.
		 
		 </apiDesc><apiOperationClassifier>dom.tr.range:Range</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		 This interface can be obtained from the object implementing the Document interface using binding-specific 
		 casting methods. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var range = document.createRange();
		 range.setStart(startNode, startOffset);
		 range.setEnd(endNode, endOffset);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536394%28VS.85%29.aspx"><linktext>MSDN: createRange Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.createRange"><linktext>MDC - Document: createRange Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-DocumentRange-idl"><linktext>W3C - DOM Level 2 Range: DocumentRange</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createStyleSheet"><apiName>createStyleSheet</apiName><shortdesc>
		 Creates a style sheet for the document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns a  styleSheet object. 
		 
		 </apiDesc><apiOperationClassifier>dom.style.stylesheets:StyleSheet</apiOperationClassifier></apiReturn><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies how to add the style sheet to the document. If a file name is specified for the URL, the style information is added as a  link object. If the URL contains style information, it is added to the  style object.
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>The index that indicates where the new style sheet is inserted in the  styleSheets collection. The default is to insert the new style sheet at the end of the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a style sheet for the document. 
		 
		 <p><b>Note (IE):</b> You can create up to 31 styleSheet objects with the createStyleSheet method. After 
		 that, the method returns an "Invalid Argument" exception. To create additional objects, use  createElement and 
		 append them to the  HEAD of the document as follows: 
		 
		 <codeblock>
		 var styleSheet = document.createElement('STYLE');
		 document.documentElement.firstChild.appendChild(styleSheet);</codeblock>
		 </p>
		 
		 </apiDesc><example>
		 This example uses the createStyleSheet method to create a link to a style sheet.
		 <codeblock>document.createStyleSheet('styles.css');</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx"><linktext>MSDN - createStyleSheet Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createTextNode"><apiName>createTextNode</apiName><shortdesc>
		 Creates a Text node given the specified string.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The new Text object.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Text</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The data for the node.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Creates a Text node given the specified string.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;createTextNode example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 
		 function addTextNode() {
		 	var newtext = document.createTextNode(" Some text added dynamically. ");
		 	var para = document.getElementById("p1");
		 	para.appendChild(newtext);
		 }
		 
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body&gt;
		 &lt;div style="border: 1px solid red"&gt;
		 &lt;p id="p1"&gt;First line of paragraph.&lt;br /&gt;&lt;/p&gt;
		 &lt;/div&gt;&lt;br /&gt;
		 
		 &lt;button onclick="addTextNode();"&gt;add another textNode.&lt;/button&gt;
		 
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536400%28VS.85%29.aspx"><linktext>MSDN - createTextNode Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.createTextNode"><linktext>MDC - Document.createTextNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1975348127"><linktext>W3C - Document.createTextNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:createTreeWalker"><apiName>createTreeWalker</apiName><shortdesc>
		 
		 Create a new TreeWalker over the subtree rooted at the specified node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMTR" version="2"/><apiTool name="IE" version="5.5_unknown"/><apiTool name="IE" version="6.0_unknown"/><apiTool name="IE" version="7.0_unknown"/><apiTool name="IE" version="8.0_as_IE7_unknown"/><apiTool name="IE" version="8.0_as_IE8_unknown"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The newly created <codeph>TreeWalker</codeph>.
		 
		 </apiDesc><apiOperationClassifier>dom.tr.traversal:TreeWalker</apiOperationClassifier></apiReturn><apiParam><apiItemName>root</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node which will serve as the <codeph>root</codeph> for the TreeWalker. The whatToShow flags and the NodeFilter 
		 are not considered when setting this value; any node type will be accepted as the <codeph>root</codeph>. The <codeph>currentNode</codeph> of the 
		 TreeWalker is initialized to this node, whether or not it is visible. The <codeph>root</codeph> functions as a stopping point for 
		 traversal methods that look upward in the document structure, such as <codeph>parentNode</codeph> and nextNode. The <codeph>root</codeph> must not 
		 be <codeph>null</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>whatToShow</apiItemName><apiType value="Number"/><apiDesc>This flag specifies which node types may appear in the logical view of the tree presented by 
		 the tree-walker. These flags can be combined using OR.
		 </apiDesc></apiParam><apiParam><apiItemName>filter</apiItemName><apiOperationClassifier>dom.tr.traversal:NodeFilter</apiOperationClassifier><apiDesc>The <codeph>NodeFilter</codeph> to be used with this <codeph>TreeWalker</codeph>, or <codeph>null</codeph> to indicate no filter.
		 </apiDesc></apiParam><apiParam><apiItemName>entityReferenceExpansion</apiItemName><apiType value="Boolean"/><apiDesc>If this flag is false, the contents of <codeph>EntityReference</codeph> nodes are not presented in the logical view.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Create a new TreeWalker over the subtree rooted at the specified node. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var treeWalker = document.createTreeWalker(
		 	document.body,
		 	NodeFilter.SHOW_ELEMENT,
		 	{ acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },
		 	false
		 	);
		 var nodeList = new Array();
		 while(treeWalker.nextNode()) nodeList.push(treeWalker.currentNode);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Document.createNodeIterator"><linktext>MDC - Document: createNodeIterator Method</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-Document"><linktext>W3C - DOM Level 2 Traversal: createNodeIterator Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:detachEvent"><apiName>detachEvent</apiName><shortdesc>
		 Unbinds the specified function from the event, so that the function stops receiving notifications when the event fires.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies any of the standard  DHTML Events.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Specifies the function previously set using the attachEvent method.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Unbinds the specified function from the event, so that the function stops receiving notifications when the event fires.
		 
		 <p><b>Note (IE):</b> Behaviors that attach to events using the attachEvent method must explicitly call 
		 the detachEvent method to stop receiving notifications from the page when the  ondetach event fires. 
		 Behaviors that attach to events using the  PUBLIC:ATTACH element automatically stop receiving notifications 
		 when the behavior detaches from the element, and thus do not need to call the detachEvent method.</p>
		 
		 </apiDesc><example>
		 This example calls the detachEvent method from an HTML Component (HTC) when the highlighting effect is 
		 removed from the page, causing the ondetach event to fire.
		 <codeblock>
		 &lt;PUBLIC:ATTACH EVENT="ondetach" ONEVENT="cleanup()" /&gt;
		 
		 &lt;script language="JScript"&gt;
		 attachEvent ('onmouseover', Hilite);
		 attachEvent ('onmouseout', Restore);
		 
		 function cleanup() {
		 	detachEvent ('onmouseover', Hilite);
		 	detachEvent ('onmouseout', Restore);
		 }
		 
		 function Hilite() {
		 	if (event.srcElement == element) { 
		 		normalColor = style.color;  
		 		runtimeStyle.color  = "red";
		 		runtimeStyle.cursor = "hand";
		 	}
		 }
		 
		 function Restore() {
		 	if (event.srcElement == element) {
		 		runtimeStyle.color  = normalColor;
		 		runtimeStyle.cursor = "";
		 	}
		 }
		 &lt;/script&gt;</codeblock>
		 
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536411%28VS.85%29.aspx"><linktext>MSDN - detachEvent Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:elementFromPoint"><apiName>elementFromPoint</apiName><shortdesc>
		 
		 Returns the element from the document whose elementFromPoint method is being called which is the 
		 topmost element which lies under the given point.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOMView" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0_alternative"/><apiTool name="Safari" version="3.1_alternative"/><apiTool name="Safari" version="4.0b_alternative"/><apiTool name="Chrome" version="1.0_alternative"/><apiTool name="Chrome" version="2.0_alternative"/><apiTool name="Opera" version="9.62_incorrect"/><apiTool name="Opera" version="10.0a_alternative"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The element at x,y in the viewport
		 
		 </apiDesc><apiOperationClassifier>dom.core:Element</apiOperationClassifier></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>The X coordinate to check, in CSS pixels relative to the upper-left corner of the document's containing window or frame.
		 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>The Y coordinate to check, in CSS pixels relative to the upper-left corner of the document's containing window or frame.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns the element from the document whose elementFromPoint method is being called which is the 
		 topmost element which lies under the given point. 
		 
		 <p>The point is specified via coordinates, in CSS pixels, relative to the upper-left-most point 
		 in the window or frame containing the document.</p>
		 
		 <p><b>Note:</b> If the element at the specified point belongs to another document (for example, 
		 an iframe's subdocument), the element in the DOM of the document the method is called on (in the iframe 
		 case, the iframe itself) is returned. If the element at the given point is anonymous or XBL generated 
		 content, such as a textbox's scroll bars, then the first non-anonymous ancestor element (for example, 
		 the textbox) is returned.</p>
		 
		 <p><b>Note:</b> If the specified point is outside the visible bounds of the document or either 
		 coordinate is negative, the result is null.</p>
		 
		 <p><b>Note:</b> The browsers do not entirely agree which mouse coordinates this method needs. 
		 IE and Firefox 3 need clientX/Y (relative to the viewport), while Opera and Safari need pageX/Y (relative 
		 to the document).</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;elementFromPoint example&lt;/title&gt;
		 		&lt;script type="text/javascript"&gt;
		 			function changeColor(newColor) {
		 				elem = document.elementFromPoint(2, 2);
		 				elem.style.color = newColor;
		 			}
		 		&lt;/script&gt;
		 	&lt;/head&gt;
		 
		 	&lt;body&gt;
		 		&lt;p id="para1"&gt;Some text here&lt;/p&gt;
		 		&lt;button onclick="changeColor('blue');"&gt;blue&lt;/button&gt;
		 		&lt;button onclick="changeColor('red');"&gt;red&lt;/button&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;
		 </codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536417(VS.85).aspx"><linktext>MSDN: elementFromPoint Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.elementFromPoint"><linktext>MDC - Document: elementFromPoint Method</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-documentview-interface"><linktext>W3C - CSSOM View: elementFromPoint Method</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#documentview"><linktext>Quirksmode: DocumentView and ElementView methods</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:enableStylesheetsForSet"><apiName>enableStylesheetsForSet</apiName><shortdesc>
		 
		 Invoking this method must change the disabled attribute on each StyleSheet object with a title in the 
		 styleSheets attribute, so that all those whose title matches the name argument are enabled, and all others 
		 are disabled.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOM" version="0"/><apiSince version="CSSOM 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Invoking this method must change the disabled attribute on each StyleSheet object with a title in the 
		 styleSheets attribute, so that all those whose title matches the name argument are enabled, and all others 
		 are disabled. Title matches must be case-sensitive.
		 
		 <p>Invoking this method with the empty string value must disable all alternative and preferred style sheets
		 (but does not change the state of persistent style sheets).</p>
		 
		 <p>Invoking this method with the null value must have no effect.</p>
		 
		 <p>Style sheets that do not have a title are never affected by this method. This method does not change the 
		 values of the lastStyleSheetSet or preferredStyleSheetSet  attributes.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/document.enableStyleSheetsForSet"><linktext>MDC - Document.enableStylesheetsForSet()</linktext></link><link href="http://dev.w3.org/csswg/cssom/#documentstyle-enablestylesheetsforset"><linktext>W3C - DocumentStyle.enableStylesheetsForSet()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:getElementsByTagName"><apiName>getElementsByTagName</apiName><shortdesc>
		 Returns a NodeList of all the Elements in document order with a 
		 given tag name and are contained in the document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A new NodeList object containing all the matched Elements.
		 
		 </apiDesc><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier></apiReturn><apiParam><apiItemName>tagname</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the tag to match on. The special 
		 value "~~" matches all tags. For XML, the tagname  parameter is 
		 case-sensitive, otherwise it depends on the case-sensitivity of 
		 the markup language in use. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a NodeList of all the Elements in document order with a 
		 given tag name and are contained in the document.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536439%28VS.85%29.aspx"><linktext>MSDN - getElementsByTagName Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.getElementsByTagName"><linktext>MDC - Document.getElementsByTagName()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-A6C9094"><linktext>W3C - Document.getElementsByTagName()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:getElementsByTagNameNS"><apiName>getElementsByTagNameNS</apiName><shortdesc>
		 Returns a NodeList of all the Elements with a given local name and 
		 namespace URI in document order.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A new NodeList object containing all the matched Elements.
		 
		 </apiDesc><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the elements to match on. 
		 The special value "~~" matches all namespaces.
		 </apiDesc></apiParam><apiParam><apiItemName>localName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The local name of the elements to match on. The 
		 special value "~~" matches all local names.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a NodeList of all the Elements with a given local name and 
		 namespace URI in document order.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.getElementsByTagNameNS"><linktext>MDC - Document.getElementsByTagNameNS()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-getElBTNNS"><linktext>W3C - Document.getElementsByTagNameNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:getElemenyById"><apiName>getElemenyById</apiName><shortdesc>
		 Returns the Element that has an ID attribute with the given value.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMHTML" version="1"/><apiSince version="DOMHTML 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 2
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The matching element or null if there is none.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Element</apiOperationClassifier></apiReturn><apiParam><apiItemName>elementId</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The unique id value for an element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the Element that has an ID attribute with the given value. 
		 If no such element exists, this returns null. If more than one 
		 element has an ID attribute with that value, what is returned is undefined.
		 
		 <p><b>Note:</b> Attributes with the name "ID" or "id" are not of type ID 
		 unless so defined.</p>
		 
		 <p><b>Note:</b> Simply creating an element and assigning an ID will not make 
		 the element accessible by getElementById. Instead one needs to insert the element first 
		 into the document tree with insertBefore or a similar method, probably into a hidden div. 
		 
		 <codeblock>var element = document.createElement("div");
		 element.id = 'testqq';
		 var el = document.getElementById('testqq'); // el will be null!</codeblock>
		 
		 New users should note that the capitalization of 'Id' must be correct for the code to function 
		 - 'getElementByID' does not work, however natural it may seem. 
		 </p>
		 
		 <p><b>Note (IE):</b> In IE8 mode, getElementById performs a case-sensitive match on the 
		 ID attribute only. In IE7 mode and previous modes, this method performs a case-insensitive match 
		 on both the ID and NAME attributes, which might produce unexpected results.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;getElementById example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 function changeColor(newColor) {
		 	elem = document.getElementById("para1");
		 	elem.style.color = newColor;
		 }
		 &lt;/script&gt;
		 &lt;/head&gt;
		 
		 &lt;body&gt;
		 &lt;p id="para1"&gt;Some text here&lt;/p&gt;
		 &lt;button onclick="changeColor('blue');"&gt;blue&lt;/button&gt;
		 &lt;button onclick="changeColor('red');"&gt;red&lt;/button&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536437%28VS.85%29.aspx"><linktext>MSDN - getElementById Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.getElementById"><linktext>MDC - Document.getElemenyById()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-getElBId"><linktext>W3C - Document.getElemenyById()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:getOverrideStyle"><apiName>getOverrideStyle</apiName><shortdesc>
		 
		 This method is used to retrieve the override style declaration for a specified element and a specified pseudo-element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The override style declaration.
		 
		 </apiDesc><apiOperationClassifier>dom.style.css:CSSStyleDeclaration</apiOperationClassifier></apiReturn><apiParam><apiItemName>elt</apiItemName><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>The element whose style is to be modified. This parameter cannot be null.
		 </apiDesc></apiParam><apiParam><apiItemName>pseudoElt</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The pseudo-element or null if none.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 This method is used to retrieve the override style declaration for a specified element and a specified pseudo-element. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-DocumentCSS-getOverrideStyle"><linktext>W3C - DOM Level 2 Style: DocumentCSS.getOverrideStyle()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:importNode"><apiName>importNode</apiName><shortdesc>
		 Imports a node from another document to this document, without altering or removing the source 
		 node from the original document; this method creates a new copy of the source node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if the type of node being imported is not supported.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if one of the imported names is not an XML name 
		 according to the XML version in use specified in the Document.xmlVersion attribute. This may happen when 
		 importing an XML 1.1 element into an XML 1.0 document, for instance.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The imported node that belongs to this Document.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>importedNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to import.
		 </apiDesc></apiParam><apiParam><apiItemName>deep</apiItemName><apiType value="Boolean"/><apiDesc>If true, recursively import the subtree under the specified node; if false, import only 
		 the node itself, as explained above. This has no effect on nodes that cannot have any children, and on 
		 Attr, and EntityReference nodes.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Imports a node from another document to this document, without altering or removing the source 
		 node from the original document; this method creates a new copy of the source node. The returned 
		 node has no parent; (parentNode is null).
		 
		 <p>For all nodes, importing a node creates a node object owned by the importing document, with attribute 
		 values identical to the source node's nodeName and nodeType, plus the attributes related to 
		 namespaces (prefix, localName, and namespaceURI). As in the cloneNode operation, the source node is 
		 not altered. User data associated to the imported node is not carried over. However, if any 
		 UserDataHandlers has been specified along with the associated data these handlers will be called with 
		 the appropriate parameters before this method returns.</p>
		 
		 <p>Additional information is copied as appropriate to the nodeType, attempting to mirror the behavior 
		 expected if a fragment of XML or HTML source was copied from one document to another, recognizing that 
		 the two documents may have different DTDs in the XML case. The following list describes the specifics
		 for each type of node.</p>
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Node Type</entry><entry>Description</entry></row></thead><tbody><row>
		 		<entry>ATTRIBUTE_NODE</entry>
		 		<entry>The ownerElement attribute is set to null and the specified flag is set to true on the generated 
		 Attr. The descendants of the source Attr are recursively imported and the resulting nodes reassembled to 
		 form the corresponding subtree. Note that the deep parameter has no effect on Attr nodes; they always 
		 carry their children with them when imported.</entry>
		 	</row><row>
		 		<entry>DOCUMENT_FRAGMENT_NODE</entry>
		 		<entry>If the deep option was set to true, the descendants of the source DocumentFragment are recursively imported and the resulting nodes reassembled under the imported DocumentFragment to form the corresponding subtree. Otherwise, this simply generates an empty DocumentFragment.</entry>
		 	</row><row>
		 		<entry>DOCUMENT_NODE</entry>
		 		<entry>Document nodes cannot be imported.</entry>
		 	</row><row>
		 		<entry>DOCUMENT_TYPE_NODE</entry>
		 		<entry>DocumentType nodes cannot be imported.</entry>
		 	</row><row>
		 		<entry>ELEMENT_NODE</entry>
		 		<entry>Specified attribute nodes of the source element are imported, and the generated Attr nodes are attached to the generated Element. Default attributes are not copied, though if the document being imported into defines default attributes for this element name, those are assigned. If the importNode  deep parameter was set to true, the descendants of the source element are recursively imported and the resulting nodes reassembled to form the corresponding subtree.</entry>
		 	</row><row>
		 		<entry>ENTITY_NODE</entry>
		 		<entry>Entity nodes can be imported, however in the current release of the DOM the DocumentType is readonly. Ability to add these imported nodes to a DocumentType will be considered for addition to a future release of the DOM. On import, the publicId, systemId, and notationName attributes are copied. If a deep import is requested, the descendants of the the source Entity are recursively imported and the resulting nodes reassembled to form the corresponding subtree.</entry>
		 	</row><row>
		 		<entry>ENTITY_REFERENCE_NODE</entry>
		 		<entry>Only the EntityReference itself is copied, even if a deep import is requested, since the source and destination documents might have defined the entity differently. If the document being imported into provides a definition for this entity name, its value is assigned.</entry>
		 	</row><row>
		 		<entry>NOTATION_NODE</entry>
		 		<entry>Notation nodes can be imported, however in the current release of the DOM the DocumentType is readonly. Ability to add these imported nodes to a DocumentType will be considered for addition to a future release of the DOM. On import, the publicId and systemId attributes are copied. Note that the deep parameter has no effect on this type of nodes since they cannot have any children.</entry>
		 	</row><row>
		 		<entry>PROCESSING_INSTRUCTION_NODE</entry>
		 		<entry>The imported node copies its target and data values from those of the source node. Note that the deep parameter has no effect on this type of nodes since they cannot have any children.</entry>
		 	</row><row>
		 		<entry>TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE</entry>
		 		<entry>These three types of nodes inheriting from CharacterData copy their data and length attributes from those of the source node. Note that the deep parameter has no effect on these types of nodes since they cannot have any children.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 <p><b>Note:</b> The original node is not removed from the original document. The imported node is a clone of the original.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var iframe = document.getElementsByTagName("iframe")[0];
		 var oldNode = iframe.contentDocument.getElementById("myNode");
		 var newNode = document.importNode(oldNode,true);
		 document.getElementById("container").appendChild(newNode);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.importNode"><linktext>MDC - Document.importNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Core-Document-importNode"><linktext>W3C - Document.importNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:load"><apiName>load</apiName><shortdesc>
		 
		 Replaces the content of the document with the result of parsing the given URI.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If async is set to true load returns true if the document load was successfully initiated. If an 
		 error occurred when initiating the document load load returns false. If async is set to false load returns 
		 true if the document was successfully loaded and parsed. If an error occurred when either loading or parsing 
		 the URI load returns false.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>uri</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The URI reference for the XML file to be loaded. If this is a relative URI, the base URI used by the implementation is implementation dependent.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Replaces the content of the document with the result of parsing the given URI. Invoking this method 
		 will either block the caller or return to the caller immediately depending on the value of the async 
		 attribute. Once the document is fully loaded the document will fire a "load" event that the caller can 
		 register as a listener for. If an error occurs the document will fire an "error" event so that the caller 
		 knows that the load failed (see ParseErrorEvent). If this method is called on a document that is currently 
		 loading, the current load is interrupted and the new URI load is initiated. 
		 
		 <p><b>Note (Mozilla):</b> As of at least Gecko 1.9, this no longer supports cross-site loading 
		 of documents (Use XMLHttpRequest instead).</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var xmlDoc = document.implementation.createDocument("", "test", null);
		 function documentLoaded (e) {
		 	alert(new XMLSerializer().serializeToString(e.target)); // Gives querydata.xml contents as string
		 }
		 xmlDoc.addEventListener("load", documentLoaded, false);
		 xmlDoc.load('querydata.xml');</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.load"><linktext>MDC - Document.load()</linktext></link><link href="http://www.w3.org/TR/2002/WD-DOM-Level-3-ASLS-20020409/load-save.html#LS-DocumentLS-load"><linktext>W3C - DocumentLS.load()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:loadXML"><apiName>loadXML</apiName><shortdesc>
		 
		 Replace the content of the document with the result of parsing the input string, this method is always synchronous.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if parsing the input string succeeded without errors, otherwise false.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string containing an XML document.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Replace the content of the document with the result of parsing the input string, this method is always synchronous. 
		 This method always parses from a DOMString, which means the data is always UTF16. All other encoding information is ignored. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2002/WD-DOM-Level-3-ASLS-20020409/load-save.html#LS-DocumentLS-loadXML"><linktext>W3C - DocumentLS.loadXML()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:normalizeDocument"><apiName>normalizeDocument</apiName><shortdesc>
		 This method acts as if the document was going through a save and load 
		 cycle, putting the document in a "normal" form.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 This method acts as if the document was going through a save and load 
		 cycle, putting the document in a "normal" form. As a consequence, this 
		 method updates the replacement tree of EntityReference nodes and 
		 normalizes Text nodes, as defined in the method Node.normalize().
		 Otherwise, the actual result depends on the features being set on the 
		 Document.domConfig object and governing what operations actually take 
		 place. Noticeably this method could also make the document namespace 
		 well-formed according to the algorithm described in Namespace Normalization, 
		 check the character normalization, remove the CDATASection nodes, etc. See 
		 DOMConfiguration for details.
		 
		 <codeblock>
		 // Keep in the document the information defined
		 // in the XML Information Set (Java example)
		 DOMConfiguration docConfig = myDocument.getDomConfig();
		 docConfig.setParameter("infoset", Boolean.TRUE);
		 myDocument.normalizeDocument();</codeblock>
		 
		 <p>Mutation events, when supported, are generated to reflect the changes 
		 occurring on the document.
		 If errors occur during the invocation of this method, such as an attempt 
		 to update a read-only node or a Node.nodeName contains an invalid 
		 character according to the XML version in use, errors or warnings 
		 (DOMError.SEVERITY_ERROR or DOMError.SEVERITY_WARNING) will be reported 
		 using the DOMErrorHandler object associated with the "error-handler" parameter. 
		 Note this method might also report fatal errors (DOMError.SEVERITY_FATAL_ERROR) 
		 if an implementation cannot recover from an error.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document"><linktext>MDC - Document.normalizeDocument()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Document3-normalizeDocument"><linktext>W3C - Document.normalizeDocument()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:querySelector"><apiName>querySelector</apiName><shortdesc>
		 
		 Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Selectors" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0b_unknown"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The first matching Element node within the node’s subtree. If there is no such node, returns null. 
		 
		 </apiDesc><apiOperationClassifier>dom.core:Element</apiOperationClassifier></apiReturn><apiParam><apiItemName>selectors</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One or more selectors
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;Selectors API Example&lt;/title&gt;
		 	&lt;/head&gt;
		 	&lt;body&gt;
		 
		 		&lt;div id="foo"&gt;
		 			&lt;p class="warning"&gt;This is a sample warning&lt;/p&gt;
		 			&lt;p class="error"&gt;This is a sample error&lt;/p&gt;
		 		&lt;/div&gt;
		 		&lt;div id="bar"&gt;
		 			&lt;p&gt;...&lt;/p&gt;
		 		&lt;/div&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 x would contain the first element in the document with an ID of either foo or bar (or both). In the sample document above, it would select the div element with the ID of foo because it is first in document order.
		 <codeblock>var x = document.querySelector("#foo, #bar");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/cc288169%28VS.85%29.aspx"><linktext>MSDN - querySelector Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Document.querySelector"><linktext>MDC - Document.querySelector()</linktext></link><link href="http://www.w3.org/TR/selectors-api/#nodeselector"><linktext>W3C - NodeSelector.querySelector()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:querySelectorAll"><apiName>querySelectorAll</apiName><shortdesc>
		 
		 Returns a list of all elements descended from the element on which it is invoked that match the specified group of selectors.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Selectors" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0b"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A NodeList containing all of the matching Element nodes within the node’s subtree, in document order. If there are no such nodes, returns an empty NodeList.
		 
		 </apiDesc><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier></apiReturn><apiParam><apiItemName>selectors</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One or more selectors
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns a list of all elements descended from the element on which it is invoked that match the specified group of selectors.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;Selectors API Example&lt;/title&gt;
		 	&lt;/head&gt;
		 	&lt;body&gt;
		 
		 		&lt;div id="foo"&gt;
		 			&lt;p class="warning"&gt;This is a sample warning&lt;/p&gt;
		 			&lt;p class="error"&gt;This is a sample error&lt;/p&gt;
		 		&lt;/div&gt;
		 		&lt;div id="bar"&gt;
		 			&lt;p&gt;...&lt;/p&gt;
		 		&lt;/div&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 The following example would select all p elements in the document that have a class of either "error" or "warning".
		 <codeblock>var alerts = document.querySelectorAll("p.warning, p.error");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/cc304115%28VS.85%29.aspx"><linktext>MSDN - querySelectorAll Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Document.querySelectorAll"><linktext>MDC - Document.querySelectorAll()</linktext></link><link href="http://www.w3.org/TR/selectors-api/#nodeselector"><linktext>W3C - NodeSelector.querySelectorAll()</linktext></link><link href="http://www.quirksmode.org/dom/w3c_core.html#gettingelements"><linktext>Quirksmode: Getting elements</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:renameNode"><apiName>renameNode</apiName><shortdesc>
		 Rename an existing node of type ELEMENT_NODE or ATTRIBUTE_NODE.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised when the type of 
		 the specified node is neither ELEMENT_NODE nor ATTRIBUTE_NODE, or if the 
		 implementation does not support the renaming of the document element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the new 
		 qualified name is not an XML name according to the XML version in use 
		 specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised when the specified 
		 node was created from a different document than this document.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the qualifiedName is 
		 a malformed qualified name, if the qualifiedName has a prefix and the 
		 namespaceURI is null, or if the qualifiedName has a prefix that is "xml" 
		 and the namespaceURI is different from "http://www.w3.org/XML/1998/namespace" 
		 XML Namespaces. Also raised, when the node being renamed is an attribute, 
		 if the qualifiedName, or its prefix, is "xmlns" and the namespaceURI is 
		 different from "http://www.w3.org/2000/xmlns/".
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The renamed node. This is either the specified node or the new 
		 node that was created to replace the specified node.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>n</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to rename.
		 </apiDesc></apiParam><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The new namespace URI.
		 </apiDesc></apiParam><apiParam><apiItemName>qualifiedName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The new qualified name.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Rename an existing node of type ELEMENT_NODE or ATTRIBUTE_NODE.
		 When possible this simply changes the name of the given node, 
		 otherwise this creates a new node with the specified name and 
		 replaces the existing node with the new node as described below.
		 If simply changing the name of the given node is not possible, the 
		 following operations are performed: a new node is created, any 
		 registered event listener is registered on the new node, any user 
		 data attached to the old node is removed from that node, the old 
		 node is removed from its parent if it has one, the children are moved 
		 to the new node, if the renamed node is an Element its attributes are 
		 moved to the new node, the new node is inserted at the position the 
		 old node used to have in its parent's child nodes list if it has one, 
		 the user data that was attached to the old node is attached to the 
		 new node.
		 
		 <p>When the node being renamed is an Element only the specified attributes 
		 are moved, default attributes originated from the DTD are updated 
		 according to the new element name. In addition, the implementation 
		 may update default attributes from other schemas. Applications should 
		 use Document.normalizeDocument() to guarantee these attributes are 
		 up-to-date.</p>
		 
		 <p>When the node being renamed is an Attr that is attached to an Element, 
		 the node is first removed from the Element attributes map. Then, once 
		 renamed, either by modifying the existing node or creating a new one as 
		 described above, it is put back. In addition,
		 <ul>
		 <li>a user data event NODE_RENAMED is fired,</li>
		 <li>when the implementation supports the feature "MutationNameEvents", 
		 each mutation operation involved in this method fires the appropriate 
		 event, and in the end the event {http://www.w3.org/2001/xml-events, 
		 DOMElementNameChanged} or {http://www.w3.org/2001/xml-events, 
		 DOMAttributeNameChanged} is fired.</li>
		 </ul></p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.renameNode"><linktext>MDC - Document.renameNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Document3-renameNode"><linktext>W3C - Document.renameNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:saveXML"><apiName>saveXML</apiName><shortdesc>
		 
		 Save the document or the given node to a string (i.e.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The serialized document or null.
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>snode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies what to serialize, if this parameter is null the whole document is serialized, if it's non-null the given node is serialized.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Save the document or the given node to a string (i.e. serialize the document or node). 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/2002/WD-DOM-Level-3-ASLS-20020409/load-save.html#LS-DocumentLS-saveXML"><linktext>W3C - DocumentLS.saveXML()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Document:updateSettings"><apiName>updateSettings</apiName><shortdesc>
		 Allows updating the print settings for the page.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0b_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Allows updating the print settings for the page.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/cc848923%28VS.85%29.aspx"><linktext>MSDN - updateSettings Method</linktext></link></related-links></apiOperation><apiValue id="dom.core:Document:async:get"><apiName>async</apiName><shortdesc>
		 
		 Indicates whether the method load should be synchronous or asynchronous.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMLS" version="3"/><apiPlatform description="" name="Obsolete" version="0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 Indicates whether the method load should be synchronous or asynchronous. When the async attribute is set 
		 to true the load method returns control to the caller before the document has completed loading.
		 
		 </apiDesc><example>
		 <codeblock>
		 function loadXMLData(e) {
		 	alert(new XMLSerializer().serializeToString(e.target)); // Gives querydata.xml contents as string
		 }
		 
		 var xmlDoc = document.implementation.createDocument("", "test", null);
		 xmlDoc.async = false;
		 xmlDoc.onload = loadXMLData;
		 xmlDoc.load('querydata.xml');</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.async"><linktext>MDC - Document.async</linktext></link><link href="http://www.w3.org/TR/2002/WD-DOM-Level-3-ASLS-20020409/load-save.html#LS-DocumentLS-async"><linktext>W3C - DocumentLS.async</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:defaultView:get"><apiName>defaultView</apiName><shortdesc>
		 
		 The default AbstractView for this Document, or null if none available.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMViews" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.views:AbstractView</apiValueClassifier></apiValueDef><apiDesc>
		 
		 The default AbstractView for this Document, or null if none available.
		 
		 <p><b>Note:</b> document.defaultView is generally a reference to the window object 
		 for the document, however that is not defined in the specification and can't be relied upon 
		 for all host environments, particularly as not all browsers implement it.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.defaultView"><linktext>MDC - Document.defaultView</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Views/views.html#Views-DocumentView-defaultView"><linktext>W3C - DocumentView.defaultView</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:doctype:get"><apiName>doctype</apiName><shortdesc>
		 The Document Type Declaration (see DocumentType) associated with this 
		 document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:DocumentType</apiValueClassifier></apiValueDef><apiDesc>
		 The Document Type Declaration (see DocumentType) associated with this 
		 document. For XML documents without a document type declaration this 
		 returns null. For HTML documents, a DocumentType object may be returned, 
		 independently of the presence or absence of document type declaration in 
		 the HTML document.
		 
		 <p>This provides direct access to the DocumentType node, child node of this 
		 Document. This node can be set at document creation time and later changed 
		 through the use of child nodes manipulation methods, such as 
		 Node.insertBefore, or Node.replaceChild. Note, however, that while some 
		 implementations may instantiate different types of Document objects 
		 supporting additional features than the "Core", such as "HTML", based on the DocumentType specified at creation time, changing it 
		 afterwards is very unlikely to result in a change of the features supported.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms533737%28VS.85%29.aspx"><linktext>MSDN - doctype Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.doctype"><linktext>MDC - Document.doctype</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-B63ED1A31"><linktext>W3C - Document.doctype</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:documentElement:get"><apiName>documentElement</apiName><shortdesc>
		 This is a convenience  attribute that allows direct access to the child node 
		 that is the document element of the document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Element</apiValueClassifier></apiValueDef><apiDesc>
		 This is a convenience  attribute that allows direct access to the child node 
		 that is the document element of the document.
		 
		 <p><b>Note:</b> HTML documents typically contain a single child node, &lt;html&gt;, perhaps 
		 with a DOCTYPE declaration before it. XML documents often contain multiple child nodes: the root 
		 element, the DOCTYPE declaration, and  processing instructions. </p>
		 
		 <p>That's why you should use document.documentElement rather than document.firstChild  to get the root element. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var rootElement = document.documentElement;
		 var firstTier = rootElement.childNodes;
		 // firstTier is the NodeList of the direct children of the root element
		 for (var i = 0; i &lt; firstTier.length; i++) {
		 	// do something with each direct kid of the root element
		 	// as firstTier[i]
		 }</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms533739%28VS.85%29.aspx"><linktext>MSDN - documentElement Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.documentElement"><linktext>MDC - Document.documentElement</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-87CD092"><linktext>W3C - Document.documentElement</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:documentURI:get"><apiName>documentURI</apiName><shortdesc>
		 The location of the document or null if undefined or if the Document was 
		 created using DOMImplementation.createDocument.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The location of the document or null if undefined or if the Document was 
		 created using DOMImplementation.createDocument. No lexical checking is 
		 performed when setting this attribute; this could result in a null value 
		 returned when using Node.baseURI.
		 
		 <p>Beware that when the Document supports the feature "HTML", the href attribute 
		 of the HTML BASE element takes precedence over this attribute when computing Node.baseURI.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.documentURI"><linktext>MDC - Document.documentURI</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Document3-documentURI"><linktext>W3C - Document.documentURI</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:domConfig:get"><apiName>domConfig</apiName><shortdesc>
		 The configuration used when Document.normalizeDocument() is invoked.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:DOMConfiguration</apiValueClassifier></apiValueDef><apiDesc>
		 The configuration used when Document.normalizeDocument() is invoked. 
		 
		 <p><b>Note (Mozilla):</b> This is not implemented in Mozilla at present.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Document.domConfig"><linktext>MDC - Document.domConfig</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Document3-domConfig"><linktext>W3C - Document.domConfig</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:implementation:get"><apiName>implementation</apiName><shortdesc>
		 The DOMImplementation object that handles this document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:DOMImplementation</apiValueClassifier></apiValueDef><apiDesc>
		 The DOMImplementation object that handles this document. A DOM application 
		 may use objects from multiple implementations.
		 
		 </apiDesc><example>
		 <codeblock>
		 var modName = "HTML";
		 var modVer = "2.0";
		 var conformTest = document.implementation.hasFeature(modName, modVer);
		 
		 alert("DOM " + modName + " " + modVer + " supported?: " + conformTest);
		 
		 // alerts with: "DOM HTML 2.0 supported?: true" if DOM Level 2 HTML module is supported.</codeblock>
		 
		 <p>A list of module names (e.g., Core, HTML, XML, etc) is available in the DOM Level 2 Conformance Section</p>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms535865%28VS.85%29.aspx"><linktext>MSDN - implementation Object</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms533884%28VS.85%29.aspx"><linktext>MSDN - implementation Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.implementation"><linktext>MDC - Document.implementation</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1B793EBA"><linktext>W3C - Document.implementation</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Core/introduction.html#ID-Conformance-h2"><linktext>W3C - Conformance Section</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:inputEncoding:get"><apiName>inputEncoding</apiName><shortdesc>
		 Returns a string representing the encoding under which the document was parsed (e.g.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Returns a string representing the encoding under which the document was parsed (e.g. ISO-8859-1). 
		 This is null when it is not known, such as when the Document was created in memory.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.inputEncoding"><linktext>MDC - Document.inputEncoding</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Document3-inputEncoding"><linktext>W3C - Document.inputEncoding</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:lastStyleSheetSet:get"><apiName>lastStyleSheetSet</apiName><shortdesc>
		 
		 This attribute must initially have the value null.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOM" version="0"/><apiSince version="CSSOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 
		 This attribute must initially have the value null. Its value changes when the selectedStyleSheetSet  attribute is set.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/document.lastStyleSheetSet"><linktext>MDC - Document.lastStyleSheetSet</linktext></link><link href="http://dev.w3.org/csswg/cssom/#documentstyle-lastStyleSheetSet"><linktext>W3C - DocumentStyle.lastStyleSheetSet</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:preferredStyleSheetSet:get"><apiName>preferredStyleSheetSet</apiName><shortdesc>
		 
		 This attribute must be the preferred style sheet set as set by the author.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOM" version="0"/><apiSince version="CSSOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 
		 This attribute must be the preferred style sheet set as set by the author. It is determined from the order 
		 of style sheet declarations and the Default-Style HTTP headers. If there is no preferred style sheet set, 
		 this attribute must  be the empty string. The case of this attribute must  exactly match the case given by 
		 the author where the preferred style sheet is specified or implied. This attribute must  never be null.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/document.preferredStyleSheetSet"><linktext>MDC - Document.preferredStyleSheetSet</linktext></link><link href="http://dev.w3.org/csswg/cssom/#documentstyle-preferredStyleSheetSet"><linktext>W3C - DocumentStyle.preferredStyleSheetSet</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:selectedStyleSheetSet:get"><apiName>selectedStyleSheetSet</apiName><shortdesc>
		 
		 This attribute indicates which style sheet set is in use.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOM" version="0"/><apiSince version="CSSOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 
		 This attribute indicates which style sheet set is in use. This attribute is live; changing the disabled attribute 
		 on style sheets directly will change the value of this attribute.
		 
		 <p>If all the sheets that are enabled and have a title have the same title (by case-sensitive  comparisons) 
		 then the value of this attribute must be exactly equal to the title of the first enabled style sheet with a 
		 title in the styleSheets  list. Otherwise, if style sheets from different sets are enabled, then the return 
		 value must be null (there is no way to determine what the currently selected style sheet set is in those 
		 conditions). Otherwise, either all style sheets that have a title are disabled, or there are no alternative 
		 style sheets, and selectedStyleSheetSet  must return the empty string.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/document.selectedStyleSheetSet"><linktext>MDC - Document.selectedStyleSheetSet</linktext></link><link href="http://dev.w3.org/csswg/cssom/#documentstyle-selectedStyleSheetSet"><linktext>W3C - DocumentStyle.selectedStyleSheetSet</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:strictErrorChecking:get"><apiName>strictErrorChecking</apiName><shortdesc>
		 An attribute specifying whether error checking is enforced or not.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
		 
		 </apiDefaultValue></apiValueDef><apiDesc>
		 An attribute specifying whether error checking is enforced or not. When set 
		 to false, the implementation is free to not test every possible error case 
		 normally defined on DOM operations, and not raise any DOMException on DOM 
		 operations or report errors while using Document.normalizeDocument(). In 
		 case of error, the behavior is undefined. This attribute is true by default.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.strictErrorChecking"><linktext>MDC - Document.strictErrorChecking</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Document3-strictErrorChecking"><linktext>W3C - Document.strictErrorChecking</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:styleSheetSets:get"><apiName>styleSheetSets</apiName><shortdesc>
		 
		 This must be a live list of the currently available style sheet sets.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="CSSOM" version="0"/><apiSince version="CSSOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:DOMStringList</apiValueClassifier></apiValueDef><apiDesc>
		 
		 This must be a live list of the currently available style sheet sets. This list is constructed by enumerating 
		 all the style sheets for this document available to the implementation, in the order they are listed in the 
		 styleSheets  attribute, adding the title of each style sheet with a title to the list, avoiding duplicates by 
		 dropping titles that match (case-sensitively) titles that have already been added to the list.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="htts.//developer.mozilla.org/En/DOM/document.styleSheetSets.xml"><linktext>MDC - Document.styleSheetSets</linktext></link><link href="http://dev.w3.org/csswg/cssom/#documentstyle-styleSheetSets"><linktext>W3C - DocumentStyle.styleSheetSets</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:styleSheets:get"><apiName>styleSheets</apiName><shortdesc>
		 
		 A list containing all the style sheets explicitly linked into or embedded in a document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMStyle" version="2"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.style.stylesheets:StyleSheetList</apiValueClassifier></apiValueDef><apiDesc>
		 
		 A list containing all the style sheets explicitly linked into or embedded in a document. For HTML 
		 documents, this includes external style sheets, included via the HTML LINK element, and inline 
		 STYLE elements. In XML, this includes external style sheets, included via style sheet 
		 processing instructions.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms531200%28VS.85%29.aspx"><linktext>MSDN: styleSheets Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/document.styleSheets"><linktext>MDC - Document.styleSheets</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Style/stylesheets.html#StyleSheets-StyleSheet-DocumentStyle"><linktext>W3C - DOM Level 2 Style: DocumentStyle..styleSheets</linktext></link><link href="http://dev.w3.org/csswg/cssom/#documentstyle-stylesheets"><linktext>W3C - CSSOM: DocumentStyle.styleSheets</linktext></link><link href="http://www.quirksmode.org/dom/w3c_css.html#access"><linktext>Quirksmode: Accessing style sheets</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:xmlEncoding:get"><apiName>xmlEncoding</apiName><shortdesc>
		 An attribute specifying, as part of the XML declaration, the encoding of 
		 this document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 An attribute specifying, as part of the XML declaration, the encoding of 
		 this document. This is null when unspecified or when it is not known, such 
		 as when the Document was created in memory.
		 
		 <p>If the XML Declaration states:</p>
		 
		 <codeblock>&lt;?xml version="1.0" encoding="UTF-16"?&gt;</codeblock>
		 
		 <p>...the result should be "UTF-16".</p>
		 
		 <p><b>Note (Mozilla):</b> However, Firefox 3.0 includes information on endianness (e.g., UTF-16BE for big 
		 endian encoding), and while this extra information is removed as of Firefox 3.1b3, Firefox 3.1b3 is still 
		 consulting the file's encoding, rather than the XML Declaration as the spec defines it ("An attribute specifying, 
		 as part of the XML declaration, the encoding of this document.").</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Document.xmlEncoding"><linktext>MDC - Document.xmlEncoding</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Document3-encoding"><linktext>W3C - Document.xmlEncoding</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:xmlStandalone:get"><apiName>xmlStandalone</apiName><shortdesc>
		 An attribute specifying, as part of the XML declaration, whether this 
		 document is standalone.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if this document 
		 does not support the "XML" feature. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 An attribute specifying, as part of the XML declaration, whether this 
		 document is standalone. This is false when unspecified.
		 
		 <p><b>Note:</b> No verification is done on the value when setting this attribute. 
		 Applications should use Document.normalizeDocument() with the "validate" 
		 parameter to verify if the value matches the validity constraint for 
		 standalone document declaration as defined in XML 1.0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.xmlStandalone"><linktext>MDC - Document.xmlStandalone</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Document3-standalone"><linktext>W3C - Document.xmlStandalone</linktext></link></related-links></apiValue><apiValue id="dom.core:Document:xmlVersion:get"><apiName>xmlVersion</apiName><shortdesc>
		 An attribute specifying, as part of the XML declaration, the version 
		 number of this document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier><apiException><apiDesc>NOT_SUPPORTED_ERR: Raised if the version is set 
		 to a value that is not supported by this Document or if this document does 
		 not support the "XML" feature. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 An attribute specifying, as part of the XML declaration, the version 
		 number of this document. If there is no declaration and if this document 
		 supports the "XML" feature, the value is "1.0". If this document does not 
		 support the "XML" feature, the value is always null. Changing this 
		 attribute will affect methods that check for invalid characters in XML 
		 names. Application should invoke Document.normalizeDocument() in order to 
		 check for invalid characters in the Nodes that are already part of this Document.
		 
		 <p>DOM applications may use the DOMImplementation.hasFeature(feature, version) 
		 method with parameter values "XMLVersion" and "1.0" (respectively) to 
		 determine if an implementation supports XML 1.0. DOM applications may use 
		 the same method with parameter values "XMLVersion" and "1.1" (respectively) 
		 to determine if an implementation supports XML 1.1. In both cases, in 
		 order to support XML, an implementation must also support the "XML" feature 
		 defined in this specification. Document objects supporting a version of the 
		 "XMLVersion" feature must not raise a NOT_SUPPORTED_ERR exception for the 
		 same version number when using Document.xmlVersion.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/en/DOM/document.xmlVersion"><linktext>MDC - Document.xmlVersion</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Document3-version"><linktext>W3C - Document.xmlVersion</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:DocumentFragment"><apiName>DocumentFragment</apiName><shortdesc>
	 A DocumentFragment is a minimal document object that has no parent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>selectors:NodeSelector</apiBaseInterface><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A DocumentFragment is a minimal document object that has no parent. 
	 
	 <p>It is used as a light-weight version of document to store well-formed 
	 or potentially non-well-formed fragments of XML.</p>
	 
	 <p>Various other methods can take a document fragment as an argument (e.g., 
	 any Node interface methods such as appendChild and insertBefore), in 
	 which case the children of the fragment are appended or inserted, not 
	 the fragment itself.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms759155%28VS.85%29.aspx"><linktext>MSDN - IXMLDOMDocumentFragment</linktext></link><link href="http://developer.mozilla.org/En/DOM/DocumentFragment"><linktext>MDC - DocumentFragment</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-B63ED1A3"><linktext>W3C - DocumentFragment</linktext></link></related-links><adobeApiEvent id="dom.core:DocumentFragment_DOMSubtreeModified_DOMSubtreeModified"><apiName>DOMSubtreeModified</apiName><shortdesc>
	 This is a general event for notification of all changes to the 
	 document.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMSubtreeModified</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 This is a general event for notification of all changes to the 
	 document. It can be used instead of the more specific mutation and 
	 mutation name events listed below. It may be dispatched after a 
	 single modification to the document or, at the implementation's 
	 discretion, after multiple changes have occurred. The latter use 
	 should generally be used to accommodate multiple changes which occur 
	 either simultaneously or in rapid succession. The target of this 
	 event is the lowest common parent of the changes which have taken 
	 place. This event is dispatched after any other events caused by the 
	 mutation(s) have occurred.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="dom.core:DocumentFragment:querySelector"><apiName>querySelector</apiName><shortdesc>
		 
		 Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Selectors" version="0"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The first matching Element node within the node’s subtree. If there is no such node, returns null. 
		 
		 </apiDesc><apiOperationClassifier>dom.core:Element</apiOperationClassifier></apiReturn><apiParam><apiItemName>selectors</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One or more selectors
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;Selectors API Example&lt;/title&gt;
		 	&lt;/head&gt;
		 	&lt;body&gt;
		 
		 		&lt;div id="foo"&gt;
		 			&lt;p class="warning"&gt;This is a sample warning&lt;/p&gt;
		 			&lt;p class="error"&gt;This is a sample error&lt;/p&gt;
		 		&lt;/div&gt;
		 		&lt;div id="bar"&gt;
		 			&lt;p&gt;...&lt;/p&gt;
		 		&lt;/div&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 x would contain the first element in the document with an ID of either foo or bar (or both). In the sample document above, it would select the div element with the ID of foo because it is first in document order.
		 <codeblock>var x = document.querySelector("#foo, #bar");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/selectors-api/#nodeselector"><linktext>W3C Selectors API</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DocumentFragment:querySelectorAll"><apiName>querySelectorAll</apiName><shortdesc>
		 
		 Returns a list of all elements descended from the element on which it is invoked that match the specified group of selectors.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Selectors" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5b4"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0b"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A NodeList containing all of the matching Element nodes within the node’s subtree, in document order. If there are no such nodes, returns an empty NodeList.
		 
		 </apiDesc><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier></apiReturn><apiParam><apiItemName>selectors</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One or more selectors
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns a list of all elements descended from the element on which it is invoked that match the specified group of selectors.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;Selectors API Example&lt;/title&gt;
		 	&lt;/head&gt;
		 	&lt;body&gt;
		 
		 		&lt;div id="foo"&gt;
		 			&lt;p class="warning"&gt;This is a sample warning&lt;/p&gt;
		 			&lt;p class="error"&gt;This is a sample error&lt;/p&gt;
		 		&lt;/div&gt;
		 		&lt;div id="bar"&gt;
		 			&lt;p&gt;...&lt;/p&gt;
		 		&lt;/div&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 The following example would select all p elements in the document that have a class of either "error" or "warning".
		 <codeblock>var alerts = document.querySelectorAll("p.warning, p.error");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/selectors-api/#nodeselector"><linktext>W3C Selectors API</linktext></link><link href="http://www.quirksmode.org/dom/w3c_core.html#gettingelements"><linktext>Quirksmode: Getting elements</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:Comment"><apiName>Comment</apiName><shortdesc>
	 A comment is used to add notations within markup.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:CharacterData</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A comment is used to add notations within markup.
	 
	 <p>Although it is generally not displayed, it is still available to be read in 
	 the source view. These are represented in HTML and XML as content between 
	 &lt;!-- and  --&gt; . In XML, the character sequence "--" cannot be used within a comment.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms765529%28VS.85%29.aspx"><linktext>MSDN - IXMLDOMComment</linktext></link><link href="http://developer.mozilla.org/En/DOM/Comment"><linktext>MDC - Comment</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1728279322"><linktext>W3C - DOM 3 Core: Comment</linktext></link></related-links></apiClassifier><apiClassifier id="dom.core:Notation"><apiName>Notation</apiName><shortdesc>
	 This interface represents a notation declared in the DTD.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This interface represents a notation declared in the DTD. A notation 
	 either declares, by name, the format of an unparsed entity, or is used for formal 
	 declaration of processing instruction targets. The nodeName attribute inherited from 
	 Node is set to the declared name of the notation.
	 
	 <p><b>Note:</b> A Notation node does not have any parent.</p>
	 
	 <p><b>Note (Mozilla):</b> This is not implemented in Mozilla.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms759198%28VS.85%29.aspx"><linktext>MSDN - IXMLDOMNotation</linktext></link><link href="http://developer.mozilla.org/En/DOM/Notation"><linktext>MDC - Notation</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-5431D1B9"><linktext>W3C - Notation</linktext></link></related-links><apiValue id="dom.core:Notation:publicId:get"><apiName>publicId</apiName><shortdesc>
		 The public identifier of this notation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The public identifier of this notation. If the public identifier was not 
		 specified, this is null.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms765397%28VS.85%29.aspx"><linktext>MSDN - publicId Property (IXMLDOMNotation)</linktext></link><link href="http://developer.mozilla.org/En/DOM/Notation.publicId"><linktext>MDC - Notation.publicId</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-54F2B4D0"><linktext>W3C - Notation.publicId</linktext></link></related-links></apiValue><apiValue id="dom.core:Notation:systemId:get"><apiName>systemId</apiName><shortdesc>
		 The system identifier of this notation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The system identifier of this notation. If the system identifier was not 
		 specified, this is null. This may be an absolute URI or not.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms754668%28VS.85%29.aspx"><linktext>MSDN - systemId Property (IXMLDOMNotation)</linktext></link><link href="http://developer.mozilla.org/En/DOM/Notation.systemId"><linktext>MDC - Notation.systemId</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-E8AAB1D0"><linktext>W3C - Notation.systemId</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:TypeInfo"><apiName>TypeInfo</apiName><shortdesc>
	 The TypeInfo interface represents a type referenced from Element or Attr 
	 nodes, specified in the schemas associated with the document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The TypeInfo interface represents a type referenced from Element or Attr 
	 nodes, specified in the schemas associated with the document. The type 
	 is a pair of a namespace URI and name properties, and depends on the 
	 document's schema. 
	 
	 <p><b>Note:</b> This is not implemented in Mozilla.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/En/DOM/TypeInfo"><linktext>MDC - TypeInfo</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#TypeInfo"><linktext>W3C - TypeInfo</linktext></link></related-links><apiOperation id="dom.core:TypeInfo:isDerivedFrom"><apiName>isDerivedFrom</apiName><shortdesc>
		 This method returns if there is a derivation between the reference 
		 type definition, i.e.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the document's schema is a DTD or no schema is associated 
		 with the document, this method will always return false.
		 
		 <p>
		 If the document's schema is an XML Schema, the method will true if the reference 
		 type definition is derived from the other type definition according to the 
		 derivation parameter. If the value of the parameter is 0 (no bit is set to 1 for 
		 the derivationMethod parameter), the method will return true if the other 
		 type definition can be reached by recursing any combination of {base type 
		 definition}, {item type definition}, or {member type definitions} from the 
		 reference type definition. </p>
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>typeNamespaceArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace of the other type definition. 
		 </apiDesc></apiParam><apiParam><apiItemName>typeNameArg</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the other type definition. 
		 </apiDesc></apiParam><apiParam><apiItemName>derivationMethod</apiItemName><apiType value="Number"/><apiDesc>The type of derivation and conditions applied 
		 between two types, as described in the list of constants provided in this interface. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method returns if there is a derivation between the reference 
		 type definition, i.e. the TypeInfo on which the method is being called, 
		 and the other type definition, i.e. the one passed as parameters. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/TypeInfo.isDerivedFrom"><linktext>MDC - TypeInfo.isDerivedFrom()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#TypeInfo-isDerivedFrom"><linktext>W3C - TypeInfo.isDerivedFrom()</linktext></link></related-links></apiOperation><apiValue id="dom.core:TypeInfo:DERIVATION_EXTENSION"><apiName>DERIVATION_EXTENSION</apiName><shortdesc>
		 If the document's schema is an XML Schema, this constant represents the list.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If the document's schema is an XML Schema, this constant represents the list.
		 
		 <p>
		 The reference type definition is derived by extension from the other 
		 type definition if the other type definition can be reached recursively
		 following the {base type definition} property from the reference type
		 definition, and at least one of the derivation methods involved is 
		 an extension.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:TypeInfo:DERIVATION_LIST"><apiName>DERIVATION_LIST</apiName><shortdesc>
		 If the document's schema is an XML Schema [XML Schema Part 1], this 
		 constant represents the union if simple types are involved.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>8</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If the document's schema is an XML Schema [XML Schema Part 1], this 
		 constant represents the union if simple types are involved.
		 
		 <p>
		 The reference type definition is derived by list from the other type 
		 definition if there exists two type definitions T1 and T2 such as 
		 the reference type definition is derived from T1 by DERIVATION_RESTRICTION 
		 or DERIVATION_EXTENSION, T2 is derived from the other type definition 
		 by DERIVATION_RESTRICTION, T1 has {variety} list, and T2 is the {item 
		 type definition}. Note that T1 could be the same as the reference type 
		 definition, and T2 could be the same as the other type definition. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:TypeInfo:DERIVATION_RESTRICTION"><apiName>DERIVATION_RESTRICTION</apiName><shortdesc>
		 If the document's schema is an XML Schema, this constant represents the derivation by extension.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If the document's schema is an XML Schema, this constant represents the derivation by extension.
		 
		 <p>
		 The reference type definition is derived by restriction from the other type 
		 definition if the other type definition is the same as the reference type definition, 
		 or if the other type definition can be reached recursively following the {base type 
		 definition} property from the reference type definition, and all the derivation 
		 methods involved are restriction. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:TypeInfo:DERIVATION_UNION"><apiName>DERIVATION_UNION</apiName><shortdesc>
		 If the document's schema is an XML Schema, this constant represents the derivation by 
		 restriction  if complex types are involved, or a restriction  if simple types are involved.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 If the document's schema is an XML Schema, this constant represents the derivation by 
		 restriction  if complex types are involved, or a restriction  if simple types are involved.
		 
		 <p>
		 The reference type definition is derived by union from the other 
		 type definition if there exists two type definitions T1 and T2 such 
		 as the reference type definition is derived from T1 by DERIVATION_RESTRICTION 
		 or DERIVATION_EXTENSION, T2 is derived from the other type definition 
		 by DERIVATION_RESTRICTION, T1 has {variety} union, and one of the {member 
		 type definitions} is T2. Note that T1 could be the same as the reference 
		 type definition, and T2 could be the same as the other type definition. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:TypeInfo:typeName:get"><apiName>typeName</apiName><shortdesc>
		 The name of a type declared for the associated element or attribute, 
		 or null if unknown.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The name of a type declared for the associated element or attribute, 
		 or null if unknown. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/TypeInfo.typeName"><linktext>MDC - TypeInfo.typeName</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#TypeInfo-typeName"><linktext>W3C - TypeInfo.typeName</linktext></link></related-links></apiValue><apiValue id="dom.core:TypeInfo:typeNamespace:get"><apiName>typeNamespace</apiName><shortdesc>
		 The namespace of the type declared for the associated element 
		 or attribute or null if the element does not have declaration or 
		 if no namespace information is available.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The namespace of the type declared for the associated element 
		 or attribute or null if the element does not have declaration or 
		 if no namespace information is available. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/TypeInfo.typeNamespace"><linktext>MDC - TypeInfo.typeNamespace</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#TypeInfo-typeNamespace"><linktext>W3C - TypeInfo.typeNamespace</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:Text"><apiName>Text</apiName><shortdesc>
	 The Text interface represents the textual content of an Element or Attr.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:CharacterData</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The Text interface represents the textual content of an Element or Attr.  If an 
	 element has no markup within its content, it has a single child implementing Text 
	 that contains the element's text.  However, if the element contains markup, it is 
	 parsed into information items and Text nodes that form its children.
	 
	 <p>New documents have a single Text node for each block of text.  Over time, more 
	 Text nodes may be created as the document's content changes.  The Node.normalize() 
	 method merges adjacent Text objects back into a single node for each block of text.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757862%28VS.85%29.aspx"><linktext>MSDN - IXMLDOMText</linktext></link><link href="http://developer.mozilla.org/En/DOM/Text"><linktext>MDC - Text</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1312295772"><linktext>W3C - Text</linktext></link></related-links><apiOperation id="dom.core:Text:replacewholeText"><apiName>replacewholeText</apiName><shortdesc>
		 Replaces the text of the node and all of its logically adjacent text nodes 
		 with the specified text.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="Firefox" version="3.5+"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR : One of the 
		 text nodes being replaced is read only.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The Text node created with the specified content.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Text</apiOperationClassifier></apiReturn><apiParam><apiItemName>content</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifying the text with which to replace the node's current contents.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the text of the node and all of its logically adjacent text nodes 
		 with the specified text.  The replaced nodes are removed, including the 
		 current node, unless it was the recipient of the replacement text.
		 
		 <p><b>Note:</b> This method returns the text node which received the replacement text, or null 
		 if the replacement text is an empty string.  The returned node is the current 
		 node unless the current node is read only, in which case the returned node is 
		 a newly created text node of the same type which has been inserted at the 
		 location of the replacement.</p>
		 
		 <p><b>Note (Mozilla):</b> Firefox's implementation of this method does not yet support EntityReference 
		 nodes as defined by the specification.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Text.replaceWholeText"><linktext>MDC - Text.replacewholeText()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Text3-replaceWholeText"><linktext>W3C - Text.replacewholeText()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Text:splitText"><apiName>splitText</apiName><shortdesc>
		 Breaks the Text node into two nodes at the specified offset, keeping both 
		 nodes in the tree as siblings.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INDEX_SIZE_ERR : The specified offset is negative or is greater than the number of 16-bit units in the node's text.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR : The node is read only.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The new node, of the same type as this node.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Text</apiOperationClassifier></apiReturn><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiDesc>16-bit integer offset at which to split; the first character in the node is numbered zero.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Breaks the Text node into two nodes at the specified offset, keeping both 
		 nodes in the tree as siblings.
		 
		 <p><b>Note:</b> After the split, the current node contains all the content up to the specified 
		 offset point, and a newly created node of the same type contains the remaining 
		 text.  The newly created node is returned to the caller.  If the original node 
		 had a parent, the new node is inserted as the next sibling of the original 
		 node.  If the offset is equal to the length of the original node, the newly 
		 created node has no data.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms753789%28VS.85%29.aspx"><linktext>MSDN - splitText Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Text.splitText"><linktext>MDC - Text.splitText()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-38853C1D"><linktext>W3C - Text.splitText()</linktext></link></related-links></apiOperation><apiValue id="dom.core:Text:isElementContentWhitespace:get"><apiName>isElementContentWhitespace</apiName><shortdesc>
		 Returns a Boolean value indicating whether or not the text node contains whitespace within its content.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Returns a Boolean value indicating whether or not the text node contains whitespace within its content.  
		 This determination is made during the loading of the document, or if validation occurs when Document.normalizeDocument() is called.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Text.isElementContentWhitespace"><linktext>MDC - Text.isElementContentWhitespace</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Text3-isElementContentWhitespace"><linktext>W3C - Text.isElementContentWhitespace</linktext></link></related-links></apiValue><apiValue id="dom.core:Text:wholeText:get"><apiName>wholeText</apiName><shortdesc>
		 Returns all text of all Text nodes logically adjacent to this node, concatenated in document order.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="Firefox" version="3.5+"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Returns all text of all Text nodes logically adjacent to this node, concatenated in document order.
		 
		 </apiDesc><example>
		 Suppose you have the following simple paragraph within your webpage (with 
		 some whitespace added to aid formatting throughout the code samples here), 
		 whose DOM node is stored in the variable para:
		 
		 <codeblock>
		 &lt;p&gt;Thru-hiking is great!  &lt;strong&gt;No insipid election coverage!&lt;/strong&gt;
		 However, &lt;a href="http://en.wikipedia.org/wiki/Absentee_ballot"&gt;casting a  
		 ballot&lt;/a&gt; is tricky.&lt;/p&gt;</codeblock>
		 
		 <p>You decide you don’t like the middle sentence, so you remove it:</p>
		 
		 <codeblock>para.removeChild(para.childNodes[1]);</codeblock>
		 
		 <p>Later, you decide to rephrase things to, “Thru-hiking is great, but casting a 
		 ballot is tricky.” while preserving the hyperlink. So you try this:</p>
		 
		 <codeblock>para.firstChild.data = "Thru-hiking is great, but ";</codeblock>
		 
		 <p>All set, right? Wrong! What happened was you removed the strong element, 
		 but the removed sentence’s element separated two text nodes, one for the 
		 first sentence and one for the first word of the last. Instead, you now 
		 effectively have this:</p>
		 
		 <codeblock>
		 &lt;p&gt;Thru-hiking is great, but However, &lt;a href="http://en.wikipedia.org/wiki/Absentee_ballot"&gt;
		 casting a ballot&lt;/a&gt; is tricky.&lt;/p&gt;</codeblock>
		 
		 <p>You’d really prefer to treat all those adjacent text nodes as a single one. 
		 That’s where wholeText comes in: if you have multiple adjacent text nodes, 
		 you can access the contents of all of them using wholeText. Let’s pretend 
		 you never made that last mistake. In that case, we have:</p>
		 
		 <codeblock>assert(para.firstChild.wholeText == "Thru-hiking is great!    However, ");</codeblock>
		 
		 <p>wholeText is just a property of text nodes that returns the string of data 
		 making up all the adjacent (i.e. not separated by an element boundary) 
		 text nodes together.</p>
		 
		 <p>Now let’s return to our original problem. What we want is to be able to 
		 replace the whole text with new text. That’s where replaceWholeText() 
		 comes in:</p>
		 
		 <codeblock>para.firstChild.replaceWholeText("Thru-hiking is great, but ");</codeblock>
		 
		 <p>We’re removing every adjacent text node (all the ones that constituted 
		 the whole text) but the one on which replaceWholeText() is called, and 
		 we’re changing the remaining one to the new text. What we have now is this:</p>
		 
		 <codeblock>
		 &lt;p&gt;Thru-hiking is great, but &lt;a href="http://en.wikipedia.org/wiki/Absentee_ballot"&gt;
		 casting a ballot&lt;/a&gt; is tricky.&lt;/p&gt;</codeblock>
		 
		 <p>Some uses of the whole-text functionality may be better served by using 
		 Node.textContent or the longstanding innerHTML; that’s fine and probably 
		 clearer in most circumstances. If you have to work with mixed content 
		 within an element as here, however, wholeText and replaceWholeText() may be useful.</p>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Text.wholeText"><linktext>MDC - Text.wholeText</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Text3-wholeText"><linktext>W3C - Text.wholeText</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:CDATASection"><apiName>CDATASection</apiName><shortdesc>
	 A CDATA Section can be used within XML to include extended portions of 
	 unescaped text, such that the symbols &amp;lt; and &amp;amp; do not need escaping as 
	 they normally do within XML when used as text.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Text</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A CDATA Section can be used within XML to include extended portions of 
	 unescaped text, such that the symbols &lt; and &amp; do not need escaping as 
	 they normally do within XML when used as text.
	 
	 <p><b>Note:</b> CDATA sections should not be used (without hiding) within HTML.</p>
	 
	 </apiDesc><example>
	 For example:
	 <codeblock>&lt;foo&gt;Here is a CDATA section: &lt;![CDATA[  &lt; &gt; &amp; ]]&gt; with all kinds of unescaped text. &lt;/foo&gt;</codeblock>
	 The only sequence which is not allowed within a CDATA section is the closing sequence of a CDATA section itself:
	 <codeblock>&lt;![CDATA[  ]]&gt; will cause an error   ]]&gt;</codeblock>
	 
	 </example></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms762780%28VS.85%29.aspx"><linktext>MSDN - IXMLDOMCDATASection</linktext></link><link href="http://developer.mozilla.org/en/DOM/CDATASection"><linktext>MDC - CDATASection</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-667469212"><linktext>W3C - CDATASection</linktext></link></related-links></apiClassifier><apiClassifier id="dom.core:Node"><apiName>Node</apiName><shortdesc>
	 A Node is an interface from which a number of DOM types inherit, and 
	 allows these various types to be treated (or tested) similarly.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>dom.events:EventTarget</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A Node is an interface from which a number of DOM types inherit, and 
	 allows these various types to be treated (or tested) similarly. The 
	 following all inherit this interface and its methods and properties 
	 (though they may return null in particular cases where not relevant 
	 (or throw an exception when adding children to a node type for which 
	 no children can exist)): Document, Element, Attr, CharacterData (which 
	 Text, Comment, and CDATASection inherit), ProcessingInstruction, 
	 DocumentFragment, DocumentType, Notation, Entity, EntityReference
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node"><linktext>MDC - Node</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1950641247"><linktext>W3C - Node</linktext></link></related-links><apiOperation id="dom.core:Node:addEventListener"><apiName>addEventListener</apiName><shortdesc>
		 
		 Associates a function with a particular event and binds the event to the current node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string representing the event to bind, without the "on" prefix. For example, "click", "mousedown" etc.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The function or method to associate with the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Whether to bind the event as it is propagating towards the target node, (event Capture), or as the 
		 event bubbles upwards from the target (event bubble). Set to true or false, respectively.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Associates a function with a particular event and binds the event to the current node.
		 
		 </apiDesc><example>
		 <codeblock>
		 function statusreport() {
		 		alert("document has loaded");
		 }
		 
		 if (window.addEventListener) {
		 		window.addEventListener("load", statusreport, false); //invoke function
		 }
		 window.onload = statusreport(); //function invoked again, since no event handler conflicts</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-addEventListener"><linktext>W3C - DOM 3 Events: EventTarget.addEventListener()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:addEventListenerNS"><apiName>addEventListenerNS</apiName><shortdesc>
		 
		 Registers an event listener, depending on the useCapture parameter, on the 
		 capture phase of the DOM event flow or its target and bubbling phases.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.namespaceURI associated with the event for which the user is registering.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string representing the event to bind, without the "on" prefix. For example, "click", "mousedown" etc.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The function or method to associate with the event.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Whether to bind the event as it is propagating towards the target node, (event Capture), or as the 
		 event bubbles upwards from the target (event bubble). Set to true or false, respectively.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Registers an event listener, depending on the useCapture parameter, on the 
		 capture phase of the DOM event flow or its target and bubbling phases.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-addEventListener"><linktext>W3C - DOM 3 Events: EventTarget.addEventListener()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:appendChild"><apiName>appendChild</apiName><shortdesc>
		 Adds a node to the end of the list of children of a specified parent node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if this 
		 node is of a type that does not allow children of the type of the 
		 newChild node, or if the node to append is one of this node's 
		 ancestors or this node itself, or if this node is of type Document 
		 and the DOM application attempts to append a second DocumentType or 
		 Element node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if newChild 
		 was created from a different document than the one that created 
		 this node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly or if the previous parent of the node being 
		 inserted is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: if the newChild node 
		 is a child of the Document node, this exception might be raised if 
		 the DOM implementation doesn't support the removal of the 
		 DocumentType child or Element child.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>Returns a reference to the element that is appended to the object.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Object that specifies the element to append.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a node to the end of the list of children of a specified parent node. 
		 If the node already exists it is removed from current parent node, then added to new parent node.
		 
		 <p><b>Note:</b> If child is a reference to an existing node in the document, 
		 appendChild moves it from its current position to the new position (i.e. there is no 
		 requirement to remove the node from its parent node before appending it to some other node).</p>
		 
		 <p><b>Note:</b> This also means that a node can't be in two points of the document 
		 simultaneously. So if the node already has a parent, it is first removed, then appended at 
		 the new position.</p>
		 
		 <p><b>Note:</b> You can use cloneNode to make a copy of the node before appending
		 it under the new parent. (Note that the copies made with cloneNode will not be automatically 
		 kept in sync.)</p>
		 
		 <p><b>Note:</b> This method is not allowed to move nodes between different documents. 
		 If you want to append node from a different document (for example to display results from AJAX 
		 request) you must first use importNode.</p>
		 
		 <p><b>Note (IE6):</b> In Microsoft Internet Explorer 6, This method now applies to 
		 the attribute object. </p>
		 
		 <p><b>Note:</b> When inserting a node tree under another node that has a different 
		 owner document, the  ownerDocument property for each inserted node is changed to match the owner 
		 document of its new parent.</p>
		 
		 <p><b>Note:</b> When moving a node tree to another document, the content of all entity 
		 reference nodes contained therein is updated to conform to the new document. If the new document 
		 does not declare an entity that was moved into it, the entity reference will have no children, and 
		 the old content is removed. Existing references to nodes under the entity reference are still valid, 
		 but the node whose parent previously was the entity reference now has a null parent. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // Create a new paragraph element, and append it to the end of the document body
		 var p = document.createElement("p");
		 document.body.appendChild(p);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa925543.aspx"><linktext>MSDN - appendChild Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.appendChild"><linktext>MDC - Node.appendChild()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-184E7107"><linktext>W3C - Node.appendChild()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:cloneNode"><apiName>cloneNode</apiName><shortdesc>
		 Returns a duplicate of the current node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns a reference to the newly created node.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>cloneChildren</apiItemName><apiType value="Boolean"/><apiDesc>FALSE, cloned objects do not include childNodes. TRUE, cloned objects include childNodes.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a duplicate of the current node. 
		 
		 <p><b>Note:</b> Cloning a node copies all of its attributes and their values. </p>
		 
		 <p><b>Note:</b> The duplicate node returned by cloneNode is not part of the 
		 document until it is added to another node that is part of the document using appendChild 
		 or a similar method. It also has no parent until it is appended to another node. </p>
		 
		 <p><b>Note:</b> If cloneChildren is set to false, none of the child nodes 
		 are cloned. Any text that the node contains is not cloned either, as it is contained in 
		 one or more child Text nodes. </p>
		 
		 <p><b>Note:</b> When you refer to the ID of a cloned element, a collection is returned.</p>
		 
		 <p><b>Note:</b> To clone a node for appending to a different document, use importNode instead. </p>
		 
		 <p><b>Note (IE):</b> If the node is the DOMDocument node, it is safer to clone the document 
		 using the save method, as follows. doc.save(doc2); </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 p = document.getElementById("para1"); 
		 p_prime = p.cloneNode(true);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa923265.aspx"><linktext>MSDN - cloneNode Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.cloneNode"><linktext>MDC - Node.cloneNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-3A0ED0A4"><linktext>W3C - Node.cloneNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:compareDocumentPosition"><apiName>compareDocumentPosition</apiName><shortdesc>
		 Compares the position of the current node against another node in any other document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: when the compared 
		 nodes are from different DOM implementations that do not coordinate 
		 to return consistent implementation-specific results.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The return value is computed as the relationship that otherNode has
		 
		 </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>other</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node that's being compared against.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Compares the position of the current node against another node in any other document.
		 
		 </apiDesc><example>
		 <codeblock>
		 var head = document.getElementsByTagName('head').item(0);
		 var result = head.compareDocumentPosition(document.body);
		 // result = Node.DOCUMENT_POSITION_FOLLOWING</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.compareDocumentPosition"><linktext>MDC - Node.compareDocumentPosition()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-compareDocumentPosition"><linktext>W3C - Node.compareDocumentPosition()</linktext></link><link href="dom.core.xml#Node/DOCUMENT_POSITION_DISCONNECTED"><linktext>DOCUMENT_POSITION_DISCONNECTED</linktext></link><link href="dom.core.xml#Node/DOCUMENT_POSITION_PRECEDING"><linktext>DOCUMENT_POSITION_PRECEDING</linktext></link><link href="dom.core.xml#Node/DOCUMENT_POSITION_FOLLOWING"><linktext>DOCUMENT_POSITION_FOLLOWING</linktext></link><link href="dom.core.xml#Node/DOCUMENT_POSITION_CONTAINS"><linktext>DOCUMENT_POSITION_CONTAINS</linktext></link><link href="dom.core.xml#Node/DOCUMENT_POSITION_CONTAINED_BY"><linktext>DOCUMENT_POSITION_CONTAINED_BY</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
		 
		 Dispatches an event to fire on a node artificially.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata><asCustoms><modified>DOMEvents 3
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Indicates whether any of the listeners which handled the 
		 event called Event.preventDefault(). If Event.preventDefault() was 
		 called the returned value is false, else it is true.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>evt</apiItemName><apiOperationClassifier>dom.events:Event</apiOperationClassifier><apiDesc>The event to be dispatched.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Dispatches an event to fire on a node artificially.
		 
		 <p><b>Note (IE):</b> IE's equivalent of dispatchEvent() is fireEvent().</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;div id="test" onclick="alert('hi')"&gt;Sample DIV.&lt;/div&gt;
		 &lt;script type="text/javascript"&gt;
		 //Generate an artificial click event on "test". Fires alert("hi")
		 var clickevent = document.createEvent("MouseEvents");
		 clickevent.initEvent("click", true, true);
		 document.getElementById("test").dispatchEvent(myevent);
		 &lt;/script&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-dispatchEvent"><linktext>W3C - DOM 3 Events: EventTarget.dispatchEvent()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:getFeature"><apiName>getFeature</apiName><shortdesc>
		 This method returns a specialized object which implements the 
		 specialized APIs of the specified feature and version, as specified 
		 in DOM Features.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns an object which implements the specialized APIs of the 
		 specified feature and version, if any, or null if there is no object 
		 which implements interfaces associated with that feature. If the 
		 DOMObject returned by this method implements the Node interface, it must 
		 delegate to the primary core Node and not return results inconsistent 
		 with the primary core Node  such as attributes, childNodes, etc. 
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>feature</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the feature requested. Note that any plus 
		 sign "+" prepended to the name of the feature will be ignored since it 
		 is not significant in the context of this method. 
		 </apiDesc></apiParam><apiParam><apiItemName>version</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This is the version number of the feature to test. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 This method returns a specialized object which implements the 
		 specialized APIs of the specified feature and version, as specified 
		 in DOM Features. The specialized object may also be obtained by using 
		 binding-specific casting methods but is not necessarily expected to, 
		 as discussed in Mixed DOM Implementations. This method also allow 
		 the implementation to provide specialized objects which do not support 
		 the Node interface. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.getFeature"><linktext>MDC - Node.getFeature()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-getFeature"><linktext>W3C - Node.getFeature()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:getUserData"><apiName>getUserData</apiName><shortdesc>
		 Retrieves the object associated to a key on a this node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns the DOMUserData associated to the given key on this node, 
		 or null if there was none.
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMUserData</apiOperationClassifier></apiReturn><apiParam><apiItemName>key</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The key the object is associated to.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the object associated to a key on a this node. The object must 
		 first have been set to this node by calling setUserData with the same key.
		 
		 </apiDesc><example>
		 <codeblock>
		 var d = document.setUserData('key', 15, null);
		 alert(document.getUserData('key')); // 15</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.getUserData"><linktext>MDC - Node.getUserData()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-getUserData"><linktext>W3C - Node.getUserData()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:hasAttributes"><apiName>hasAttributes</apiName><shortdesc>
		 Returns a boolean value of true or false, indicating if the current element 
		 has any attributes or not.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the current element has any attributes or not. 
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Returns a boolean value of true or false, indicating if the current element 
		 has any attributes or not. 
		 
		 </apiDesc><example>
		 <codeblock>
		 t1 = document.getElementById("table-data"); 
		 if (t1.hasAttributes()) { 
		 	// do something with t1.attributes
		 }</codeblock>
		 
		 <codeblock> var result=document.getElementsByTagName("div")[0].hasAttributes();</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.hasAttributes"><linktext>MDC - Node.hasAttributes()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-NodeHasAttrs"><linktext>W3C - Node.hasAttributes()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:hasChildNodes"><apiName>hasChildNodes</apiName><shortdesc>
		 Returns a value that indicates whether the object has children.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Returns a value that indicates whether the object has children. 
		 
		 <p><b>Note:</b> If the object contains HTML Elements or TextNodes, they can be 
		 accessed from the childNodes collection.</p>
		 
		 <p><b>Note:</b> element.hasChildNodes, without the parenthesises, will return the 
		 hasChildNodes Function, and not a Boolean.</p>
		 
		 <p><b>Note (IE6):</b> In Microsoft Internet Explorer 6, This method now applies to the 
		 attribute object. </p>
		 
		 </apiDesc><example>
		 Remove the first child node inside the element with the id "foo" if foo has child nodes.
		 <codeblock>
		 var foo = document.getElementById("foo");
		 if (foo.hasChildNodes()) { 
		 	foo.removeChild(foo.childNodes[0]);
		 }</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924162.aspx"><linktext>MSDN - hasChildNodes Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.hasChildNodes"><linktext>MDC - Node.hasChildNodes()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-810594187"><linktext>W3C - Node.hasChildNodes()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:insertBefore"><apiName>insertBefore</apiName><shortdesc>
		 Inserts the specified node before a reference element as a child of 
		 the current node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if this 
		 node is of a type that does not allow children of the type of the 
		 newChild node, or if the node to insert is one of this node's 
		 ancestors or this node itself, or if this node is of type Document 
		 and the DOM application attempts to insert a second DocumentType 
		 or Element node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if newChild 
		 was created from a different document than the one that created 
		 this node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly or if the parent of the node being inserted 
		 is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if refChild is 
		 not a child of this node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: if this node is of 
		 type Document, this exception might be raised if the DOM 
		 implementation doesn't support the insertion of a DocumentType or 
		 Element node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>Returns a reference to the element that is inserted into the document.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>newNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to insert. 
		 </apiDesc></apiParam><apiParam><apiItemName>childNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node before which newNode is inserted. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the specified node before a reference element as a child of 
		 the current node. 
		 
		 <p><b>Note:</b> Do not specify the childNode  parameter when inserting the 
		 first child node. If children already exist and you do not specify 
		 the childNode  parameter, the oNewNode  becomes the last child of 
		 the parent object.</p>
		 
		 <p><b>Note (IE6):</b> In Microsoft Internet Explorer 6, This method now applies to the 
		 attribute object.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		  &lt;html&gt;
		 
		 &lt;head&gt;
		 	&lt;title&gt;Gecko DOM insertBefore test&lt;/title&gt;
		 &lt;/head&gt;
		 
		 &lt;body&gt;
		 
		 &lt;div&gt;
		 	&lt;span id="childSpan"&gt;foo bar&lt;/span&gt;
		 &lt;/div&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 	// create an empty element node
		 	// without an ID, any attributes, or any content
		 	var sp1 = document.createElement("span");
		 
		 	// give it an id attribute called 'newSpan'
		 	sp1.setAttribute("id", "newSpan");
		 
		 	// create some content for the newly created element.
		 	var sp1_content = document.createTextNode("This is a new span element. ");
		 
		 	// apply that content to the new element
		 	sp1.appendChild(sp1_content);
		 
		 	var sp2 = document.getElementById("childSpan");
		 	var parentDiv = sp2.parentNode;
		 
		 	// insert the new element into the DOM before sp2
		 	parentDiv.insertBefore(sp1, sp2);
		 &lt;/script&gt;
		 
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 <p>There is no insertAfter method, however it can be emulated using a combination of insertBefore and nextSibling. </p>
		 
		 <p>From the above example, sp1 could be inserted after sp2 using: </p>
		 
		 <codeblock>parentDiv.insertBefore(sp1, sp2.nextSibling);</codeblock>
		 
		 <p>If sp2 does not have a next sibling it must be the last child—sp2.nextSibling will return 
		 null so sp1 will be inserted at the end of the child nodes list (i.e. immediately after sp2). </p>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa922819.aspx"><linktext>MSDN - insertBefore Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.insertBefore"><linktext>MDC - Node.insertBefore()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-952280727"><linktext>W3C - Node.insertBefore()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:isDefaultNamespace"><apiName>isDefaultNamespace</apiName><shortdesc>
		 Returns true if the namespace is the default namespace on the given 
		 node or false if not.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the namespace is the default namespace on the given 
		 node or false if not.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace against which the element will be checked.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns true if the namespace is the default namespace on the given 
		 node or false if not.
		 
		 </apiDesc><example>
		 <codeblock>
		 var XULNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
		 var el = document.getElementsByTagNameNS(XULNS, 'textbox')[0];
		 alert(el.isDefaultNamespace(XULNS)); // true</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.isDefaultNamespace"><linktext>MDC - Node.isDefaultNamespace()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isDefaultNamespace"><linktext>W3C - Node.isDefaultNamespace()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:isEqualNode"><apiName>isEqualNode</apiName><shortdesc>
		 Tests whether two nodes are equal.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns true if the nodes are equal, false  otherwise.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>arg</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to compare equality with.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Tests whether two nodes are equal.
		 
		 <p>This method tests for equality of nodes, not sameness (i.e., whether
		 the two nodes are references to the same object) which can be tested 
		 with Node.isSameNode(). All nodes that are the same will also be 
		 equal, though the reverse may not be true. Two nodes are equal if and 
		 only if the following conditions are satisfied:
		 <ul>
		 <li>The two nodes are of the same type.</li>
		 <li>The following string attributes are equal: nodeName, localName, 
		 namespaceURI, prefix, nodeValue. This is: they are both null, or they 
		 have the same length and are character for character identical.</li>
		 <li>The attributes NamedNodeMaps are equal. This is: they are both null, 
		 or they have the same length and for each node that exists in one map 
		 there is a node that exists in the other map and is equal, although not 
		 necessarily at the same index.</li>
		 <li>The childNodes NodeLists are equal. This is: they are both null, or 
		 they have the same length and contain equal nodes at the same index. 
		 Note that normalization can affect equality; to avoid this, nodes should 
		 be normalized before being compared.</li>
		 </ul>
		 </p>
		 
		 <p>For two DocumentType nodes to be equal, the following conditions must 
		 also be satisfied:
		 <ul>
		 <li>The following string attributes are equal: publicId, systemId, internalSubset.</li>
		 <li>The entities NamedNodeMaps are equal.</li>
		 <li>The notations NamedNodeMaps are equal.</li>
		 </ul>
		 </p>
		 
		 <p>On the other hand, the following do not affect equality: the ownerDocument, 
		 baseURI, and parentNode attributes, the specified attribute for Attr nodes, 
		 the schemaTypeInfo attribute for Attr and Element nodes, the 
		 Text.isElementContentWhitespace attribute for Text nodes, as well as any 
		 user data or event listeners registered on the nodes.</p>
		 
		 <p>Note: As a general rule, anything not mentioned in the description above 
		 is not significant in consideration of equality checking. Note that future 
		 versions of this specification may take into account more attributes and 
		 implementations conform to this specification are expected to be 
		 updated accordingly. </p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.isEqualNode"><linktext>MDC - Node.isEqualNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isEqualNode"><linktext>W3C - Node.isEqualNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:isSameNode"><apiName>isSameNode</apiName><shortdesc>
		 Returns whether this node is the same node as the given one.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns true if the nodes are the same, false otherwise.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>other</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The node to test against.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns whether this node is the same node as the given one.
		 This method provides a way to determine whether two Node references 
		 returned by the implementation reference the same object. When two 
		 Node references are references to the same object, even if through a 
		 proxy, the references may be used completely interchangeably, such 
		 that all attributes have the same values and calling the same DOM method 
		 on either reference always has exactly the same effect.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.isSameNode"><linktext>MDC - Node.isSameNode()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isSameNode"><linktext>W3C - Node.isSameNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:isSupported"><apiName>isSupported</apiName><shortdesc>
		 Tests whether the DOM implementation implements a specific feature 
		 and that feature is supported by this node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>feature</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>name of the feature to test. This is the same name 
		 which can be passed to the method hasFeature on DOMImplementation. 
		 Possible values defined within the core DOM specification are listed 
		 on the DOM Level 2 Conformance Section.  The name of the feature to 
		 test. This is the same name which can be passed to the method 
		 hasFeature on DOMImplementation. Possible values defined within 
		 the core DOM specification are listed on the DOM Level 2 Conformance Section. 
		 </apiDesc></apiParam><apiParam><apiItemName>version</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>This is the version number of the feature to test. In DOM 
		 Level 2, version 1, this is the string 2.0. If the version is not specified, 
		 supporting any version of the feature will cause the method to return true. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Tests whether the DOM implementation implements a specific feature 
		 and that feature is supported by this node. 
		 
		 <p><b>Note:</b> To check if any version of the DOM specification is supported, 
		 you can pass in null as the version instead of a string. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // Get an element and check to see if its supports the DOM2 HTML Module
		 &lt;div id="doc"&gt;
		 &lt;/div&gt;
		 var main = document.getElementById('doc');
		 var output = main.isSupported('HTML', '2.0');</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.isSupported"><linktext>MDC - Node.isSupported()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Level-2-Core-Node-supports"><linktext>W3C - Node.isSupported()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:lookupNamespaceURI"><apiName>lookupNamespaceURI</apiName><shortdesc>
		 Takes a prefix and returns the namespaceURI associated with it on the 
		 given node if found (and null if not).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns the associated namespace URI or null if none is found.
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>prefix</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The prefix to look for. If this parameter is null, 
		 the method will return the default namespace URI if any.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Takes a prefix and returns the namespaceURI associated with it on the 
		 given node if found (and null if not). Supplying null for the prefix 
		 will return the default namespace.
		 
		 <p><b>Note (Mozilla):</b> Due to bug 312019, this method does not work with 
		 dynamically assigned namespaces (i.e., those set with Node.prefix).</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.lookupNamespaceURI"><linktext>MDC - Node.lookupNamespaceURI()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespaceURI"><linktext>W3C - Node.lookupNamespaceURI()</linktext></link><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=312019"><linktext>bug 312019</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:lookupPrefix"><apiName>lookupPrefix</apiName><shortdesc>
		 Returns the prefix for a given namespaceURI if present, and null if not.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns an associated namespace prefix if found or null  if none is 
		 found. If more than one prefix are associated to the namespace prefix, the 
		 returned namespace prefix is implementation dependent.
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI to look for.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the prefix for a given namespaceURI if present, and null if not. 
		 When multiple prefixes are possible, the result is implementation-dependent.
		 
		 <p><b>Note (Mozilla):</b> Due to bug 312019, this method does not work with 
		 dynamically assigned namespaces (i.e., those set with Node.prefix).</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.lookupPrefix"><linktext>MDC - Node.lookupPrefix()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix"><linktext>W3C - Node.lookupPrefix()</linktext></link><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=312019"><linktext>bug 312019</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:normalize"><apiName>normalize</apiName><shortdesc>
		 Puts the specified node and all of its subtree into a "normalized" 
		 form.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Puts the specified node and all of its subtree into a "normalized" 
		 form. In a normalized subtree, no text nodes in the subtree are 
		 empty and there are no adjacent text nodes. 
		 
		 <p><b>Note (IE):</b> By calling object.normalize before the subelements of an 
		 object are manipulated, you ensure that the document object model 
		 has a consistent structure. The normal form is useful for operations 
		 that require a consistent document tree structure, and it ensures 
		 that the document object model view is identical when saved and reloaded.</p>
		 
		 <p><b>Note (IE):</b> Adjacent CDATA sections will not be merged by the normalize 
		 method, allowing for an inconsistent object model when CDATA 
		 sections are present.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.normalize"><linktext>MDC - Node.normalize()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-normalize"><linktext>W3C - Node.normalize()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:removeChild"><apiName>removeChild</apiName><shortdesc>
		 Removes a child node from the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if oldChild is not 
		 a child of this node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: if this node is of 
		 type Document, this exception might be raised if the DOM implementation 
		 doesn't support the removal of the DocumentType child or the Element child.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>Returns a reference to the object that is removed.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies the element to be removed from the document.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a child node from the object.
		 
		 <p>The node to be removed must be an immediate child of the parent object.</p>
		 
		 <p>If child is actually not a child of the element node, the method throws an exception. </p>
		 
		 <p><b>Note:</b> The removed child node still exists in memory, but is no longer part of the DOM. 
		 You may reuse the removed node later in your code, via the oldChild object reference.</p>
		 
		 <p><b>Note (IE6):</b> In Microsoft Internet Explorer 6, This method now applies to the attribute object. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // &lt;div id="top" align="center"&gt;
		 //   &lt;div id="nested"&gt;&lt;/div&gt; 
		 // &lt;/div&gt;
		 
		 var d = document.getElementById("top"); 
		 var d_nested = document.getElementById("nested"); 
		 var throwawayNode = d.removeChild(d_nested);</codeblock>
		 
		 <codeblock>
		 // remove all children from element
		 var element = document.getElementById("top");
		 while (element.firstChild) {
		 	element.removeChild(element.firstChild);
		 }</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa923301.aspx"><linktext>MSDN - removeChild Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.removeChild"><linktext>MDC - Node.removeChild()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1734834066"><linktext>W3C - Node.removeChild()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
		 
		 Removes an event listener.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="2"/><apiSince version="DOMEvents 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.type for which the user registered 
		 the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The EventListener to be removed.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether the EventListener being removed 
		 was registered for the capture phase or not. If a listener was 
		 registered twice, once for the capture phase and once for the target 
		 and bubbling phases, each must be removed separately. Removal of an 
		 event listener registered for the capture phase does not affect the 
		 same event listener registered for the target and bubbling phases, 
		 and vice versa.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Removes an event listener.
		 
		 <p>Calling removeEventListener with arguments 
		 which do not identify any currently registered EventListener on the 
		 EventTarget has no effect. The Event.namespaceURI for which the user 
		 registered the event listener is implied and is null.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTarget-removeEventListener"><linktext>W3C - DOM 3 Events: EventTarget.removeEventListener()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:removeEventListenerNS"><apiName>removeEventListenerNS</apiName><shortdesc>
		 
		 Removes an event listener.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMEvents" version="3"/><apiSince version="DOMEvents 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>namespaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.namespaceURI associated with the event for which the user registered the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the Event.type for which the user registered 
		 the event listener.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>dom.events:EventListener</apiOperationClassifier><apiDesc>The EventListener to be removed.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiDesc>Specifies whether the EventListener being removed 
		 was registered for the capture phase or not. If a listener was 
		 registered twice, once for the capture phase and once for the target 
		 and bubbling phases, each must be removed separately. Removal of an 
		 event listener registered for the capture phase does not affect the 
		 same event listener registered for the target and bubbling phases, 
		 and vice versa.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Removes an event listener. Calling removeEventListenerNS with arguments 
		 which do not identify any currently registered EventListener on the 
		 EventTarget has no effect. 
		  
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Events/events.html#Events-EventTargetGroup-removeEventListenerNS"><linktext>W3C - DOM 3 Events: EventTarget.removeEventListenerNS()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:replaceChild"><apiName>replaceChild</apiName><shortdesc>
		 Replaces an existing child element with a new child element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
		 </modified></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>HIERARCHY_REQUEST_ERR: Raised if this 
		 node is of a type that does not allow children of the type of the 
		 newChild node, or if the node to put in is one of this node's 
		 ancestors or this node itself, or if this node is of type Document 
		 and the result of the replacement operation would add a second 
		 DocumentType or Element on the Document node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if newChild 
		 was created from a different document than the one that created 
		 this node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node or the parent of the new node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if oldChild is 
		 not a child of this node.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: if this node is of 
		 type Document, this exception might be raised if the DOM implementation 
		 doesn't support the replacement of the DocumentType child or Element child.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>Returns a reference to the object that is replaced.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>newNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>The new node to replace oldChild. If it already exists in the DOM, it is first removed. 
		 </apiDesc></apiParam><apiParam><apiItemName>childNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies the existing element to be replaced.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces an existing child element with a new child element.
		 
		 </apiDesc><example>
		 <codeblock>
		 // &lt;div&gt;
		 //  &lt;span id="childSpan"&gt;foo bar&lt;/span&gt;
		 // &lt;/div&gt;
		 
		 // create an empty element node
		 // without an ID, any attributes, or any content
		 var sp1 = document.createElement("span");
		 
		 // give it an id attribute called 'newSpan'
		 sp1.setAttribute("id", "newSpan");
		 
		 // create some content for the new element.
		 var sp1_content = document.createTextNode("new replacement span element.");
		 
		 // apply that content to the new element
		 sp1.appendChild(sp1_content);
		 
		 // build a reference to the existing node to be replaced
		 var sp2 = document.getElementById("childSpan");
		 var parentDiv = sp2.parentNode;
		 
		 // replace existing node sp2 with the new span element sp1
		 parentDiv.replaceChild(sp1, sp2);</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa925527.aspx"><linktext>MSDN - replaceChild Method</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.replaceChild"><linktext>MDC - Node.replaceChild()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-785887307"><linktext>W3C - Node.replaceChild()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:selectNodes"><apiName>selectNodes</apiName><shortdesc>
		 Applies the specified pattern-matching operation to this node's context and returns the list of matching nodes as IXMLDOMNodeList.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns a collection of nodes selected by an XSL Pattern or XPath query. If no nodes are selected, an empty collection is returned.
		 
		 </apiDesc><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier></apiReturn><apiParam><apiItemName>queryString</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A XSLPattern or XPath query that is to be applied to the context defined by this node. The value of the 
		 SelectionLanguage internal property (flag) determines whether an XSLPattern or XPath query is used. By default, the queryString is 
		 an XSLPattern query. The SelectionLanguage internal property (flag) can be set with the setProperty Method.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Applies the specified pattern-matching operation to this node's context and returns the list of matching nodes as IXMLDOMNodeList.
		 
		 <p><b>Note (IE):</b> This method is only valid if the XML Query Language (XQL) feature has been included in the operating 
		 system (OS). If a call to this method is made and XQL is not supported, an error message will be returned. </p>
		 
		 <p><b>Note (IE):</b> The  selectSingleNode method is similar to the selectNodes method, but returns only the first matching 
		 node rather than the list of all matching nodes.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926403.aspx"><linktext>MSDN - selectNodes Method</linktext></link><link href="dom.core.xml#Node/selectSingleNode()"><linktext>selectSingleNode()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:selectSingleNode"><apiName>selectSingleNode</apiName><shortdesc>
		 Applies the specified pattern-matching operation to this node's context and returns the first matching node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns the first node that matches the XSL or XPath query. If no nodes match the query, it returns Null.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>queryString</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A Extensible Stylesheet Language (XSL) or XPath query that is to be applied to the context defined by 
		 this node. The value of the SelectionLanguage internal property (flag) determines whether an XSL or XPath query is used. 
		 By default, the expression is an XSL pattern query. The SelectionLanguage internal property (flag) can be set with the 
		 setProperty method.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Applies the specified pattern-matching operation to this node's context and returns the first matching node.
		 
		 <p><b>Note (IE):</b> This method is only valid if the XML Query Language (XQL) feature has been included in 
		 the OS. If a call to this method is made and XQL is not supported, an error message will be returned. </p>
		 
		 <p><b>Note (IE):</b> The selectSingleNode method is similar to the  selectNodes Method, but returns only 
		 the first matching node rather than the list of all matching nodes.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924233.aspx"><linktext>MSDN - selectSingleNode Method</linktext></link><link href="dom.core.xml#Node/selectNodes()"><linktext>selectNodes()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:setUserData"><apiName>setUserData</apiName><shortdesc>
		 Associate an object to a key on this node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns the DOMUserData previously associated to the given key on this node, or null if there was none.
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMUserData</apiOperationClassifier></apiReturn><apiParam><apiItemName>key</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The key to associate the object to.
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>dom.core.types:DOMUserData</apiOperationClassifier><apiDesc>The object to associate to the given key, or null to remove any existing association to that key.
		 </apiDesc></apiParam><apiParam><apiItemName>handler</apiItemName><apiOperationClassifier>dom.core:UserDataHandler</apiOperationClassifier><apiDesc>The handler to associate to that key, or null.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Associate an object to a key on this node. The object can later be 
		 retrieved from this node by calling getUserData with the same key.
		 
		 <p>Allows a user to attach data to an element, without needing to modify the DOM. Note 
		 that such data will not be preserved when imported via importNode, as with cloneNode() 
		 and renameNode() operations (though adoptNode does preserve the information), and equality 
		 tests in isEqualNode() do not consider user data in making the assessment.</p>
		 
		 <p>This method offers the convenience of associating data with specific nodes without needing 
		 to alter the structure of a document and in a standard fashion, but it also means that extra 
		 steps may need to be taken if one wishes to serialize the information or include the 
		 information upon clone, import, or rename operations.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var d = document.implementation.createDocument('', 'test', null); 
		 d.documentElement.setUserData('key', 15, {handle:function (o, k, d, s, ds) {alert(o+'::'+k+'::'+d+'::'+s+'::'+ds)}}); // 2::key::15::[object Element]::[object Element]
		 alert(d.documentElement.getUserData('key')); // 15
		 var e = document.importNode(d.documentElement, true); // causes handler to be called
		 alert(e.getUserData('key')); // null since user data is not copied</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.setUserData"><linktext>MDC - Node.setUserData()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-setUserData"><linktext>W3C - Node.setUserData()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:transformNode"><apiName>transformNode</apiName><shortdesc>
		 Processes this node and its children using the supplied Extensible Stylesheet Language Transformations
		 (XSLT) style sheet and returns the resulting transformation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns a string that contains the product of the transformation of this XML document based on the XSLT style sheet.
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>styleSheet</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Valid XML document or DOM node that consists of XSLT elements that direct the transformation of this node.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Processes this node and its children using the supplied Extensible Stylesheet Language Transformations
		 (XSLT) style sheet and returns the resulting transformation.
		 
		 <p><b>Note (IE):</b> This method is only valid if the XSLT feature has been included in the operating system 
		 (OS). If a call to this method is made and XSLT is not supported, an error message will be returned. </p>
		 
		 <p><b>Note (IE):</b> The stylesheet parameter must be either a  DOMDocument node, in which case the document 
		 is assumed to be an Extensible Stylesheet Language (XSL) style sheet, or a Document Object Model (DOM) node in the 
		 XSL style sheet, in which case this node is treated as a stand-alone style sheet fragment.</p>
		 
		 <p><b>Note (IE):</b> The source node defines a context in which the style sheet operates, but navigation outside 
		 this scope is allowed. For example, a style sheet can use the id function to access other parts of the document. </p>
		 
		 <p><b>Note (IE):</b> This method supports both stand-alone and embedded style sheets and also provides the 
		 ability to run a localized style sheet fragment against a particular source node.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924913.aspx"><linktext>MSDN - transformNode Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Node:transformNodeToObject"><apiName>transformNodeToObject</apiName><shortdesc>
		 Processes this node and its children using the supplied Extensible Stylesheet Language Transformations (XSLT) style sheet 
		 and returns the resulting transformation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleSheet</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Valid XML document or DOM node that consists of XSLT elements that direct the transformation of this node.
		 </apiDesc></apiParam><apiParam><apiItemName>outputObject</apiItemName><apiType value=""/><apiDesc>On return, contains the product of the transformation of this XML document based on the XSLT style sheet. 
		 If the variant represents the  DOMDocument object, the document is built according to its properties and its child nodes are 
		 replaced during this transformation process. The XML transformation can also be sent to a stream.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Processes this node and its children using the supplied Extensible Stylesheet Language Transformations (XSLT) style sheet 
		 and returns the resulting transformation.
		 
		 <p><b>Note (IE):</b> This method is only valid if the XSLT feature has been included in the operating system (OS). If 
		 a call to this method is made and XSLT is not supported, an error message will be returned. </p>
		 
		 <p><b>Note (IE):</b> The stylesheet parameter must be either a  DOMDocument node, in which case the document is assumed 
		 to be an XSLT style sheet, or a Document Object Model (DOM) node in the XSLT style sheet, in which case this node is treated 
		 as a stand-alone style sheet fragment.</p>
		 
		 <p><b>Note (IE):</b> The source node defines a context in which the style sheet operates, but navigation outside this 
		 scope is allowed. For example, a style sheet can use the id function to access other parts of the document. </p>
		 
		 <p><b>Note (IE):</b> This method supports both stand-alone and embedded style sheets and also provides the ability to 
		 run a localized style sheet fragment against a particular source node.</p>
		 
		 <p><b>Note (IE):</b> The transformNodeToObject method always generates a Unicode byte-order mark, which means it cannot 
		 be used in conjunction with other Active Server Pages (ASP) Response.Write or Response.BinaryWrite calls.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924282.aspx"><linktext>MSDN - transformNodeToObject Method</linktext></link></related-links></apiOperation><apiValue id="dom.core:Node:ATTRIBUTE_NODE"><apiName>ATTRIBUTE_NODE</apiName><shortdesc>
		 The node is an Attr.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is an Attr.
		 
		 <p>The node represents an attribute of an element. An attribute node can have the following child node 
		 types: Text and EntityReference. An attribute does not appear as the child node of any other node type; 
		 note that it is not considered a child node of an element. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926537.aspx"><linktext>MSDN - nodeType Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-ATTRIBUTE_NODE"><linktext>W3C - Node.ATTRIBUTE_NODE</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:CDATA_SECTION_NODE"><apiName>CDATA_SECTION_NODE</apiName><shortdesc>
		 The node is a CDATASection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is a CDATASection.
		 
		 <p>The node represents a CDATA section in the XML source. CDATA sections are used to escape blocks of text that 
		 would otherwise be recognized as markup. A CDATA section node cannot have any child nodes. A CDATA section node 
		 can appear as the child of the DocumentFragment, EntityReference, and Element nodes.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926537.aspx"><linktext>MSDN - nodeType Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-CDATA_SECTION_NODE"><linktext>W3C - Node.CDATA_SECTION_NODE</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:COMMENT_NODE"><apiName>COMMENT_NODE</apiName><shortdesc>
		 The node is a Comment.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>8</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is a Comment.
		 
		 <p>The node represents a comment in the XML document. A comment node cannot have any child nodes. A comment node can 
		 appear as the child of Document, DocumentFragment, Element, and EntityReference nodes. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926537.aspx"><linktext>MSDN - nodeType Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-COMMENT_NODE"><linktext>W3C - Node.COMMENT_NODE</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:DOCUMENT_FRAGMENT_NODE"><apiName>DOCUMENT_FRAGMENT_NODE</apiName><shortdesc>
		 The node is a DocumentFragment.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>11</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is a DocumentFragment.
		 
		 <p>The node represents a document fragment. A document fragment node associates a node or subtree with a document 
		 without actually being contained within the document. A document fragment node can have the following child node 
		 types: Element, ProcessingInstruction, Comment, Text, CDATASection, and EntityReference. A DocumentFragment node 
		 cannot appear as the child of any node types. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926537.aspx"><linktext>MSDN - nodeType Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-DOCUMENT_FRAGMENT_NODE"><linktext>W3C - Node.DOCUMENT_FRAGMENT_NODE</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:DOCUMENT_NODE"><apiName>DOCUMENT_NODE</apiName><shortdesc>
		 The node is a Document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>9</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is a Document.
		 
		 <p>The node represents a document object, which, as the root of the document tree, 
		 provides access to the entire XML document. It is created using the progID 
		 "Msxml2.DOMDocument", or through a data island using &lt;XML&gt; or &lt;SCRIPT LANGUAGE=XML&gt;. A document node can 
		 have the following child node types: Element (maximum of one), ProcessingInstruction, 
		 Comment, and DocumentType. A document node cannot appear as the child of any node types.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926537.aspx"><linktext>MSDN - nodeType Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-DOCUMENT_NODE"><linktext>W3C - Node.DOCUMENT_NODE</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:DOCUMENT_POSITION_CONTAINED_BY"><apiName>DOCUMENT_POSITION_CONTAINED_BY</apiName><shortdesc>
		 The node is contained by the reference node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>16</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is contained by the reference node. A node which is contained is always following, too.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-DOCUMENT_POSITION_CONTAINED_BY"><linktext>W3C - Node.DOCUMENT_POSITION_CONTAINED_BY</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:DOCUMENT_POSITION_CONTAINS"><apiName>DOCUMENT_POSITION_CONTAINS</apiName><shortdesc>
		 The node contains the reference node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>8</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node contains the reference node. A node which contains is always preceding, too.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-DOCUMENT_POSITION_CONTAINS"><linktext>W3C - Node.DOCUMENT_POSITION_CONTAINS</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:DOCUMENT_POSITION_DISCONNECTED"><apiName>DOCUMENT_POSITION_DISCONNECTED</apiName><shortdesc>
		 The two nodes are disconnected.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The two nodes are disconnected. Order between disconnected nodes is always implementation-specific.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-DOCUMENT_POSITION_DISCONNECTED"><linktext>W3C - Node.DOCUMENT_POSITION_DISCONNECTED</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:DOCUMENT_POSITION_FOLLOWING"><apiName>DOCUMENT_POSITION_FOLLOWING</apiName><shortdesc>
		 The node follows the reference node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node follows the reference node.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-DOCUMENT_POSITION_FOLLOWING"><linktext>W3C - Node.DOCUMENT_POSITION_FOLLOWING</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"><apiName>DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</apiName><shortdesc>
		 The determination of preceding versus following is implementation-specific.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>32</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The determination of preceding versus following is implementation-specific.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"><linktext>W3C - Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:DOCUMENT_POSITION_PRECEDING"><apiName>DOCUMENT_POSITION_PRECEDING</apiName><shortdesc>
		 The second node precedes the reference node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The second node precedes the reference node.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-DOCUMENT_POSITION_PRECEDING"><linktext>W3C - Node.DOCUMENT_POSITION_PRECEDING</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:DOCUMENT_TYPE_NODE"><apiName>DOCUMENT_TYPE_NODE</apiName><shortdesc>
		 The node is a DocumentType.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is a DocumentType.
		 
		 <p>The node represents the document type declaration, indicated by the &lt;!DOCTYPE &gt; tag. A document type 
		 node can have the following child node types: Notation and Entity. A document type node can appear as the child 
		 of the Document node. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926537.aspx"><linktext>MSDN - nodeType Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-DOCUMENT_TYPE_NODE"><linktext>W3C - Node.DOCUMENT_TYPE_NODE</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:ELEMENT_NODE"><apiName>ELEMENT_NODE</apiName><shortdesc>
		 The node is an Element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is an Element.
		 
		 <p>The node represents an element. An element node can have the following child node types: Element, 
		 Text, Comment, ProcessingInstruction, CDATASection, and EntityReference. An element node can be the 
		 child of the Document, DocumentFragment, EntityReference, and Element nodes. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926537.aspx"><linktext>MSDN - nodeType Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-ELEMENT_NODE"><linktext>W3C - Node.ELEMENT_NODE</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:ENTITY_NODE"><apiName>ENTITY_NODE</apiName><shortdesc>
		 The node is an Entity.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>6</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is an Entity.
		 
		 <p>The node represents an expanded entity. An entity node can have child nodes that represent the expanded entity
		 (for example, Text and EntityReference nodes). An entity node can appear as the child of the DocumentType node. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926537.aspx"><linktext>MSDN - nodeType Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-ENTITY_NODE"><linktext>W3C - Node.ENTITY_NODE</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:ENTITY_REFERENCE_NODE"><apiName>ENTITY_REFERENCE_NODE</apiName><shortdesc>
		 The node is an EntityReference.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>5</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is an EntityReference.
		 
		 <p>The node represents a reference to an entity in the XML document. This applies to all entities, including 
		 character entity references. An entity reference node can have the following child node types: Element, 
		 ProcessingInstruction, Comment, Text, CDATASection, and EntityReference. An entity reference node can appear 
		 as the child of the Attribute, DocumentFragment, Element, and EntityReference nodes.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926537.aspx"><linktext>MSDN - nodeType Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-ENTITY_REFERENCE_NODE"><linktext>W3C - Node.ENTITY_REFERENCE_NODE</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:NOTATION_NODE"><apiName>NOTATION_NODE</apiName><shortdesc>
		 The node is a Notation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>12</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is a Notation.
		 
		 <p>A node represents a notation in the document type declaration. A notation node cannot have any child nodes. A notation 
		 node can appear as the child of the DocumentType node. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926537.aspx"><linktext>MSDN - nodeType Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-NOTATION_NODE"><linktext>W3C - Node.NOTATION_NODE</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:PROCESSING_INSTRUCTION_NODE"><apiName>PROCESSING_INSTRUCTION_NODE</apiName><shortdesc>
		 The node is a ProcessingInstruction.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>7</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is a ProcessingInstruction.
		 
		 <p>The node represents a processing instruction from the XML document. A processing instruction node cannot have any
		 child nodes. A processing instruction node can appear as the child of the Document, DocumentFragment, Element, and EntityReference nodes. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926537.aspx"><linktext>MSDN - nodeType Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-PROCESSING_INSTRUCTION_NODE"><linktext>W3C - Node.PROCESSING_INSTRUCTION_NODE</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:TEXT_NODE"><apiName>TEXT_NODE</apiName><shortdesc>
		 The node is a Text node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The node is a Text node.
		 
		 <p>The node represents the text content of a tag. A text node cannot have any child nodes. A text node can appear as 
		 the child node of the Attribute, DocumentFragment, Element, and EntityReference nodes. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926537.aspx"><linktext>MSDN - nodeType Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node#Constants"><linktext>MDC - Node Constants</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node-TEXT_NODE"><linktext>W3C - Node.TEXT_NODE</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:attributes:get"><apiName>attributes</apiName><shortdesc>
		 Returns an unordered collection of Attr nodes.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:NamedNodeMap</apiValueClassifier></apiValueDef><apiDesc>
		 Returns an unordered collection of Attr nodes. 
		 If the element has no specified attributes, then the returned object 
		 has a length of 0 (zero).
		 
		 <p><b>Note:</b> Trying to modify an Attribute Node that originated 
		 from an inline event assignment (e.g. onclick=) is something developers should 
		 avoid. If you want to use it, be aware that assigning values through the 
		 element.attributeName syntax will assign the JavaScript value for the element. 
		 When read through the same syntax, it will return the latest JavaScript value 
		 for the element attribute, or if it hasn't been assigned yet, the function 
		 generated by parsing the element's inline event assignment.</p>
		 
		 <p><b>Note:</b> Style isn't a "true" HTML attribute node, but a 
		 CCSStyleDeclaration. You can however use the above .attributes syntaxes and 
		 DOM functions to control its value, as well as the element.style.cssText 
		 syntax that returns all CSS attributes, or element.style.CSSattributeName (eg 
		 element.style.position) to control a single CSS attribute. In FireFox, all 
		 the above correctly update the CCSStyleDeclaration object, the element's 
		 attribute nodes and the .attributes collection. Consider quirksmode for 
		 compatibility issues in other browsers (see link below)</p>
		 
		 </apiDesc><example>
		 Numerical indexing is useful for going through all of an element's attributes. The following 
		 example runs through the attribute nodes for the element in the document with id "p1", and 
		 prints each attribute's value.
		 <codeblock>
		 &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
		 "http://www.w3.org/TR/html4/strict.dtd"&gt;
		 
		 &lt;html&gt;
		 
		 	&lt;head&gt;
		 		&lt;title&gt;Attributes example&lt;/title&gt;
		 		&lt;script type="text/javascript"&gt;
		 
		 			function showFirstAttr() {
		 				var firstPara = document.getElementById("p1");
		 				var outputText = document.getElementById("result");
		 
		 				// First, let's verify that the paragraph has some attributes    
		 				if (firstPara.hasAttributes()) {
		 					var attrs = firstPara.attributes;
		 					var text = ""; 
		 					for(var i=attrs.length-1; i&gt;=0; i--) {
		 						text += attrs[i].name + "-&gt;" + attrs[i].value;
		 					}
		 					outputText.value = text;
		 				} else {
		 					outputText.value = "No attributes to show"
		 				};
		 			}
		 		&lt;/script&gt;
		 	&lt;/head&gt;
		 
		 	&lt;body&gt;
		 		&lt;p id="p1" style="color: green;"&gt;Sample Paragraph&lt;/p&gt;
		 
		 		&lt;form action=""&gt;
		 			&lt;p&gt;&lt;input type="button" value="Show first attribute name and value"
		 				onclick="showFirstAttr();"&gt;
		 			&lt;input id="result" type="text" value=""&gt;&lt;/p&gt;
		 		&lt;/form&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa922712.aspx"><linktext>MSDN - attributes Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.attributes"><linktext>MDC - Node.attributes</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-84CF096"><linktext>W3C - Node.attributes</linktext></link><link href="http://www.quirksmode.org/dom/w3c_core.html#attributes"><linktext>Quirksmode - Attributes</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:baseName:get"><apiName>baseName</apiName><shortdesc>
		 Returns the base name for the name qualified with the namespace.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the base name for the name qualified with the namespace.
		 
		 <p>It returns the right-hand side of a namespace qualified name. 
		 For example, it returns yyy for the element &lt;xxx:yyy&gt;. It always 
		 returns a non-empty string.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924236.aspx"><linktext>MSDN - baseName Property</linktext></link><link href="dom.core.xml#Node/localName"><linktext>localName</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:baseURI:get"><apiName>baseURI</apiName><shortdesc>
		 The absolute base URI of this node or null if the implementation 
		 wasn't able to obtain an absolute URI.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The absolute base URI of this node or null if the implementation 
		 wasn't able to obtain an absolute URI. This value is computed as 
		 described in Base URIs. However, when the Document supports the 
		 feature "HTML" [DOM Level 2 HTML], the base URI is computed using 
		 first the value of the href attribute of the HTML BASE element if 
		 any, and the value of the documentURI  attribute from the Document 
		 interface otherwise.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.baseURI"><linktext>MDC - Node.baseURI</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-baseURI"><linktext>W3C - Node.baseURI</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:childNodes:get"><apiName>childNodes</apiName><shortdesc>
		 Returns an ordered collection of node objects that are children of 
		 the current element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:NodeList</apiValueClassifier></apiValueDef><apiDesc>
		 Returns an ordered collection of node objects that are children of 
		 the current element. If the element has no children, then the returned 
		 NodeList contains no node. 
		 
		 <p><b>Note:</b> The items in the collection of nodes are objects 
		 and not strings. To get data from those node objects, you must use their 
		 properties (e.g. elementNodeReference.childNodes[1].nodeName to get the name, etc.). </p>
		 
		 <p><b>Note:</b> The document object itself has 2 children: the 
		 Doctype declaration and the root element, typically referred to as documentElement. 
		 (In (X)HTML documents this is the HTML element.) </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // parg is an object reference to a &lt;p&gt; element
		 if (parg.hasChildNodes()) {
		 	// So, first we check if the object is not empty, if the object has child nodes
		 	var children = parg.childNodes;
		 	for (var i = 0; i &lt; children.length; i++) {
		 		// do something with each child as children[i]
		 		// NOTE: List is live, Adding or removing children will change the list
		 	};
		 };</codeblock>
		 
		 <codeblock>
		 // This is one way to remove all children from a node
		 // box is an object refrence to an element with children
		 while (box.firstChild) {
		 	//The list is LIVE so it will re-index each call
		 	box.removeChild(box.firstChild);
		 };</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa923287.aspx"><linktext>MSDN - childNodes Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.childNodes"><linktext>MDC - Node.childNodes</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1451460987"><linktext>W3C - Node.childNodes</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:dataType:get"><apiName>dataType</apiName><shortdesc>
		 Specifies the data type for this node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc>
		 Specifies the data type for this node.
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Value</entry><entry>Description</entry></row></thead><tbody><row>
		 		<entry>NODE_ATTRIBUTE</entry>
		 		<entry>Contains the string representation of the data type specifier included in the schema, or Null if no data type is specified.</entry>
		 	</row><row>
		 		<entry>NODE_CDATA_SECTION, NODE_COMMENT, NODE_DOCUMENT, NODE_DOCUMENT_FRAGMENT, NODE_DOCUMENT_TYPE, NODE_ENTITY, NODE_NOTATION, NODE_PROCESSING_INSTRUCTION, NODE_TEXT</entry>
		 		<entry>Contains the constant string value "string." These node types do not have data types, so the dataType property cannot be set for these node types. Attempts to set this property are ignored. </entry>
		 	</row><row>
		 		<entry>NODE_ELEMENT</entry>
		 		<entry>Contains the string representation of the data type specifier included on the instance of the element or in the schema, or Null if no data type is specified.</entry>
		 	</row><row>
		 		<entry>NODE_ENTITY_REFERENCE</entry>
		 		<entry>Contains the string representation of the data type specifier for the referenced entity. This is limited to entities with a single data type on the root level element of the subtree corresponding to the entity. Contains Null if no data type is specified. It is not possible to set the data type of an entity reference. The data type must be set directly on the referenced element. Attempts to set the value of the dataType property are ignored. </entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924038.aspx"><linktext>MSDN - dataType Property</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:definition:get"><apiName>definition</apiName><shortdesc>
		 Returns the definition of the node in the document type definition (DTD) or schema.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Node</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the definition of the node in the document type definition (DTD) or schema.
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Value</entry><entry>Description</entry></row></thead><tbody><row>
		 		<entry>NODE_ENTITY_REFERENCE</entry>
		 		<entry>Returns the node for the entity referenced; that is, the ENTITY element that was defined for a given ENTITYREF. Given the ENTITYREF &amp;x;, for example, the definition property returns the node in the DOCTYPE node's entity collection that defines the corresponding ENTITY: &lt;!ENTITY x "y"&gt;. </entry>
		 	</row><row>
		 		<entry>NODE_ENTITY</entry>
		 		<entry>For unparsed entities, returns the NOTATION definition from the DOCTYPE node's notation collection. For example, given the ENTITY &lt;!ENTITY networth SYSTEM "networth.xls" NDATA XLS&gt;, the definition property returns the node corresponding to the notation &lt;!NOTATION XLS PUBLIC "http://example.microsoft.com/office/excel"&gt;. For parsed entities, returns Null. </entry>
		 	</row><row>
		 		<entry>NODE_ATTRIBUTE</entry>
		 		<entry>Returns the XML-Data Schema AttributeType for a given ATTRIBUTE node. For example, the definition property for the attribute myAttribute="123" returns the node corresponding to the element &lt;AttributeType name= "myAttribute"&gt; in the schema. Returns Null when a DTD is used or when no schema is present. </entry>
		 	</row><row>
		 		<entry>NODE_ELEMENT</entry>
		 		<entry>Returns the XML-Data Schema ElementType for a given ELEMENT node. For example, given the element &lt;myelement&gt;, the definition property returns the node &lt;ElementType name="myelement"&gt; in the specified external schema. Returns Null when a DTD is used or when no schema is present. </entry>
		 	</row><row>
		 		<entry>NODE_CDATA_SECTION, NODE_COMMENT, NODE_DOCUMENT, NODE_DOCUMENT_FRAGMENT, NODE_DOCUMENT_TYPE, NODE_NOTATION, NODE_PROCESSING_INSTRUCTION, NODE_TEXT</entry>
		 		<entry>Returns Null.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa925478.aspx"><linktext>MSDN - definition Property</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:firstChild:get"><apiName>firstChild</apiName><shortdesc>
		 Returns the node's first child in the tree, or null if the node is 
		 childless.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Node</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the node's first child in the tree, or null if the node is 
		 childless. If the node is a Document, it returns the first node in 
		 the list of its direct children.
		 
		 <p><b>Note:</b> When applied to a document node, the returned node is not 
		 necessarily the root element of the document; it can also be a 
		 processing instruction, for example. If you need the root element, 
		 use document.documentElement.</p>
		 
		 </apiDesc><example>
		 This example demonstrates the use of firstChild and how whitespace nodes might interfere with using this property.
		 <codeblock>
		 &lt;p id="para-01"&gt;
		 	&lt;span&gt;First span&lt;/span&gt;
		 &lt;/p&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 	var p01 = document.getElementById('para-01');
		 	alert(p01.firstChild.nodeName);
		 &lt;/script&gt;</codeblock>
		 
		 <p>In the above, the alert will show '#text' because a text node is inserted to maintain 
		 the whitespace between the end of the opening &lt;p&gt; and &lt;span&gt; tags. Any whitespace will 
		 cause the #text node to be inserted, from a single space to any number of spaces, returns, 
		 tabs, and so on.</p>
		 
		 <p>Another #text node is inserted between the closing &lt;/span&gt; and &lt;/p&gt; tags.</p>
		 
		 <p>If this whitespace is removed from the source, the #text nodes are not inserted and 
		 the span element becomes the paragraph's first child.</p>
		 
		 <codeblock>
		 &lt;p id="para-01"&gt;&lt;span&gt;First span&lt;/span&gt;&lt;/p&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 	var p01 = document.getElementById('para-01');
		 	alert(p01.firstChild.nodeName)
		 &lt;/script&gt;</codeblock>
		 
		 <p>Now the alert will show 'SPAN'.</p>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926506.aspx"><linktext>MSDN - firstChild Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.firstChild"><linktext>MDC - Node.firstChild</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-169727388"><linktext>W3C - Node.firstChild</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:lastChild:get"><apiName>lastChild</apiName><shortdesc>
		 Returns the last child of a node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Node</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the last child of a node. Returns null if there are no child elements. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var tr = document.getElementById("row1");
		 corner_td = tr.lastChild;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa923308.aspx"><linktext>MSDN - lastChild Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.lastChild"><linktext>MDC - Node.lastChild</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-61AD09FB"><linktext>W3C - Node.lastChild</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:localName:get"><apiName>localName</apiName><shortdesc>
		 Returns the local part of the qualified name of this node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the local part of the qualified name of this node. 
		 
		 <p><b>Note:</b> The local name of a node is that part of the node's 
		 qualified name that comes after the colon. Qualified names are typically used 
		 in XML as part of the namespace(s) of the particular XML documents. For 
		 example, in the qualified name ecomm:partners, partners is the local name 
		 and ecomm is the prefix: 
		 
		 <codeblock>
		 &lt;ecomm:business id="soda_shop" type="brick_n_mortar"&gt;
		 &lt;ecomm:partners&gt;
		 &lt;ecomm:partner id="1001"&gt;Tony's Syrup Warehouse&lt;/ecomm:partner&gt;
		 &lt;/ecomm:partners&gt;
		 &lt;/ecomm:business&gt;</codeblock></p>
		 
		 <p>For nodes of any type other than ELEMENT_NODE and ATTRIBUTE_NODE and nodes 
		 created with a DOM Level 1 method, such as document.createElement, localName 
		 is always null.</p>
		 
		 </apiDesc><example>
		 (Must be served with XML content type, such as text/xml or application/xhtml+xml.) 
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"
		 	xmlns:svg="http://www.w3.org/2000/svg"&gt;
		 &lt;head&gt;
		 	&lt;script type="application/javascript"&gt;&lt;![CDATA[
		 	function test() {
		 		var text = document.getElementById('text');
		 		var circle = document.getElementById('circle');
		 
		 		text.value = "&lt;svg:circle&gt; has:\n" +
		 			"localName = '" + circle.localName + "'\n" +
		 			"namespaceURI = '" + circle.namespaceURI + "'";
		 		}
		 	]]&gt;&lt;/script&gt;
		 &lt;/head&gt;
		 &lt;body onload="test()"&gt;
		 
		 	&lt;svg:svg version="1.1"
		 		width="100px" height="100px"
		 		viewBox="0 0 100 100"&gt;
		 		&lt;svg:circle cx="50" cy="50" r="30" style="fill:#aaa" id="circle"/&gt;
		 	&lt;/svg:svg&gt;
		 	&lt;textarea id="text" rows="4" cols="55"/&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.localName"><linktext>MDC - Node.localName</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-NodeNSLocalN"><linktext>W3C - Node.localName</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:namespaceURI:get"><apiName>namespaceURI</apiName><shortdesc>
		 The namespace URI of the node, or null if it is unspecified (read-only).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The namespace URI of the node, or null if it is unspecified (read-only). 
		 When the node is a document, it returns the XML namespace for the 
		 current document.
		 
		 <p><b>Note:</b> This is not a computed value that is the result of a namespace lookup 
		 based on an examination of the namespace declarations in scope. It is 
		 merely the namespace URI given at creation time.</p>
		 
		 <p><b>Note:</b> For nodes of any nodeType other than ELEMENT_NODE and ATTRIBUTE_NODE, 
		 and nodes created with a DOM Level 1 method, such as document.createElement, 
		 the value of namespaceURI is always null.</p>
		 
		 <p><b>Note:</b> You can create an element with the specified namespaceURI using the DOM 
		 Level 2 method document.createElementNS.</p>
		 
		 <p><b>Note:</b> Per the Namespaces in XML specification, an attribute does not inherit 
		 its namespace from the element it is attached to. If an attribute is not 
		 explicitly given a namespace, it has no namespace.</p>
		 
		 <p><b>Note:</b> The DOM does not handle or enforce namespace validation per se. It is up 
		 to the DOM application to do any validation necessary. Note too that the 
		 namespace prefix, once it is associated with a particular node, cannot 
		 be changed.</p>
		 
		 </apiDesc><example>
		 In this snippet, a node is being examined for its localName and its namespaceURI. If the namespaceURI 
		 returns the XUL namespace and the localName returns "browser", then the node is understood to be a 
		 XUL <codeph>&lt;browser/&gt;</codeph>.
		 <codeblock>
		 if (node.localName == "browser" &amp;&amp; 
		 	node.namespaceURI == "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul") {
		 	// this is a XUL browser 
		 }</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa923270.aspx"><linktext>MSDN - namespaceURI Property (IXMLDOMNode)</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.namespaceURI"><linktext>MDC - Node.namespaceURI</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-NodeNSname"><linktext>W3C - Node.namespaceURI</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:nextSibling:get"><apiName>nextSibling</apiName><shortdesc>
		 Returns the node immediately following the specified one in its 
		 parent's childNodes list, or null if the specified node is the 
		 last node in that list.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Node</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the node immediately following the specified one in its 
		 parent's childNodes list, or null if the specified node is the 
		 last node in that list. 
		 
		 <p><b>Note (Mozilla):</b> Gecko-based browsers insert text nodes into a document to represent 
		 whitespace in the source markup. Therefore a node obtained for example via 
		 firstChild or previousSibling may refer to a whitespace text node, rather 
		 than the actual element the author intended to get. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;div id="div-01"&gt;Here is div-01&lt;/div&gt;
		 &lt;div id="div-02"&gt;Here is div-02&lt;/div&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 	var el = document.getElementById('div-01').nextSibling;
		 	document.write('&lt;p&gt;Siblings of div-01&lt;/p&gt;&lt;ol&gt;');
		 	while (el) {
		 		document.write('&lt;li&gt;' + el.nodeName + '&lt;/li&gt;');
		 		el = el.nextSibling;
		 	}
		 	document.write('&lt;/ol&gt;');
		 &lt;/script&gt;
		 </codeblock>
		 
		 <codeblock>
		 /~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		 	The following is written to the page as it loads:
		 
		 		Siblings of div-01
		 
		 		1. #text
		 		2. DIV
		 		3. #text
		 		4. SCRIPT
		 		5. P
		 		6. OL
		 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~/
		 </codeblock>
		 
		 In the above example, it can be seen that #text nodes are inserted in the DOM where whitespace 
		 occurs in the markup between tags (i.e. after the closing tag of an element and before the 
		 opening tag of the next). No whitespace is created between the elements inserted by the 
		 document.write statement.
		 
		 <p>The possible inclusion of text nodes in the DOM must be allowed for when traversing the DOM 
		 using nextSibling. See the resources in the Notes section.</p>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa922802.aspx"><linktext>MSDN - nextSibling Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.nextSibling"><linktext>MDC - Node.nextSibling</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-6AC54C2F"><linktext>W3C - Node.nextSibling</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:nodeName:get"><apiName>nodeName</apiName><shortdesc>
		 Returns the name of the current node as a string.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the name of the current node as a string. 
		 
		 <p><b>Note:</b> Here are the returned values for different types of nodes:
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Interface</entry><entry>nodeName</entry></row></thead><tbody><row>
		 		<entry>Attr</entry><entry>same as Attr.name</entry>
		 	</row><row>
		 		<entry>CDATASection</entry><entry>"#cdata-section"</entry>
		 	</row><row>
		 		<entry>Comment</entry><entry>"#comment"</entry>
		 	</row><row>
		 		<entry>Document</entry><entry>"#document"</entry>
		 	</row><row>
		 		<entry>DocumentFragment</entry><entry>"#document-fragment"</entry>
		 	</row><row>
		 		<entry>DocumentType</entry><entry>same as DocumentType.name</entry>
		 	</row><row>
		 		<entry>Element</entry><entry>same as Element.tagName</entry>
		 	</row><row>
		 		<entry>Entity</entry><entry>entity name</entry>
		 	</row><row>
		 		<entry>EntityReference</entry><entry>name of entity reference</entry>
		 	</row><row>
		 		<entry>Notation</entry><entry>notation name</entry>
		 	</row><row>
		 		<entry>ProcessingInstruction</entry><entry>same as ProcessingInstruction.target</entry>
		 	</row><row>
		 		<entry>text</entry><entry>"#text"</entry>
		 	</row></tbody></tgroup></adobetable>
		 </p>
		 
		 </apiDesc><example>
		 Given the following markup: 
		 <codeblock>
		 &lt;div id="d1"&gt;hello world&lt;/div&gt;
		 &lt;input type="text" id="t"/&gt;</codeblock>
		 
		 <p>and the following script: </p>
		 
		 <codeblock>
		 var div1 = document.getElementById("d1");
		 var text_field = document.getElementById("t"); 
		 text_field.value = div1.nodeName;</codeblock>
		 
		 <p>In XHTML (or any other XML format), text_field's value would read "div". However, in HTML, 
		 text_field's value would read "DIV". </p>
		 
		 <p>Note that tagName property could have been used instead, since nodeName has the same value 
		 as tagName for an element. Bear in mind, however, that nodeName will return #text for text 
		 nodes while tagName will return undefined. </p>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924892.aspx"><linktext>MSDN - nodeName Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.nodeName"><linktext>MDC - Node.nodeName</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-F68D095"><linktext>W3C - Node.nodeName</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:nodePrincipal:get"><apiName>nodePrincipal</apiName><shortdesc>
		 Returns the nsIPrincipal  object representing current security 
		 context of the node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Mozilla"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>gecko:nsIPrincipal</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the nsIPrincipal  object representing current security 
		 context of the node.
		 
		 <p><b>Note:</b> This property exists on all nodes (HTML, XUL, SVG, MathML, 
		 etc.), but only if the script trying to use it has UniversalXPConnect privileges.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Node.nodePrincipal"><linktext>MDC - Node.nodePrincipal</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:nodeType:get"><apiName>nodeType</apiName><shortdesc>
		 Returns an integer code representing the type of the node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Returns an integer code representing the type of the node. 
		 
		 </apiDesc><example>
		 This example checks if the first node inside the document element is a comment node, 
		 and if it is not, displays a message.
		 <codeblock>
		 var node = document.documentElement.firstChild;
		 if(node.nodeType != Node.COMMENT_NODE)
		 alert("You should comment your code well!");</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926537.aspx"><linktext>MSDN - nodeType Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.nodeType"><linktext>MDC - Node.nodeType</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-111237558"><linktext>W3C - Node.nodeType</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:nodeTypeString:get"><apiName>nodeTypeString</apiName><shortdesc>
		 Returns the node type in string form.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the node type in string form.
		 
		 </apiDesc><example>
		 This value depends on the value of the nodeType property.
		 <codeblock>NODE_ATTRIBUTE == "attribute"</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924285.aspx"><linktext>MSDN - nodeTypeString Property</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:nodeTypedValue:get"><apiName>nodeTypedValue</apiName><shortdesc>
		 Contains the node value expressed in its defined data type.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc>
		 Contains the node value expressed in its defined data type.
		 
		 <p><b>Note:</b> This value depends on the value of the  nodeType property of the IXMLDOMNode.</p>
		 
		 <p><b>Note:</b> The data type for this node is defined in its  dataType Property. 
		 This property also depends on the value of the node type, in the  nodeType property. </p>
		 
		 <p><b>Note:</b> Although you can explicitly set the nodeTypedValue property with a 
		 particular data type in the VARIANT, the set operation does not change the data type. The value 
		 in the VARIANT is coerced to the data type specified in the dataType property, and the set 
		 operation returns an error if the type coercion is not possible. </p>
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Value</entry><entry>Description</entry></row></thead><tbody><row>
		 		<entry>NODE_ATTRIBUTE</entry>
		 		<entry>Returns the value in the data representation of the type specified in the schema for the attribute. (Data types are specified using the dt:dt attribute, and because attributes cannot be applied to attributes, the attribute's data type can be specified only in the schema.) If no type was specified, returns a string identical to the  nodeValue property. If the new value is not of the type specified in the schema or cannot be coerced to the type specified in the schema, then an error occurs. </entry>
		 	</row><row>
		 		<entry>NODE_CDATA_SECTION, NODE_COMMENT, NODE_DOCUMENT, NODE_DOCUMENT_FRAGMENT, NODE_DOCUMENT_TYPE, NODE_ENTITY, NODE_NOTATION, NODE_PROCESSING_INSTRUCTION</entry>
		 		<entry>Returns a string that is equal to the nodeValue property. These node types do not have data types. </entry>
		 	</row><row>
		 		<entry>NODE_ELEMENT</entry>
		 		<entry>eturns the value in the data representation of the type specified on the element instance (using the dt:dt attribute) or specified in the schema. If no type was specified on the instance or in the schema, returns a string identical to the  nodeValue property. If the element has an attribute data type, returns null.</entry>
		 	</row><row>
		 		<entry>NODE_ENTITY_REFERENCE</entry>
		 		<entry>Returns the value in the data representation of the type specified for the referenced entity. This is limited to entities with a single data type on the root level element of the subtree corresponding to the entity. If no data type was specified, returns a string identical to the  nodeValue property. </entry>
		 	</row><row>
		 		<entry>NODE_TEXT</entry>
		 		<entry>Returns the value in the data representation of the type of the containing element. If the containing element was not typed, returns a string identical to the  nodeValue property. </entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 <p><b>Data Type Mapping</b></p>
		 
		 <adobetable class="innertable">
		 	
		 	
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 	
		 <tgroup cols="2"><thead><row><entry>VARIANT returned</entry><entry>Corresponding element data type</entry></row></thead><tbody><row>
		 		<entry>VT_BSTR</entry>
		 		<entry>string</entry>
		 	</row><row>
		 		<entry>VT_BSTR</entry>
		 		<entry>number</entry>
		 	</row><row>
		 		<entry>VT_I4</entry>
		 		<entry>Int</entry>
		 	</row><row>
		 		<entry>VT_CY</entry>
		 		<entry>Fixed.14.4</entry>
		 	</row><row>
		 		<entry>VT_BOOL</entry>
		 		<entry>Boolean</entry>
		 	</row><row>
		 		<entry>VT_DATE</entry>
		 		<entry>dateTime</entry>
		 	</row><row>
		 		<entry>VT_DATE</entry>
		 		<entry>dateTime.tz</entry>
		 	</row><row>
		 		<entry>VT_DATE</entry>
		 		<entry>Date</entry>
		 	</row><row>
		 		<entry>VT_DATE</entry>
		 		<entry>Time</entry>
		 	</row><row>
		 		<entry>VT_DATE</entry>
		 		<entry>Time.tz</entry>
		 	</row><row>
		 		<entry>VT_I1</entry>
		 		<entry>i1 byte</entry>
		 	</row><row>
		 		<entry>VT_I2</entry>
		 		<entry>i2</entry>
		 	</row><row>
		 		<entry>VT_I4</entry>
		 		<entry>i4, int</entry>
		 	</row><row>
		 		<entry>VT_UI1</entry>
		 		<entry>ui1</entry>
		 	</row><row>
		 		<entry>VT_UI2</entry>
		 		<entry>ui2</entry>
		 	</row><row>
		 		<entry>VT_UI4</entry>
		 		<entry>ui4</entry>
		 	</row><row>
		 		<entry>VT_FLOAT</entry>
		 		<entry>r4</entry>
		 	</row><row>
		 		<entry>VT_DOUBLE</entry>
		 		<entry>r8, float</entry>
		 	</row><row>
		 		<entry>VT_BSTR</entry>
		 		<entry>uuid</entry>
		 	</row><row>
		 		<entry>VT_ARRAY</entry>
		 		<entry>bin.hex</entry>
		 	</row><row>
		 		<entry>VT_ARRAY</entry>
		 		<entry>bin.base64</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa923262.aspx"><linktext>MSDN - nodeTypedValue Property</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:nodeValue:get"><apiName>nodeValue</apiName><shortdesc>
		 Returns or sets the value of the current node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised 
		 when the node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>DOMSTRING_SIZE_ERR: Raised when it 
		 would return more characters than fit in a DOMString variable 
		 on the implementation platform.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Returns or sets the value of the current node.
		 
		 <p><b>Note:</b> For the document itself, nodeValue returns null. For text, comment, 
		 and CDATA nodes, nodeValue returns the content of the node. For 
		 attribute nodes, the value of the attribute is returned.</p>
		 
		 <p><b>Note:</b> The following table shows the return values for different elements:
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>Interface</entry><entry>nodeValue</entry></row></thead><tbody><row>
		 		<entry>Attr</entry><entry>value of attribute</entry>
		 	</row><row>
		 		<entry>CDATASection</entry><entry>content of the CDATA Section</entry>
		 	</row><row>
		 		<entry>Comment</entry><entry>content of the comment</entry>
		 	</row><row>
		 		<entry>Document</entry><entry>null</entry>
		 	</row><row>
		 		<entry>DocumentFragment</entry><entry>null</entry>
		 	</row><row>
		 		<entry>DocumentType</entry><entry>null</entry>
		 	</row><row>
		 		<entry>Element</entry><entry>null</entry>
		 	</row><row>
		 		<entry>Entity</entry><entry>null</entry>
		 	</row><row>
		 		<entry>EntityReference</entry><entry>null</entry>
		 	</row><row>
		 		<entry>Notation</entry><entry>null</entry>
		 	</row><row>
		 		<entry>ProcessingInstruction</entry><entry>entire content excluding the target</entry>
		 	</row><row>
		 		<entry>text</entry><entry>content of the text node</entry>
		 	</row></tbody></tgroup></adobetable>
		 </p>
		 
		 <p><b>Note:</b> When nodeValue is defined to be null, setting it has no effect.</p> 
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924151.aspx"><linktext>MSDN - nodeValue Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.nodeValue"><linktext>MDC - Node.nodeValue</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-F68D080"><linktext>W3C - Node.nodeValue</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:ownerDocument:get"><apiName>ownerDocument</apiName><shortdesc>
		 The Document object associated with this node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 2
		 </modified></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Document</apiValueClassifier></apiValueDef><apiDesc>
		 The Document object associated with this node. This is also the 
		 Document object used to create new nodes. 
		 
		 <p><b>Note:</b> When this node is a 
		 Document or a DocumentType which is not used with any Document 
		 yet, this is null.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // given a node "p", get the top-level HTML child 
		 // of the document object
		 d = p.ownerDocument; 
		 html = d.documentElement;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa922810.aspx"><linktext>MSDN - ownerDocument Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.ownerDocument"><linktext>MDC - Node.ownerDocument</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#node-ownerDoc"><linktext>W3C - Node.ownerDocument</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:parentNode:get"><apiName>parentNode</apiName><shortdesc>
		 Returns the parent of the specified node in the DOM tree.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Node</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the parent of the specified node in the DOM tree. 
		 
		 <p><b>Note:</b> parentNode returns null for the following node types: Attr, Document, DocumentFragment, Entity, and Notation. </p>
		 
		 <p><b>Note:</b> It also returns null if the node has just been created and is not yet attached to the tree. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 if (node.parentNode) {
		 	// remove a node from the tree, unless it's not in the tree already
		 	node.parentNode.removeChild(node);
		 }</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa923284.aspx"><linktext>MSDN - parentNode Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.parentNode"><linktext>MDC - Node.parentNode</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1060184317"><linktext>W3C - Node.parentNode</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:parsed:get"><apiName>parsed</apiName><shortdesc>
		 Indicates the parsed status of the node and child nodes.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Indicates the parsed status of the node and child nodes.
		 
		 <p><b>Note:</b> During asynchronous access, not all of the document tree may be available. 
		 Before performing some operations, such as Extensible Stylesheet Language Transformations (XSLT) or 
		 pattern-matching operations, it is useful to know whether the entire tree below this node is available 
		 for processing. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa926456.aspx"><linktext>MSDN - parsed Property</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:prefix:get"><apiName>prefix</apiName><shortdesc>
		 Returns the namespace prefix of the specified node, or null if no 
		 prefix is specified.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified prefix contains an illegal character according to the XML 
		 version in use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the specified 
		 prefix is malformed per the Namespaces in XML specification, if the 
		 namespaceURI of this node is null, if the specified prefix is "xml" 
		 and the namespaceURI of this node is different from 
		 "http://www.w3.org/XML/1998/namespace", if this node is an attribute 
		 and the specified prefix is "xmlns" and the namespaceURI of this node 
		 is different from "http://www.w3.org/2000/xmlns/", or if this node is 
		 an attribute and the qualifiedName of this node is "xmlns" 
		 [XML Namespaces].
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Returns the namespace prefix of the specified node, or null if no 
		 prefix is specified. 
		 
		 <p><b>Note:</b> This will only work when a namespace-aware parser 
		 is used, i.e. when a document is served with an XML mime-type. This will not 
		 work for HTML documents. </p>
		 
		 </apiDesc><example>
		 The following alerts "x". 
		 <codeblock>&lt;x:div onclick="alert(this.prefix)"/&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa922812.aspx"><linktext>MSDN - prefix Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.prefix"><linktext>MDC - Node.prefix</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-NodeNSPrefix"><linktext>W3C - Node.prefix</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:previousSibling:get"><apiName>previousSibling</apiName><shortdesc>
		 Returns the node immediately preceding the specified one in its 
		 parent's childNodes list, null if the specified node is the first 
		 in that list.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Node</apiValueClassifier></apiValueDef><apiDesc>
		 Returns the node immediately preceding the specified one in its 
		 parent's childNodes list, null if the specified node is the first 
		 in that list. 
		 
		 <p><b>Note (Mozilla):</b> Gecko-based browsers insert text nodes into a document to represent 
		 whitespace in the source markup. Therefore a node obtained for 
		 example via firstChild or previousSibling may refer to a whitespace 
		 text node, rather than the actual element the author intended to get.</p>
		 
		 <p><b>Note:</b> To navigate the opposite way through the child nodes list use element.nextSibling. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // &lt;a&gt;&lt;b1 id="b1"/&gt;&lt;b2 id="b2"/&gt;&lt;/a&gt;
		 alert(document.getElementById("b1").previousSibling); // null
		 alert(document.getElementById("b2").previousSibling.id); // "b1"</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa923340.aspx"><linktext>MSDN - previousSibling Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Node.previousSibling"><linktext>MDC - Node.previousSibling</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-640FB3C8"><linktext>W3C - Node.previousSibling</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:specified:get"><apiName>specified</apiName><shortdesc>
		 Indicates whether the node (usually an attribute) is explicitly specified or derived 
		 from a default value in the document type definition (DTD) or schema.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Indicates whether the node (usually an attribute) is explicitly specified or derived 
		 from a default value in the document type definition (DTD) or schema.
		 
		 <p>Only returns true for attribute nodes if the attribute was specified directly on the element. 
		 Returns false for default attributes and all other node types.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924210.aspx"><linktext>MSDN - specified Property</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:text:get"><apiName>text</apiName><shortdesc>
		 Represents the text content of the node or the concatenated text representing the node and its descendants.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Represents the text content of the node or the concatenated text representing the node and its descendants.
		 
		 <adobetable class="innertable">
		 	
		 	
		 	
		 	
		 	
		 	
		 	
		 <tgroup cols="2"><thead><row><entry>Value</entry><entry>Description</entry></row></thead><tbody><row>
		 		<entry>NODE_ATTRIBUTE, NODE_DOCUMENT, NODE_ENTITY</entry>
		 		<entry>Returns a string representing the value of the node. This is the concatenated text of all subnodes with entities expanded. </entry>
		 	</row><row>
		 		<entry>NODE_CDATA_SECTION, NODE_COMMENT, NODE_PROCESSING_INSTRUCTION, NODE_TEXT</entry>
		 		<entry>Returns the text contained in the node, which is the same as the  nodeValue property.</entry>
		 	</row><row>
		 		<entry>NODE_DOCUMENT_TYPE, NODE_NOTATION</entry>
		 		<entry>Returns the empty string (""). These node types do not have associated text. </entry>
		 	</row><row>
		 		<entry>NODE_DOCUMENT_FRAGMENT</entry>
		 		<entry>Returns the text comprised of the concatenation of all descendant nodes.</entry>
		 	</row><row>
		 		<entry>NODE_ELEMENT</entry>
		 		<entry>Contains a string that represents the element content. Note that this will also include the text content from all child elements, concatenated in document order. For example, consider the following XML: 
		 			<codeblock>&lt;count&gt;
  &lt;item&gt;one&lt;/item&gt;
  &lt;item&gt;two&lt;/item&gt;
  &lt;item&gt;three&lt;/item&gt;

  &lt;item&gt;four&lt;/item&gt;
&lt;/count&gt;
		 			</codeblock>
		 			The text property for the &lt;count&gt; element contains the value "one two three four".
		 		</entry>
		 	</row><row>
		 		<entry>NODE_ENTITY_REFERENCE</entry>
		 		<entry>Returns the string representation of the entity reference.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
		 <p><b>Note:</b> When concatenated, the text represents the contents of text or CDATA nodes. All 
		 concatenated text nodes are normalized according to xml:space attributes and the value of the preserveWhiteSpace 
		 switch. Concatenated CDATA text is not normalized. (Child nodes that contain NODE_COMMENT and 
		 NODE_PROCESSING_INSTRUCTION nodes are not concatenated.) </p>
		 
		 <p><b>Note:</b> Retrieves and sets the string representing the text contents of this node or the 
		 concatenated text representing this node and its descendants.</p>
		 
		 <p><b>Note:</b> For more precise control over text manipulation in an XML document, use the lower-level 
		 nodeValue property, which returns the raw text associated with a NODE_TEXT node.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;root att="   123   a   &lt;   "&gt;
		 	&lt;a&gt;   a   a   &lt;/a&gt;
		 	&lt;!--   comment   b   --&gt;
		 	&lt;?pi   pi   c   ?&gt;
		 
		 	&lt;![CDATA[   cdata   d   ]]&gt;
		 	e   f
		 &lt;/root&gt;</codeblock>
		 
		 <p>The text property for the root element returns the following concatenated text.</p>
		 
		 <codeblock>"a a   cdata   d    e f"</codeblock>
		 
		 <p>Note that the white space within the CDATA node is preserved.</p>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa924259.aspx"><linktext>MSDN - text Property</linktext></link><link href="dom.core.xml#Node/textContent"><linktext>textContent</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:textContent:get"><apiName>textContent</apiName><shortdesc>
		 Gets or sets the text content of a node and its descendants.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised 
		 when the node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>DOMSTRING_SIZE_ERR: Raised when it 
		 would return more characters than fit in a DOMString variable on 
		 the implementation platform.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Gets or sets the text content of a node and its descendants.
		 
		 <p><b>Note:</b> textContent returns null if the element is a document, a document 
		 type, or a notation. To grab all of the text and CDATA data for the 
		 whole document, one could usedocument.documentElement.textContent.</p>
		 
		 <p><b>Note:</b> If the node is a CDATA section, a comment, a processing instruction, 
		 or a text node, textContent returns the text inside this node (the nodeValue).</p>
		 
		 <p><b>Note:</b> For other node types, textContent returns the concatenation of the 
		 textContent attribute value of every child node, excluding comments 
		 and processing instruction nodes. This is an empty string if the node 
		 has no children.</p>
		 
		 <p><b>Note:</b> Setting this property on a node removes all of its children and replaces 
		 them with a single text node with the given value.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // Given the following HTML fragment:
		 //   &lt;div id="divA"&gt;This is &lt;span&gt;some&lt;/span&gt; text&lt;/div&gt;
		 
		 // Get the text content:
		 var text = document.getElementById("divA").textContent;
		 // |text| is set to "This is some text".
		 
		 // Set the text content:
		 document.getElementById("divA").textContent = "This is some text";
		 // The HTML for divA is now:
		 //   &lt;div id="divA"&gt;This is some text&lt;/div&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-textContent"><linktext>W3C - Node.textContent</linktext></link></related-links></apiValue><apiValue id="dom.core:Node:xml:get"><apiName>xml</apiName><shortdesc>
		 Contains the XML representation of the node and all its descendants.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 Contains the XML representation of the node and all its descendants.
		 
		 <p><b>Note:</b> The xml property always returns a Unicode string. That is, the xml property 
		 for DOMDocument converts the document from its original encoding to Unicode. As a result, the original 
		 encoding attribute is removed. For example, &lt;?xml version="1.0" encoding="UTF-8"?&gt; appears in the xml 
		 property as follows.</p>
		 
		 <codeblock>&lt;?xml version="1.0"?&gt;</codeblock>
		 
		 <p>If the original encoding was not removed by the xml property, the following line returns an error indicating the parser cannot switch from Unicode to UTF-8 encoding.</p>
		 
		 <codeblock>xmlDoc.loadxml(xmlDoc.xml);</codeblock>
		 
		 <p>If you use the save Method, the original encoding is preserved. For example, if you load a document in Microsoft® Windows® 1252 encoding, it will be saved in that format. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/aa923294.aspx"><linktext>MSDN - xml Property</linktext></link><link href="dom.core.xml#Document/save()"><linktext>dom.core.Document.save()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:DOMError"><apiName>DOMError</apiName><shortdesc>
	 DOMError is an interface that describes an error.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 DOMError is an interface that describes an error.
	 
	 <p><b>Note (Mozilla):</b> This is not implemented in Mozilla.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMError"><linktext>MDC - DOMError</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ERROR-Interfaces-DOMError"><linktext>W3C - DOMError</linktext></link></related-links><apiValue id="dom.core:DOMError:SEVERITY_ERROR"><apiName>SEVERITY_ERROR</apiName><shortdesc>
		 The severity of the error described by the DOMError is error.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The severity of the error described by the DOMError is error.
		 
		 <p>A SEVERITY_ERROR  may not cause the processing to stop if the error 
		 can be recovered, unless DOMErrorHandler.handleError()  returns false.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ERROR-DOMError-severity-error"><linktext>W3C - DOMError.SEVERITY_ERROR</linktext></link></related-links></apiValue><apiValue id="dom.core:DOMError:SEVERITY_FATAL_ERROR"><apiName>SEVERITY_FATAL_ERROR</apiName><shortdesc>
		 The severity of the error described by the DOMError is fatal error.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The severity of the error described by the DOMError is fatal error.
		 
		 <p>A SEVERITY_FATAL_ERROR will cause the normal processing to stop. 
		 The return value of DOMErrorHandler.handleError() is ignored unless 
		 the implementation chooses to continue, in which case the behavior 
		 becomes undefined.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ERROR-DOMError-severity-fatal-error"><linktext>W3C - DOMError.SEVERITY_FATAL_ERROR</linktext></link></related-links></apiValue><apiValue id="dom.core:DOMError:SEVERITY_WARNING"><apiName>SEVERITY_WARNING</apiName><shortdesc>
		 The severity of the error described by the DOMError is warning.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 The severity of the error described by the DOMError is warning.
		 
		 <p>A SEVERITY_WARNING will not cause the processing to stop, unless 
		 DOMErrorHandler.handleError() returns false.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ERROR-DOMError-severity-warning"><linktext>W3C - DOMError.SEVERITY_WARNING</linktext></link></related-links></apiValue><apiValue id="dom.core:DOMError:location:get"><apiName>location</apiName><shortdesc>
		 The location of the error.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:DOMLocator</apiValueClassifier></apiValueDef><apiDesc>
		 The location of the error.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMError.location"><linktext>MDC - DOMError.location</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ERROR-DOMError-location"><linktext>W3C - DOMError.location</linktext></link></related-links></apiValue><apiValue id="dom.core:DOMError:message:get"><apiName>message</apiName><shortdesc>
		 An implementation specific string describing the error that occurred.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 An implementation specific string describing the error that occurred.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMError.message"><linktext>MDC - DOMError.message</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ERROR-DOMError-message"><linktext>W3C - DOMError.message</linktext></link></related-links></apiValue><apiValue id="dom.core:DOMError:relatedData:get"><apiName>relatedData</apiName><shortdesc>
		 The related DOMError.type dependent data if any.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMObject</apiValueClassifier></apiValueDef><apiDesc>
		 The related DOMError.type dependent data if any. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMError.relatedData"><linktext>MDC - DOMError.relatedData</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ERROR-DOMError-relatedData"><linktext>W3C - DOMError.relatedData</linktext></link></related-links></apiValue><apiValue id="dom.core:DOMError:relatedException:get"><apiName>relatedException</apiName><shortdesc>
		 The related platform dependent exception if any.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMObject</apiValueClassifier></apiValueDef><apiDesc>
		 The related platform dependent exception if any.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMError.relatedException"><linktext>MDC - DOMError.relatedException</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ERROR-DOMError-relatedException"><linktext>W3C - DOMError.relatedException</linktext></link></related-links></apiValue><apiValue id="dom.core:DOMError:severity:get"><apiName>severity</apiName><shortdesc>
		 The severity of the error, either SEVERITY_WARNING, SEVERITY_ERROR, 
		 or SEVERITY_FATAL_ERROR.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The severity of the error, either SEVERITY_WARNING, SEVERITY_ERROR, 
		 or SEVERITY_FATAL_ERROR.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMError.severity"><linktext>MDC - DOMError.severity</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ERROR-DOMError-severity"><linktext>W3C - DOMError.severity</linktext></link><link href="dom.core.xml#DOMError/SEVERITY_WARNING"><linktext>SEVERITY_WARNING</linktext></link><link href="dom.core.xml#DOMError/SEVERITY_ERROR"><linktext>SEVERITY_ERROR</linktext></link><link href="dom.core.xml#DOMError/SEVERITY_FATAL_ERROR"><linktext>SEVERITY_FATAL_ERROR</linktext></link></related-links></apiValue><apiValue id="dom.core:DOMError:type:get"><apiName>type</apiName><shortdesc>
		 A DOMString indicating which related data is expected in relatedData.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 A DOMString indicating which related data is expected in relatedData. 
		 Users should refer to the specification of the error in order to find 
		 its DOMString type and relatedData  definitions if any.
		 
		 <p><b>Note:</b> As an example, Document.normalizeDocument() does generate warnings 
		 when the "split-cdata-sections" parameter is in use. Therefore, the method 
		 generates a SEVERITY_WARNING with type "cdata-sections-splitted" and the 
		 first CDATASection node in document order resulting from the split is 
		 returned by the relatedData attribute.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMError.type"><linktext>MDC - DOMError.type</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ERROR-DOMError-type"><linktext>W3C - DOMError.type</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:ProcessingInstruction"><apiName>ProcessingInstruction</apiName><shortdesc>
	 A processing instruction provides an opportunity for application-specific 
	 instructions to be embedded within XML and which can be ignored by XML 
	 processors which do not support processing their instructions (outside of 
	 their having a place in the DOM).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A processing instruction provides an opportunity for application-specific 
	 instructions to be embedded within XML and which can be ignored by XML 
	 processors which do not support processing their instructions (outside of 
	 their having a place in the DOM).
	 
	 <p>A Processing instruction is distinct from a XML Declaration which is used 
	 for other information about the document such as encoding and which appear 
	 (if it does) as the first item in the document.</p>
	 
	 <p>User-defined processing instructions cannot begin with 'xml', as these are 
	 reserved (e.g., as used in &lt;?xml-stylesheet ?&gt;).</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms765480%28VS.85%29.aspx"><linktext>MSDN - IXMLDOMProcessingInstruction</linktext></link><link href="http://developer.mozilla.org/en/DOM/ProcessingInstruction"><linktext>MDC - ProcessingInstruction</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1004215813"><linktext>W3C - ProcessingInstruction</linktext></link></related-links><adobeApiEvent id="dom.core:ProcessingInstruction_DOMCharacterDataModified_DOMCharacterDataModified"><apiName>DOMCharacterDataModified</apiName><shortdesc>
	 Occurs after CharacterData.data or ProcessingInstruction.data have been
	 modified but the node itself has not been inserted or deleted.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMCharacterDataModified</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Occurs after CharacterData.data or ProcessingInstruction.data have been
	 modified but the node itself has not been inserted or deleted. The target 
	 node of this event is the CharacterData node or the 
	 ProcessingInstruction node.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:ProcessingInstruction_DOMNodeInsertedIntoDocument_DOMNodeInsertedIntoDocument"><apiName>DOMNodeInsertedIntoDocument</apiName><shortdesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeInsertedIntoDocument</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 after the insertion has taken place. The target node of this event is the 
	 node being inserted. If the node is being directly inserted, the event type 
	 DOMNodeInserted occurs before this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:ProcessingInstruction_DOMNodeRemovedFromDocument_DOMNodeRemovedFromDocument"><apiName>DOMNodeRemovedFromDocument</apiName><shortdesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeRemovedFromDocument</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 before the removal takes place. The target node of this event type is 
	 the node being removed. If the node is being directly removed, the event 
	 type DOMNodeRemoved occurs before this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:ProcessingInstruction_DOMNodeRemoved_DOMNodeRemoved"><apiName>DOMNodeRemoved</apiName><shortdesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeRemoved</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement. This event is dispatched before the 
	 removal takes place. The target node of this event is the node 
	 being removed.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:ProcessingInstruction_DOMNodeInserted_DOMNodeInserted"><apiName>DOMNodeInserted</apiName><shortdesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeInserted</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element. This event is dispatched after 
	 the insertion has taken place. The target node of this event is the 
	 node being inserted.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiValue id="dom.core:ProcessingInstruction:data:get"><apiName>data</apiName><shortdesc>
		 First non-whitespace character after target and before ?&gt;
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 First non-whitespace character after target and before ?&gt;
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757835%28VS.85%29.aspx"><linktext>MSDN - data Property (IXMLDOMProcessingInstruction)</linktext></link><link href="http://developer.mozilla.org/en/DOM/ProcessingInstruction"><linktext>MDC - ProcessingInstruction</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-837822393"><linktext>W3C - ProcessingInstruction.data</linktext></link></related-links></apiValue><apiValue id="dom.core:ProcessingInstruction:target:get"><apiName>target</apiName><shortdesc>
		 After the &amp;lt;? and before whitespace delimiting it from data
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 After the &lt;? and before whitespace delimiting it from data
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757903%28VS.85%29.aspx"><linktext>MSDN - target Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/ProcessingInstruction"><linktext>MDC - ProcessingInstruction</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1478689192"><linktext>W3C - ProcessingInstruction.target</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:DOMStringList"><apiName>DOMStringList</apiName><shortdesc>
	 The DOMStringList interface provides the abstraction of an ordered 
	 collection of DOMString values, without defining or constraining how 
	 this collection is implemented.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 The DOMStringList interface provides the abstraction of an ordered 
	 collection of DOMString values, without defining or constraining how 
	 this collection is implemented. The items in the DOMStringList are 
	 accessible via an integral index, starting from 0. 
	 
	 <p><b>Note (Mozilla):</b> This type is presently not available to Mozilla as DOMConfiguration is not implemented.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMStringList"><linktext>MDC - DOMStringList</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMStringList"><linktext>DOMStringList</linktext></link></related-links><apiOperation id="dom.core:DOMStringList:dom.core:DOMStringList:contains"><apiName>contains</apiName><shortdesc>
		 The column number this locator is pointing to, or -1 if there is no 
		 column number available.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the string has been found.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>str</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The string to look for. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The column number this locator is pointing to, or -1 if there is no 
		 column number available.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMStringList.contains"><linktext>MDC - DOMStringList.contains()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMStringList-contains"><linktext>W3C - DOMStringList.contains()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMStringList:dom.core:DOMStringList:item"><apiName>item</apiName><shortdesc>
		 Returns the index of the item in the collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The DOMString at the index position in the DOMStringList, or null 
		 if that is not a valid index.
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index of the item in the collection. If index is greater than 
		 or equal to the number of DOMStrings in the list, this returns null. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMStringList.item"><linktext>MDC - DOMStringList.item()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMStringList-item"><linktext>W3C - DOMStringList.item()</linktext></link></related-links></apiOperation><apiValue id="dom.core:DOMStringList:dom.core:DOMStringList:length:get"><apiName>length</apiName><shortdesc>
		 The number of DOMStrings in the list.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The number of DOMStrings in the list. The range of valid child 
		 node indices is 0 to length-1  inclusive.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMStringList.length"><linktext>MDC - DOMStringList.length</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMStringList-length"><linktext>W3C - DOMStringList.length</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:NodeList"><apiName>NodeList</apiName><shortdesc>
	 The NodeList interface provides the abstraction of an ordered collection
	 of nodes, without defining or constraining how this collection is 
	 implemented.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 The NodeList interface provides the abstraction of an ordered collection
	 of nodes, without defining or constraining how this collection is 
	 implemented. NodeList objects in the DOM are live.
	 
	 <p>The items in the NodeList are accessible via an integral index, 
	 starting from 0. </p>
	 
	 <p><b>Note:</b> NodeList objects in the DOM are live.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757073%28VS.85%29.aspx"><linktext>MSDN - IXMLDOMNodeList</linktext></link><link href="http://developer.mozilla.org/En/DOM/NodeList"><linktext>MDC - NodeList</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-536297177"><linktext>W3C - NodeList</linktext></link></related-links><apiOperation id="dom.core:NodeList:dom.core:NodeList:item"><apiName>item</apiName><shortdesc>
		 Returns the index item in the collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The node at the indexth position in the NodeList, or null 
		 if that is not a valid index.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index into the collection.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the index item in the collection. If index is greater than
		 or equal to the number of nodes in the list, this returns null.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757028%28VS.85%29.aspx"><linktext>MSDN - item Method (IXMLDOMNodeList)</linktext></link><link href="http://developer.mozilla.org/En/DOM/NodeList.item"><linktext>MDC - NodeList.item()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-844377136"><linktext>W3C - NodeList.item()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NodeList:dom.core:NodeList:nextNode"><apiName>nextNode</apiName><shortdesc>
		 Returns the next node in the collection.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An IXMLDOMNode refers to the next node in the collection. Returns Null if there is no next node.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns the next node in the collection.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757831%28VS.85%29.aspx"><linktext>MSDN - nextNode Method (IXMLDOMNodeList)</linktext></link></related-links></apiOperation><apiOperation id="dom.core:NodeList:dom.core:NodeList:reset"><apiName>reset</apiName><shortdesc>
		 Resets the iterator.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Resets the iterator.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms766592%28VS.85%29.aspx"><linktext>MSDN - reset Method (IXMLDOMNodeList)</linktext></link></related-links></apiOperation><apiValue id="dom.core:NodeList:dom.core:NodeList:length:get"><apiName>length</apiName><shortdesc>
		 The number of nodes in the list.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 The number of nodes in the list. The range of valid child node 
		 indices is 0 to length-1 inclusive.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757044%28VS.85%29.aspx"><linktext>MSDN - length Property (IXMLDOMNodeList)</linktext></link><link href="http://developer.mozilla.org/En/DOM/NodeList.length"><linktext>MDC - NodeList.length</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-203510337"><linktext>W3C - NodeList.length</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="dom.core:Element"><apiName>Element</apiName><shortdesc>
	 The Element interface represents an element in an HTML or XML document.</shortdesc><prolog><asMetadata/><asCustoms><internal>
	 Sources:
	 http://msdn.microsoft.com/en-us/library/dd347058(VS.85).aspx#
	 http://developer.mozilla.org/en/DOM/element
	 http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-745549614
	 
	 ASDoc Help:
	 http://livedocs.adobe.com/flex/3/html/help.html?content=asdoc_6.html
	 http://livedocs.adobe.com/flex/3/html/help.html?content=asdoc_3.html
	 
	 http://www.aptana.com/reference/html/api/Element.html
	 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>cssom.view:ElementView</apiBaseInterface><apiBaseInterface>elementtraversal:ElementTraversal</apiBaseInterface><apiBaseInterface>selectors:NodeSelector</apiBaseInterface><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The Element interface represents an element in an HTML or XML document. 
	 
	 <p>Elements may have attributes associated with them; since the Element 
	 interface inherits from Node, the generic Node interface attribute 
	 attributes may be used to retrieve the set of all attributes for an 
	 element. There are methods on the Element interface to retrieve either 
	 an Attr object by name or an attribute value by name. In XML, where an 
	 attribute value may contain entity references, an Attr object should be 
	 retrieved to examine the possibly fairly complex sub-tree representing 
	 the attribute value. On the other hand, in HTML, where all attributes 
	 have simple string values, methods to directly access an attribute value 
	 can safely be used as a convenience.</p>
	 
	 <p>Note: In DOM Level 2, the method normalize is inherited from the Node 
	 interface where it was moved.</p>
	 
	 <p>Includes the <xref href="http://www.w3.org/TR/2008/REC-ElementTraversal-20081222/">ElementTraversal Specification</xref></p>
	 
	 </apiDesc></apiClassifierDetail><adobeApiEvent id="dom.core:Element_keyup_keyup"><apiName>keyup</apiName><shortdesc>
	 A key is released.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>keyup</apiEventType><adobeApiEventClassifier>dom.events.KeyboardEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A key is released. This event type is device dependent and relies on the 
	 capabilities of the input devices and how they are mapped in the operating 
	 system. This event type is generated after the keyboard mapping but before 
	 the processing of an input method editor. This event should logically 
	 happen after the event keydown is produced. Whether a keyup contributes 
	 or not to the generation of a text event is implementation dependent.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_keydown_keydown"><apiName>keydown</apiName><shortdesc>
	 A key is pressed down.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>keydown</apiEventType><adobeApiEventClassifier>dom.events.KeyboardEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A key is pressed down. This event type is device dependent and relies 
	 on the capabilities of the input devices and how they are mapped in the 
	 operating system. This event type is generated after the keyboard 
	 mapping but before the processing of an input method editor. This event 
	 should logically happen before the event keyup is produced. Whether a 
	 keydown contributes or not to the generation of a text event is 
	 implementation dependent.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_textInput_textInput"><apiName>textInput</apiName><shortdesc>
	 One or more characters have been entered.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>textInput</apiEventType><adobeApiEventClassifier>dom.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 One or more characters have been entered. The characters can originate 
	 from a variety of sources. For example, it could be characters 
	 resulting from a key being pressed or released on a keyboard device, 
	 characters resulting from the processing of an input method editor, or 
	 resulting from a voice command. Where a "paste" operation generates a 
	 simple sequence of characters, i.e. a text without any structure or 
	 style information, this event type should be generated as well.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_blur_blur"><apiName>blur</apiName><shortdesc>
	 An event target loses focus.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>blur</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 An event target loses focus. The focus is taken from the element before 
	 the dispatch of this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_focus_focus"><apiName>focus</apiName><shortdesc>
	 An event target receives focus.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>focus</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 An event target receives focus. The focus is given to the element 
	 before the dispatch of this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_windowZLevel_windowZLevel"><apiName>windowZLevel</apiName><shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>windowZLevel</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013"><linktext>bug 286013</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMMenuItemActive_DOMMenuItemActive"><apiName>DOMMenuItemActive</apiName><shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMMenuItemActive</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013"><linktext>bug 286013</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="dom.core:Element_ValueChange_ValueChange"><apiName>ValueChange</apiName><shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>ValueChange</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013"><linktext>bug 286013</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="dom.core:Element_PluginNotFound_PluginNotFound"><apiName>PluginNotFound</apiName><shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>PluginNotFound</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013"><linktext>bug 286013</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMTitleChanged_DOMTitleChanged"><apiName>DOMTitleChanged</apiName><shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMTitleChanged</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013"><linktext>bug 286013</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="dom.core:Element_PopupWindow_PopupWindow"><apiName>PopupWindow</apiName><shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>PopupWindow</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013"><linktext>bug 286013</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="dom.core:Element_fullscreen_fullscreen"><apiName>fullscreen</apiName><shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fullscreen</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013"><linktext>bug 286013</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMModalDialogClosed_DOMModalDialogClosed"><apiName>DOMModalDialogClosed</apiName><shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMModalDialogClosed</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013"><linktext>bug 286013</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMWillOpenModalDialog_DOMWillOpenModalDialog"><apiName>DOMWillOpenModalDialog</apiName><shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMWillOpenModalDialog</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013"><linktext>bug 286013</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMLinkRemoved_DOMLinkRemoved"><apiName>DOMLinkRemoved</apiName><shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMLinkRemoved</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013"><linktext>bug 286013</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMLinkAdded_DOMLinkAdded"><apiName>DOMLinkAdded</apiName><shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMLinkAdded</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013"><linktext>bug 286013</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="dom.core:Element_MozMousePixelScroll_MozMousePixelScroll"><apiName>MozMousePixelScroll</apiName><shortdesc>
	 Gecko-Specific | Firefox 3.5+ 
	 
	 Regular mouse wheels can only scroll with a per-line resolution.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>MozMousePixelScroll</apiEventType><adobeApiEventClassifier>gecko.events.MouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific | Firefox 3.5+</b> 
	 
	 Regular mouse wheels can only scroll with a per-line resolution. However, there are also 
	 devices that support scrolling with pixel precision, notably Apple MacBook trackpads.
	 
	 When we started supporting pixel scrolling in bug 350471, we added the MozMousePixelScroll 
	 event. It basically works exactly like DOMMouseScroll, with the difference that the detail
	 attribute is in pixels (instead of lines).
	 
	 For backwards compatibility DOMMouseScroll events are sent even if pixel scrolling is used. 
	 Every DOMMouseScroll event can have several associated MozMousePixelScroll events. If 
	 preventDefault() is called on the DOMMouseScroll event, the following associated 
	 MozMousePixelScroll events won't cause any scrolling.
	 
	 When you listen for MozMousePixelScroll events, you shouldn't handle DOMMouseScroll events - 
	 otherwise you'd end up processing the same scroll gesture twice. In order to make it possible 
	 to only listen for MozMousePixelScroll events, Gecko will send MozMousePixelScroll events 
	 even when scrolling with regular mouse wheels. These events will carry a meaningful pixel delta.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMMouseScroll_DOMMouseScroll"><apiName>DOMMouseScroll</apiName><shortdesc>
	 Gecko-Specific 
	 
	 The DOMMouseScroll event is sent when the mouse wheel is moved.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMMouseScroll</apiEventType><adobeApiEventClassifier>gecko.events.MouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 The DOMMouseScroll event is sent when the mouse wheel is moved. The target of this 
	 event is the element that was under the mouse pointer when the mouse wheel was 
	 scrolled, similar to the click event.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_MozAfterPaint_MozAfterPaint"><apiName>MozAfterPaint</apiName><shortdesc>
	 Gecko-Specific | Firefox 3.5+ 
	 
	 The MozAfterPaint event is fired whenever content is repainted.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>MozAfterPaint</apiEventType><adobeApiEventClassifier>gecko.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific | Firefox 3.5+</b> 
	 
	 The MozAfterPaint event is fired whenever content is repainted.  It is sent to the 
	 document and bubbles up to the window level.
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="http://developer.mozilla.org/en/Gecko-Specific_DOM_Events"><linktext>http://developer.mozilla.org/en/Gecko-Specific_DOM_Events</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMWindowClose_DOMWindowClose"><apiName>DOMWindowClose</apiName><shortdesc>
	 Gecko-Specific 
	 
	 Fired when the window is about to be closed by window.close().</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMWindowClose</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 Fired when the window is about to be closed by window.close().
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMFrameContentLoaded_DOMFrameContentLoaded"><apiName>DOMFrameContentLoaded</apiName><shortdesc>
	 Gecko-Specific 
	 
	 Same as DOMContentLoaded, but also fired for enclosed frames.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMFrameContentLoaded</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 Same as DOMContentLoaded, but also fired for enclosed frames.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMContentLoaded_DOMContentLoaded"><apiName>DOMContentLoaded</apiName><shortdesc>
	 Gecko-Specific 
	 
	 Fired on a Window object when a document's DOM content is finished loading, 
	 but unlike "load", does not wait until all images are loaded.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMContentLoaded</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 <b>Gecko-Specific</b> 
	 
	 Fired on a Window object when a document's DOM content is finished loading, 
	 but unlike "load", does not wait until all images are loaded. Used for 
	 example by GreaseMonkey to sneak in to alter pages before they are displayed.
	 
	 This event, as many others on this page, is dispatched to "trusted" targets only; 
	 for example, it is not dispatched to the content of the main browser object in 
	 Firefox, even if it comes from a chrome:/ URI.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMFocusOut_DOMFocusOut"><apiName>DOMFocusOut</apiName><shortdesc>
	 An event target loses focus.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMFocusOut</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 An event target loses focus. The focus is taken from the element before 
	 the dispatch of this event type. This event type is dispatched after 
	 the event type blur.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMFocusIn_DOMFocusIn"><apiName>DOMFocusIn</apiName><shortdesc>
	 An event target receives focus.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMFocusIn</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 An event target receives focus. The focus is given to the element 
	 before the dispatch of this event type. This event type is 
	 dispatched after the event type focus.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMActivate_DOMActivate"><apiName>DOMActivate</apiName><shortdesc>
	 Refer to Activation requests and behavior.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMActivate</apiEventType><adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Refer to Activation requests and behavior.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_scroll_scroll"><apiName>scroll</apiName><shortdesc>
	 A document view or an element has been scrolled.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>scroll</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A document view or an element has been scrolled. The scroll occured before 
	 the dispatch of this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_resize_resize"><apiName>resize</apiName><shortdesc>
	 A document view or an element has been resized.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>resize</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A document view or an element has been resized. The resize occured before 
	 the dispatch of this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_reset_reset"><apiName>reset</apiName><shortdesc>
	 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is reset.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>reset</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is reset.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_submit_submit"><apiName>submit</apiName><shortdesc>
	 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is submitted.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>submit</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is submitted.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_change_change"><apiName>change</apiName><shortdesc>
	 A control loses the input focus and its value has been modified since 
	 gaining focus.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>change</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A control loses the input focus and its value has been modified since 
	 gaining focus. This event type is dispatched before the event type blur.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_select_select"><apiName>select</apiName><shortdesc>
	 A user selects some text.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>select</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A user selects some text. DOM Level 3 Events does not provide contextual 
	 information to access the selected text. The selection occured before 
	 the dispatch of this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_error_error"><apiName>error</apiName><shortdesc>
	 A resource failed to load, or has been loaded but cannot be interpreted 
	 according to its semantics such as an invalid image, a script execution 
	 error, or non-well-formed XML.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>error</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A resource failed to load, or has been loaded but cannot be interpreted 
	 according to its semantics such as an invalid image, a script execution 
	 error, or non-well-formed XML.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_abort_abort"><apiName>abort</apiName><shortdesc>
	 Loading of a resource has been aborted.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>abort</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Loading of a resource has been aborted.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_unload_unload"><apiName>unload</apiName><shortdesc>
	 The DOM implementation removes from the environment the resource 
	 (such as the document) or any dependent resources (such as images, 
	 style sheets, scripts).</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>unload</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 The DOM implementation removes from the environment the resource 
	 (such as the document) or any dependent resources (such as images, 
	 style sheets, scripts). The document is unloaded after the dispatch 
	 of this event type. If this event type is dispatched, implementations 
	 are required to dispatch this event at least on the Document node.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_load_load"><apiName>load</apiName><shortdesc>
	 The DOM Implementation finishes loading the resource (such as the 
	 document) and any dependent resources (such as images, style sheets, 
	 or scripts).</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>load</apiEventType><adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 The DOM Implementation finishes loading the resource (such as the 
	 document) and any dependent resources (such as images, style sheets, 
	 or scripts). Dependent resources that fail to load will not prevent 
	 this event from firing if the resource that loaded them is still 
	 accessible via the DOM. If this event type is dispatched, 
	 implementations are required to dispatch this event at least on the 
	 Document node.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMAttributeNameChanged_DOMAttributeNameChanged"><apiName>DOMAttributeNameChanged</apiName><shortdesc>
	 Occurs after the namespaceURI and/or the nodeName of a Attr node have 
	 been modified (e.g., the attribute was renamed using 
	 Document.renameNode()).</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMAttributeNameChanged</apiEventType><adobeApiEventClassifier>dom.events.MutationNameEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Occurs after the namespaceURI and/or the nodeName of a Attr node have 
	 been modified (e.g., the attribute was renamed using 
	 Document.renameNode()). The target node of this event is the Element 
	 node whose Attr has been renamed.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMElementNameChanged_DOMElementNameChanged"><apiName>DOMElementNameChanged</apiName><shortdesc>
	 Occurs after the namespaceURI and/or the nodeName of an Element node 
	 have been modified (e.g., the element was renamed using 
	 Document.renameNode()).</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMElementNameChanged</apiEventType><adobeApiEventClassifier>dom.events.MutationNameEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Occurs after the namespaceURI and/or the nodeName of an Element node 
	 have been modified (e.g., the element was renamed using 
	 Document.renameNode()). The target node of this event is the renamed 
	 Element node.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMAttrModified_DOMAttrModified"><apiName>DOMAttrModified</apiName><shortdesc>
	 Occurs after Attr.value has been modified and after an Attr node has been 
	 added to or removed from an Element.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMAttrModified</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Occurs after Attr.value has been modified and after an Attr node has been 
	 added to or removed from an Element. The target node of this event is 
	 the Element node where the change occured. It is implementation dependent 
	 whether this event type occurs when the children of the Attr node are 
	 changed in ways that do not affect the value of Attr.value.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMNodeInsertedIntoDocument_DOMNodeInsertedIntoDocument"><apiName>DOMNodeInsertedIntoDocument</apiName><shortdesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeInsertedIntoDocument</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 after the insertion has taken place. The target node of this event is the 
	 node being inserted. If the node is being directly inserted, the event type 
	 DOMNodeInserted occurs before this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMNodeRemovedFromDocument_DOMNodeRemovedFromDocument"><apiName>DOMNodeRemovedFromDocument</apiName><shortdesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeRemovedFromDocument</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 before the removal takes place. The target node of this event type is 
	 the node being removed. If the node is being directly removed, the event 
	 type DOMNodeRemoved occurs before this event type.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMNodeRemoved_DOMNodeRemoved"><apiName>DOMNodeRemoved</apiName><shortdesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeRemoved</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement. This event is dispatched before the 
	 removal takes place. The target node of this event is the node 
	 being removed.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMNodeInserted_DOMNodeInserted"><apiName>DOMNodeInserted</apiName><shortdesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMNodeInserted</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element. This event is dispatched after 
	 the insertion has taken place. The target node of this event is the 
	 node being inserted.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_DOMSubtreeModified_DOMSubtreeModified"><apiName>DOMSubtreeModified</apiName><shortdesc>
	 This is a general event for notification of all changes to the 
	 document.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>DOMSubtreeModified</apiEventType><adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 This is a general event for notification of all changes to the 
	 document. It can be used instead of the more specific mutation and 
	 mutation name events listed below. It may be dispatched after a 
	 single modification to the document or, at the implementation's 
	 discretion, after multiple changes have occurred. The latter use 
	 should generally be used to accommodate multiple changes which occur 
	 either simultaneously or in rapid succession. The target of this 
	 event is the lowest common parent of the changes which have taken 
	 place. This event is dispatched after any other events caused by the 
	 mutation(s) have occurred.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_mousewheel_mousewheel"><apiName>mousewheel</apiName><shortdesc>
	 A mouse wheel has been rotated around the y-axis.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mousewheel</apiEventType><adobeApiEventClassifier>dom.events.MouseWheelEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A mouse wheel has been rotated around the y-axis.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_mousemultiwheel_mousemultiwheel"><apiName>mousemultiwheel</apiName><shortdesc>
	 A mouse wheel has been rotated.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mousemultiwheel</apiEventType><adobeApiEventClassifier>dom.events.MouseMultiWheelEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A mouse wheel has been rotated. A default action of user agent 
	 generated event objects of this type causes implementations to 
	 dispatch a mousewheel event iff it supports that event type and 
	 MouseMultiWheelEvent.wheelDeltaY is non-zero.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_mouseout_mouseout"><apiName>mouseout</apiName><shortdesc>
	 A pointing device is moved away from an element.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mouseout</apiEventType><adobeApiEventClassifier>dom.events.MouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A pointing device is moved away from an element.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_mousemove_mousemove"><apiName>mousemove</apiName><shortdesc>
	 A pointing device is moved while it is over an element.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mousemove</apiEventType><adobeApiEventClassifier>dom.events.MouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A pointing device is moved while it is over an element.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_mouseover_mouseover"><apiName>mouseover</apiName><shortdesc>
	 A pointing device is moved onto an element.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mouseover</apiEventType><adobeApiEventClassifier>dom.events.MouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A pointing device is moved onto an element.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_mouseup_mouseup"><apiName>mouseup</apiName><shortdesc>
	 A pointing device button is released over an element.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mouseup</apiEventType><adobeApiEventClassifier>dom.events.MouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A pointing device button is released over an element.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_mousedown_mousedown"><apiName>mousedown</apiName><shortdesc>
	 A pointing device button is pressed over an element.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mousedown</apiEventType><adobeApiEventClassifier>dom.events.MouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A pointing device button is pressed over an element.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_dblclick_dblclick"><apiName>dblclick</apiName><shortdesc>
	 A pointing device button is clicked twice over an element.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>dblclick</apiEventType><adobeApiEventClassifier>dom.events.MouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A pointing device button is clicked twice over an element. The definition 
	 of a double click depends on the environment configuration, except that 
	 the event target must be the same between mousedown, mouseup, and dblclick. 
	 This event type is dispatched after the event type click if a click and 
	 double click occur simultaneously, and after the event type mouseup otherwise.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="dom.core:Element_click_click"><apiName>click</apiName><shortdesc>
	 A pointing device button is clicked over an element.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>click</apiEventType><adobeApiEventClassifier>dom.events.MouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 A pointing device button is clicked over an element. The definition of a 
	 click depends on the environment configuration; i.e. it may depend on the 
	 screen location or the delay between the press and release of the pointing 
	 device button. In any case, the event target must be the same between the 
	 mousedown, mouseup, and click. The sequence of these events is: mousedown, 
	 mouseup, and click. It depends on the environment configuration whether 
	 the event type click can occur if one or more of the event types mouseover, 
	 mousemove, and mouseout occur between the press and release of the pointing 
	 device button. In addition, the event type is dispatched as described in 
	 Activation requests and behavior.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="dom.core:Element:addBehavior"><apiName>addBehavior</apiName><shortdesc>
		 Attaches a behavior to the element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="+5.5"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns an identifier that can be used later to detach the behavior from the element.
		 
		 </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Location of the behavior, in URL format.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Attaches a behavior to the element.
		 
		 <p>This method, and the following remarks, apply only to attached 
		 behaviors, which are the original Dynamic HTML (DHTML) behaviors 
		 introduced in Microsoft Internet Explorer 5. Element behaviors are 
		 a feature in Internet Explorer 5.5 and cannot be added to or 
		 removed from an element.</p>
		 
		 <p>This method enables you to attach a behavior without using Cascading 
		 Style Sheets (CSS).</p>
		 
		 <p>Unless the specified behavior in the addBehavior call is one of the 
		 default behaviors built into Internet Explorer, the addBehavior call 
		 causes Internet Explorer to download the behavior asynchronously, 
		 before the behavior is attached to the element.</p>
		 
		 <p>Due to the asynchronous nature of the addBehavior method, its return 
		 value cannot be relied on to determine whether the behavior was 
		 successfully applied to the element. Waiting for the onreadystatechange 
		 event to fire and verifying that the readyState property of the element 
		 is set to complete ensure that the behavior is completely attached to 
		 the element, and that all the behavior's members are available for scripting. 
		 Otherwise, attempting to use any behavior-defined member before the 
		 behavior is attached to the element results in a scripting error indicating 
		 that the object does not support that particular member.</p>
		 
		 <p>Note : A behavior attached to an element using the addBehavior method, or by 
		 applying the proposed CSS behavior attribute inline, is not automatically 
		 detached from the element when the element is removed from the document hierarchy. 
		 However, a behavior attached using a style rule defined in the document is 
		 detached automatically as the element is removed from the document tree.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;SCRIPT LANGUAGE="JScript"&gt;
		 var collBehaviorID = new Array();
		 var collLI = new Array ();
		 var countLI = 0;
		 
		 function attachBehavior() {
		 	collLI = document.all.tags("LI");
		 	countLI = collLI.length;
		 	for (i=0; i &lt; countLI; i++) {
		 		var iID = collLI[i].addBehavior("hilite.htc");
		 
		 		if (iID) collBehaviorID[i] = iID;
		 	}
		 }
		 &lt;/SCRIPT&gt;
		 
		 //Click &lt;A HREF="javascript:attachBehavior()"&gt;here&lt;/A&gt;
		 //to add a highlighting effect as you hover over each item below.
		 </codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:applyElement"><apiName>applyElement</apiName><shortdesc>
		 Makes the element either a child or parent of another element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns a reference to the applied element.
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/><apiDesc>An object that becomes the child or parent of the current element.
		 </apiDesc></apiParam><apiParam><apiItemName>where</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiData>outside</apiData><apiDesc>Specifies one of the following values. 
		 outside : Specified element becomes a parent of the current element.
		 inside : Specified element becomes a child of the current element, but contains all the child elements of the current element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Makes the element either a child or parent of another element.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;SCRIPT&gt;
		 function fnApply() {
		 	var oNewNode = document.createElement("I");
		 	oList.applyElement(oNewNode);
		 }
		 &lt;/SCRIPT&gt;
		 
		 &lt;UL ID = oList&gt;
		 &lt;LI&gt;List item 1
		 &lt;LI&gt;List item 2
		 &lt;LI&gt;List item 3
		 &lt;LI&gt;List item 4
		 &lt;/UL&gt;
		 &lt;INPUT TYPE="button" VALUE="Apply Element" onclick="fnApply()"&gt;
		 </codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:attachEvent"><apiName>attachEvent</apiName><shortdesc>
		 Binds the specified function to an event, so that the function gets called whenever 
		 the event fires on the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true (successful) or false (failed).
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The event string should include the "on" prefix (ie: "onload", "onclick" etc).
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The function or method to associate with the event.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Binds the specified function to an event, so that the function gets called whenever 
		 the event fires on the object.
		 
		 </apiDesc><example>
		 <codeblock>if (window.attachEvent) window.attachEvent("onload", statusreport); //invoke function</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx"><linktext>MSDN - attachEvent Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:clearAttributes"><apiName>clearAttributes</apiName><shortdesc>
		 Removes all attributes and values from the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all attributes and values from the object.
		 
		 <p>The clearAttributes method clears only persistent HTML attributes. 
		 The ID attribute, styles, and script-only properties are not affected.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:componentFromPoint"><apiName>componentFromPoint</apiName><shortdesc>
		 Returns the component located at the specified coordinates via certain events.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns one of the following possible values.
		 <ul>
		 <li>empty string : Component is inside the client area of the object.</li>
		 <li>outside : Component is outside the bounds of the object.</li>
		 <li>scrollbarDown : Down scroll arrow is at the specified location.</li>
		 <li>scrollbarHThumb : Horizontal scroll thumb or box is at the specified location.</li>
		 <li>scrollbarLeft : Left scroll arrow is at the specified location.</li>
		 <li>scrollbarPageDown : Page-down scroll bar shaft is at the specified location.</li>
		 <li>scrollbarPageLeft : Page-left scroll bar shaft is at the specified location.</li>
		 <li>scrollbarPageRight : Page-right scroll bar shaft is at the specified location.</li>
		 <li>scrollbarPageUp : Page-up scroll bar shaft is at the specified location.</li>
		 <li>scrollbarRight : Right scroll arrow is at the specified location.</li>
		 <li>scrollbarUp : Up scroll arrow is at the specified location.</li>
		 <li>scrollbarVThumb : Vertical scroll thumb or box is at the specified location.</li>
		 <li>handleBottom : Bottom sizing handle is at the specified location.</li>
		 <li>handleBottomLeft : Lower-left sizing handle is at the specified location.</li>
		 <li>handleBottomRight : Lower-right sizing handle is at the specified location.</li>
		 <li>handleLeft : Left sizing handle is at the specified location.</li>
		 <li>handleRight : Right sizing handle is at the specified location.</li>
		 <li>handleTop : Top sizing handle is at the specified location.</li>
		 <li>handleTopLeft : Upper-left sizing handle is at the specified location.</li>
		 <li>handleTopRight : Upper-right sizing handle is at the specified location.</li>
		 </ul>
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>The client window coordinate of x
		 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>The client window coordinate of y
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the component located at the specified coordinates via certain events.
		 
		 <p>IE Note: The componentFromPoint method, available as of Microsoft Internet Explorer 5, 
		 is applicable to any object that can be given scroll bars through Cascading Style Sheets (CSS).</p>
		 
		 <p>The componentFromPoint method might not return the same object consistently when it 
		 is used with the onmouseover event. Because a user's mouse speed and entry point 
		 can vary, different components of an element can fire the onmouseover event. For 
		 example, when a user moves the cursor over a textArea object with scroll bars, the 
		 event might fire when the mouse enters the component border, the scroll bars, or 
		 the client region. After the event fires, the expected element might not be returned, 
		 unless the scroll bars were the point of entry for the mouse. In this case, the 
		 onmousemove event can be used to provide more consistent results.</p>
		 
		 <p>For the object's sizing handles to appear, designMode must be On, and the object 
		 must be selected.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:contains"><apiName>contains</apiName><shortdesc>
		 Checks whether the given element is contained within the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="Object"/><apiDesc>Element object that specifies the element to check.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Checks whether the given element is contained within the object. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:createControlRange"><apiName>createControlRange</apiName><shortdesc>
		 Creates a controlRange collection of nontext elements.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Creates a controlRange collection of nontext elements.
		 
		 <p>IE Note: Creates a selection range object for control-based selection 
		 rather than text-based selection.</p>
		 
		 <p>If a controlRange already exists, createControlRange overwrites 
		 the existing element; otherwise, it returns a pointer to the element created.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:detachEvent"><apiName>detachEvent</apiName><shortdesc>
		 Unbinds the specified function from the event, so that the function stops receiving notifications when the event fires.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies any of the standard  DHTML Events.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Specifies the function previously set using the attachEvent method.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Unbinds the specified function from the event, so that the function stops receiving notifications when the event fires.
		 
		 <p><b>Note (IE):</b> Behaviors that attach to events using the attachEvent method must explicitly call 
		 the detachEvent method to stop receiving notifications from the page when the  ondetach event fires. 
		 Behaviors that attach to events using the  PUBLIC:ATTACH element automatically stop receiving notifications 
		 when the behavior detaches from the element, and thus do not need to call the detachEvent method.</p>
		 
		 </apiDesc><example>
		 This example calls the detachEvent method from an HTML Component (HTC) when the highlighting effect is 
		 removed from the page, causing the ondetach event to fire.
		 <codeblock>
		 &lt;PUBLIC:ATTACH EVENT="ondetach" ONEVENT="cleanup()" /&gt;
		 
		 &lt;script language="JScript"&gt;
		 attachEvent ('onmouseover', Hilite);
		 attachEvent ('onmouseout', Restore);
		 
		 function cleanup() {
		 	detachEvent ('onmouseover', Hilite);
		 	detachEvent ('onmouseout', Restore);
		 }
		 
		 function Hilite() {
		 	if (event.srcElement == element) { 
		 		normalColor = style.color;  
		 		runtimeStyle.color  = "red";
		 		runtimeStyle.cursor = "hand";
		 	}
		 }
		 
		 function Restore() {
		 	if (event.srcElement == element) {
		 		runtimeStyle.color  = normalColor;
		 		runtimeStyle.cursor = "";
		 	}
		 }
		 &lt;/script&gt;</codeblock>
		 
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536411%28VS.85%29.aspx"><linktext>MSDN - detachEvent Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:doScroll"><apiName>doScroll</apiName><shortdesc>
		 Simulates a click on a scroll-bar component.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>scrollAction</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiData>scrollbarDown</apiData><apiDesc>Specifies how the object scrolls, using one of the following values.
		 <ul>
		 <li>scrollbarDown : Default. Down scroll arrow is at the specified location.</li>
		 <li>scrollbarHThumb : Horizontal scroll thumb or box is at the specified location.</li>
		 <li>scrollbarLeft : Left scroll arrow is at the specified location.</li>
		 <li>scrollbarPageDown : Page-down scroll bar shaft is at the specified location.</li>
		 <li>scrollbarPageLeft : Page-left scroll bar shaft is at the specified location.</li>
		 <li>scrollbarPageRight : Page-right scroll bar shaft is at the specified location.</li>
		 <li>scrollbarPageUp : Page-up scroll bar shaft is at the specified location.</li>
		 <li>scrollbarRight : Right scroll arrow is at the specified location.</li>
		 <li>scrollbarUp : Up scroll arrow is at the specified location.</li>
		 <li>scrollbarVThumb : Vertical scroll thumb or box is at the specified location.</li>
		 <li>down : Composite reference to scrollbarDown.</li>
		 <li>left : Composite reference to scrollbarLeft.</li>
		 <li>pageDown : Composite reference to scrollbarPageDown.</li>
		 <li>pageLeft : Composite reference to scrollbarPageLeft.</li>
		 <li>pageRight : Composite reference to scrollbarPageRight.</li>
		 <li>pageUp : Composite reference to scrollbarPageUp.</li>
		 <li>right : Composite reference to scrollbarRight.</li>
		 <li>up : Composite reference to scrollbarUp.</li>
		 </ul>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Simulates a click on a scroll-bar component.
		 
		 <p>Cascading Style Sheets (CSS) allow you to scroll on all objects through 
		 the overflow property.</p>
		 
		 <p>When the content of an element changes and causes scroll bars to display, 
		 the doScroll method might not work correctly immediately following the 
		 content update. When this happens, you can use the setTimeout method to 
		 enable the browser to recognize the dynamic changes that affect scrolling.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:dragDrop"><apiName>dragDrop</apiName><shortdesc>
		 Initiates a drag event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Drag operation success
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Initiates a drag event.
		 
		 <p>You can use this method to fire the ondragstart event. If the event is 
		 not cancelled, a drag operation is started. The method returns true when 
		 the mouse is released. If the ondragstart event is cancelled, the method 
		 returns false immediately</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:fireEvent"><apiName>fireEvent</apiName><shortdesc>
		 Fires a specified event on the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0b_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0a_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Event fired successfully
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>String that specifies the name of the event to fire.
		 </apiDesc></apiParam><apiParam><apiItemName>event</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Object that specifies the event object from which to obtain event object properties.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Fires a specified event on the object.
		 
		 <p>If the event being fired cannot be cancelled, fireEvent always returns true.</p>
		 
		 <p>Regardless of their values specified in the event object, the values of the 
		 four event properties—cancelBubble, returnValue, srcElement, and type—are 
		 automatically initialized to the values shown in the following table.</p> 
		 
		 <ul>
		 <li>cancelBubble : false</li>
		 <li>returnValue : true</li>
		 <li>srcElement : element on which the event is fired</li>
		 <li>type : name of the event that is fired</li>
		 </ul>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536423%28VS.85%29.aspx"><linktext>MSDN - fireEvent Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:getAdjacentText"><apiName>getAdjacentText</apiName><shortdesc>
		 Returns the adjacent text string.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns the first adjacent text string. 
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>where</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies where the text is located by using one of the following values.
		 <ul>
		 <li>beforeBegin : Text is returned immediately before the element.</li>
		 <li>afterBegin : Text is returned after the start of the element but before all other content in the element.</li>
		 <li>beforeEnd : Text is returned immediately before the end of the element but after all other content in the element.</li>
		 <li>afterEnd : Text is returned immediately after the end of the element.</li>
		 </ul>
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the adjacent text string. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:getAttribute"><apiName>getAttribute</apiName><shortdesc>
		 Returns the value of the named attribute on the specified element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="5.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="7.0+"/><apiTool name="Safari" version="1.0+"/><apiSince version="DOM 1 Core"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The value or null/""
		 
		 </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the value of the named attribute on the specified element.
		 
		 <p>If the named attribute does not exist, the value returned will 
		 either be null or "" (the empty string).</p>
		 
		 <p><b>Note:</b> Essentially all web browsers (Firefox, Internet Explorer, recent 
		 versions of Opera, Safari, Konqueror, and iCab, as a non-exhaustive list) 
		 return null when the specified attribute does not exist on the specified 
		 element. The DOM specification says that the correct return value in 
		 this case is actually the empty string, and some DOM implementations 
		 implement this behavior. The implementation of getAttribute in XUL (Gecko) 
		 actually follows the specification and returns an empty string. 
		 Consequently, you should use hasAttribute to check for an attribute's 
		 existence prior to calling getAttribute() if it is possible that the 
		 requested attribute does not exist on the specified element.</p>
		 
		 <p>The attributeName parameter is usually case sensitive, but it is case-insensitive 
		 when used upon HTML elements.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var div1 = document.getElementById("div1");
		 var align = div1.getAttribute("align");
		 alert(align); // shows the value of align for the element with id="div1"</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:getAttributeNS"><apiName>getAttributeNS</apiName><shortdesc>
		 Returns the string value of the attribute with the specified namespace and name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the implementation 
		 does not support the feature "XML" and the language exposed through the Document 
		 does not support XML Namespaces (such as [HTML 4.01]). 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The value or null/""
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>nameSpace</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace of the specified attribute. 
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the specified attribute. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the string value of the attribute with the specified namespace and name. 
		 
		 <p>If the named attribute does not exist, the value returned will either be null 
		 or "" (the empty string).</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var div1 = document.getElementById("div1");
		 var a = div1.getAttributeNS("www.mozilla.org/ns/specialspace/", "special-align");
		 alert(a); // shows the value of align for that div</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:getAttributeNode"><apiName>getAttributeNode</apiName><shortdesc>
		 Returns the Attr node for the attribute with the given name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="IE" version="6.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="7.0+"/><apiTool name="Safari" version="1.0+"/><apiSince version="DOM 1 Core"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns a reference to an attribute object.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Attr</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the name property of the requested attribute object.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the Attr node for the attribute with the given name. 
		 
		 <p><b>Note:</b> (IE8+) In IE8 mode, getAttributeNode correctly 
		 populates the value property of the returned attribute object regardless of 
		 whether the specified property is set to true or false. For more information 
		 on IE8 mode, see Defining Document Compatibility.</p>
		 
		 <p><b>Note:</b> (IE8+) In IE8 mode, the value 
		 property is correctly reported as a canonical attribute name. For example, 
		 &lt;input type="text" readonly&gt; and &lt;input type="text" readonly="readonly"&gt; would 
		 both set the input text field to read-only. In IE8 mode, the value is evaluated 
		 as a cannonical value, "readonly". In IE7 and earlier modes, it is evaluated 
		 as a Boolean value, true.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-getAttributeNode"><linktext>DOM Level 1:getAttributeNode</linktext></link><link href="http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-217A91B8"><linktext>DOM Level 2:getAttributeNode</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:getAttributeNodeNS"><apiName>getAttributeNodeNS</apiName><shortdesc>
		 Returns the Attr node for the attribute with the given namespace and name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>The node for specified attribute
		 
		 </apiDesc><apiOperationClassifier>dom.core:Attr</apiOperationClassifier></apiReturn><apiParam><apiItemName>nameSpace</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifying the namespace of the attribute. 
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifying the name of the attribute. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the Attr node for the attribute with the given namespace and name. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:getBoundingClientRect"><apiName>getBoundingClientRect</apiName><shortdesc>
		 
		 Retrieves an object that specifies the bounds of a collection of TextRectangle objects.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5_buggy"/><apiTool name="IE" version="6.0_buggy"/><apiTool name="IE" version="7.0_buggy"/><apiTool name="IE" version="8.0_as_IE7_buggy"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_almost"/><apiTool name="Firefox" version="3.1b_almost"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0b_no"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0_no"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The returned value is a TextRectangle object which is the union 
		 of the rectangles returned by getClientRects() for the element, i.e., 
		 the CSS border-boxes associated with the element.
		 
		 </apiDesc><apiOperationClassifier>cssom.view:TextRectangle</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		 Retrieves an object that specifies the bounds of a collection of TextRectangle objects.
		 
		 <p><b>Note (IE8):</b> In IE8 mode, the bounding rectangle is the same as the client rectangle.</p>
		 
		 <p><b>Note (IE5):</b> In Microsoft Internet Explorer 5, the window's upper-left is at 
		 2,2 (pixels) with respect to the true client.</p>
		 
		 <p><b>Note (Firefox 3.5):</b> Firefox 3.5 adds width and height properties to the TextRectangle object.</p>
		 
		 <p><b>Note (Firefox):</b> Firefox doesn't round the top/bottom coordinates.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var rects = obj.getClientRects();
		 var numLines = rects.length;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536435(VS.85).aspx"><linktext>MSDN: getClientRects Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.getClientRects"><linktext>MDC - Element: getClientRects Method</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-getclientrects"><linktext>W3C - CSSOM View: getClientRects Method</linktext></link><link href="http://ejohn.org/blog/getboundingclientrect-is-awesome/"><linktext>John Resig</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#documentview"><linktext>Quirksmode: DocumentView and ElementView methods</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:getClientRects"><apiName>getClientRects</apiName><shortdesc>
		 
		 Retrieves a collection of rectangles that describes the layout of the 
		 contents of an object or range within the client.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_almost"/><apiTool name="Firefox" version="3.1b_almost"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0b_no"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0_no"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>cssom.view:TextRectangleList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		 Retrieves a collection of rectangles that describes the layout of the 
		 contents of an object or range within the client. Each rectangle 
		 describes a single line.
		 
		 <p><b>Note (IE8):</b> In IE8 mode, getClientRects always returns 
		 a collection of one rectangle—the same rectangle as getBoundingClientRect.</p>
		 
		 <p><b>Note (IE):</b> In IE5-7, split up a block-level element such as a &lt;p&gt; into one rectangle per line.
		 This is incorrect: a block-level element should be reported as one rectangle.</p>
		 
		 <p><b>Note (IE):</b> In IE5-7, the rectangles are off by about two pixels. According to John Resig this is caused by the 
		 (invisible, but nonetheless present) borders of the &lt;html&gt; element.</p>
		 
		 <p><b>Note (Firefox 3.5):</b> Firefox 3.5 adds width and height properties to the TextRectangle object.</p>
		 
		 <p><b>Note (Firefox):</b> Firefox doesn't round the top/bottom coordinates.</p>
		 
		 </apiDesc><example>
		 <codeblock>var rect = obj.getBoundingClientRect();</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536433(VS.85).aspx"><linktext>MSDN: getBoundingClientRect Method</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.getBoundingClientRect"><linktext>MDC - Element: getBoundingClientRect Method</linktext></link><link href="http://www.w3.org/TR/cssom-view/#the-getclientrects"><linktext>W3C - CSSOM View: getBoundingClientRect Method</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#documentview"><linktext>Quirksmode: DocumentView and ElementView methods</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:getElementsByClassName"><apiName>getElementsByClassName</apiName><shortdesc>
		 Returns a set of elements with the given class name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="HTML" version="5"/><apiTool name="Firefox" version="3.0+"/><apiSince version="HTML 5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns a set of elements with the given class name.
		 
		 </apiDesc><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the name of a class.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a set of elements with the given class name. 
		 
		 <p>When called on 
		 the document object, the complete document is searched, including 
		 the root node. You may also call getElementsByClassName on any element; 
		 it will return only elements under the specified root element with the 
		 given class name. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 //Get all elements that have a class of 'test' 
		 document.getElementsByClassName('test');
		 //Get all elements that have a class of 'red' and 'test' 
		 document.getElementsByClassName('red test');</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:getElementsByTagName"><apiName>getElementsByTagName</apiName><shortdesc>
		 Retrieves a collection of objects based on the specified element name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="IE" version="5.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="7.0+"/><apiTool name="Safari" version="1.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns a collection of objects with the specified element name.
		 </apiDesc><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the name of an element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves a collection of objects based on the specified element name.
		 
		 </apiDesc><example>
		 <codeblock>
		 // check the alignment on a number of cells in a table. 
		 var table = document.getElementById("forecast-table"); 
		 var cells = table.getElementsByTagName("td"); 
		 for (var i = 0; i &lt; cells.length; i++) { 
		 		status = cells[i].getAttribute("status"); 
		 		if ( status == "open") { 
		 			// grab the data 
		 		}
		 }</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:getElementsByTagNameNS"><apiName>getElementsByTagNameNS</apiName><shortdesc>
		 Returns a list of elements with the given tag name belonging to the given namespace.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces. 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>
		 
		 </apiDesc><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier></apiReturn><apiParam><apiItemName>nameSpace</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of elements to look for (see element.namespaceURI). For example, if you need to look for XHTML elements, use the XHTML namespace URI, http://www.w3.org/1999/xhtml. 
		 </apiDesc></apiParam><apiParam><apiItemName>localName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Either the local name of elements to look for or the special value ", which matches all elements
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a list of elements with the given tag name belonging to the given namespace. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:getExpression"><apiName>getExpression</apiName><shortdesc>
		 Retrieves the expression for the given property.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns a variant value representing the expression of the property.
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the name of the property from which to retrieve the expression.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieves the expression for the given property. 
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;body&gt;
		 &lt;span id="trueBlueSpan" style="background-color:lightblue; width:100px"&gt;
		 The width of this blue span is set inline at 100 pixels.
		 &lt;/span&gt;
		 &lt;span id="oldYellowSpan" style="background-color:lightyellow; width:200px"&gt;
		 The width of this yelllow span is set inline at 200 pixels.
		 &lt;/span&gt;
		 &lt;br&gt;
		 &lt;span id="AlGreenSpan" style="background-color:lightgreen; width:expression(trueBlueSpan.style.pixelWidth + oldYellowSpan.style.pixelWidth)"&gt;
		 Click the button below to see the expression used to set the width of this span.
		 &lt;/span&gt;
		 &lt;br&gt;
		 &lt;button onclick=alert(AlGreenSpan.style.getExpression("width"));&gt;See Expression&lt;/button&gt;
		 &lt;/body&gt;</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:hasAttribute"><apiName>hasAttribute</apiName><shortdesc>
		 DOM Level 2 | NS\FireFox 
		 
		 Determines whether an attribute with the specified name exists.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the attribute exists.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Name of the attribute. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <b>DOM Level 2 | NS\FireFox</b> 
		 
		 Determines whether an attribute with the specified name exists.
		 
		 </apiDesc><example>
		 <codeblock>
		 // check that the attribute exists before setting a value
		 var d = document.getElementById("div1"); 
		 if d.hasAttribute("align") { 
		 		d.setAttribute("align", "center"); 
		 }</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:hasAttributeNS"><apiName>hasAttributeNS</apiName><shortdesc>
		 Returns a boolean value indicating whether the current element has the specified attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiTool name="Safari" version="1.3+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces (such 
		 as [HTML 4.01]). 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>nameSpace</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifying the namespace of the attribute. 
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Name of the attribute. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns a boolean value indicating whether the current element has the specified attribute. 
		 
		 </apiDesc><example>
		 <codeblock>
		 // check that the attribute exists 
		 // before you set a value 
		 var d = document.getElementById("div1"); 
		 if (d.hasAttributeNS("http://www.mozilla.org/ns/specialspace/", "special-align")) {
		 	d.setAttribute("align", "center");
		 }</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:insertAdjacentElement"><apiName>insertAdjacentElement</apiName><shortdesc>
		 Inserts an element at the specified location.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns an element object.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Element</apiOperationClassifier></apiReturn><apiParam><apiItemName>where</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies where to insert the HTML element, using one of the following values.
		 <ul>
		 <li>beforeBegin : Inserts element immediately before the object.</li>
		 <li>afterBegin : Inserts element after the start of the object, but before all other content in the object.</li>
		 <li>beforeEnd : Inserts element immediately before the end of the object, but after all other content in the object.</li>
		 <li>afterEnd : Inserts element immediately after the end of the object.</li>
		 </ul>
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>Object that specifies the element to be inserted adjacent to the object that invoked the insertAdjacentElement method.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts an element at the specified location.
		 
		 <p>You cannot insert text while the document is loading. Wait 
		 for the onload event before attempting to call this method.</p>
		 
		 <p>If you try to insert an object that already exists on the page, 
		 the existing object is moved to the point that you specified in 
		 the insertAdjacentElement method; no new object is created.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:insertAdjacentHTML"><apiName>insertAdjacentHTML</apiName><shortdesc>
		 Inserts the given HTML text into the element at the location.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="4.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>where</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies where to insert the HTML element, using one of the following values.
		 <ul>
		 <li>beforeBegin : Inserts text immediately before the object.</li>
		 <li>afterBegin : Inserts text after the start of the object, but before all other content in the object.</li>
		 <li>beforeEnd : Inserts text immediately before the end of the object, but after all other content in the object.</li>
		 <li>afterEnd : Inserts text immediately after the end of the object.</li>
		 </ul>
		 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the HTML text to insert. The string can 
		 be a combination of text and HTML tags. This must be well-formed, 
		 valid HTML or this method will fail.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the given HTML text into the element at the location.
		 
		 <p>If the text contains HTML tags, the method parses and formats 
		 the text as it is inserted.</p>
		 
		 <p>You cannot insert text while the document is loading. Wait for 
		 the onload event to fire before attempting to call this method.</p>
		 
		 <p>When using the insertAdjacentHTML method to insert script, you 
		 must include the DEFER attribute in the script element. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:insertAdjacentText"><apiName>insertAdjacentText</apiName><shortdesc>
		 Inserts the given text into the element at the specified location.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>where</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies where to insert the text, using one of the following values.
		 <ul>
		 <li>beforeBegin : Inserts text immediately before the object.</li>
		 <li>afterBegin : Inserts text after the start of the object, but before all other content in the object.</li>
		 <li>beforeEnd : Inserts text immediately before the end of the object, but after all other content in the object.</li>
		 <li>afterEnd : Inserts text immediately after the end of the object.</li>
		 </ul>
		 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the text to insert.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Inserts the given text into the element at the specified location.
		 
		 <p>The text inserted into the element is plain text. You cannot insert text 
		 while the document loads. Wait for the onload event to fire before 
		 attempting to call this method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:mergeAttributes"><apiName>mergeAttributes</apiName><shortdesc>
		 Copies all read/write attributes to the specified element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>dom.core:Element</apiOperationClassifier><apiDesc>Pointer to an Object that specifies the attributes copied
		 to the object that invokes mergeAttributes.
		 </apiDesc></apiParam><apiParam><apiItemName>preserve</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Available as of Microsoft Internet Explorer 5.5. Specifies 
		 whether to preserve the identity of the object to which attributes are 
		 being merged or not.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copies all read/write attributes to the specified element.
		 
		 <p>The mergeAttributes method copies persistent HTML attributes, 
		 events, and styles.</p>
		 
		 <p>IE Note: In Internet Explorer 5 and earlier, attributes that are read-only, 
		 such as ID, are not merged.</p>
		 
		 <p>IE Note: As of Internet Explorer 5.5, by choosing not to preserve the identity 
		 of the destination object, you can merge all attributes of an object, 
		 including ID and NAME.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:querySelector"><apiName>querySelector</apiName><shortdesc>
		 
		 Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Selectors" version="0"/><apiSince version="DOM 3 Core"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The first matching Element node within the node’s subtree. If there is no such node, returns null. 
		 
		 </apiDesc><apiOperationClassifier>dom.core:Element</apiOperationClassifier></apiReturn><apiParam><apiItemName>selectors</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One or more selectors
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns the first element that is a descendent of the element on which it is invoked that matches the specified group of selectors.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;Selectors API Example&lt;/title&gt;
		 	&lt;/head&gt;
		 	&lt;body&gt;
		 
		 		&lt;div id="foo"&gt;
		 			&lt;p class="warning"&gt;This is a sample warning&lt;/p&gt;
		 			&lt;p class="error"&gt;This is a sample error&lt;/p&gt;
		 		&lt;/div&gt;
		 		&lt;div id="bar"&gt;
		 			&lt;p&gt;...&lt;/p&gt;
		 		&lt;/div&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 x would contain the first element in the document with an ID of either foo or bar (or both). In the sample document above, it would select the div element with the ID of foo because it is first in document order.
		 <codeblock>var x = document.querySelector("#foo, #bar");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/selectors-api/#nodeselector"><linktext>W3C Selectors API</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:querySelectorAll"><apiName>querySelectorAll</apiName><shortdesc>
		 
		 Returns a list of all elements descended from the element on which it is invoked that match the specified group of selectors.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Selectors" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5b4"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62_no"/><apiTool name="Opera" version="10.0b"/><apiSince version="DOM 3 Core"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A NodeList containing all of the matching Element nodes within the node’s subtree, in document order. If there are no such nodes, returns an empty NodeList.
		 
		 </apiDesc><apiOperationClassifier>dom.core:NodeList</apiOperationClassifier></apiReturn><apiParam><apiItemName>selectors</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>One or more selectors
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Returns a list of all elements descended from the element on which it is invoked that match the specified group of selectors.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
		 	&lt;head&gt;
		 		&lt;title&gt;Selectors API Example&lt;/title&gt;
		 	&lt;/head&gt;
		 	&lt;body&gt;
		 
		 		&lt;div id="foo"&gt;
		 			&lt;p class="warning"&gt;This is a sample warning&lt;/p&gt;
		 			&lt;p class="error"&gt;This is a sample error&lt;/p&gt;
		 		&lt;/div&gt;
		 		&lt;div id="bar"&gt;
		 			&lt;p&gt;...&lt;/p&gt;
		 		&lt;/div&gt;
		 	&lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 The following example would select all p elements in the document that have a class of either "error" or "warning".
		 <codeblock>var alerts = document.querySelectorAll("p.warning, p.error");</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://www.w3.org/TR/selectors-api/#nodeselector"><linktext>W3C Selectors API</linktext></link><link href="http://www.quirksmode.org/dom/w3c_core.html#gettingelements"><linktext>Quirksmode: Getting elements</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:releaseCapture"><apiName>releaseCapture</apiName><shortdesc>
		 Removes mouse capture from the object in the current document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_unknown"/><apiTool name="Firefox" version="3.0_unknown"/><apiTool name="Firefox" version="3.5_unknown"/><apiTool name="Safari" version="3.0_unknown"/><apiTool name="Safari" version="3.1_unknown"/><apiTool name="Safari" version="4.0_unknown"/><apiTool name="Chrome" version="1.0_unknown"/><apiTool name="Chrome" version="2.0_unknown"/><apiTool name="Opera" version="9.62_unknown"/><apiTool name="Opera" version="10.0b_unknown"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes mouse capture from the object in the current document.
		 
		 <p>For releaseCapture to have an effect, you must set mouse capture through 
		 the setCapture method.</p>
		 
		 <p>You can invoke the releaseCapture method on the document object. The 
		 releaseCapture method makes it unnecessary to determine which element 
		 has capture to programmatically release it. Other actions that release 
		 document capture include displaying a modal dialog box and switching 
		 focus to another application or browser window.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;BODY onload="oOwnCapture.setCapture();" onclick="document.releaseCapture();"&gt;
		 &lt;DIV ID=oOwnCapture onmousemove="oWriteLocation.value = event.clientX + event.clientY"; onlosecapture="alert(event.srcElement.id + ' has lost mouse capture.')"&gt;
		 &lt;TEXTAREA ID=oWriteLocation COLS=2&gt;&lt;/TEXTAREA&gt;
		 &lt;/DIV&gt;
		 &lt;HR&gt;
		 &lt;DIV ID=oNoCapture&gt;
		 &lt;P&gt;Click the document to invoke the releaseCapture method.&lt;/P&gt;
		 &lt;/DIV&gt;
		 &lt;/BODY&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536689%28VS.85%29.aspx"><linktext>MSDN - releaseCapture Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:removeAttribute"><apiName>removeAttribute</apiName><shortdesc>
		 Removes an attribute from the specified element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="4.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiTool name="Safari" version="1.0+"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the attribute to be removed from element. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes an attribute from the specified element. 
		 
		 <p>Note : You should use removeAttribute instead of setting 
		 the attribute value to null using setAttribute. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // &lt;div id="div1" align="left" width="200px"&gt;
		 document.getElementById("div1").removeAttribute("align"); 
		 // now: &lt;div id="div1" width="200px"&gt;</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:removeAttributeNS"><apiName>removeAttributeNS</apiName><shortdesc>
		 Removes the specified attribute from an element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces (such 
		 as [HTML 4.01]). 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>nameSpace</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Contains the namespace of the attribute. 
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The attribute to be removed from the current node.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the specified attribute from an element.
		 
		 <p>FF Note : In Firefox 3 and later, this method resets DOM values to their defaults. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // &lt;div id="div1" xmlns:special="http://www.mozilla.org/ns/specialspace" special:specialAlign="utterleft" width="200px" /&gt; 
		 d = document.getElementById("div1"); 
		 d.removeAttributeNS("http://www.mozilla.org/ns/specialspace", "specialAlign"); 
		 // now: &lt;div id="div1" width="200px" /&gt;</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:removeAttributeNode"><apiName>removeAttributeNode</apiName><shortdesc>
		 Removes an attribute object from the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="6.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiTool name="Safari" version="1.0+"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if oldAttr is not 
		 an attribute of the element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>Returns a reference to the removed attribute object.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Attr</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>The Attr node that needs to be removed.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes an attribute object from the object.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:removeBehavior"><apiName>removeBehavior</apiName><shortdesc>
		 Detaches a behavior from the element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If it was successfully removed.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="Number"/><apiDesc>Specifies the identifier that is returned from a previous addBehavior call.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Detaches a behavior from the element. 
		 
		 <p>This method applies only to attached behaviors, which are the original 
		 Dynamic HTML (DHTML) behaviors introduced in Microsoft Internet Explorer 5. 
		 Element behaviors are a feature in Internet Explorer 5.5 and cannot be 
		 added or removed from an element.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:removeExpression"><apiName>removeExpression</apiName><shortdesc>
		 Removes the expression from the specified property.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If the expression was successfully removed.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the name of the property from which to remove an expression.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the expression from the specified property. 
		 
		 <p>After the expression is removed from the specified property, the value 
		 of the property equals the last computed value of the expression. To 
		 remove expressions set by the setExpression method, use removeExpression. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:removeNode"><apiName>removeNode</apiName><shortdesc>
		 Removes the object from the document hierarchy.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns a reference to the object that is removed.
		 
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>removeChildren</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>If the childNodes collection of the object is removed
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the object from the document hierarchy.
		 
		 <p>This property is accessible at run time. If elements are removed at 
		 run time, before the closing tag is parsed, areas of the document 
		 might not render.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536708%28VS.85%29.aspx"><linktext>MSDN - removeNode Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:replaceAdjacentText"><apiName>replaceAdjacentText</apiName><shortdesc>
		 Replaces the text adjacent to the element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="1.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A pointer to a String returning the old text.
		 
		 </apiDesc><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier></apiReturn><apiParam><apiItemName>where</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies where to locate the replacement text, using one of the following values. 
		 <ul>
		 <li>beforeBegin : Inserts text immediately before the object.</li>
		 <li>afterBegin : Inserts text after the start of the object, but before all other content in the object.</li>
		 <li>beforeEnd : Inserts text immediately before the end of the object, but after all other content in the object.</li>
		 <li>afterEnd : Inserts text immediately after the end of the object.</li>
		 </ul>
		 </apiDesc></apiParam><apiParam><apiItemName>replaceText</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the replacement text.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the text adjacent to the element.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:replaceNode"><apiName>replaceNode</apiName><shortdesc>
		 Replaces the object with another element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns a reference to the object that is replaced.
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>newNode</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies the new element to replace the object.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Replaces the object with another element.
		 
		 <p>When a node is replaced, all values that are associated with the 
		 replaced object are removed. For example, if a b object is replaced 
		 with an i object, any attributes and text between the opening and 
		 closing tags are also replaced. To preserve these values, copy them 
		 to the new element before the original object is replaced.</p>
		 
		 <p>This method is accessible at run time. If elements are removed at run 
		 time before the closing tag is parsed, areas of the document might 
		 not render.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;SCRIPT&gt;
		 function fnReplace() {
		 var sPreserve = oList.innerHTML;
		 var oNewNode = document.createElement("OL");
		 oList.replaceNode(oNewNode);
		 oNewNode.innerHTML = sPreserve;
		 }
		 &lt;/SCRIPT&gt;
		 
		 &lt;UL ID = oList&gt;
		 &lt;LI&gt;List Item 1
		 &lt;LI&gt;List Item 2
		 &lt;LI&gt;List Item 3
		 &lt;LI&gt;List Item 4
		 &lt;/UL&gt;
		 &lt;INPUT TYPE = button VALUE = "Replace List" onclick = "fnReplace()"&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536719%28VS.85%29.aspx"><linktext>MSDN - replaceNode Method</linktext></link></related-links></apiOperation><apiOperation id="dom.core:Element:scrollIntoView"><apiName>scrollIntoView</apiName><shortdesc>
		 Causes the object to scroll into view, aligning it either at the top 
		 or bottom of the window.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="0"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOMCore 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>alignToTop</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Whether to scroll the object so that top of the object is visible at the top of the window.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Causes the object to scroll into view, aligning it either at the top 
		 or bottom of the window. 
		 
		 <p>The scrollIntoView method is useful for immediately showing the user
		 the result of some action without requiring the user to manually 
		 scroll through the document to find the result.</p>
		 
		 <p>Depending on the size of the given object and the current window, this 
		 method might not be able to put the item at the very top or very bottom, 
		 but will position the object as close to the requested position as possible.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;ScrollIntoView() example&lt;/title&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 function showIt(elID) {
		 var el = document.getElementById(elID);
		 el.scrollIntoView(true);
		 }
		 &lt;/script&gt;
		 
		 &lt;/head&gt;
		 &lt;body&gt;
		 	&lt;div style="height: 5em; width: 30em; overflow: scroll; border: 1px solid blue;"&gt;
		 		&lt;div style="height: 100px"&gt;&lt;/div&gt;
		 		&lt;p id="pToShow"&gt;The para to show&lt;/p&gt;
		 		&lt;div style="height: 100px"&gt;&lt;/div&gt;
		 	&lt;/div&gt;
		 	&lt;input type="button" value="Show para" onclick="showIt('pToShow');"&gt;
		 &lt;/body&gt;</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setActive"><apiName>setActive</apiName><shortdesc>
		 Sets the object as active without setting focus to the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.5+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Sets the object as active without setting focus to the object.
		 
		 <p>The setActive method does not cause the document to scroll to the 
		 active object in the current page or in another frame or window. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;script&gt;
		 function fnBottomActive() {
		 		//Set the object with ID=btnLarger active in frame with ID=oFrame1.
		 		window.parent.oFrame1.secondButton.setActive();
		 }
		 &lt;/script&gt;</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setAttribute"><apiName>setAttribute</apiName><shortdesc>
		 Sets the value of the specified attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="5.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiTool name="Safari" version="1.0+"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified name is not an XML name according to the XML version in 
		 use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the name of the attribute.
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Specifies the string, number, or Boolean to assign to the attribute. 
		 </apiDesc></apiParam><apiParam><apiItemName>caseSensitive</apiItemName><apiType value=""/><apiDesc>(IE Only) Specifies whether to use a case-sensitive 
		 search to locate the attribute. Can be one of the following values: 
		 1 : The case of name  is respected. 
		 0 : Match name regardless of case.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the value of the specified attribute.
		 
		 <p>IE Note: Internet Explorer 8 and later. IE8 mode enables several enhancements 
		 to the setAttribute, getAttribute, and removeAttribute methods that 
		 are not available when pages are displayed in earlier document modes.</p>
		 
		 <p>The name parameter requires the name of the desired content 
		 attribute and not the Document Object Model (DOM) attribute. For example,
		 in IE8 mode, this method no longer requires name to be "className" 
		 when setting, getting, or removing a CLASS attribute. Earlier versions of 
		 Internet Explorer and Internet Explorer 8 in compatibility mode still 
		 require name to specify the corresponding DOM property name.</p>
		 
		 <p>The name parameter is not case sensitive. As a result, the 
		 caseSensitive parameter is no longer supported and should not be used.</p>
		 
		 <p>The methods support event handlers. For example, the following code example 
		 defines an event handler to call a function called SomeFunction when the 
		 body of the page is loaded.</p>
		 
		 <p>document.body.setAttribute('onload', 'SomeFunction()');</p>
		 
		 <p>If the specified attribute is not already present, the setAttribute method 
		 adds the attribute to the object and sets the value.</p>
		 
		 <p>If your pages are displayed in IE5 mode or IE7 mode, be careful when spelling 
		 attribute names. If you set iCaseSensitive to 1 and the name parameter does 
		 not have the same uppercase and lowercase letters as the attribute, a new 
		 attribute is created for the object. If two or more attributes have the 
		 same name, differing only in case, and iCaseSensitive is set to 0, this method 
		 assigns values only to the first attribute created with this name. All other 
		 attributes of the same name are ignored.</p>
		 
		 <p>New for Internet Explorer 8 Internet Explorer 8 and later. When pages are 
		 displayed in IE8 mode, the vValue parameter only supports string values. Non-string
		 values are not automatically converted to string values. For best results, 
		 formally convert values to strings before using them as parameter values. For 
		 example, do not attempt to pass an object directly to the vValue parameter; call 
		 the object's toString method instead.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setAttributeNS"><apiName>setAttributeNS</apiName><shortdesc>
		 Adds a new attribute or changes the value of an attribute with the 
		 given namespace and name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>INVALID_CHARACTER_ERR: Raised if the 
		 specified qualified name is not an XML name according to the XML 
		 version in use specified in the Document.xmlVersion attribute.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NAMESPACE_ERR: Raised if the qualifiedName 
		 is malformed per the Namespaces in XML specification, if the 
		 qualifiedName has a prefix and the namespaceURI is null, if the 
		 qualifiedName has a prefix that is "xml" and the namespaceURI is different 
		 from "http://www.w3.org/XML/1998/namespace", if the qualifiedName or 
		 its prefix is "xmlns" and the namespaceURI is different from 
		 "http://www.w3.org/2000/xmlns/", or if the namespaceURI is 
		 "http://www.w3.org/2000/xmlns/" and neither the qualifiedName nor its prefix 
		 is "xmlns".
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces (such 
		 as [HTML 4.01]). 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>nameSpace</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifying the namespace of the attribute. 
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The attribute to be set. 
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>The desired string value of the new attribute. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a new attribute or changes the value of an attribute with the 
		 given namespace and name. 
		 
		 </apiDesc><example>
		 <codeblock>
		 var d = document.getElementById("d1");
		 d.setAttributeNS("http://www.mozilla.org/ns/specialspace", "align", "center");</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setAttributeNode"><apiName>setAttributeNode</apiName><shortdesc>
		 Sets an attribute object node as part of the object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiTool name="IE" version="4.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiTool name="Safari" version="1.0+"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if newAttr 
		 was created from a different document than the one that created 
		 the element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INUSE_ATTRIBUTE_ERR: Raised if newAttr 
		 is already an attribute of another Element object. The DOM user must 
		 explicitly clone Attr nodes to re-use them in other elements.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiDesc>Returns a reference to the removed attribute object.
		 </apiDesc><apiOperationClassifier>dom.core:Attr</apiOperationClassifier></apiReturn><apiParam><apiItemName>attrNode</apiItemName><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>Attribute object to be assigned.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets an attribute object node as part of the object.
		 
		 <p>If the attribute named already exists on the element, that attribute
		 is replaced with the new one and the replaced one is returned.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // &lt;div id="one" align="left"&gt;one&lt;/div&gt; 
		 // &lt;div id="two"&gt;two&lt;/div&gt; 
		 var d1 = document.getElementById("one"); 
		 var d2 = document.getElementById("two"); 
		 var a = d1.getAttributeNode("align"); 
		 d2.setAttributeNode(a.cloneNode(true)); 
		 alert(d2.attributes[1].value) 
		 // returns: `left'</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setAttributeNodeNS"><apiName>setAttributeNodeNS</apiName><shortdesc>
		 Adds a new attribute node with the specified namespace and name.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>WRONG_DOCUMENT_ERR: Raised if newAttr 
		 was created from a different document than the one that created 
		 the element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>INUSE_ATTRIBUTE_ERR: Raised if newAttr 
		 is already an attribute of another Element object. The DOM user must 
		 explicitly clone Attr nodes to re-use them in other elements.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_SUPPORTED_ERR: May be raised if the 
		 implementation does not support the feature "XML" and the language 
		 exposed through the Document does not support XML Namespaces (such 
		 as [HTML 4.01]). 
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>attrNode</apiItemName><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>Attribute object to be assigned.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a new attribute node with the specified namespace and name.
		 
		 <p>If the specified attribute already exists on the element, then that
		 attribute is replaced with the new one and the replaced one is returned.</p>
		 
		 <p>Note: If you try to set without cloning the node, Mozilla gives an 
		 NS_ERROR_DOM_INUSE_ATTRIBUTE_ERR "Attribute already in use" error, as the 
		 DOM requires cloning for Attr to be reused (unlike other Nodes which can 
		 be moved).</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // &lt;div id="one" xmlns:myNS="http://www.mozilla.org/ns/specialspace" myNS:special-align="utterleft"&gt;one&lt;/div&gt; 
		 // &lt;div id="two"&gt;two&lt;/div&gt; 
		 
		 var myns = "http://www.mozilla.org/ns/specialspace"; 
		 var d1 = document.getElementById("one"); 
		 var d2 = document.getElementById("two"); 
		 var a = d1.getAttributeNodeNS(myns, "special-align"); 
		 d2.setAttributeNodeNS(a.cloneNode(true));
		 alert(d2.attributes[1].value) // returns: `utterleft'</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setCapture"><apiName>setCapture</apiName><shortdesc>
		 Sets the mouse capture to the object that belongs to the current document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>containerCapture</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>(IE 5.5+) Whether events originating in a container are captured by the container.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the mouse capture to the object that belongs to the current document.
		 
		 <p>After mouse capture is set to an object, all mouse events for the document 
		 are routed to that object. Supported mouse events include onmousedown, 
		 onmouseup, onmousemove, onclick, ondblclick, onmouseover, and onmouseout. 
		 The srcElement property of the window event object always returns the object 
		 that is positioned under the mouse, instead of the object that has mouse capture.</p>
		 
		 <p>Mouse clicks automatically trigger the onlosecapture event. To retain mouse 
		 capture, call setCapture inside the onclick event handler. Mouse capture is 
		 also lost if the browser window loses focus for any reason (including alerts or 
		 pop-up windows).</p>
		 
		 <p>When the containerCapture parameter is set to true, a container object, such as 
		 a div, captures mouse events for all objects in it. By passing the value false, 
		 objects in that container can fire events, and cancel event bubbling.</p>
		 
		 <p>Drag-and-drop operations, such as the ondragstart event, and text selection 
		 through the user interface are disabled when mouse capture is set 
		 programmatically. The following key events are unaffected by mouse capture and 
		 fire as usual: onkeydown, onkeyup, and onkeypress. </p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;BODY onload="oOwnCapture.setCapture()" onclick="document.releaseCapture()"&gt;
		 &lt;DIV ID=oOwnCapture STYLE="background-color:#ccc;padding:6pt"
		 onmousemove="oWriteLocation.value = event.x + ':' + event.y";
		 onlosecapture="alert(event.srcElement.id + ' lost mouse capture.')"&gt;
		 &lt;P&gt;Mouse capture has been set to this gray division (DIV) 
		 at load time using the setCapture method. The text area will 
		 track the mousemove event through the &lt;B&gt;x&lt;/B&gt; 
		 and &lt;B&gt;y&lt;/B&gt; properties of the event object.&lt;BR&gt;
		 &lt;P&gt;Event bubbling works as usual on objects within a 
		 container that has mouse capture. Demonstrate this concept by 
		 clicking the button below or changing the active window from 
		 this one and then back. After oOwnCapture loses mouse capture, 
		 the text area continues tracking the mousemove events only 
		 while the cursor is over objects it contains.&lt;/P&gt;
		 &lt;BR&gt;&lt;BR&gt;
		 &lt;TEXTAREA ID=oWriteLocation COLS=9&gt; &lt;/TEXTAREA&gt;
		 &lt;/DIV&gt;
		 &lt;HR&gt;
		 &lt;DIV ID=oNoCapture&gt;
		 &lt;P&gt;This white division is here to illustrate that mousemove 
		 events over objects it contains are captured on the gray 
		 division, oOwnCapture.
		 &lt;INPUT VALUE="Move mouse over this object."&gt;
		 &lt;BUTTON&gt;Click Anywhere to End Mouse Capture&lt;/BUTTON&gt;
		 &lt;/DIV&gt;
		 &lt;/BODY&gt;</codeblock>
		 
		 </example></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setExpression"><apiName>setExpression</apiName><shortdesc>
		 Sets an expression for the specified object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="0"/><apiTool name="IE" version="5.0+"/><apiSince version="Non-Standard 0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies the name of the property to which 
		 sExpression  is added.
		 </apiDesc></apiParam><apiParam><apiItemName>expression</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies any valid script(JScript, JavaScript, 
		 VBSCript) statement without quotations or semicolons. This string 
		 can include references to other properties on the current page. Array
		 references are not allowed on object properties included in this script.
		 </apiDesc></apiParam><apiParam><apiItemName>language</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>Specifies one of the following values:
		 <ul>
		 <li>JScript : Default. Language is JScript.</li>
		 <li>VBScript : Language is VBScript.</li>
		 <li>JavaScript : Language is JavaScript.</li>
		 </ul>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets an expression for the specified object. 
		 
		 <p>Use the setExpression method to add expressions to supported Cascading 
		 Style Sheets (CSS) attributes and read/write DHTML Properties. To remove 
		 expressions set by setExpression, use the removeExpression method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setIdAttribute"><apiName>setIdAttribute</apiName><shortdesc>
		 If the parameter isId is true, this method declares the specified 
		 attribute to be a user-determined ID attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOM 3 Core"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if the specified 
		 node is not an attribute of this element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the attribute.
		 </apiDesc></apiParam><apiParam><apiItemName>isId</apiItemName><apiType value="Boolean"/><apiDesc>Whether the attribute is a of type ID.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <p>If the parameter isId is true, this method declares the specified 
		 attribute to be a user-determined ID attribute. This affects the value 
		 of Attr.isId and the behavior of Document.getElementById, but does not 
		 change any schema that may be in use, in particular this does not 
		 affect the Attr.schemaTypeInfo of the specified Attr node. Use the value 
		 false for the parameter isId to undeclare an attribute for being a 
		 user-determined ID attribute.
		 To specify an attribute by local name and namespace URI, use the setIdAttributeNS
		 method.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setIdAttributeNS"><apiName>setIdAttributeNS</apiName><shortdesc>
		 If the parameter isId is true, this method declares the specified 
		 attribute to be a user-determined ID attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOM 3 Core"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if the specified 
		 node is not an attribute of this element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>nameSpaceURI</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The namespace URI of the attribute.
		 </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>The name of the attribute.
		 </apiDesc></apiParam><apiParam><apiItemName>isId</apiItemName><apiType value="Boolean"/><apiDesc>Whether the attribute is a of type ID.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <p>If the parameter isId is true, this method declares the specified 
		 attribute to be a user-determined ID attribute. This affects the value 
		 of Attr.isId and the behavior of Document.getElementById, but does not 
		 change any schema that may be in use, in particular this does not 
		 affect the Attr.schemaTypeInfo of the specified Attr node. Use the value 
		 false for the parameter isId to undeclare an attribute for being a 
		 user-determined ID attribute.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:setIdAttributeNode"><apiName>setIdAttributeNode</apiName><shortdesc>
		 If the parameter isId is true, this method declares the specified attribute 
		 to be a user-determined ID attribute.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOM 3 Core"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>NO_MODIFICATION_ALLOWED_ERR: Raised if 
		 this node is readonly.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiException><apiDesc>NOT_FOUND_ERR: Raised if the specified 
		 node is not an attribute of this element.
		 
		 </apiDesc><apiItemName>DOMException</apiItemName><apiOperationClassifier>dom.core:DOMException</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>idAttr</apiItemName><apiOperationClassifier>dom.core:Attr</apiOperationClassifier><apiDesc>The attribute node.
		 </apiDesc></apiParam><apiParam><apiItemName>isId</apiItemName><apiType value="Boolean"/><apiDesc>Whether the attribute is a of type ID.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <p>If the parameter isId is true, this method declares the specified attribute 
		 to be a user-determined ID attribute. This affects the value of Attr.isId 
		 and the behavior of Document.getElementById, but does not change any schema 
		 that may be in use, in particular this does not affect the 
		 Attr.schemaTypeInfo of the specified Attr node. Use the value false for the 
		 parameter isId to undeclare an attribute for being a user-determined ID attribute. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="dom.core:Element:swapNode"><apiName>swapNode</apiName><shortdesc>
		 Exchanges the location of two objects in the document hierarchy.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Non-Standard" version="Microsoft"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Returns a reference to the object that invoked the method.
		 </apiDesc><apiOperationClassifier>dom.core:Node</apiOperationClassifier></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>dom.core:Node</apiOperationClassifier><apiDesc>Specifies the existing element.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Exchanges the location of two objects in the document hierarchy.
		 
		 <p>This method is accessible at run time. If elements are removed at 
		 run time, before the closing tag is parsed, areas of the document 
		 might not render.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;script&gt;
		 		function fnSwap() {
		 			oList.children(0).swapNode(oList.children(1));
		 		}
		 &lt;/script&gt;
		 
		 &lt;ul ID = oList&gt;
		 		&lt;li&gt;List Item 1&lt;/li&gt;
		 		&lt;li&gt;List Item 2&lt;/li&gt;
		 		&lt;li&gt;List Item 3&lt;/li&gt;
		 		&lt;li&gt;List Item 4&lt;/li&gt;
		 &lt;/ul&gt;
		 &lt;input type=button value="Swap List" onclick="fnSwap()"&gt;</codeblock>
		 
		 </example></apiOperationDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms536774%28VS.85%29.aspx"><linktext>MSDN - swapNode Method</linktext></link></related-links></apiOperation><apiValue id="dom.core:Element:baseURIObject:get"><apiName>baseURIObject</apiName><shortdesc>
		 Non-Standard | FireFox 3+ 
		 
		 Returns the nsIURI  object representing the element's URI.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>gecko:nsIURI</apiValueClassifier></apiValueDef><apiDesc>
		 <b>Non-Standard | FireFox 3+</b> 
		 
		 Returns the nsIURI  object representing the element's URI.
		 
		 <p>Note: This property exists on all elements (HTML, XUL, SVG, MathML, 
		 etc.), but only if the script trying to use it has UniversalXPConnect 
		 privileges.</p>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:Element:childElementCount:get"><apiName>childElementCount</apiName><shortdesc>
		 
		 Returns the current number of element nodes that are children of this 
		 element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="ElemTrav" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8_no"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0b"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Returns the current number of element nodes that are children of this 
		 element. 0 if this element has no child nodes that are of nodeType 1.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Element.childElementCount"><linktext>MDC - Element: childElementCount Property</linktext></link><link href="http://www.w3.org/TR/ElementTraversal/#attribute-childElementCount"><linktext>W3C - Element Traversel: childElementCount Property</linktext></link><link href="http://quirksmode.org/dom/w3c_traversal.html"><linktext>Quirksmode: W3C DOM Compatibility - Traversal</linktext></link><link href="dom.core.xml#Element/firstElementChild"><linktext>firstElementChild</linktext></link><link href="dom.core.xml#Element/lastElementChild"><linktext>lastElementChild</linktext></link><link href="dom.core.xml#Element/nextElementSibling"><linktext>nextElementSibling</linktext></link><link href="dom.core.xml#Element/previousElementSibling"><linktext>previousElementSibling</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:children:get"><apiName>children</apiName><shortdesc>
		 ? | FireFox 3.5+ 
		 
		 Returns a collection of child elements of the given element.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:NodeList</apiValueClassifier></apiValueDef><apiDesc>
		 <b>? | FireFox 3.5+</b> 
		 
		 Returns a collection of child elements of the given element.
		 
		 <p>The list returned is an ordered collection of element objects that 
		 are children of the current element. If the element has no children, 
		 then list returned contains no elements.</p>
		 
		 <p>Note: The items in the collection of elements are objects and not 
		 strings. To get data from those node objects, you must use their 
		 properties (e.g. elementNodeReference.children[1].nodeName to get the 
		 name, etc.).</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // parg is an object reference to a &lt;p&gt; element
		 if (parg.childElementCount()) {
		 	// So, first we check if the object is not empty, if the object has child nodes
		 	var children = parg.children;
		 	for (var i = 0; i &lt; children.length; i++) {
		 	// do something with each child element as children[i]
		 	// NOTE: List is live, Adding or removing children will change the list
		 	};
		 };
		 </codeblock>
		 </example></apiValueDetail></apiValue><apiValue id="dom.core:Element:clientHeight:get"><apiName>clientHeight</apiName><shortdesc>
		 
		 Returns the inner height of an element in pixels, including padding but not the horizontal scrollbar height, border, or margin.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Returns the inner height of an element in pixels, including padding but not the horizontal scrollbar height, border, or margin.
		 
		 <p>clientHeight can be calculated as CSS height + CSS padding - height of horizontal scrollbar (if present).</p>
		 
		 <p><b>Note:</b> offsetLeft returns the position the upper left edge of the element; not necessarily 
		 the 'real' left edge of the element. This is important for span elements in flowed text that wraps from one 
		 line to the next. The span may start in the middle of the page and wrap around to the beginning of the next 
		 line. The offsetLeft will refer to the left edge of the start of the span, not the left edge of text at the 
		 start of the second line. Therefore, a box with the left, top, width and height of offsetLeft, offsetTop, 
		 offsetWidth and offsetHeight will not be a bounding box for a span with wrapped text.</p>
		 
		 </apiDesc><example>
		 This example shows how the clientHeight property and the offsetHeight property measure document height differently. 
		 The height of the div is set to 100, and this is the value retrieved by the offsetHeight property, not the clientHeight property. 
		 
		 <codeblock>
		 &lt;div id=oDiv style="overflow:scroll; width:200; height:100"&gt; . . . &lt;/div&gt;
		 &lt;button onclick="alert(oDiv.clientHeight)"&gt;client height&lt;/button&gt;
		 &lt;button onclick="alert(oDiv.offsetHeight)"&gt;offset heightY&lt;/button&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms533563(VS.85).aspx"><linktext>MSDN: clientHeight Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.clientHeight"><linktext>MDC - Element: clientHeight Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#client-attributes"><linktext>W3C - CSSOM View: clientHeight Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#elementview"><linktext>Quirksmode: ElementView properties</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:clientLeft:get"><apiName>clientLeft</apiName><shortdesc>
		 
		 The width of the left border of an element in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 The width of the left border of an element in pixels. 
		 
		 <p>It includes the width of the vertical scrollbar if the text direction of the element is right–to–left and 
		 if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left 
		 margin or the left padding.</p>
		 
		 <p><b>Note:</b> The difference between the offsetLeft and clientLeft properties is the border of the object.</p>
		 
		 <p><b>Note:</b> When layout.scrollbar.side property is set to 1 or to 3 and when the text-direction is set to RTL, 
		 then the vertical scrollbar is positioned on the left and this impacts the way clientLeft is computed.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms533564(VS.85).aspx"><linktext>MSDN: clientLeft Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.clientLeft"><linktext>MDC - Element: clientLeft Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#client-attributes"><linktext>W3C - CSSOM View: clientLeft Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#elementview"><linktext>Quirksmode: ElementView properties</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:clientTop:get"><apiName>clientTop</apiName><shortdesc>
		 
		 The width of the top border of an element in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 The width of the top border of an element in pixels. It does not include the top margin or padding.
		 
		 <p><b>Note:</b> The difference between the offsetTop and the clientTop properties is the border area of the object.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms533565(VS.85).aspx"><linktext>MSDN: clientTop Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.clientTop"><linktext>MDC - Element: clientTop Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#client-attributes"><linktext>W3C - CSSOM View: clientTop Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#elementview"><linktext>Quirksmode: ElementView properties</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:clientWidth:get"><apiName>clientWidth</apiName><shortdesc>
		 
		 Returns the inner width of an element in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Returns the inner width of an element in pixels. It includes padding but not the vertical scrollbar (if present, if rendered), border or margin.
		 
		 </apiDesc><example>
		 This example shows how the clientWidth property and the offsetWidth property measure document width differently. The width of the div 
		 is set to 200, and this is the value retrieved by the offsetWidth property, not the clientWidth property. 
		 
		 <codeblock>
		 &lt;div id=oDiv style="overflow:scroll; width:200; height:100"&gt; . . . &lt;/div&gt;
		 &lt;button onclick="alert(oDiv.clientWidth)"&gt;client width&lt;/button&gt;
		 &lt;button onclick="alert(oDiv.offsetWidth)"&gt;offset widthY&lt;/button&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms533566(VS.85).aspx"><linktext>MSDN: clientWidth Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.clientWidth"><linktext>MDC - Element: clientWidth Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#client-attributes"><linktext>W3C - CSSOM View: clientWidth Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#elementview"><linktext>Quirksmode: ElementView properties</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:firstElementChild:get"><apiName>firstElementChild</apiName><shortdesc>
		 
		 Returns the first child element node of this element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="ElemTrav" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8_no"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0b"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Element</apiValueClassifier></apiValueDef><apiDesc>
		 
		 Returns the first child element node of this element. null if this 
		 element has no child elements.
		 
		 </apiDesc><example>
		 In this example, the alert shows "SPAN", which is the name of the 
		 first child node of the paragraph element.
		 <codeblock>
		 &lt;p id="para-01"&gt;
		 	&lt;span&gt;First span&lt;/span&gt;
		 &lt;/p&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 	var p01 = document.getElementById('para-01');
		 	alert(p01.firstElementChild.nodeName);
		 &lt;/script&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Element.firstElementChild"><linktext>MDC - Element: firstElementChild Property</linktext></link><link href="http://www.w3.org/TR/ElementTraversal/#attribute-firstElementChild"><linktext>W3C - Element Traversel: firstElementChild Property</linktext></link><link href="http://quirksmode.org/dom/w3c_traversal.html"><linktext>Quirksmode: W3C DOM Compatibility - Traversal</linktext></link><link href="dom.core.xml#Element/childElementCount"><linktext>childElementCount</linktext></link><link href="dom.core.xml#Element/lastElementChild"><linktext>lastElementChild</linktext></link><link href="dom.core.xml#Element/nextElementSibling"><linktext>nextElementSibling</linktext></link><link href="dom.core.xml#Element/previousElementSibling"><linktext>previousElementSibling</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:innerHTML:get"><apiName>innerHTML</apiName><shortdesc>
		 DOM Level 0 | NS\FireFox\IE4+ 
		 
		 Sets or gets all of the markup and content within a given element.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 <b>DOM Level 0 | NS\FireFox\IE4+</b> 
		 
		 Sets or gets all of the markup and content within a given element.
		 
		 <p>Note: As there is no public specification for this property, 
		 implementations differ widely. For example, when text is entered into 
		 a text input, IE will change the value attribute of the input's 
		 innerHTML property but Gecko browsers do not.</p>
		 
		 <p>Note: It should never be used to write parts of a table—W3C DOM methods 
		 should be used for that—though it can be used to write an entire table 
		 or the contents of a cell.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // HTML:
		 // &lt;div id="d"&gt;&lt;p&gt;Content&lt;/p&gt;
		 // &lt;p&gt;Further Elaborated&lt;/p&gt;
		 // &lt;/div&gt;
		 
		 d = document.getElementById("d");
		 dump(d.innerHTML);
		 
		 // the string "&lt;p&gt;Content&lt;/p&gt;&lt;p&gt;Further Elaborated&lt;/p&gt;"
		 // is dumped to the console window
		 </codeblock>
		 </example></apiValueDetail></apiValue><apiValue id="dom.core:Element:lastElementChild:get"><apiName>lastElementChild</apiName><shortdesc>
		 
		 Returns the last child element node of this element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="ElemTrav" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8_no"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0b"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Element</apiValueClassifier></apiValueDef><apiDesc>
		 
		 Returns the last child element node of this element. null if this 
		 element has no child elements.
		 
		 </apiDesc><example>
		 In this example, the alert shows "B", which is the name of the 
		 last child node of the paragraph element.
		 <codeblock>
		 &lt;p id="para-01"&gt;
		 	&lt;span&gt;First span&lt;/span&gt;
		 	&lt;b&gt;bold&lt;/b&gt;
		 &lt;/p&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 	var p01 = document.getElementById('para-01');
		 	alert(p01.lastElementChild.nodeName);
		 &lt;/script&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Element.lastElementChild"><linktext>MDC - Element: lastElementChild Property</linktext></link><link href="http://www.w3.org/TR/ElementTraversal/#attribute-lastElementChild"><linktext>W3C - Element Traversel: lastElementChild Property</linktext></link><link href="http://quirksmode.org/dom/w3c_traversal.html"><linktext>Quirksmode: W3C DOM Compatibility - Traversal</linktext></link><link href="dom.core.xml#Element/childElementCount"><linktext>childElementCount</linktext></link><link href="dom.core.xml#Element/firstElementChild"><linktext>firstElementChild</linktext></link><link href="dom.core.xml#Element/nextElementSibling"><linktext>nextElementSibling</linktext></link><link href="dom.core.xml#Element/previousElementSibling"><linktext>previousElementSibling</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:nextElementSibling:get"><apiName>nextElementSibling</apiName><shortdesc>
		 
		 Returns the next sibling element node of this element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="ElemTrav" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8_no"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0b"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Element</apiValueClassifier></apiValueDef><apiDesc>
		 
		 Returns the next sibling element node of this element. null if this 
		 element has no element sibling nodes that come after this one in the 
		 document tree.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;div id="div-01"&gt;Here is div-01&lt;/div&gt;
		 &lt;div id="div-02"&gt;Here is div-02&lt;/div&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 	var el = document.getElementById('div-01').nextElementSibling;
		 	document.write('&lt;p&gt;Siblings of div-01&lt;/p&gt;&lt;ol&gt;');
		 	while (el) {
		 		document.write('&lt;li&gt;' + el.nodeName + '&lt;/li&gt;');
		 		el = el.nextElementSibling;
		 	}
		 	document.write('&lt;/ol&gt;');
		 &lt;/script&gt;</codeblock>
		 
		 <p>This example outputs the following into the page when it loads:</p>
		 
		 <p>Siblings of div-01</p>
		 <ol>
		 	<li>DIV</li>
		 	<li>SCRIPT</li>
		 	<li>P</li>
		 	<li>OL</li>
		 </ol>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Element.nextElementSibling"><linktext>MDC - Element: nextElementSibling Property</linktext></link><link href="http://www.w3.org/TR/ElementTraversal/#attribute-nextElementSibling"><linktext>W3C - Element Traversel: nextElementSibling Property</linktext></link><link href="http://quirksmode.org/dom/w3c_traversal.html"><linktext>Quirksmode: W3C DOM Compatibility - Traversal</linktext></link><link href="dom.core.xml#Element/childElementCount"><linktext>childElementCount</linktext></link><link href="dom.core.xml#Element/firstElementChild"><linktext>firstElementChild</linktext></link><link href="dom.core.xml#Element/lastElementChild"><linktext>lastElementChild</linktext></link><link href="dom.core.xml#Element/previousElementSibling"><linktext>previousElementSibling</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:offsetHeight:get"><apiName>offsetHeight</apiName><shortdesc>
		 
		 Height of an element relative to the element's offsetParent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Height of an element relative to the element's offsetParent.
		 
		 <p>Typically, an element's offsetHeight is a measurement which includes 
		 the element borders, the element vertical padding, the element 
		 horizontal scrollbar (if present, if rendered) and the element CSS height.</p>
		 
		 <p>For the document body object, the measurement includes total linear 
		 content height instead of the element CSS height. Floated elements 
		 extending below other linear content are ignored.</p>
		 
		 <p><b>Note (IE6):</b> To comply with the <xref class="external" href="http://www.w3.org/TR/REC-CSS1/" rel="external nofollow">Cascading Style Sheets, Level 1 (CSS1)</xref> World Wide 
		 Web link box model, Microsoft Internet Explorer 6 and later calculate the 
		 height of objects differently when you use the !DOCTYPE declaration in your 
		 document to switch on standards-compliant mode. This difference may affect 
		 the value of the offsetWidth propety. When standards-compliant mode is 
		 switched on, the width property specifies the distance between the left and 
		 right edges of the bounding box that surrounds the object's content. When 
		 standards-compliant mode is not switched on, and with earlier versions of 
		 Windows Internet Explorer, the width property also includes the border and 
		 padding belts that surround the object's bounding box.</p>
		 
		 </apiDesc><example>
		 This example adjusts the size of a clock's readout to fit the current width and height of the document body.
		 
		 <codeblock>
		 &lt;html&gt;
		 &lt;head&gt;
		 &lt;title&gt;A Simple Clock&lt;/title&gt;
		 &lt;script type="text/javascript"&gt;
		 	function startClock() {
		 		window.setInterval("Clock_Tick()", 1000);
		 		Clock_Tick();
		 	}
		 
		 	var iRatio = 4;
		 	function Clock_Tick() {
		 		var dToday = Date();
		 		var sTime = dToday.substring(11,19);
		 		var iDocHeight = document.body.offsetHeight;
		 		var iDocWidth = document.body.offsetWidth;
		 
		 		if ((iDocHeightRatio)&gt;iDocWidth)
		 		iDocHeight = iDocWidth / iRatio;
		 		document.all.MyTime.innerText = sTime;
		 		document.all.MyTime.style.fontSize = iDocHeight;
		 	}
		 &lt;/script&gt;
		 &lt;/head&gt;
		 &lt;body onload="startClock()"&gt;
		 &lt;p id="MyTime"&gt;&amp;nbsp;&lt;/p&gt;
		 &lt;/body&gt;
		 &lt;/html&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms530302(VS.85).aspx"><linktext>MSDN: Measuring Element Dimension and Location</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms534199(VS.85).aspx"><linktext>MSDN: offsetHeight Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.offsetHeight"><linktext>MDC - Element: offsetHeight Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#offset-attributes"><linktext>W3C - CSSOM View: offsetHeight Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#elementview"><linktext>Quirksmode: ElementView properties</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:offsetLeft:get"><apiName>offsetLeft</apiName><shortdesc>
		 
		 Returns the number of pixels that the upper left corner of the current 
		 element is offset to the left within the offsetParent node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5_incorrect"/><apiTool name="IE" version="6.0_incorrect"/><apiTool name="IE" version="7.0_incorrect"/><apiTool name="IE" version="8.0_as_IE7_incorrect"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Returns the number of pixels that the upper left corner of the current 
		 element is offset to the left within the offsetParent node.
		 
		 <p><b>Note:</b> offsetLeft returns the position the upper left edge of the element; 
		 not necessarily the 'real' left edge of the element. This is important 
		 for inline elements (such as span) in flowed text that wraps from one 
		 line to the next. The span may start in the middle of the line and wrap 
		 around to the beginning of the next line. The offsetLeft will refer to 
		 the left edge of the start of the span, not the left edge of text at the 
		 start of the second line. Therefore, a box with the left, top, width and 
		 height of offsetLeft, offsetTop, offsetWidth and offsetHeight will not be 
		 a bounding box for a span with wrapped text.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 var colorTable = document.getElementById("t1");
		 var tOLeft = colorTable.offsetLeft;
		 
		 if (tOLeft &gt; 5) {
		 	// large left offset: do something here
		 }</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms530302(VS.85).aspx"><linktext>MSDN: Measuring Element Dimension and Location</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms534200(VS.85).aspx"><linktext>MSDN: offsetLeft Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.offsetLeft"><linktext>MDC - Element: offsetLeft Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#offset-attributes"><linktext>W3C - CSSOM View: offsetLeft Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#elementview"><linktext>Quirksmode: ElementView properties</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:offsetParent:get"><apiName>offsetParent</apiName><shortdesc>
		 
		 The element from which all offset calculations are currently computed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Element</apiValueClassifier></apiValueDef><apiDesc>
		 
		 The element from which all offset calculations are currently computed.
		 
		 <p>offsetParent returns a reference to the object which is the closest 
		 (nearest in the containment hierarchy) positioned containing element. 
		 If the element is non-positioned, the root element (html in standards 
		 compliant mode; body in quirks rendering mode) is the offsetParent. 
		 offsetParent returns null when the element has style.display set 
		 to "none".</p>
		 
		 <p><b>Note (IE5):</b> In Microsoft Internet Explorer 5, the offsetParent property returns 
		 the table object for the td object.</p>
		 
		 <p><b>Note (IE4):</b> In Internet Explorer 4.0 it returns 
		 the tr object. You can use the parentElement property to retrieve the 
		 immediate container of the table cell.</p>
		 
		 </apiDesc><example>
		 This example shows how to determine the position of a td object. Although the td 
		 object appears to the far right in the document, its position is close to the x-axis and y-axis, 
		 because its offset parent is a table object rather than the document body. For Internet Explorer 4.0,
		 this same example returns a position of 0,0 because the offset parent is the table row.
		 
		 <codeblock>
		 &lt;table border='1' align='right'&gt;
		 	&lt;tr&gt;
		 		&lt;td id='oCell'&gt;This is a small table.&lt;/td&gt;
		 	&lt;/tr&gt;
		 &lt;/table&gt;</codeblock>
		 
		 <codeblock>
		 var oElement = document.getElementById("oCell");
		 
		 alert("The TD element is at (" + oElement.offsetLeft + 
		 "," + oElement.offsetTop + ")\n" + "The offset parent is " 
		 + oElement.offsetParent.tagName );</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms534302(VS.85).aspx"><linktext>MSDN: offsetParent Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.offsetParent"><linktext>MDC - Element: offsetParent Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#offset-attributes"><linktext>W3C - CSSOM View: offsetParent Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#elementview"><linktext>Quirksmode: ElementView properties</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:offsetTop:get"><apiName>offsetTop</apiName><shortdesc>
		 
		 Returns the distance of the current element relative to the 
		 top of the offsetParent node.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5_incorrect"/><apiTool name="IE" version="6.0_incorrect"/><apiTool name="IE" version="7.0_incorrect"/><apiTool name="IE" version="8.0_as_IE7_incorrect"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Returns the distance of the current element relative to the 
		 top of the offsetParent node.
		 
		 </apiDesc><example>
		 <codeblock>
		 d = document.getElementById("div1");
		 
		 topPos = d.offsetTop;
		 
		 if (topPos &gt; 10) {
		 	// object is offset more
		 	// than 10 pixels from its parent
		 }</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms530302(VS.85).aspx"><linktext>MSDN: Measuring Element Dimension and Location</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms534303(VS.85).aspx"><linktext>MSDN: offsetTop Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.offsetTop"><linktext>MDC - Element: offsetTop Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#offset-attributes"><linktext>W3C - CSSOM View: offsetTop Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#elementview"><linktext>Quirksmode: ElementView properties</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:offsetWidth:get"><apiName>offsetWidth</apiName><shortdesc>
		 
		 The width of an element, relative to the layout.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 The width of an element, relative to the layout.
		 
		 <p>Typically, an element's offsetWidth is a measurement which includes 
		 the element borders, the element horizontal padding, the element 
		 vertical scrollbar (if present, if rendered) and the element CSS width.</p>
		 
		 <p><b>Note (IE6):</b> To comply with the <xref class="external" href="http://www.w3.org/TR/REC-CSS1/" rel="external nofollow">Cascading Style Sheets, Level 1 (CSS1)</xref> World Wide 
		 Web link box model, Microsoft Internet Explorer 6 and later calculate the 
		 height of objects differently when you use the !DOCTYPE declaration in your 
		 document to switch on standards-compliant mode. This difference may affect 
		 the value of the offsetWidth propety. When standards-compliant mode is 
		 switched on, the width property specifies the distance between the left and 
		 right edges of the bounding box that surrounds the object's content. When 
		 standards-compliant mode is not switched on, and with earlier versions of 
		 Windows Internet Explorer, the width property also includes the border and 
		 padding belts that surround the object's bounding box.</p>
		 
		 </apiDesc><example>
		 This example adjusts the size of a clock's readout to fit the current width and height of the document.
		 
		 <codeblock>
		 &lt;div id=oDiv STYLE="overflow:scroll; width:200; height:100"&gt; . . . &lt;/div&gt;
		 &lt;button onclick="alert(oDiv.clientWidth)"&gt;client width&lt;/button&gt;
		 &lt;button onclick="alert(oDiv.offsetWidth)"&gt;offset width&lt;/button&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms530302(VS.85).aspx"><linktext>MSDN: Measuring Element Dimension and Location</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms534304(VS.85).aspx"><linktext>MSDN: offsetWidth Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.offsetWidth"><linktext>MDC - Element: offsetWidth Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#offset-attributes"><linktext>W3C - CSSOM View: offsetWidth Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#elementview"><linktext>Quirksmode: ElementView properties</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:previousElementSibling:get"><apiName>previousElementSibling</apiName><shortdesc>
		 
		 Returns the previous sibling element node of this element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="ElemTrav" version="0"/><apiTool name="IE" version="5.5_no"/><apiTool name="IE" version="6.0_no"/><apiTool name="IE" version="7.0_no"/><apiTool name="IE" version="8.0_as_IE7_no"/><apiTool name="IE" version="8.0_as_IE8_no"/><apiTool name="Firefox" version="2.0_no"/><apiTool name="Firefox" version="3.0_no"/><apiTool name="Firefox" version="3.5"/><apiTool name="Safari" version="3.0_no"/><apiTool name="Safari" version="3.1_no"/><apiTool name="Safari" version="4.0"/><apiTool name="Chrome" version="1.0_no"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0b"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:Element</apiValueClassifier></apiValueDef><apiDesc>
		 
		 Returns the previous sibling element node of this element. null if 
		 this element has no element sibling nodes that come before this one 
		 in the document tree.
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;div id="div-01"&gt;Here is div-01&lt;/div&gt;
		 &lt;div id="div-02"&gt;Here is div-02&lt;/div&gt;
		 &lt;li&gt;This is a list item&lt;/li&gt;
		 &lt;li&gt;This is another list item&lt;/li&gt;
		 &lt;div id="div-03"&gt;Here is div-03&lt;/div&gt;
		 
		 &lt;script type="text/javascript"&gt;
		 	var el = document.getElementById('div-03').previousElementSibling;
		 	document.write('&lt;p&gt;Siblings of div-03&lt;/p&gt;&lt;ol&gt;');
		 	while (el) {
		 		document.write('&lt;li&gt;' + el.nodeName + '&lt;/li&gt;');
		 		el = el.previousElementSibling;
		 	}
		 	document.write('&lt;/ol&gt;');
		 &lt;/script&gt;</codeblock>
		 
		 <p>This example outputs the following into the page when it loads:</p>
		 
		 <p>Siblings of div-03</p>
		 <ol>
		 	<li>LI</li>
		 	<li>LI</li>
		 	<li>DIV</li>
		 	<li>DIV</li>
		 </ol>
		 
		 </example></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Element.previousElementSibling"><linktext>MDC - Element: previousElementSibling Property</linktext></link><link href="http://www.w3.org/TR/ElementTraversal/#attribute-previousElementSibling"><linktext>W3C - Element Traversel: previousElementSibling Property</linktext></link><link href="http://quirksmode.org/dom/w3c_traversal.html"><linktext>Quirksmode: W3C DOM Compatibility - Traversal</linktext></link><link href="dom.core.xml#Element/childElementCount"><linktext>childElementCount</linktext></link><link href="dom.core.xml#Element/firstElementChild"><linktext>firstElementChild</linktext></link><link href="dom.core.xml#Element/lastElementChild"><linktext>lastElementChild</linktext></link><link href="dom.core.xml#Element/nextElementSibling"><linktext>nextElementSibling</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:schemeTypeInfo:get"><apiName>schemeTypeInfo</apiName><shortdesc>
		 DOM Level 3 | None 
		 
		 The type information associated with this element.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core:TypeInfo</apiValueClassifier></apiValueDef><apiDesc>
		 <b>DOM Level 3 | None</b> 
		 
		 The type information associated with this element. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="dom.core:Element:scrollHeight:get"><apiName>scrollHeight</apiName><shortdesc>
		 
		 Height of the scroll view of an element; it includes the element padding but not its margin.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5_incorrect"/><apiTool name="IE" version="6.0_incorrect"/><apiTool name="IE" version="7.0_incorrect"/><apiTool name="IE" version="8.0_as_IE7_incorrect"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62_incorrect"/><apiTool name="Opera" version="10.0a_incorrect"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Height of the scroll view of an element; it includes the element padding but not its margin.
		 
		 <p>An element's scrollHeight is a measurement of the height of an element's content including 
		 content not visible on the screen due to overflow.</p>
		 
		 <p>If the element's content generated a vertical scrollbar, the scrollHeight value is equal to 
		 the minimum clientHeight the element would require in order to fit all the content in the viewpoint 
		 without using a vertical scrollbar. When an element's content does not generate a vertical scrollbar, 
		 then its scrollHeight property is equal to its clientHeight property.</p>
		 
		 </apiDesc><example>
		 This example uses the scrollHeight property to retrieve the height of the viewable content.
		 
		 <codeblock>
		 &lt;script type="text/javascript"&gt;
		 	function fnCheckScroll(){
		 		var iNewHeight = oDiv.scrollHeight;
		 		alert("The value of the scrollHeight property is: " 
		 		+ iNewHeight + "px"); 
		 	}
		 &lt;/script&gt;
		 ...
		 &lt;div id="oDiv" style="overflow: scroll; height= 100px; width= 250px; text-align: left"&gt;
		 	... 
		 &lt;/div&gt;
		 &lt;button onclick="fnCheckScroll()"&gt;Check scrollHeight&lt;/button&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms534615(VS.85).aspx"><linktext>MSDN: scrollHeight Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.scrollHeight"><linktext>MDC - Element: scrollHeight Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#scroll-attributes"><linktext>W3C - CSSOM View: scrollHeight Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#elementview"><linktext>Quirksmode: ElementView properties</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:scrollLeft:get"><apiName>scrollLeft</apiName><shortdesc>
		 
		 Gets or sets the number of pixels that an element's content is scrolled to the left.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Gets or sets the number of pixels that an element's content is scrolled to the left.
		 
		 </apiDesc><example>
		 <codeblock>
		 // Set the number of pixels scrolled
		 element.scrollLeft = 10;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms534617(VS.85).aspx"><linktext>MSDN: scrollLeft Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.scrollLeft"><linktext>MDC - Element: scrollLeft Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#scroll-attributes"><linktext>W3C - CSSOM View: scrollLeft Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#elementview"><linktext>Quirksmode: ElementView properties</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:scrollTop:get"><apiName>scrollTop</apiName><shortdesc>
		 
		 Gets or sets the number of pixels that the content of an element is scrolled upward.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5"/><apiTool name="IE" version="6.0"/><apiTool name="IE" version="7.0"/><apiTool name="IE" version="8.0_as_IE7"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62"/><apiTool name="Opera" version="10.0a"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Gets or sets the number of pixels that the content of an element is scrolled upward.
		 
		 <p>An element's scrollTop is a measurement of the distance of an element's top to its topmost visible content.</p>
		 
		 <p>When an element content does not generate a vertical scrollbar, then its scrollTop value defaults to 0.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 // Get the number of pixels scrolled
		 var  intElemScrollTop = element.scrollTop;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/workshop/author/dhtml/reference/properties/scrolltop.asp?frame=true"><linktext>MSDN: scrollTop Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.scrollTop"><linktext>MDC - Element: scrollTop Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#scroll-attributes"><linktext>W3C - CSSOM View: scrollTop Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#elementview"><linktext>Quirksmode: ElementView properties</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:scrollWidth:get"><apiName>scrollWidth</apiName><shortdesc>
		 
		 Returns either the width in pixels of the content of an element or the width of the element itself, whichever is greater.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiTool name="IE" version="5.5_incorrect"/><apiTool name="IE" version="6.0_incorrect"/><apiTool name="IE" version="7.0_incorrect"/><apiTool name="IE" version="8.0_as_IE7_incorrect"/><apiTool name="IE" version="8.0_as_IE8"/><apiTool name="Firefox" version="2.0"/><apiTool name="Firefox" version="3.0"/><apiTool name="Firefox" version="3.1b"/><apiTool name="Safari" version="3.0"/><apiTool name="Safari" version="3.1"/><apiTool name="Safari" version="4.0b"/><apiTool name="Chrome" version="1.0"/><apiTool name="Chrome" version="2.0"/><apiTool name="Opera" version="9.62_incorrect"/><apiTool name="Opera" version="10.0a_incorrect"/><apiSince version="DOM 0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 Returns either the width in pixels of the content of an element or the width of the element itself, whichever is greater. 
		 
		 <p>If the element is wider than its content area (for example, if there are scroll bars for scrolling through the content), the scrollWidth is larger than the clientWidth.</p>
		 
		 </apiDesc><example>
		 <codeblock>
		 &lt;div id="aDiv" style="width: 100px; height: 200px; overflow: auto;"&gt;
		 	-FooBar-FooBar-FooBar
		 &lt;/div&gt;
		 &lt;br/&gt;
		 &lt;input type="button" value="Show scrollWidth"
		 onclick="alert(document.getElementById('aDiv').scrollWidth);"&gt;</codeblock>
		 
		 </example></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms534619(VS.85).aspx"><linktext>MSDN: scrollWidth Property</linktext></link><link href="http://developer.mozilla.org/en/DOM/element.scrollWidth"><linktext>MDC - Element: scrollWidth Property</linktext></link><link href="http://www.w3.org/TR/cssom-view/#scroll-attributes"><linktext>W3C - CSSOM View: scrollWidth Property</linktext></link><link href="http://www.quirksmode.org/dom/w3c_cssom.html#elementview"><linktext>Quirksmode: ElementView properties</linktext></link></related-links></apiValue><apiValue id="dom.core:Element:tagName:get"><apiName>tagName</apiName><shortdesc>
		 The name of the element.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="2"/><apiTool name="IE" version="5.0+"/><apiTool name="Firefox" version="1.0+"/><apiTool name="Opera" version="8.0+"/><apiTool name="Safari" version="1.3+"/><apiSince version="DOMCore 2"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The name of the element. If Node.localName is different from null, 
		 this attribute is a qualified name.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="dom.core:DOMImplementationSource"><apiName>DOMImplementationSource</apiName><shortdesc>
	 This interface permits a DOM implementer to supply one or more 
	 implementations, based upon requested features and versions, as specified 
	 in DOM Features.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
	 This interface permits a DOM implementer to supply one or more 
	 implementations, based upon requested features and versions, as specified 
	 in DOM Features. Each implemented DOMImplementationSource object is listed 
	 in the binding-specific list of available sources so that its 
	 DOMImplementation objects are made available.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementationSource"><linktext>MDC - DOMImplementationSource</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMImplementationSource"><linktext>W3C - DOMImplementationSource</linktext></link></related-links><apiOperation id="dom.core:DOMImplementationSource:dom.core:DOMImplementationSource:getDOMImplementation"><apiName>getDOMImplementation</apiName><shortdesc>
		 A method to request the first DOM implementation that supports the 
		 specified features.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The first DOM implementation that support the desired features, or 
		 null if this source has none.
		 
		 </apiDesc><apiOperationClassifier>dom.core:DOMImplementation</apiOperationClassifier></apiReturn><apiParam><apiItemName>features</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string that specifies which features and versions are 
		 required. This is a space separated list in which each feature is specified 
		 by its name optionally followed by a space and a version number.
		 This method returns the first item of the list returned by getDOMImplementationList.
		 As an example, the string "XML 3.0 Traversal +Events 2.0" will request a DOM 
		 implementation that supports the module "XML" for its 3.0 version, a module 
		 that support of the "Traversal" module for any version, and the module 
		 "Events" for its 2.0 version. The module "Events" must be accessible using the 
		 method Node.getFeature() and DOMImplementation.getFeature(). 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 A method to request the first DOM implementation that supports the 
		 specified features. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementationSource.getDOMImplementation"><linktext>MDC - DOMImplementationSource.getDOMImplementation()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-getDOMImpl"><linktext>W3C - DOMImplementationSource.getDOMImplementation()</linktext></link></related-links></apiOperation><apiOperation id="dom.core:DOMImplementationSource:dom.core:DOMImplementationSource:getDOMImplementationList"><apiName>getDOMImplementationList</apiName><shortdesc>
		 A method to request a list of DOM implementations that support the 
		 specified features and versions, as specified in DOM Features.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A list of DOM implementations that support the desired features.
		 
		 </apiDesc><apiOperationClassifier>dom.core:DOMImplementationList</apiOperationClassifier></apiReturn><apiParam><apiItemName>features</apiItemName><apiOperationClassifier>dom.core.types:DOMString</apiOperationClassifier><apiDesc>A string that specifies which features and versions are required. 
		 This is a space separated list in which each feature is specified by its name 
		 optionally followed by a space and a version number. This is something like: 
		 "XML 3.0 Traversal +Events 2.0"
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 A method to request a list of DOM implementations that support the 
		 specified features and versions, as specified in DOM Features.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="http://developer.mozilla.org/En/DOM/DOMImplementationSource.getDOMImplementationList"><linktext>MDC - DOMImplementationSource.getDOMImplementationList()</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-getDOMImpls"><linktext>W3C - DOMImplementationSource.getDOMImplementationList()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="dom.core:Entity"><apiName>Entity</apiName><shortdesc>
	 This interface represents a known entity, either parsed or unparsed, in 
	 an XML document.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata><asCustoms><modified>DOMCore 3
	 </modified></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>dom.core:Node</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This interface represents a known entity, either parsed or unparsed, in 
	 an XML document. Note that this models the entity itself not the entity 
	 declaration.
	 
	 <p>The nodeName attribute that is inherited from Node contains the name of 
	 the entity.</p>
	 
	 <p><b>Note:</b> An Entity node does not have any parent.</p>
	 
	 <p><b>Note:</b> If the entity contains an unbound namespace prefix, the namespaceURI of 
	 the corresponding node in the Entity node subtree is null. The same is true 
	 for EntityReference nodes that refer to this entity, when they are created 
	 using the createEntityReference method of the Document interface.</p>
	 
	 <p><b>Note (Mozilla):</b> This is not implemented in Mozilla</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms766394%28VS.85%29.aspx"><linktext>MSDN - IXMLDOMEntity</linktext></link><link href="http://developer.mozilla.org/En/DOM/Entity"><linktext>MDC - Entity</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-527DCFF2"><linktext>W3C - Entity</linktext></link></related-links><apiValue id="dom.core:Entity:inputEncoding:get"><apiName>inputEncoding</apiName><shortdesc>
		 An attribute specifying the encoding used for this entity at the time of 
		 parsing, when it is an external parsed entity.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 An attribute specifying the encoding used for this entity at the time of 
		 parsing, when it is an external parsed entity. This is null if it an 
		 entity from the internal subset or if it is not known.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Entity.inputEncoding"><linktext>MDC - Entity.inputEncoding</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Entity3-inputEncoding"><linktext>W3C - Entity.inputEncoding</linktext></link></related-links></apiValue><apiValue id="dom.core:Entity:notationName:get"><apiName>notationName</apiName><shortdesc>
		 For unparsed entities, the name of the notation for the entity.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 For unparsed entities, the name of the notation for the entity. For parsed 
		 entities, this is null.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms757830%28VS.85%29.aspx"><linktext>MSDN - notationName Property</linktext></link><link href="http://developer.mozilla.org/En/DOM/Entity.notationName"><linktext>MDC - Entity.notationName</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-6ABAEB38"><linktext>W3C - Entity.notationName</linktext></link></related-links></apiValue><apiValue id="dom.core:Entity:publicId:get"><apiName>publicId</apiName><shortdesc>
		 The public identifier associated with the entity if specified, and null otherwise.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The public identifier associated with the entity if specified, and null otherwise.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms760313%28VS.85%29.aspx"><linktext>MSDN - publicId Property (IXMLDOMEntity)</linktext></link><link href="http://developer.mozilla.org/En/DOM/Entity.publicId"><linktext>MDC - Entity.publicId</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-D7303025"><linktext>W3C - Entity.publicId</linktext></link></related-links></apiValue><apiValue id="dom.core:Entity:systemId:get"><apiName>systemId</apiName><shortdesc>
		 The system identifier associated with the entity if specified, and null 
		 otherwise.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="1"/><apiSince version="DOMCore 1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 The system identifier associated with the entity if specified, and null 
		 otherwise. This may be an absolute URI or not.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://msdn.microsoft.com/en-us/library/ms764731%28VS.85%29.aspx"><linktext>MSDN - systemId Property (IXMLDOMEntity)</linktext></link><link href="http://developer.mozilla.org/En/DOM/Entity.systemId"><linktext>MDC - Entity.systemId</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-D7C29F3E"><linktext>W3C - Entity.systemId</linktext></link></related-links></apiValue><apiValue id="dom.core:Entity:xmlEncoding:get"><apiName>xmlEncoding</apiName><shortdesc>
		 An attribute specifying, as part of the text declaration, the encoding of 
		 this entity, when it is an external parsed entity.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 An attribute specifying, as part of the text declaration, the encoding of 
		 this entity, when it is an external parsed entity. This is null otherwise.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Entity.xmlEncoding"><linktext>MDC - Entity.xmlEncoding</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Entity3-encoding"><linktext>W3C - Entity.xmlEncoding</linktext></link></related-links></apiValue><apiValue id="dom.core:Entity:xmlVersion:get"><apiName>xmlVersion</apiName><shortdesc>
		 An attribute specifying, as part of the text declaration, the version number 
		 of this entity, when it is an external parsed entity.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="DOMCore" version="3"/><apiSince version="DOMCore 3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>dom.core.types:DOMString</apiValueClassifier></apiValueDef><apiDesc>
		 An attribute specifying, as part of the text declaration, the version number 
		 of this entity, when it is an external parsed entity. This is null otherwise.
		 
		 </apiDesc></apiValueDetail><related-links><link href="http://developer.mozilla.org/En/DOM/Entity.xmlVersion"><linktext>MDC - Entity.xmlVersion</linktext></link><link href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Entity3-version"><linktext>W3C - Entity.xmlVersion</linktext></link></related-links></apiValue></apiClassifier></apiPackage>