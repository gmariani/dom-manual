<?xml version="1.0" encoding="UTF-8"?>
<allClasses>
   <apiPackage id="cssom.view">
      <apiName>cssom.view</apiName>
      <apiClassifier id="cssom.view:Screen">
         <apiName>Screen</apiName>
         <shortdesc>
	 Has properties that hold information about the screen.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Has properties that hold information about the screen.
	 
	 <p>All browser compatibility information was obtained via Quirksmode.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="cssom.view:DocumentView">
         <apiName>DocumentView</apiName>
         <shortdesc>
	 Has a method that gives position information about an Element node relative to the Document.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Has a method that gives position information about an Element node relative to the Document.
	 
	 <p>DocumentView contains many properties and a few methods that were previously not part of any specification. They originated as part of 
	 MSIE's DHTML object model. They are now all part of the CSSOM Views specification which should be implemented on any browser supporting
	 DOM 3 Core.</p>
	 
	           <p>All browser compatibility information was obtained via Quirksmode.</p>
	 
	           <p>
               <b>Note:</b> This conflicts with an interface in DOM 2 Views. Maybe this specification
	 combined with HTML 5 (for AbstractView) can obsolete that one as it is completely useless in practice.</p> 
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="cssom.view:WindowView">
         <apiName>WindowView</apiName>
         <shortdesc>
	 Has properties that hold the dimensions of the entire browser window.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Has properties that hold the dimensions of the entire browser window.
	 
	 <p>Some browser compatibility information was obtained via Quirksmode.</p>
	 
	           <p>Some browser compatibility information was obtained via Aptana.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="cssom.view:Media">
         <apiName>Media</apiName>
         <shortdesc>
	 Should be an object returned by the Window.media property, although I haven't found any
	 browsers that support this.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Should be an object returned by the Window.media property, although I haven't found any
	 browsers that support this.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="cssom.view:ElementView">
         <apiName>ElementView</apiName>
         <shortdesc>
	 Has properties and methods that give information about the dimensions of an Element node (HTML tag).</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Has properties and methods that give information about the dimensions of an Element node (HTML tag).
	 
	 <p>ElementView contains many properties and a few methods that were previously not part of any specification. They originated as part of 
	 MSIE's DHTML object model. They are now all part of the CSSOM Views specification which should be implemented on any browser supporting
	 DOM 3 Core.</p>
	 
	           <p>All browser compatibility information was obtained via Quirksmode.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="cssom.view:TextRectangleList">
         <apiName>TextRectangleList</apiName>
         <shortdesc>
	 A collection of TextRectangle objects returned by the getClientRects method.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A collection of TextRectangle objects returned by the getClientRects method.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="cssom.view:MouseEventView">
         <apiName>MouseEventView</apiName>
         <shortdesc>
	 Used to calculate the mouse position relative to the page or screen.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Used to calculate the mouse position relative to the page or screen.
	 
	 <p>All browser compatibility information was obtained via Quirksmode.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="cssom.view:TextRectangle">
         <apiName>TextRectangle</apiName>
         <shortdesc>
	 Objects implementing the TextRectangle interface represent a rectangular box.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Objects implementing the TextRectangle interface represent a rectangular box.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="cssom.view:RangeView">
         <apiName>RangeView</apiName>
         <shortdesc>
	 Has properties and methods that give information about the dimensions of a Range.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Has properties and methods that give information about the dimensions of a Range.
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.core.types">
      <apiName>dom.core.types</apiName>
      <apiClassifier id="dom.core.types:DOMUserData">
         <apiName>DOMUserData</apiName>
         <shortdesc>
	 A DOMUserData represents a reference to application data.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A DOMUserData represents a reference to application data.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core.types:DOMTimeStamp">
         <apiName>DOMTimeStamp</apiName>
         <shortdesc>
	 A DOMTimeStamp represents a number of milliseconds.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A DOMTimeStamp represents a number of milliseconds. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core.types:DOMObject">
         <apiName>DOMObject</apiName>
         <shortdesc>
	 A DOMObject represents an object reference.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A DOMObject represents an object reference. 
	 
	 <p>
               <b>Note:</b> For Java and ECMAScript, DOMObject is bound to the Object type.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core.types:DOMString">
         <apiName>DOMString</apiName>
         <shortdesc>
	 A DOMString is a sequence of 16-bit units.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A DOMString is a sequence of 16-bit units.
	 
	 The UTF-16 encoding was chosen because of its widespread industry practice. 
	 Note that for both HTML and XML, the document character set (and therefore 
	 the notation of numeric character references) is based on UCS [ISO/IEC 
	 10646]. A single numeric character reference in a source document may therefore 
	 in some cases correspond to two 16-bit units in a DOMString (a high surrogate 
	 and a low surrogate). For issues related to string comparisons, refer to String 
	 Comparisons in the DOM.
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.core">
      <apiName>dom.core</apiName>
      <apiClassifier id="dom.core:CharacterData">
         <apiName>CharacterData</apiName>
         <shortdesc>
	 Provides text manipulation methods that are used by several objects.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.core:Node</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Provides text manipulation methods that are used by several objects.
	 
	 </apiDesc>
         <adobeApiEvent id="dom.core:CharacterData_DOMCharacterDataModified_DOMCharacterDataModified">
            <apiName>DOMCharacterDataModified</apiName>
            <shortdesc>
	 Occurs after CharacterData.data or ProcessingInstruction.data have been
	 modified but the node itself has not been inserted or deleted.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMCharacterDataModified</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 Occurs after CharacterData.data or ProcessingInstruction.data have been
	 modified but the node itself has not been inserted or deleted. The target 
	 node of this event is the CharacterData node or the 
	 ProcessingInstruction node.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:CharacterData_DOMNodeInsertedIntoDocument_DOMNodeInsertedIntoDocument">
            <apiName>DOMNodeInsertedIntoDocument</apiName>
            <shortdesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeInsertedIntoDocument</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 after the insertion has taken place. The target node of this event is the 
	 node being inserted. If the node is being directly inserted, the event type 
	 DOMNodeInserted occurs before this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:CharacterData_DOMNodeRemovedFromDocument_DOMNodeRemovedFromDocument">
            <apiName>DOMNodeRemovedFromDocument</apiName>
            <shortdesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeRemovedFromDocument</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 before the removal takes place. The target node of this event type is 
	 the node being removed. If the node is being directly removed, the event 
	 type DOMNodeRemoved occurs before this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:CharacterData_DOMNodeRemoved_DOMNodeRemoved">
            <apiName>DOMNodeRemoved</apiName>
            <shortdesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeRemoved</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement. This event is dispatched before the 
	 removal takes place. The target node of this event is the node 
	 being removed.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:CharacterData_DOMNodeInserted_DOMNodeInserted">
            <apiName>DOMNodeInserted</apiName>
            <shortdesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeInserted</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element. This event is dispatched after 
	 the insertion has taken place. The target node of this event is the 
	 node being inserted.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="dom.core:DOMConfiguration">
         <apiName>DOMConfiguration</apiName>
         <shortdesc>
	 Used by Document.normalizeDocument(), and DOM Level 3 DOMParser() and DOMSerializer.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Used by Document.normalizeDocument(), and DOM Level 3 DOMParser() and DOMSerializer.
	 
	 <p>Using the configuration, it is possible to change Document.normalizeDocument() 
	 behavior, such as replacing the CDATASection nodes with Text nodes 
	 or specifying the type of the schema that must be used when the 
	 validation of the Document is requested. DOMConfiguration objects are 
	 also used in [DOM Level 3 Load and Save] in the DOMParser and 
	 DOMSerializer interfaces.</p>
	 
	           <p>
               <b>Note (Mozilla):</b> This is not implemented in Mozilla.</p>
	 
	           <p>The following list of parameters defined in the DOM: 
	 <adobetable class="innertable">
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	 	
	                 <tgroup cols="3">
                     <thead>
                        <row>
                           <entry>Parameter</entry>
                           <entry>Value</entry>
                           <entry>Description</entry>
                        </row>
                     </thead>
                     <tbody>
                        <row>
	 		                       <entry>"canonical-form"</entry>
                           <entry>
                              <codeph>true</codeph> [optional]</entry>
                           <entry>Canonicalize the document according to the rules 
	 specified in [Canonical XML], such as removing the DocumentType node (if any) from the tree, or removing 
	 superfluous namespace declarations from each element. Note that this is limited to what can be represented 
	 in the DOM; in particular, there is no way to specify the order of the attributes in the DOM. In addition, 
	 Setting this parameter to true will also set the state of the parameters listed below. Later changes to the 
	 state of one of those parameters will revert "canonical-form" back to false. Parameters set to false: 
	 "entities", "normalize-characters", "cdata-sections". Parameters set to true: "namespaces", 
	 "namespace-declarations", "well-formed", "element-content-whitespace". Other parameters are not changed unless 
	 explicitly specified in the description of the parameters.</entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph> [required] (default)</entry>
                           <entry>Do not canonicalize the document.</entry>
	 	                     </row>
                        <row>
	 		                       <entry>"cdata-sections"</entry>
                           <entry>
                              <codeph>true</codeph> [required] (default)</entry>
                           <entry>Keep CDATASection nodes in the document.</entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph> [required]</entry>
                           <entry>Transform CDATASection nodes in the document into Text nodes. The new Text  node is then combined with any adjacent Text  node.</entry>
	 	                     </row>
                        <row>
	 		                       <entry>"check-character-normalization"</entry>
                           <entry>
                              <codeph>true</codeph> [optional]</entry>
                           <entry>Check if the characters in the document are fully normalized, as defined in appendix B of XML 1.1. When a sequence of characters is encountered that fails normalization checking, an error with the DOMError.type equals to "check-character-normalization-failure" is issued. </entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph> [required] (default)</entry>
                           <entry>Do not check if characters are normalized.</entry>
	 	                     </row>
                        <row>
	 		                       <entry>"comments"</entry>
                           <entry>
                              <codeph>true</codeph> [required] (default)</entry>
                           <entry>Keep Comment nodes in the document.</entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph> [required]</entry>
                           <entry>Discard Comment nodes in the document.</entry>
	 	                     </row>
                        <row>
	 		                       <entry>"datatype-normalization"</entry>
                           <entry>
                              <codeph>true</codeph> [optional]</entry>
                           <entry>Expose schema normalized values in the tree, such as XML Schema normalized values in the case of XML Schema. Since this parameter requires to have schema information, the "validate" parameter will also be set to true. Having this parameter activated when "validate" is false has no effect and no schema-normalization will happen. </entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph> [required] (default)</entry>
                           <entry>Do not perform schema normalization on the tree. </entry>
	 	                     </row>
                        <row>
	 		                       <entry>"element-content-whitespace"</entry>
                           <entry>
                              <codeph>true</codeph> [required] (default)</entry>
                           <entry>Keep all whitespaces in the document.</entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph> [optional]</entry>
                           <entry>Discard all Text nodes that contain whitespaces in element content, as described in [element content whitespace]. The implementation is expected to use the attribute Text.isElementContentWhitespace to determine if a Text node should be discarded or not.</entry>
	 	                     </row>
                        <row>
	 		                       <entry>"entities"</entry>
                           <entry>
                              <codeph>true</codeph> [required] (default)</entry>
                           <entry>Keep EntityReference nodes in the document.</entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph> [required]</entry>
                           <entry>Remove all EntityReference nodes from the document, putting the entity expansions directly in their place. Text nodes are normalized, as defined in Node.normalize. Only unexpanded entity references are kept in the document.<p>
                                 <b>Note:</b> This parameter does not affect Entity nodes.</p>
                           </entry>
	 	                     </row>
                        <row>
	 		                       <entry>"error-handler"</entry>
                           <entry>[required]</entry>
                           <entry>Contains a DOMErrorHandler object. If an error is encountered in the document, the implementation will call back the DOMErrorHandler registered using this parameter. The implementation may provide a default DOMErrorHandler object. When called, DOMError.relatedData will contain the closest node to where the error occurred. If the implementation is unable to determine the node where the error occurs, DOMError.relatedData will contain the Document node. Mutations to the document from within an error handler will result in implementation dependent behavior. </entry>
	 	                     </row>
                        <row>
	 		                       <entry>"infoset"</entry>
                           <entry>
                              <codeph>true</codeph> [required]</entry>
                           <entry>Keep in the document the information defined in the XML Information Set. This forces the following parameters to false: "validate-if-schema", "entities", "datatype-normalization", "cdata-sections". This forces the following parameters to true: "namespace-declarations", "well-formed", "element-content-whitespace", "comments", "namespaces". Other parameters are not changed unless explicitly specified in the description of the parameters. Note that querying this parameter with getParameter returns true only if the individual parameters specified above are appropriately set.</entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph>
                           </entry>
                           <entry>Setting infoset to false  has no effect.</entry>
	 	                     </row>
                        <row>
	 		                       <entry>"namespaces"</entry>
                           <entry>
                              <codeph>true</codeph> [required] (default)</entry>
                           <entry>Perform the namespace processing as defined in Namespace Normalization. </entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph> [optional]</entry>
                           <entry>Do not perform the namespace processing. </entry>
	 	                     </row>
                        <row>
	 		                       <entry>"namespace-declarations"</entry>
                           <entry/>
                           <entry>This parameter has no effect if the parameter "namespaces" is set to false. </entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>true</codeph> [required] (default)</entry>
                           <entry>Include namespace declaration attributes, specified or defaulted from the schema, in the document.</entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph> [required]</entry>
                           <entry>Discard all namespace declaration attributes. The namespace prefixes (Node.prefix) are retained even if this parameter is set to false.</entry>
	 	                     </row>
                        <row>
	 		                       <entry>"normalize-characters"</entry>
                           <entry>
                              <codeph>true</codeph> [optional]</entry>
                           <entry>Fully normalized the characters in the document as defined in appendix B of [XML 1.1].</entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph> [required] (default)</entry>
                           <entry>Do not perform character normalization.</entry>
	 	                     </row>
                        <row>
	 		                       <entry>"schema-location"</entry>
                           <entry>[optional]</entry>
                           <entry>Represent a DOMString object containing a list of URIs, separated by whitespaces (characters matching the nonterminal production S defined in section 2.3 [XML 1.0]), that represents the schemas against which validation should occur, i.e. the current schema. The types of schemas referenced in this list must match the type specified with schema-type, otherwise the behavior of an implementation is undefined. The schemas specified using this property take precedence to the schema information specified in the document itself. For namespace aware schema, if a schema specified using this property and a schema specified in the document instance (i.e. using the schemaLocation attribute) in a schema document (i.e. using schema import mechanisms) share the same targetNamespace, the schema specified by the user using this property will be used. If two schemas specified using this property share the same targetNamespace or have no namespace, the behavior is implementation dependent. If no location has been provided, this parameter is null.<p>
                                 <b>Note:</b> The "schema-location" parameter is ignored unless the "schema-type" parameter value is set. It is strongly recommended that Document.documentURI will be set so that an implementation can successfully resolve any external entities referenced.</p>
                           </entry>
	 	                     </row>
                        <row>
	 		                       <entry>"schema-type"</entry>
                           <entry>[optional]</entry>
                           <entry>Represent a DOMString object containing an absolute URI and representing the type of the schema language used to validate a document against. Note that no lexical checking is done on the absolute URI. If this parameter is not set, a default value may be provided by the implementation, based on the schema languages supported and on the schema language used at load time. If no value is provided, this parameter is null.<p>
                                 <b>Note:</b> For XML Schema, applications must use the value "http://www.w3.org/2001/XMLSchema". For XML DTD, applications must use the value "http://www.w3.org/TR/REC-xml". Other schema languages are outside the scope of the W3C and therefore should recommend an absolute URI in order to use this method.</p>
                           </entry>
	 	                     </row>
                        <row>
	 		                       <entry>"split-cdata-sections"</entry>
                           <entry>
                              <codeph>true</codeph> [required] (default)</entry>
                           <entry>Split CDATA sections containing the CDATA section termination marker ']]&gt;'. When a CDATA section is split a warning is issued with a DOMError.type equals to "cdata-sections-splitted" and DOMError.relatedData equals to the first CDATASection node in document order resulting from the split.</entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph> [required]</entry>
                           <entry>Signal an error if a CDATASection contains an unrepresentable character.</entry>
	 	                     </row>
                        <row>
	 		                       <entry>"validate"</entry>
                           <entry>
                              <codeph>true</codeph> [optional]</entry>
                           <entry>Require the validation against a schema (i.e. XML schema, DTD, any other type or representation of schema) of the document as it is being normalized as defined by [XML 1.0]. If validation errors are found, or no schema was found, the error handler is notified. Schema-normalized values will not be exposed according to the schema in used unless the parameter "datatype-normalization" is true. This parameter will reevaluate:<ul>
                                 <li>Attribute nodes with Attr.specified equals to false, as specified in the description of the Attr interface;</li>
                                 <li>The value of the attribute Text.isElementContentWhitespace for all Text nodes;</li>
                                 <li>The value of the attribute Attr.isId for all Attr nodes;</li>
                                 <li>The attributes Element.schemaTypeInfo and Attr.schemaTypeInfo.</li>
                              </ul>
                              <p>
                                 <b>Note:</b> "validate-if-schema" and "validate" are mutually exclusive, setting one of them to true will set the other one to false. Applications should also consider setting the parameter "well-formed" to true, which is the default for that option, when validating the document.</p>
                           </entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph> [required] (default)</entry>
                           <entry>Do not accomplish schema processing, including the internal subset processing. Default attribute values information are kept. Note that validation might still happen if "validate-if-schema" is true. </entry>
	 	                     </row>
                        <row>
	 		                       <entry>"validate-if-schema"</entry>
                           <entry>
                              <codeph>true</codeph> [optional]</entry>
                           <entry>Enable validation only if a declaration for the document element can be found in a schema (independently of where it is found, i.e. XML schema, DTD, or any other type or representation of schema). If validation is enabled, this parameter has the same behavior as the parameter "validate" set to true.<p>
                                 <b>Note:</b> "validate-if-schema" and "validate" are mutually exclusive, setting one of them to true will set the other one to false.</p>
                           </entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph> [required] (default)</entry>
                           <entry>No schema processing should be performed if the document has a schema, including internal subset processing. Default attribute values information are kept. Note that validation must still happen if "validate" is true. </entry>
	 	                     </row>
                        <row>
	 		                       <entry>"well-formed"</entry>
                           <entry>
                              <codeph>true</codeph> [required] (default)</entry>
                           <entry>Check if all nodes are XML well formed according to the XML version in use in Document.xmlVersion: <ul>
                                 <li>check if the attribute Node.nodeName contains invalid characters according to its node type and generate a DOMError of type "wf-invalid-character-in-node-name", with a DOMError.SEVERITY_ERROR severity, if necessary;</li>
                                 <li>check if the text content inside Attr, Element, Comment, Text, CDATASection nodes for invalid characters and generate a DOMError of type "wf-invalid-character", with a DOMError.SEVERITY_ERROR severity, if necessary;</li>
                                 <li>check if the data inside ProcessingInstruction nodes for invalid characters and generate a DOMError of type "wf-invalid-character", with a DOMError.SEVERITY_ERROR severity, if necessary;</li>
                              </ul>
                           </entry>
	 	                     </row>
                        <row>
	 		                       <entry/>
                           <entry>
                              <codeph>false</codeph> [optional]</entry>
                           <entry>Do not check for XML well-formedness. </entry>
	 	                     </row>
                     </tbody>
                  </tgroup>
               </adobetable>
	           </p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:Attr">
         <apiName>Attr</apiName>
         <shortdesc>
	 This type represents a DOM element's attribute as an object.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.core:Node</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This type represents a DOM element's attribute as an object. In most DOM methods, you 
	 will probably directly retrieve the attribute as a string (e.g., getAttribute), but 
	 certain functions (e.g., getAttributeNode()) or means of iterating give Attr types.
	 
	 </apiDesc>
         <adobeApiEvent id="dom.core:Attr_DOMNodeInsertedIntoDocument_DOMNodeInsertedIntoDocument">
            <apiName>DOMNodeInsertedIntoDocument</apiName>
            <shortdesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeInsertedIntoDocument</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 after the insertion has taken place. The target node of this event is the 
	 node being inserted. If the node is being directly inserted, the event type 
	 DOMNodeInserted occurs before this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Attr_DOMNodeRemovedFromDocument_DOMNodeRemovedFromDocument">
            <apiName>DOMNodeRemovedFromDocument</apiName>
            <shortdesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeRemovedFromDocument</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 before the removal takes place. The target node of this event type is 
	 the node being removed. If the node is being directly removed, the event 
	 type DOMNodeRemoved occurs before this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Attr_DOMNodeRemoved_DOMNodeRemoved">
            <apiName>DOMNodeRemoved</apiName>
            <shortdesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeRemoved</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement. This event is dispatched before the 
	 removal takes place. The target node of this event is the node 
	 being removed.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Attr_DOMNodeInserted_DOMNodeInserted">
            <apiName>DOMNodeInserted</apiName>
            <shortdesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeInserted</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element. This event is dispatched after 
	 the insertion has taken place. The target node of this event is the 
	 node being inserted.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Attr_DOMSubtreeModified_DOMSubtreeModified">
            <apiName>DOMSubtreeModified</apiName>
            <shortdesc>
	 This is a general event for notification of all changes to the 
	 document.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMSubtreeModified</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 This is a general event for notification of all changes to the 
	 document. It can be used instead of the more specific mutation and 
	 mutation name events listed below. It may be dispatched after a 
	 single modification to the document or, at the implementation's 
	 discretion, after multiple changes have occurred. The latter use 
	 should generally be used to accommodate multiple changes which occur 
	 either simultaneously or in rapid succession. The target of this 
	 event is the lowest common parent of the changes which have taken 
	 place. This event is dispatched after any other events caused by the 
	 mutation(s) have occurred.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="dom.core:DOMImplementationList">
         <apiName>DOMImplementationList</apiName>
         <shortdesc>
	 Returned by DOMImplementationSource.getDOMImplementationList() and 
	 DOMImplementationRegistry.getDOMImplementationList().</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Returned by DOMImplementationSource.getDOMImplementationList() and 
	 DOMImplementationRegistry.getDOMImplementationList(). Can be iterated with 0-based index.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:NamedNodeMap">
         <apiName>NamedNodeMap</apiName>
         <shortdesc>
	 Objects implementing the NamedNodeMap interface are used to represent 
	 collections of nodes that can be accessed by name.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Objects implementing the NamedNodeMap interface are used to represent 
	 collections of nodes that can be accessed by name. Note that NamedNodeMap 
	 does not inherit from NodeList; NamedNodeMaps are not maintained in 
	 any particular order. Objects contained in an object implementing 
	 NamedNodeMap may also be accessed by an ordinal index, but this is simply 
	 to allow convenient enumeration of the contents of a NamedNodeMap, and 
	 does not imply that the DOM specifies an order to these Nodes. 
	 
	 <p>
               <b>Note:</b> NamedNodeMap objects in the DOM are live.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:UserDataHandler">
         <apiName>UserDataHandler</apiName>
         <shortdesc>
	 When associating user data with a key on a node, Node.setUserData()
	 can also accept, in its third argument, a handler which will be 
	 called when the object is cloned, imported, deleted, renamed, or 
	 adopted.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 When associating user data with a key on a node, Node.setUserData()
	 can also accept, in its third argument, a handler which will be 
	 called when the object is cloned, imported, deleted, renamed, or 
	 adopted. Per the specification, exceptions should not be thrown in 
	 a UserDataHandler. In both document.importNode() and Node.cloneNode(), 
	 although user data is not copied over, the handler will be called. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:DOMErrorHandler">
         <apiName>DOMErrorHandler</apiName>
         <shortdesc>
	 DOMErrorHandler is a callback interface that the DOM implementation can
	 call when reporting errors that happens while processing XML data, or 
	 when doing some other processing (e.g.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 DOMErrorHandler is a callback interface that the DOM implementation can
	 call when reporting errors that happens while processing XML data, or 
	 when doing some other processing (e.g. validating a document). A 
	 DOMErrorHandler  object can be attached to a Document using the 
	 "error-handler" on the DOMConfiguration interface. If more than one error 
	 needs to be reported during an operation, the sequence and numbers of 
	 the errors passed to the error handler are implementation dependent. 
	 
	 <p>
               <b>Note:</b> This is not implemented in Mozilla.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:DOMImplementationRegistry">
         <apiName>DOMImplementationRegistry</apiName>
         <shortdesc>
	 This is a global variable used to get a single DOMImplementation or DOMImplementationList 
	 depending on the registered objects with the specified features.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This is a global variable used to get a single DOMImplementation or DOMImplementationList 
	 depending on the registered objects with the specified features.
	 
	 <p>
               <b>Note (Mozilla):</b> This is not implemented in Mozilla</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:DOMImplementation">
         <apiName>DOMImplementation</apiName>
         <shortdesc>
	 The DOMImplementation interface provides a number of methods for 
	 performing operations that are independent of any particular 
	 instance of the document object model.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The DOMImplementation interface provides a number of methods for 
	 performing operations that are independent of any particular 
	 instance of the document object model. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:DOMException">
         <apiName>DOMException</apiName>
         <shortdesc>
	 DOM operations only raise exceptions in "exceptional" circumstances.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 DOM operations only raise exceptions in "exceptional" circumstances. For example,
	 when an operation is impossible to perform (either for logical reasons, 
	 because data is lost, or because the implementation has become unstable). 
	 In general, DOM methods return specific error values in ordinary processing 
	 situations, such as out-of-bound errors when using NodeList.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:DocumentType">
         <apiName>DocumentType</apiName>
         <shortdesc>
	 Each Document has a doctype attribute whose value is either null or a 
	 DocumentType  object.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.core:Node</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Each Document has a doctype attribute whose value is either null or a 
	 DocumentType  object. The DocumentType interface in the DOM Core provides 
	 an interface to the list of entities that are defined for the document, 
	 and little else because the effect of namespaces and the various XML schema 
	 efforts on DTD representation are not clearly understood as of this writing.
	 
	 <p>
               <b>Note:</b> DOM Level 3 doesn't support editing DocumentType nodes. DocumentType nodes 
	 are read-only.</p>
	 
	           <p>
               <b>Note (Mozilla):</b> This interface is not fully supported in Mozilla at present, 
	 including for indicating internalSubset information which Gecko generally does otherwise support.</p>
	 
	        </apiDesc>
         <adobeApiEvent id="dom.core:DocumentType_DOMNodeInsertedIntoDocument_DOMNodeInsertedIntoDocument">
            <apiName>DOMNodeInsertedIntoDocument</apiName>
            <shortdesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeInsertedIntoDocument</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 after the insertion has taken place. The target node of this event is the 
	 node being inserted. If the node is being directly inserted, the event type 
	 DOMNodeInserted occurs before this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:DocumentType_DOMNodeRemovedFromDocument_DOMNodeRemovedFromDocument">
            <apiName>DOMNodeRemovedFromDocument</apiName>
            <shortdesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeRemovedFromDocument</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 before the removal takes place. The target node of this event type is 
	 the node being removed. If the node is being directly removed, the event 
	 type DOMNodeRemoved occurs before this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:DocumentType_DOMNodeRemoved_DOMNodeRemoved">
            <apiName>DOMNodeRemoved</apiName>
            <shortdesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeRemoved</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement. This event is dispatched before the 
	 removal takes place. The target node of this event is the node 
	 being removed.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:DocumentType_DOMNodeInserted_DOMNodeInserted">
            <apiName>DOMNodeInserted</apiName>
            <shortdesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeInserted</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element. This event is dispatched after 
	 the insertion has taken place. The target node of this event is the 
	 node being inserted.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="dom.core:ExceptionCode">
         <apiName>ExceptionCode</apiName>
         <shortdesc>
	 An integer indicating the type of error generated.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An integer indicating the type of error generated.
	 
	 <p>
               <b>Note:</b> Other numeric codes are reserved for W3C for possible future use.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:NameList">
         <apiName>NameList</apiName>
         <shortdesc>
	 The NameList interface provides the abstraction of an ordered collection 
	 of parallel pairs of name and namespace values (which could be null 
	 values), without defining or constraining how this collection is 
	 implemented.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The NameList interface provides the abstraction of an ordered collection 
	 of parallel pairs of name and namespace values (which could be null 
	 values), without defining or constraining how this collection is 
	 implemented. The items in the NameList are accessible via an integral 
	 index, starting from 0.
	 
	 <p>
               <b>Note (Mozilla):</b> Although there is an XPCOM interface for it, this does not seem to be implemented in Mozilla</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:EntityReference">
         <apiName>EntityReference</apiName>
         <shortdesc>
	 Read-only reference to an entity reference in the DOM tree.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.core:Node</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Read-only reference to an entity reference in the DOM tree.
	 
	 <p>
               <b>Note:</b> Character references and references to predefined entities 
	 are considered to be expanded by the HTML or XML processor so that 
	 characters are represented by their Unicode equivalent rather than by an 
	 entity reference. Moreover, the XML processor may completely expand 
	 references to entities while building the Document, instead of providing 
	 EntityReference  nodes. If it does provide such nodes, then for an 
	 EntityReference node that represents a reference to a known entity an Entity 
	 exists, and the subtree of the EntityReference node is a copy of the Entity 
	 node subtree. However, the latter may not be true when an entity contains 
	 an unbound namespace prefix. In such a case, because the namespace prefix 
	 resolution depends on where the entity reference is, the descendants of the 
	 EntityReference node may be bound to different namespace URIs. When an 
	 EntityReference node represents a reference to an unknown entity, the node has 
	 no children and its replacement value, when used by Attr.value for example, 
	 is empty.</p>
	 
	           <p>
               <b>Note:</b> As for Entity nodes, EntityReference nodes and all their descendants are readonly.</p>
	 
	           <p>
               <b>Note:</b> EntityReference nodes may cause element content and attribute value normalization 
	 problems when, such as in XML 1.0 and XML Schema, the normalization is performed 
	 after entity reference are expanded.</p>
	 
	           <p>
               <b>Note (Mozilla):</b> This is not implemented in Mozilla.</p>
	 
	        </apiDesc>
         <adobeApiEvent id="dom.core:EntityReference_DOMNodeInsertedIntoDocument_DOMNodeInsertedIntoDocument">
            <apiName>DOMNodeInsertedIntoDocument</apiName>
            <shortdesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeInsertedIntoDocument</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 after the insertion has taken place. The target node of this event is the 
	 node being inserted. If the node is being directly inserted, the event type 
	 DOMNodeInserted occurs before this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:EntityReference_DOMNodeRemovedFromDocument_DOMNodeRemovedFromDocument">
            <apiName>DOMNodeRemovedFromDocument</apiName>
            <shortdesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeRemovedFromDocument</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 before the removal takes place. The target node of this event type is 
	 the node being removed. If the node is being directly removed, the event 
	 type DOMNodeRemoved occurs before this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:EntityReference_DOMNodeRemoved_DOMNodeRemoved">
            <apiName>DOMNodeRemoved</apiName>
            <shortdesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeRemoved</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement. This event is dispatched before the 
	 removal takes place. The target node of this event is the node 
	 being removed.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:EntityReference_DOMNodeInserted_DOMNodeInserted">
            <apiName>DOMNodeInserted</apiName>
            <shortdesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeInserted</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element. This event is dispatched after 
	 the insertion has taken place. The target node of this event is the 
	 node being inserted.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="dom.core:DOMLocator">
         <apiName>DOMLocator</apiName>
         <shortdesc>
	 Indicates a location such as where an error occurred.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Indicates a location such as where an error occurred. Returned by DOMError.location.
	 
	 <p>
               <b>Note (Mozilla):</b> This is not implemented in Mozilla</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:Document">
         <apiName>Document</apiName>
         <shortdesc>
	 In the DOM, the document object provides a general way to represent HTML, 
	 XHTML, and XML documents.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>dom.style.css:DocumentCSS</apiBaseInterface>
               <apiBaseInterface>dom.style.stylesheets:DocumentStyle</apiBaseInterface>
               <apiBaseInterface>cssom.view:DocumentView</apiBaseInterface>
               <apiBaseInterface>dom.views:DocumentView</apiBaseInterface>
               <apiBaseInterface>dom.tr.range:DocumentRange</apiBaseInterface>
               <apiBaseInterface>dom.events:DocumentEvent</apiBaseInterface>
               <apiBaseInterface>dom.tr.traversal:DocumentTraversal</apiBaseInterface>
               <apiBaseInterface>selectors:NodeSelector</apiBaseInterface>
               <apiBaseInterface>dom.loadsave:DOMImplementationLS</apiBaseInterface>
               <apiBaseInterface>dom.loadsave:DocumentLS</apiBaseInterface>
               <apiBaseClassifier>dom.core:Node</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 In the DOM, the document object provides a general way to represent HTML, 
	 XHTML, and XML documents. Document objects implement the general DOM Core 
	 document interface (which itself implements the Node interface).
	 
	 <p>In addition to the generalized DOM Core document interface, HTML documents 
	 also implement the DOM HTMLDocument interface, which is a more specialized 
	 interface for dealing with HTML documents (e.g., document.cookie, 
	 document.alinkColor). Methods listed here that are part of this more 
	 specialized interface have an asterisk (~~) next to them.</p>
	 
	           <p>The document is contained by the window object and may contain any number 
	 of elements.</p>
	 
	           <p>The document interface provides access to things such as the document type, 
	 its color and formatting, plugins and applets, as well providing methods 
	 for creating and manipulating all of the document's child nodes, or elements, 
	 such as BODY and TABLE elements.</p>
	 
	        </apiDesc>
         <adobeApiEvent id="dom.core:Document_offline_offline">
            <apiName>offline</apiName>
            <shortdesc>
	 Is fired when the browser switches between online and offline mode.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>offline</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 Is fired when the browser switches between online and offline mode.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Document_online_online">
            <apiName>online</apiName>
            <shortdesc>
	 Is fired when the browser switches between online and offline mode.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>online</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 Is fired when the browser switches between online and offline mode.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Document_scroll_scroll">
            <apiName>scroll</apiName>
            <shortdesc>
	 A document view or an element has been scrolled.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>scroll</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A document view or an element has been scrolled. The scroll occured before 
	 the dispatch of this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Document_resize_resize">
            <apiName>resize</apiName>
            <shortdesc>
	 A document view or an element has been resized.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>resize</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A document view or an element has been resized. The resize occured before 
	 the dispatch of this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Document_unload_unload">
            <apiName>unload</apiName>
            <shortdesc>
	 The DOM implementation removes from the environment the resource 
	 (such as the document) or any dependent resources (such as images, 
	 style sheets, scripts).</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>unload</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 The DOM implementation removes from the environment the resource 
	 (such as the document) or any dependent resources (such as images, 
	 style sheets, scripts). The document is unloaded after the dispatch 
	 of this event type. If this event type is dispatched, implementations 
	 are required to dispatch this event at least on the Document node.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Document_load_load">
            <apiName>load</apiName>
            <shortdesc>
	 The DOM Implementation finishes loading the resource (such as the 
	 document) and any dependent resources (such as images, style sheets, 
	 or scripts).</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>load</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 The DOM Implementation finishes loading the resource (such as the 
	 document) and any dependent resources (such as images, style sheets, 
	 or scripts). Dependent resources that fail to load will not prevent 
	 this event from firing if the resource that loaded them is still 
	 accessible via the DOM. If this event type is dispatched, 
	 implementations are required to dispatch this event at least on the 
	 Document node.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Document_DOMSubtreeModified_DOMSubtreeModified">
            <apiName>DOMSubtreeModified</apiName>
            <shortdesc>
	 This is a general event for notification of all changes to the 
	 document.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMSubtreeModified</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 This is a general event for notification of all changes to the 
	 document. It can be used instead of the more specific mutation and 
	 mutation name events listed below. It may be dispatched after a 
	 single modification to the document or, at the implementation's 
	 discretion, after multiple changes have occurred. The latter use 
	 should generally be used to accommodate multiple changes which occur 
	 either simultaneously or in rapid succession. The target of this 
	 event is the lowest common parent of the changes which have taken 
	 place. This event is dispatched after any other events caused by the 
	 mutation(s) have occurred.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Document_mousewheel_mousewheel">
            <apiName>mousewheel</apiName>
            <shortdesc>
	 A mouse wheel has been rotated around the y-axis.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>mousewheel</apiEventType>
                  <adobeApiEventClassifier>dom.events.MouseWheelEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A mouse wheel has been rotated around the y-axis.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Document_mousemultiwheel_mousemultiwheel">
            <apiName>mousemultiwheel</apiName>
            <shortdesc>
	 A mouse wheel has been rotated.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>mousemultiwheel</apiEventType>
                  <adobeApiEventClassifier>dom.events.MouseMultiWheelEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A mouse wheel has been rotated. A default action of user agent 
	 generated event objects of this type causes implementations to 
	 dispatch a mousewheel event iff it supports that event type and 
	 MouseMultiWheelEvent.wheelDeltaY is non-zero.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="dom.core:DocumentFragment">
         <apiName>DocumentFragment</apiName>
         <shortdesc>
	 A DocumentFragment is a minimal document object that has no parent.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>selectors:NodeSelector</apiBaseInterface>
               <apiBaseClassifier>dom.core:Node</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A DocumentFragment is a minimal document object that has no parent. 
	 
	 <p>It is used as a light-weight version of document to store well-formed 
	 or potentially non-well-formed fragments of XML.</p>
	 
	           <p>Various other methods can take a document fragment as an argument (e.g., 
	 any Node interface methods such as appendChild and insertBefore), in 
	 which case the children of the fragment are appended or inserted, not 
	 the fragment itself.</p>
	 
	        </apiDesc>
         <adobeApiEvent id="dom.core:DocumentFragment_DOMSubtreeModified_DOMSubtreeModified">
            <apiName>DOMSubtreeModified</apiName>
            <shortdesc>
	 This is a general event for notification of all changes to the 
	 document.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMSubtreeModified</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 This is a general event for notification of all changes to the 
	 document. It can be used instead of the more specific mutation and 
	 mutation name events listed below. It may be dispatched after a 
	 single modification to the document or, at the implementation's 
	 discretion, after multiple changes have occurred. The latter use 
	 should generally be used to accommodate multiple changes which occur 
	 either simultaneously or in rapid succession. The target of this 
	 event is the lowest common parent of the changes which have taken 
	 place. This event is dispatched after any other events caused by the 
	 mutation(s) have occurred.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="dom.core:Comment">
         <apiName>Comment</apiName>
         <shortdesc>
	 A comment is used to add notations within markup.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.core:CharacterData</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A comment is used to add notations within markup.
	 
	 <p>Although it is generally not displayed, it is still available to be read in 
	 the source view. These are represented in HTML and XML as content between 
	 &lt;!-- and  --&gt; . In XML, the character sequence "--" cannot be used within a comment.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:Notation">
         <apiName>Notation</apiName>
         <shortdesc>
	 This interface represents a notation declared in the DTD.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.core:Node</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This interface represents a notation declared in the DTD. A notation 
	 either declares, by name, the format of an unparsed entity, or is used for formal 
	 declaration of processing instruction targets. The nodeName attribute inherited from 
	 Node is set to the declared name of the notation.
	 
	 <p>
               <b>Note:</b> A Notation node does not have any parent.</p>
	 
	           <p>
               <b>Note (Mozilla):</b> This is not implemented in Mozilla.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:TypeInfo">
         <apiName>TypeInfo</apiName>
         <shortdesc>
	 The TypeInfo interface represents a type referenced from Element or Attr 
	 nodes, specified in the schemas associated with the document.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The TypeInfo interface represents a type referenced from Element or Attr 
	 nodes, specified in the schemas associated with the document. The type 
	 is a pair of a namespace URI and name properties, and depends on the 
	 document's schema. 
	 
	 <p>
               <b>Note:</b> This is not implemented in Mozilla.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:Text">
         <apiName>Text</apiName>
         <shortdesc>
	 The Text interface represents the textual content of an Element or Attr.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.core:CharacterData</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The Text interface represents the textual content of an Element or Attr.  If an 
	 element has no markup within its content, it has a single child implementing Text 
	 that contains the element's text.  However, if the element contains markup, it is 
	 parsed into information items and Text nodes that form its children.
	 
	 <p>New documents have a single Text node for each block of text.  Over time, more 
	 Text nodes may be created as the document's content changes.  The Node.normalize() 
	 method merges adjacent Text objects back into a single node for each block of text.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:CDATASection">
         <apiName>CDATASection</apiName>
         <shortdesc>
	 A CDATA Section can be used within XML to include extended portions of 
	 unescaped text, such that the symbols &amp;lt; and &amp;amp; do not need escaping as 
	 they normally do within XML when used as text.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.core:Text</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A CDATA Section can be used within XML to include extended portions of 
	 unescaped text, such that the symbols &lt; and &amp; do not need escaping as 
	 they normally do within XML when used as text.
	 
	 <p>
               <b>Note:</b> CDATA sections should not be used (without hiding) within HTML.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:Node">
         <apiName>Node</apiName>
         <shortdesc>
	 A Node is an interface from which a number of DOM types inherit, and 
	 allows these various types to be treated (or tested) similarly.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>dom.events:EventTarget</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A Node is an interface from which a number of DOM types inherit, and 
	 allows these various types to be treated (or tested) similarly. The 
	 following all inherit this interface and its methods and properties 
	 (though they may return null in particular cases where not relevant 
	 (or throw an exception when adding children to a node type for which 
	 no children can exist)): Document, Element, Attr, CharacterData (which 
	 Text, Comment, and CDATASection inherit), ProcessingInstruction, 
	 DocumentFragment, DocumentType, Notation, Entity, EntityReference
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:DOMError">
         <apiName>DOMError</apiName>
         <shortdesc>
	 DOMError is an interface that describes an error.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 DOMError is an interface that describes an error.
	 
	 <p>
               <b>Note (Mozilla):</b> This is not implemented in Mozilla.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:ProcessingInstruction">
         <apiName>ProcessingInstruction</apiName>
         <shortdesc>
	 A processing instruction provides an opportunity for application-specific 
	 instructions to be embedded within XML and which can be ignored by XML 
	 processors which do not support processing their instructions (outside of 
	 their having a place in the DOM).</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.core:Node</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A processing instruction provides an opportunity for application-specific 
	 instructions to be embedded within XML and which can be ignored by XML 
	 processors which do not support processing their instructions (outside of 
	 their having a place in the DOM).
	 
	 <p>A Processing instruction is distinct from a XML Declaration which is used 
	 for other information about the document such as encoding and which appear 
	 (if it does) as the first item in the document.</p>
	 
	           <p>User-defined processing instructions cannot begin with 'xml', as these are 
	 reserved (e.g., as used in &lt;?xml-stylesheet ?&gt;).</p>
	 
	        </apiDesc>
         <adobeApiEvent id="dom.core:ProcessingInstruction_DOMCharacterDataModified_DOMCharacterDataModified">
            <apiName>DOMCharacterDataModified</apiName>
            <shortdesc>
	 Occurs after CharacterData.data or ProcessingInstruction.data have been
	 modified but the node itself has not been inserted or deleted.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMCharacterDataModified</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 Occurs after CharacterData.data or ProcessingInstruction.data have been
	 modified but the node itself has not been inserted or deleted. The target 
	 node of this event is the CharacterData node or the 
	 ProcessingInstruction node.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:ProcessingInstruction_DOMNodeInsertedIntoDocument_DOMNodeInsertedIntoDocument">
            <apiName>DOMNodeInsertedIntoDocument</apiName>
            <shortdesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeInsertedIntoDocument</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 after the insertion has taken place. The target node of this event is the 
	 node being inserted. If the node is being directly inserted, the event type 
	 DOMNodeInserted occurs before this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:ProcessingInstruction_DOMNodeRemovedFromDocument_DOMNodeRemovedFromDocument">
            <apiName>DOMNodeRemovedFromDocument</apiName>
            <shortdesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeRemovedFromDocument</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 before the removal takes place. The target node of this event type is 
	 the node being removed. If the node is being directly removed, the event 
	 type DOMNodeRemoved occurs before this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:ProcessingInstruction_DOMNodeRemoved_DOMNodeRemoved">
            <apiName>DOMNodeRemoved</apiName>
            <shortdesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeRemoved</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement. This event is dispatched before the 
	 removal takes place. The target node of this event is the node 
	 being removed.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:ProcessingInstruction_DOMNodeInserted_DOMNodeInserted">
            <apiName>DOMNodeInserted</apiName>
            <shortdesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeInserted</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element. This event is dispatched after 
	 the insertion has taken place. The target node of this event is the 
	 node being inserted.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="dom.core:DOMStringList">
         <apiName>DOMStringList</apiName>
         <shortdesc>
	 The DOMStringList interface provides the abstraction of an ordered 
	 collection of DOMString values, without defining or constraining how 
	 this collection is implemented.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The DOMStringList interface provides the abstraction of an ordered 
	 collection of DOMString values, without defining or constraining how 
	 this collection is implemented. The items in the DOMStringList are 
	 accessible via an integral index, starting from 0. 
	 
	 <p>
               <b>Note (Mozilla):</b> This type is presently not available to Mozilla as DOMConfiguration is not implemented.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:NodeList">
         <apiName>NodeList</apiName>
         <shortdesc>
	 The NodeList interface provides the abstraction of an ordered collection
	 of nodes, without defining or constraining how this collection is 
	 implemented.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The NodeList interface provides the abstraction of an ordered collection
	 of nodes, without defining or constraining how this collection is 
	 implemented. NodeList objects in the DOM are live.
	 
	 <p>The items in the NodeList are accessible via an integral index, 
	 starting from 0. </p>
	 
	           <p>
               <b>Note:</b> NodeList objects in the DOM are live.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:Element">
         <apiName>Element</apiName>
         <shortdesc>
	 The Element interface represents an element in an HTML or XML document.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>cssom.view:ElementView</apiBaseInterface>
               <apiBaseInterface>elementtraversal:ElementTraversal</apiBaseInterface>
               <apiBaseInterface>selectors:NodeSelector</apiBaseInterface>
               <apiBaseClassifier>dom.core:Node</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The Element interface represents an element in an HTML or XML document. 
	 
	 <p>Elements may have attributes associated with them; since the Element 
	 interface inherits from Node, the generic Node interface attribute 
	 attributes may be used to retrieve the set of all attributes for an 
	 element. There are methods on the Element interface to retrieve either 
	 an Attr object by name or an attribute value by name. In XML, where an 
	 attribute value may contain entity references, an Attr object should be 
	 retrieved to examine the possibly fairly complex sub-tree representing 
	 the attribute value. On the other hand, in HTML, where all attributes 
	 have simple string values, methods to directly access an attribute value 
	 can safely be used as a convenience.</p>
	 
	           <p>Note: In DOM Level 2, the method normalize is inherited from the Node 
	 interface where it was moved.</p>
	 
	           <p>Includes the <xref href="http://www.w3.org/TR/2008/REC-ElementTraversal-20081222/">ElementTraversal Specification</xref>
            </p>
	 
	        </apiDesc>
         <adobeApiEvent id="dom.core:Element_keyup_keyup">
            <apiName>keyup</apiName>
            <shortdesc>
	 A key is released.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>keyup</apiEventType>
                  <adobeApiEventClassifier>dom.events.KeyboardEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A key is released. This event type is device dependent and relies on the 
	 capabilities of the input devices and how they are mapped in the operating 
	 system. This event type is generated after the keyboard mapping but before 
	 the processing of an input method editor. This event should logically 
	 happen after the event keydown is produced. Whether a keyup contributes 
	 or not to the generation of a text event is implementation dependent.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_keydown_keydown">
            <apiName>keydown</apiName>
            <shortdesc>
	 A key is pressed down.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>keydown</apiEventType>
                  <adobeApiEventClassifier>dom.events.KeyboardEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A key is pressed down. This event type is device dependent and relies 
	 on the capabilities of the input devices and how they are mapped in the 
	 operating system. This event type is generated after the keyboard 
	 mapping but before the processing of an input method editor. This event 
	 should logically happen before the event keyup is produced. Whether a 
	 keydown contributes or not to the generation of a text event is 
	 implementation dependent.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_textInput_textInput">
            <apiName>textInput</apiName>
            <shortdesc>
	 One or more characters have been entered.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>textInput</apiEventType>
                  <adobeApiEventClassifier>dom.events.TextEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 One or more characters have been entered. The characters can originate 
	 from a variety of sources. For example, it could be characters 
	 resulting from a key being pressed or released on a keyboard device, 
	 characters resulting from the processing of an input method editor, or 
	 resulting from a voice command. Where a "paste" operation generates a 
	 simple sequence of characters, i.e. a text without any structure or 
	 style information, this event type should be generated as well.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_blur_blur">
            <apiName>blur</apiName>
            <shortdesc>
	 An event target loses focus.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>blur</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 An event target loses focus. The focus is taken from the element before 
	 the dispatch of this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_focus_focus">
            <apiName>focus</apiName>
            <shortdesc>
	 An event target receives focus.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>focus</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 An event target receives focus. The focus is given to the element 
	 before the dispatch of this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_windowZLevel_windowZLevel">
            <apiName>windowZLevel</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>windowZLevel</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc>
            </adobeApiEventDetail>
            <related-links>
               <link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013">
                  <linktext>bug 286013</linktext>
               </link>
            </related-links>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMMenuItemActive_DOMMenuItemActive">
            <apiName>DOMMenuItemActive</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMMenuItemActive</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc>
            </adobeApiEventDetail>
            <related-links>
               <link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013">
                  <linktext>bug 286013</linktext>
               </link>
            </related-links>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_ValueChange_ValueChange">
            <apiName>ValueChange</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>ValueChange</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc>
            </adobeApiEventDetail>
            <related-links>
               <link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013">
                  <linktext>bug 286013</linktext>
               </link>
            </related-links>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_PluginNotFound_PluginNotFound">
            <apiName>PluginNotFound</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>PluginNotFound</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc>
            </adobeApiEventDetail>
            <related-links>
               <link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013">
                  <linktext>bug 286013</linktext>
               </link>
            </related-links>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMTitleChanged_DOMTitleChanged">
            <apiName>DOMTitleChanged</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMTitleChanged</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc>
            </adobeApiEventDetail>
            <related-links>
               <link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013">
                  <linktext>bug 286013</linktext>
               </link>
            </related-links>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_PopupWindow_PopupWindow">
            <apiName>PopupWindow</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>PopupWindow</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc>
            </adobeApiEventDetail>
            <related-links>
               <link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013">
                  <linktext>bug 286013</linktext>
               </link>
            </related-links>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_fullscreen_fullscreen">
            <apiName>fullscreen</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>fullscreen</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc>
            </adobeApiEventDetail>
            <related-links>
               <link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013">
                  <linktext>bug 286013</linktext>
               </link>
            </related-links>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMModalDialogClosed_DOMModalDialogClosed">
            <apiName>DOMModalDialogClosed</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMModalDialogClosed</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc>
            </adobeApiEventDetail>
            <related-links>
               <link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013">
                  <linktext>bug 286013</linktext>
               </link>
            </related-links>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMWillOpenModalDialog_DOMWillOpenModalDialog">
            <apiName>DOMWillOpenModalDialog</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMWillOpenModalDialog</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc>
            </adobeApiEventDetail>
            <related-links>
               <link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013">
                  <linktext>bug 286013</linktext>
               </link>
            </related-links>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMLinkRemoved_DOMLinkRemoved">
            <apiName>DOMLinkRemoved</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMLinkRemoved</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc>
            </adobeApiEventDetail>
            <related-links>
               <link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013">
                  <linktext>bug 286013</linktext>
               </link>
            </related-links>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMLinkAdded_DOMLinkAdded">
            <apiName>DOMLinkAdded</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 Undocumented
	 
	 </shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMLinkAdded</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 Undocumented
	 
	 </apiDesc>
            </adobeApiEventDetail>
            <related-links>
               <link href="http://bugzilla.mozilla.org/show_bug.cgi?id=286013">
                  <linktext>bug 286013</linktext>
               </link>
            </related-links>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_MozMousePixelScroll_MozMousePixelScroll">
            <apiName>MozMousePixelScroll</apiName>
            <shortdesc>
	 Gecko-Specific | Firefox 3.5+ 
	 
	 Regular mouse wheels can only scroll with a per-line resolution.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>MozMousePixelScroll</apiEventType>
                  <adobeApiEventClassifier>gecko.events.MouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific | Firefox 3.5+</b> 
	 
	 Regular mouse wheels can only scroll with a per-line resolution. However, there are also 
	 devices that support scrolling with pixel precision, notably Apple MacBook trackpads.
	 
	 When we started supporting pixel scrolling in bug 350471, we added the MozMousePixelScroll 
	 event. It basically works exactly like DOMMouseScroll, with the difference that the detail
	 attribute is in pixels (instead of lines).
	 
	 For backwards compatibility DOMMouseScroll events are sent even if pixel scrolling is used. 
	 Every DOMMouseScroll event can have several associated MozMousePixelScroll events. If 
	 preventDefault() is called on the DOMMouseScroll event, the following associated 
	 MozMousePixelScroll events won't cause any scrolling.
	 
	 When you listen for MozMousePixelScroll events, you shouldn't handle DOMMouseScroll events - 
	 otherwise you'd end up processing the same scroll gesture twice. In order to make it possible 
	 to only listen for MozMousePixelScroll events, Gecko will send MozMousePixelScroll events 
	 even when scrolling with regular mouse wheels. These events will carry a meaningful pixel delta.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMMouseScroll_DOMMouseScroll">
            <apiName>DOMMouseScroll</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 The DOMMouseScroll event is sent when the mouse wheel is moved.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMMouseScroll</apiEventType>
                  <adobeApiEventClassifier>gecko.events.MouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 The DOMMouseScroll event is sent when the mouse wheel is moved. The target of this 
	 event is the element that was under the mouse pointer when the mouse wheel was 
	 scrolled, similar to the click event.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_MozAfterPaint_MozAfterPaint">
            <apiName>MozAfterPaint</apiName>
            <shortdesc>
	 Gecko-Specific | Firefox 3.5+ 
	 
	 The MozAfterPaint event is fired whenever content is repainted.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>MozAfterPaint</apiEventType>
                  <adobeApiEventClassifier>gecko.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific | Firefox 3.5+</b> 
	 
	 The MozAfterPaint event is fired whenever content is repainted.  It is sent to the 
	 document and bubbles up to the window level.
	 
	 </apiDesc>
            </adobeApiEventDetail>
            <related-links>
               <link href="http://developer.mozilla.org/en/Gecko-Specific_DOM_Events">
                  <linktext>http://developer.mozilla.org/en/Gecko-Specific_DOM_Events</linktext>
               </link>
            </related-links>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMWindowClose_DOMWindowClose">
            <apiName>DOMWindowClose</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 Fired when the window is about to be closed by window.close().</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMWindowClose</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 Fired when the window is about to be closed by window.close().
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMFrameContentLoaded_DOMFrameContentLoaded">
            <apiName>DOMFrameContentLoaded</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 Same as DOMContentLoaded, but also fired for enclosed frames.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMFrameContentLoaded</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 Same as DOMContentLoaded, but also fired for enclosed frames.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMContentLoaded_DOMContentLoaded">
            <apiName>DOMContentLoaded</apiName>
            <shortdesc>
	 Gecko-Specific 
	 
	 Fired on a Window object when a document's DOM content is finished loading, 
	 but unlike "load", does not wait until all images are loaded.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMContentLoaded</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	                 <b>Gecko-Specific</b> 
	 
	 Fired on a Window object when a document's DOM content is finished loading, 
	 but unlike "load", does not wait until all images are loaded. Used for 
	 example by GreaseMonkey to sneak in to alter pages before they are displayed.
	 
	 This event, as many others on this page, is dispatched to "trusted" targets only; 
	 for example, it is not dispatched to the content of the main browser object in 
	 Firefox, even if it comes from a chrome:/ URI.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMFocusOut_DOMFocusOut">
            <apiName>DOMFocusOut</apiName>
            <shortdesc>
	 An event target loses focus.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMFocusOut</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 An event target loses focus. The focus is taken from the element before 
	 the dispatch of this event type. This event type is dispatched after 
	 the event type blur.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMFocusIn_DOMFocusIn">
            <apiName>DOMFocusIn</apiName>
            <shortdesc>
	 An event target receives focus.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMFocusIn</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 An event target receives focus. The focus is given to the element 
	 before the dispatch of this event type. This event type is 
	 dispatched after the event type focus.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMActivate_DOMActivate">
            <apiName>DOMActivate</apiName>
            <shortdesc>
	 Refer to Activation requests and behavior.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMActivate</apiEventType>
                  <adobeApiEventClassifier>dom.events.UIEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 Refer to Activation requests and behavior.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_scroll_scroll">
            <apiName>scroll</apiName>
            <shortdesc>
	 A document view or an element has been scrolled.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>scroll</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A document view or an element has been scrolled. The scroll occured before 
	 the dispatch of this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_resize_resize">
            <apiName>resize</apiName>
            <shortdesc>
	 A document view or an element has been resized.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>resize</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A document view or an element has been resized. The resize occured before 
	 the dispatch of this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_reset_reset">
            <apiName>reset</apiName>
            <shortdesc>
	 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is reset.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>reset</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is reset.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_submit_submit">
            <apiName>submit</apiName>
            <shortdesc>
	 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is submitted.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>submit</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A form, such as a [HTML 4.01] or [XHTML 1.0] form, is submitted.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_change_change">
            <apiName>change</apiName>
            <shortdesc>
	 A control loses the input focus and its value has been modified since 
	 gaining focus.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>change</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A control loses the input focus and its value has been modified since 
	 gaining focus. This event type is dispatched before the event type blur.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_select_select">
            <apiName>select</apiName>
            <shortdesc>
	 A user selects some text.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>select</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A user selects some text. DOM Level 3 Events does not provide contextual 
	 information to access the selected text. The selection occured before 
	 the dispatch of this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_error_error">
            <apiName>error</apiName>
            <shortdesc>
	 A resource failed to load, or has been loaded but cannot be interpreted 
	 according to its semantics such as an invalid image, a script execution 
	 error, or non-well-formed XML.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>error</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A resource failed to load, or has been loaded but cannot be interpreted 
	 according to its semantics such as an invalid image, a script execution 
	 error, or non-well-formed XML.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_abort_abort">
            <apiName>abort</apiName>
            <shortdesc>
	 Loading of a resource has been aborted.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>abort</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 Loading of a resource has been aborted.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_unload_unload">
            <apiName>unload</apiName>
            <shortdesc>
	 The DOM implementation removes from the environment the resource 
	 (such as the document) or any dependent resources (such as images, 
	 style sheets, scripts).</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>unload</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 The DOM implementation removes from the environment the resource 
	 (such as the document) or any dependent resources (such as images, 
	 style sheets, scripts). The document is unloaded after the dispatch 
	 of this event type. If this event type is dispatched, implementations 
	 are required to dispatch this event at least on the Document node.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_load_load">
            <apiName>load</apiName>
            <shortdesc>
	 The DOM Implementation finishes loading the resource (such as the 
	 document) and any dependent resources (such as images, style sheets, 
	 or scripts).</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>load</apiEventType>
                  <adobeApiEventClassifier>dom.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 The DOM Implementation finishes loading the resource (such as the 
	 document) and any dependent resources (such as images, style sheets, 
	 or scripts). Dependent resources that fail to load will not prevent 
	 this event from firing if the resource that loaded them is still 
	 accessible via the DOM. If this event type is dispatched, 
	 implementations are required to dispatch this event at least on the 
	 Document node.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMAttributeNameChanged_DOMAttributeNameChanged">
            <apiName>DOMAttributeNameChanged</apiName>
            <shortdesc>
	 Occurs after the namespaceURI and/or the nodeName of a Attr node have 
	 been modified (e.g., the attribute was renamed using 
	 Document.renameNode()).</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMAttributeNameChanged</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationNameEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 Occurs after the namespaceURI and/or the nodeName of a Attr node have 
	 been modified (e.g., the attribute was renamed using 
	 Document.renameNode()). The target node of this event is the Element 
	 node whose Attr has been renamed.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMElementNameChanged_DOMElementNameChanged">
            <apiName>DOMElementNameChanged</apiName>
            <shortdesc>
	 Occurs after the namespaceURI and/or the nodeName of an Element node 
	 have been modified (e.g., the element was renamed using 
	 Document.renameNode()).</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMElementNameChanged</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationNameEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 Occurs after the namespaceURI and/or the nodeName of an Element node 
	 have been modified (e.g., the element was renamed using 
	 Document.renameNode()). The target node of this event is the renamed 
	 Element node.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMAttrModified_DOMAttrModified">
            <apiName>DOMAttrModified</apiName>
            <shortdesc>
	 Occurs after Attr.value has been modified and after an Attr node has been 
	 added to or removed from an Element.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMAttrModified</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 Occurs after Attr.value has been modified and after an Attr node has been 
	 added to or removed from an Element. The target node of this event is 
	 the Element node where the change occured. It is implementation dependent 
	 whether this event type occurs when the children of the Attr node are 
	 changed in ways that do not affect the value of Attr.value.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMNodeInsertedIntoDocument_DOMNodeInsertedIntoDocument">
            <apiName>DOMNodeInsertedIntoDocument</apiName>
            <shortdesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeInsertedIntoDocument</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node has been inserted into a document, either through direct insertion 
	 of the node or insertion of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 after the insertion has taken place. The target node of this event is the 
	 node being inserted. If the node is being directly inserted, the event type 
	 DOMNodeInserted occurs before this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMNodeRemovedFromDocument_DOMNodeRemovedFromDocument">
            <apiName>DOMNodeRemovedFromDocument</apiName>
            <shortdesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeRemovedFromDocument</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node is being removed from a document, either through direct removal 
	 of the node or removal of a subtree in which it is contained; Attr nodes 
	 are considered part of an Element's subtree. This event is dispatched 
	 before the removal takes place. The target node of this event type is 
	 the node being removed. If the node is being directly removed, the event 
	 type DOMNodeRemoved occurs before this event type.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMNodeRemoved_DOMNodeRemoved">
            <apiName>DOMNodeRemoved</apiName>
            <shortdesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeRemoved</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node is being removed from its parent node or, in case of Attr nodes, 
	 removed from its ownerElement. This event is dispatched before the 
	 removal takes place. The target node of this event is the node 
	 being removed.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMNodeInserted_DOMNodeInserted">
            <apiName>DOMNodeInserted</apiName>
            <shortdesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMNodeInserted</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A node has been added as a child of another node or, in case of Attr 
	 nodes, has been added to an Element. This event is dispatched after 
	 the insertion has taken place. The target node of this event is the 
	 node being inserted.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_DOMSubtreeModified_DOMSubtreeModified">
            <apiName>DOMSubtreeModified</apiName>
            <shortdesc>
	 This is a general event for notification of all changes to the 
	 document.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>DOMSubtreeModified</apiEventType>
                  <adobeApiEventClassifier>dom.events.MutationEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 This is a general event for notification of all changes to the 
	 document. It can be used instead of the more specific mutation and 
	 mutation name events listed below. It may be dispatched after a 
	 single modification to the document or, at the implementation's 
	 discretion, after multiple changes have occurred. The latter use 
	 should generally be used to accommodate multiple changes which occur 
	 either simultaneously or in rapid succession. The target of this 
	 event is the lowest common parent of the changes which have taken 
	 place. This event is dispatched after any other events caused by the 
	 mutation(s) have occurred.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_mousewheel_mousewheel">
            <apiName>mousewheel</apiName>
            <shortdesc>
	 A mouse wheel has been rotated around the y-axis.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>mousewheel</apiEventType>
                  <adobeApiEventClassifier>dom.events.MouseWheelEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A mouse wheel has been rotated around the y-axis.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_mousemultiwheel_mousemultiwheel">
            <apiName>mousemultiwheel</apiName>
            <shortdesc>
	 A mouse wheel has been rotated.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>mousemultiwheel</apiEventType>
                  <adobeApiEventClassifier>dom.events.MouseMultiWheelEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A mouse wheel has been rotated. A default action of user agent 
	 generated event objects of this type causes implementations to 
	 dispatch a mousewheel event iff it supports that event type and 
	 MouseMultiWheelEvent.wheelDeltaY is non-zero.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_mouseout_mouseout">
            <apiName>mouseout</apiName>
            <shortdesc>
	 A pointing device is moved away from an element.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>mouseout</apiEventType>
                  <adobeApiEventClassifier>dom.events.MouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A pointing device is moved away from an element.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_mousemove_mousemove">
            <apiName>mousemove</apiName>
            <shortdesc>
	 A pointing device is moved while it is over an element.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>mousemove</apiEventType>
                  <adobeApiEventClassifier>dom.events.MouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A pointing device is moved while it is over an element.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_mouseover_mouseover">
            <apiName>mouseover</apiName>
            <shortdesc>
	 A pointing device is moved onto an element.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>mouseover</apiEventType>
                  <adobeApiEventClassifier>dom.events.MouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A pointing device is moved onto an element.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_mouseup_mouseup">
            <apiName>mouseup</apiName>
            <shortdesc>
	 A pointing device button is released over an element.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>mouseup</apiEventType>
                  <adobeApiEventClassifier>dom.events.MouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A pointing device button is released over an element.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_mousedown_mousedown">
            <apiName>mousedown</apiName>
            <shortdesc>
	 A pointing device button is pressed over an element.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>mousedown</apiEventType>
                  <adobeApiEventClassifier>dom.events.MouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A pointing device button is pressed over an element.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_dblclick_dblclick">
            <apiName>dblclick</apiName>
            <shortdesc>
	 A pointing device button is clicked twice over an element.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>dblclick</apiEventType>
                  <adobeApiEventClassifier>dom.events.MouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A pointing device button is clicked twice over an element. The definition 
	 of a double click depends on the environment configuration, except that 
	 the event target must be the same between mousedown, mouseup, and dblclick. 
	 This event type is dispatched after the event type click if a click and 
	 double click occur simultaneously, and after the event type mouseup otherwise.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
         <adobeApiEvent id="dom.core:Element_click_click">
            <apiName>click</apiName>
            <shortdesc>
	 A pointing device button is clicked over an element.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>click</apiEventType>
                  <adobeApiEventClassifier>dom.events.MouseEvent</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 A pointing device button is clicked over an element. The definition of a 
	 click depends on the environment configuration; i.e. it may depend on the 
	 screen location or the delay between the press and release of the pointing 
	 device button. In any case, the event target must be the same between the 
	 mousedown, mouseup, and click. The sequence of these events is: mousedown, 
	 mouseup, and click. It depends on the environment configuration whether 
	 the event type click can occur if one or more of the event types mouseover, 
	 mousemove, and mouseout occur between the press and release of the pointing 
	 device button. In addition, the event type is dispatched as described in 
	 Activation requests and behavior.
	 
	 </apiDesc>
            </adobeApiEventDetail>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="dom.core:DOMImplementationSource">
         <apiName>DOMImplementationSource</apiName>
         <shortdesc>
	 This interface permits a DOM implementer to supply one or more 
	 implementations, based upon requested features and versions, as specified 
	 in DOM Features.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This interface permits a DOM implementer to supply one or more 
	 implementations, based upon requested features and versions, as specified 
	 in DOM Features. Each implemented DOMImplementationSource object is listed 
	 in the binding-specific list of available sources so that its 
	 DOMImplementation objects are made available.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.core:Entity">
         <apiName>Entity</apiName>
         <shortdesc>
	 This interface represents a known entity, either parsed or unparsed, in 
	 an XML document.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.core:Node</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This interface represents a known entity, either parsed or unparsed, in 
	 an XML document. Note that this models the entity itself not the entity 
	 declaration.
	 
	 <p>The nodeName attribute that is inherited from Node contains the name of 
	 the entity.</p>
	 
	           <p>
               <b>Note:</b> An Entity node does not have any parent.</p>
	 
	           <p>
               <b>Note:</b> If the entity contains an unbound namespace prefix, the namespaceURI of 
	 the corresponding node in the Entity node subtree is null. The same is true 
	 for EntityReference nodes that refer to this entity, when they are created 
	 using the createEntityReference method of the Document interface.</p>
	 
	           <p>
               <b>Note (Mozilla):</b> This is not implemented in Mozilla</p>
	 
	        </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.events">
      <apiName>dom.events</apiName>
      <apiClassifier id="dom.events:KeyboardEvent">
         <apiName>KeyboardEvent</apiName>
         <shortdesc>
	 The KeyboardEvent interface provides specific contextual information 
	 associated with keyboard devices.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.events:UIEvent</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The KeyboardEvent interface provides specific contextual information 
	 associated with keyboard devices. Each keyboard event references a key 
	 using an identifier. Keyboard events are commonly directed at the 
	 element that has the focus.
	 
	 <p>The KeyboardEvent interface provides convenient attributes for some common 
	 modifiers keys: KeyboardEvent.ctrlKey, KeyboardEvent.shiftKey, 
	 KeyboardEvent.altKey, KeyboardEvent.metaKey. These attributes are equivalent 
	 to using the method KeyboardEvent.getModifierState(keyIdentifierArg) with 
	 "Control", "Shift", "Alt", or "Meta" respectively.</p>
	 
	           <p>To create an instance of the KeyboardEvent interface, use the 
	 DocumentEvent.createEvent("KeyboardEvent") method call.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:KeyEvent">
         <apiName>KeyEvent</apiName>
         <shortdesc>
	 The KeyEvent interface provides specific contextual information associated with Key Events.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.events:UIEvent</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The KeyEvent interface provides specific contextual information associated with Key Events.
	 
	 The detail attribute inherited from UIEvent is used to indicated the number of keypresses 
	 which have occurred during key repetition. If this information is not available this value 
	 should be 0.
	 
	 <p>
               <b>Note:</b> This is from DOM 3 Events Working Draft 10 (April 2001) and has since been deprecated in Working Draft 21 (December 2007)</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:UIEvent">
         <apiName>UIEvent</apiName>
         <shortdesc>
	 The UIEvent interface provides specific contextual information 
	 associated with User Interface events.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The UIEvent interface provides specific contextual information 
	 associated with User Interface events.
	 
	 <p>To create an instance of the UIEvent interface, use the 
	 DocumentEvent.createEvent("UIEvent") method call.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:Event">
         <apiName>Event</apiName>
         <shortdesc>
	 The Event interface is used to provide contextual information about an 
	 event to the listener processing the event.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The Event interface is used to provide contextual information about an 
	 event to the listener processing the event. An object which implements 
	 the Event interface is passed as the parameter to an EventListener. The 
	 object passed to the event listener may also implement derived interfaces 
	 that provide access to information directly relating to the type of event 
	 they represent.
	 
	 <p>To create an instance of the Event interface, use the 
	 DocumentEvent.createEvent("Event") method call.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:TextEvent">
         <apiName>TextEvent</apiName>
         <shortdesc>
	 The TextEvent interface provides specific contextual information 
	 associated with Text Events.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.events:UIEvent</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The TextEvent interface provides specific contextual information 
	 associated with Text Events.
	 
	 <p>To create an instance of the TextEvent interface, use the 
	 DocumentEvent.createEvent("TextEvent") method call.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:MouseEvent">
         <apiName>MouseEvent</apiName>
         <shortdesc>
	 The MouseEvent interface provides specific contextual information 
	 associated with Mouse events.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>cssom.view:MouseEventView</apiBaseInterface>
               <apiBaseClassifier>dom.events:UIEvent</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The MouseEvent interface provides specific contextual information 
	 associated with Mouse events.
	 
	 <p>In the case of nested elements mouse events are always targeted at the 
	 most deeply nested element. Ancestors of the targeted element may use 
	 bubbling to obtain notification of mouse events which occur within their 
	 descendent elements.</p>
	 
	           <p>To create an instance of the MouseEvent interface, use the 
	 DocumentEvent.createEvent("MouseEvent") method call.</p>
	 
	           <p>
               <b>Note:</b> When initializing MouseEvent objects using initMouseEvent or 
	 initMouseEventNS, implementations should use the client coordinates clientX 
	 and clientY for calculation of other coordinates (such as target coordinates 
	 exposed by DOM Level 0 implementations).</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:DocumentEvent">
         <apiName>DocumentEvent</apiName>
         <shortdesc>
	 The DocumentEvent interface provides a mechanism by which the user can 
	 create an Event object of a type supported by the implementation.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The DocumentEvent interface provides a mechanism by which the user can 
	 create an Event object of a type supported by the implementation. If 
	 the feature "Events" is supported by the Document object, the 
	 DocumentEvent interface must be implemented on the same object. If the 
	 feature "+Events" is supported by the Document object, an object that 
	 supports the DocumentEvent interface must be returned by invoking the 
	 method Node.getFeature("+Events", "3.0") on the Document object.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:DocumentEventGroup">
         <apiName>DocumentEventGroup</apiName>
         <shortdesc>
	 The DocumentEventGroup interface provides a mechanism by which the user can create an EventGroup of a type supported by 
	 the implementation.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The DocumentEventGroup interface provides a mechanism by which the user can create an EventGroup of a type supported by 
	 the implementation. It is expected that the DocumentEvent interface will be implemented on the same object which implements 
	 the Documentinterface in an implementation which supports the EventGroupextension.
	 
	 <p>
               <b>Note:</b> This is from DOM 3 Events Working Draft 10 (April 2001) and has since been deprecated in Working Draft 21 (December 2007)</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:EventExceptionCode">
         <apiName>EventExceptionCode</apiName>
         <shortdesc>
	 An integer indicating the type of error generated.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An integer indicating the type of error generated.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:MouseWheelEvent">
         <apiName>MouseWheelEvent</apiName>
         <shortdesc>
	 The MouseWheelEvent interface provides specific contextual information 
	 associated with mouse wheel events.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.events:MouseEvent</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The MouseWheelEvent interface provides specific contextual information 
	 associated with mouse wheel events.
	 
	 <p>To create an instance of the MouseWheelEvent interface, use the 
	 DocumentEvent.createEvent("MouseWheelEvent") method call.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:MessageEvent">
         <apiName>MessageEvent</apiName>
         <shortdesc>
	 Messages in server-sent events, Web sockets, cross-document messaging, and channel messaging use the message event.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Messages in server-sent events, Web sockets, cross-document messaging, and channel messaging use the message event.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:MouseMultiWheelEvent">
         <apiName>MouseMultiWheelEvent</apiName>
         <shortdesc>
	 The MouseMultiWheelEvent interface provides specific contextual 
	 information associated with mouse multi wheel events.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.events:MouseEvent</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The MouseMultiWheelEvent interface provides specific contextual 
	 information associated with mouse multi wheel events.
	 
	 <p>To create an instance of the MouseMultiWheelEvent interface, use the 
	 DocumentEvent.createEvent("MouseMultiWheelEvent") method call.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:MutationEvent">
         <apiName>MutationEvent</apiName>
         <shortdesc>
	 The MutationEvent interface provides specific contextual information 
	 associated with Mutation events.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The MutationEvent interface provides specific contextual information 
	 associated with Mutation events.
	 
	 <p>To create an instance of the MutationEvent interface, use the 
	 DocumentEvent.createEvent("MutationEvent") method call.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:MutationNameEvent">
         <apiName>MutationNameEvent</apiName>
         <shortdesc>
	 The MutationNameEvent interface provides specific contextual information 
	 associated with Mutation name event types.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.events:MutationEvent</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The MutationNameEvent interface provides specific contextual information 
	 associated with Mutation name event types.
	 
	 To create an instance of the MutationNameEvent interface, use the 
	 Document.createEvent("MutationNameEvent") method call.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:EventTargetGroup">
         <apiName>EventTargetGroup</apiName>
         <shortdesc>
	 The EventTargetGroup interface is implemented by the same set of objects that implement the EventTarget 
	 interface, namely all EventTargets in in implementation which supports the Event model and the EventGroup extension.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The EventTargetGroup interface is implemented by the same set of objects that implement the EventTarget 
	 interface, namely all EventTargets in in implementation which supports the Event model and the EventGroup extension.
	 
	 <p>
               <b>Note:</b> This is from DOM 3 Events Working Draft 10 (April 2001) and has since been deprecated in Working Draft 21 (December 2007)</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:CustomEvent">
         <apiName>CustomEvent</apiName>
         <shortdesc>
	 The CustomEvent interface is the recommended interface for 
	 application-specific event types.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CustomEvent interface is the recommended interface for 
	 application-specific event types. Unlike the Event interface, it allows 
	 applications to provide contextual information about the event type. 
	 Application-specific event types should have an associated namespace to 
	 avoid clashes with future general-purpose event types.
	 
	 <p>To create an instance of the CustomEvent interface, use the 
	 DocumentEvent.createEvent("CustomEvent") method call.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:EventListener">
         <apiName>EventListener</apiName>
         <shortdesc>
	 The EventListener interface is the primary way for handling events.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The EventListener interface is the primary way for handling events. Users 
	 implement the EventListener interface and register their event listener on 
	 an EventTarget. The users should also remove their EventListener from its 
	 EventTarget after they have completed using the listener.
	 
	 <p>Copying a Node, with methods such as Node.cloneNode or Range.cloneContents, 
	 does not copy the event listeners attached to it. Event listeners must be 
	 attached to the newly created Node afterwards if so desired.</p>
	 
	           <p>Moving a Node, with methods Document.adoptNode, Node.appendChild, or 
	 Range.extractContents, does not affect the event listeners attached to it.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:EventTarget">
         <apiName>EventTarget</apiName>
         <shortdesc>
	 The EventTarget interface is implemented by all the objects which could be 
	 event targets in an implementation which supports an event flow.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The EventTarget interface is implemented by all the objects which could be 
	 event targets in an implementation which supports an event flow. The 
	 interface allows registration and removal of event listeners, and dispatch 
	 of events to an event target.
	 
	 <p>When used with the DOM event flow, this interface is implemented by all 
	 target nodes and target ancestors, i.e. all DOM Nodes of the tree support 
	 this interface when the implementation conforms to DOM Level 3 Events and, 
	 therefore, this interface can be obtained by using binding-specific casting 
	 methods on an instance of the Node interface.</p>
	 
	           <p>Invoking addEventListener or addEventListenerNS repeatedly on the same 
	 EventTarget with the same values for the parameters namespaceURI, type, 
	 listener, and useCapture has no effect. Doing so does not cause the 
	 EventListener to be called more than once and does not cause a change in the 
	 triggering order.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:EventException">
         <apiName>EventException</apiName>
         <shortdesc>
	 Event operations may throw an EventException as specified in their method descriptions.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Event operations may throw an EventException as specified in their method descriptions.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.events:EventGroup">
         <apiName>EventGroup</apiName>
         <shortdesc>
	 The EventGroup interface functions primarily as a placeholder for separating the event flows when there 
	 are multiple groups of listeners for a DOM tree.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The EventGroup interface functions primarily as a placeholder for separating the event flows when there 
	 are multiple groups of listeners for a DOM tree.
	 
	 <p>EventListeners can be registered without an EventGroup using the existing EventTarget interface, or with 
	 an associated EventGroup using the new EventTargetGroup interface. When an event is dispatched, it is 
	 dispatched independently to each EventGroup. In particular, the stopPropagation method of the Event interface 
	 only stops propagation within an EventListener's associated EventGroup.</p>
	 
	           <p>
               <b>Note:</b> This is from DOM 3 Events Working Draft 10 (April 2001) and has since been deprecated in Working Draft 21 (December 2007)</p>
	 
	        </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.html.objects">
      <apiName>dom.html.objects</apiName>
      <apiClassifier id="dom.html.objects:HTMLCollection">
         <apiName>HTMLCollection</apiName>
         <shortdesc>
	 An HTMLCollection is a list of nodes.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An HTMLCollection is a list of nodes. 
	 
	 <p>An individual node may be accessed by either ordinal index or the node's name or id attributes.</p>
	 
	           <p>
               <b>Note:</b> Collections in the HTML DOM are assumed to be live meaning that they 
	 are automatically updated when the underlying document is changed.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html.objects:HTMLOptionsCollection">
         <apiName>HTMLOptionsCollection</apiName>
         <shortdesc>
	 An HTMLOptionsCollection is a list of nodes representing HTML option element.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An HTMLOptionsCollection is a list of nodes representing HTML option element. 
	 An individual node may be accessed by either ordinal index or the node's 
	 name or id attributes.
	 
	 <p>
               <b>Note:</b> Collections in the HTML DOM are assumed to be live meaning that they 
	 are automatically updated when the underlying document is changed.</p>
	 
	        </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.html">
      <apiName>dom.html</apiName>
      <apiClassifier id="dom.html:HTMLDirectoryElement">
         <apiName>HTMLDirectoryElement</apiName>
         <shortdesc>
	 Directory list.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Directory list.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLScriptElement">
         <apiName>HTMLScriptElement</apiName>
         <shortdesc>
	 Script statements.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Script statements.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLHtmlElement">
         <apiName>HTMLHtmlElement</apiName>
         <shortdesc>
	 Root of an HTML document.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Root of an HTML document. See the HTML element definition in HTML 4.01.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLHeadElement">
         <apiName>HTMLHeadElement</apiName>
         <shortdesc>
	 Document head information.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Document head information. See the HEAD element definition in HTML 4.01.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLTitleElement">
         <apiName>HTMLTitleElement</apiName>
         <shortdesc>
	 The document title.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The document title. See the TITLE element definition in HTML 4.01.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLFieldSetElement">
         <apiName>HTMLFieldSetElement</apiName>
         <shortdesc>
	 Organizes form controls into logical groups.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Organizes form controls into logical groups.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLButtonElement">
         <apiName>HTMLButtonElement</apiName>
         <shortdesc>
	 Push button.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Push button.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLParamElement">
         <apiName>HTMLParamElement</apiName>
         <shortdesc>
	 Parameters fed to the OBJECT element.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Parameters fed to the OBJECT element.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLBaseElement">
         <apiName>HTMLBaseElement</apiName>
         <shortdesc>
	 Document base URI [IETF RFC 2396].</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Document base URI [IETF RFC 2396]. See the BASE element definition in HTML 4.01.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLTableSectionElement">
         <apiName>HTMLTableSectionElement</apiName>
         <shortdesc>
	 The THEAD, TFOOT, and TBODY elements.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The THEAD, TFOOT, and TBODY elements.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLParagraphElement">
         <apiName>HTMLParagraphElement</apiName>
         <shortdesc>
	 Paragraphs.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Paragraphs.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLSelectElement">
         <apiName>HTMLSelectElement</apiName>
         <shortdesc>
	 The select element allows the selection of an option.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The select element allows the selection of an option. The contained options 
	 can be directly accessed through the select element as a collection. See 
	 the SELECT element definition in HTML 4.01.
	 
	 http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-40676705
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLOListElement">
         <apiName>HTMLOListElement</apiName>
         <shortdesc>
	 Ordered list.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Ordered list.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLAnchorElement">
         <apiName>HTMLAnchorElement</apiName>
         <shortdesc>
	 The anchor element.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The anchor element.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLHeadingElement">
         <apiName>HTMLHeadingElement</apiName>
         <shortdesc>
	 For the H1 to H6 elements.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 For the H1 to H6 elements.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLTextAreaElement">
         <apiName>HTMLTextAreaElement</apiName>
         <shortdesc>
	 Multi-line text field.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Multi-line text field.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLModElement">
         <apiName>HTMLModElement</apiName>
         <shortdesc>
	 Notice of modification to part of a document.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Notice of modification to part of a document.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLBaseFontElement">
         <apiName>HTMLBaseFontElement</apiName>
         <shortdesc>
	 Base font.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Base font. This element is deprecated in HTML 4.01.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLLIElement">
         <apiName>HTMLLIElement</apiName>
         <shortdesc>
	 List item.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 List item.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLElement">
         <apiName>HTMLElement</apiName>
         <shortdesc>
	 All HTML element interfaces derive from this class.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>dom.style.css:ElementCSSInlineStyle</apiBaseInterface>
               <apiBaseClassifier>dom.core:Element</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 All HTML element interfaces derive from this class. Elements that only 
	 expose the HTML core attributes are represented by the base 
	 HTMLElement interface. These elements are as follows:
	 
	 <ul>
	              <li>special: SUB, SUP, SPAN, BDO</li>
	              <li>font: TT, I, B, U, S, STRIKE, BIG, SMALL</li>
	              <li>phrase: EM, STRONG, DFN, CODE, SAMP, KBD, VAR, CITE, ACRONYM, ABBR</li>
	              <li>list: DD, DT</li>
	              <li>NOFRAMES, NOSCRIPT</li>
	              <li>ADDRESS, CENTER</li>
	           </ul>
	 
	 DOM Level 2
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLMapElement">
         <apiName>HTMLMapElement</apiName>
         <shortdesc>
	 Client-side image map.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Client-side image map.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLOptGroupElement">
         <apiName>HTMLOptGroupElement</apiName>
         <shortdesc>
	 Group options together in logical subdivisions.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Group options together in logical subdivisions. See the OPTGROUP element definition in HTML 4.01.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLDivElement">
         <apiName>HTMLDivElement</apiName>
         <shortdesc>
	 Generic block container.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Generic block container.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLHRElement">
         <apiName>HTMLHRElement</apiName>
         <shortdesc>
	 Create a horizontal rule.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Create a horizontal rule.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLTableColElement">
         <apiName>HTMLTableColElement</apiName>
         <shortdesc>
	 Regroups the COL and COLGROUP elements.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Regroups the COL and COLGROUP elements.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLDocument">
         <apiName>HTMLDocument</apiName>
         <shortdesc>
	 An HTMLDocument is the root of the HTML hierarchy and holds the entire content.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>dom.xpath:XPathEvaluator</apiBaseInterface>
               <apiBaseClassifier>dom.core:Document</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An HTMLDocument is the root of the HTML hierarchy and holds the entire content.
	 
	 <p>Besides providing access to the hierarchy, it also provides some convenience 
	 methods for accessing certain sets of information from the document.</p>
	 
	           <p>The following properties have been deprecated in favor of the 
	 corresponding ones for the BODY element:
	 <ul>
	                 <li>alinkColor</li>
	                 <li>background</li>
	                 <li>bgColor</li>
	                 <li>fgColor</li>
	                 <li>linkColor</li>
	                 <li>vlinkColor</li>
	              </ul>
	           </p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLLabelElement">
         <apiName>HTMLLabelElement</apiName>
         <shortdesc>
	 Form field label text.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Form field label text.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLOptionElement">
         <apiName>HTMLOptionElement</apiName>
         <shortdesc>
	 A selectable choice.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A selectable choice. See the OPTION element definition in HTML 4.01.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLMenuElement">
         <apiName>HTMLMenuElement</apiName>
         <shortdesc>
	 Menu list.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Menu list.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLBRElement">
         <apiName>HTMLBRElement</apiName>
         <shortdesc>
	 Force a line break.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Force a line break.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLLegendElement">
         <apiName>HTMLLegendElement</apiName>
         <shortdesc>
	 Provides a caption for a FIELDSET grouping.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Provides a caption for a FIELDSET grouping.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLImageElement">
         <apiName>HTMLImageElement</apiName>
         <shortdesc>
	 Embedded image.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Embedded image.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLTableCellElement">
         <apiName>HTMLTableCellElement</apiName>
         <shortdesc>
	 The object used to represent the TH and TD elements.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The object used to represent the TH and TD elements.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLQuoteElement">
         <apiName>HTMLQuoteElement</apiName>
         <shortdesc>
	 For the Q and BLOCKQUOTE elements.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 For the Q and BLOCKQUOTE elements.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLAreaElement">
         <apiName>HTMLAreaElement</apiName>
         <shortdesc>
	 Client-side image map area definition.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Client-side image map area definition.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLLinkElement">
         <apiName>HTMLLinkElement</apiName>
         <shortdesc>
	 The LINK element specifies a link to an external resource, and defines this 
	 document's relationship to that resource (or vice versa).</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The LINK element specifies a link to an external resource, and defines this 
	 document's relationship to that resource (or vice versa). See the LINK 
	 element definition in HTML 4.01 (see also the LinkStyle interface in the 
	 StyleSheet module [DOM Level 2 Style Sheets and CSS]).
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLFormElement">
         <apiName>HTMLFormElement</apiName>
         <shortdesc>
	 The FORM element encompasses behavior similar to a collection and an 
	 element.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The FORM element encompasses behavior similar to a collection and an 
	 element. It provides direct access to the contained form controls as well 
	 as the attributes of the form element.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLFrameElement">
         <apiName>HTMLFrameElement</apiName>
         <shortdesc>
	 Create a frame.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Create a frame.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLIsIndexElement">
         <apiName>HTMLIsIndexElement</apiName>
         <shortdesc>
	 This element is used for single-line text input.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This element is used for single-line text input. See the ISINDEX element 
	 definition in HTML 4.01. This element is deprecated in HTML 4.01.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLInputElement">
         <apiName>HTMLInputElement</apiName>
         <shortdesc>
	 Form control.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Form control.
	 
	 <p>Note: Depending upon the environment in which the page is being viewed, the value 
	 property may be read-only for the file upload input type. For the "password" input 
	 type, the actual value returned may be masked to prevent unauthorized use. See the 
	 INPUT element definition in [HTML 4.01].</p>
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLBodyElement">
         <apiName>HTMLBodyElement</apiName>
         <shortdesc>
	 The HTML document body.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The HTML document body. This element is always present in the DOM 
	 API, even if the tags are not present in the source document.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLFontElement">
         <apiName>HTMLFontElement</apiName>
         <shortdesc>
	 Local change to font.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Local change to font. This element is deprecated in HTML 4.01.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLIFrameElement">
         <apiName>HTMLIFrameElement</apiName>
         <shortdesc>
	 Inline subwindows.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Inline subwindows.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLObjectElement">
         <apiName>HTMLObjectElement</apiName>
         <shortdesc>
	 Generic embedded object.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Generic embedded object.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLMetaElement">
         <apiName>HTMLMetaElement</apiName>
         <shortdesc>
	 This contains generic meta-information about the document.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This contains generic meta-information about the document. See the META element definition in HTML 4.01.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLAppletElement">
         <apiName>HTMLAppletElement</apiName>
         <shortdesc>
	 An embedded Java applet.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An embedded Java applet. This element is deprecated in HTML 4.01.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLTableElement">
         <apiName>HTMLTableElement</apiName>
         <shortdesc>
	 The createand deletemethods on the table allow authors to construct 
	 and modify tables.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The createand deletemethods on the table allow authors to construct 
	 and modify tables. [HTML 4.01] specifies that only one of each of the 
	 CAPTION, THEAD, and TFOOT elements may exist in a table. Therefore, if 
	 one exists, and the createTHead() or createTFoot() method is called, 
	 the method returns the existing THead or TFoot element.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLPreElement">
         <apiName>HTMLPreElement</apiName>
         <shortdesc>
	 Preformatted text.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Preformatted text.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLTableCaptionElement">
         <apiName>HTMLTableCaptionElement</apiName>
         <shortdesc>
	 Table caption.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Table caption.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLFrameSetElement">
         <apiName>HTMLFrameSetElement</apiName>
         <shortdesc>
	 Create a grid of frames.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Create a grid of frames.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLTableRowElement">
         <apiName>HTMLTableRowElement</apiName>
         <shortdesc>
	 A row in a table.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A row in a table.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLDListElement">
         <apiName>HTMLDListElement</apiName>
         <shortdesc>
	 Definition list.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Definition list.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLUListElement">
         <apiName>HTMLUListElement</apiName>
         <shortdesc>
	 Unordered list.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Unordered list.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.html:HTMLStyleElement">
         <apiName>HTMLStyleElement</apiName>
         <shortdesc>
	 Style information.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.html:HTMLElement</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Style information. See the STYLE element definition in HTML 4.01, the CSS 
	 module [DOM Level 2 Style Sheets and CSS] and the LinkStyle interface in 
	 the StyleSheets module [DOM Level 2 Style Sheets and CSS].
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.loadsave.types">
      <apiName>dom.loadsave.types</apiName>
      <apiClassifier id="dom.loadsave.types:LSOutputStream">
         <apiName>LSOutputStream</apiName>
         <shortdesc>
	 A LSOutputStream represents a byte stream destination for the XML output.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A LSOutputStream represents a byte stream destination for the XML output. 
	 
	 <p>
               <b>Note:</b> For Java, LSInputStream is bound to the java.io.InputStream 
	 type. For ECMAScript, LSInputStream is bound to Object.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave.types:LSWriter">
         <apiName>LSWriter</apiName>
         <shortdesc>
	 A LSWriter represents a character stream for the XML output.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A LSWriter represents a character stream for the XML output. 
	 
	 <p>
               <b>Note:</b> For Java, LSInputStream is bound to the java.io.InputStream 
	 type. For ECMAScript, LSInputStream is bound to Object.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave.types:LSInputStream">
         <apiName>LSInputStream</apiName>
         <shortdesc>
	 A LSInputStream represents a reference to a byte stream source of an XML input.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A LSInputStream represents a reference to a byte stream source of an XML input. 
	 
	 <p>
               <b>Note:</b> For Java, LSInputStream is bound to the java.io.InputStream 
	 type. For ECMAScript, LSInputStream is bound to Object.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave.types:LSReader">
         <apiName>LSReader</apiName>
         <shortdesc>
	 A LSReader represents a character stream for the XML input.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A LSReader represents a character stream for the XML input. 
	 
	 <p>
               <b>Note:</b> For Java, LSInputStream is bound to the java.io.InputStream 
	 type. For ECMAScript, LSInputStream is bound to Object.</p>
	 
	        </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.loadsave">
      <apiName>dom.loadsave</apiName>
      <apiClassifier id="dom.loadsave:LSExceptionCode">
         <apiName>LSExceptionCode</apiName>
         <shortdesc>
	 An integer indicating the type of error generated.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An integer indicating the type of error generated. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave:LSInput">
         <apiName>LSInput</apiName>
         <shortdesc>
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave:DocumentLS">
         <apiName>DocumentLS</apiName>
         <shortdesc>
	 The DocumentLS interface provides a mechanism by which the content of a document can be replaced with the 
	 DOM tree produced when loading a URI, or parsing a string.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The DocumentLS interface provides a mechanism by which the content of a document can be replaced with the 
	 DOM tree produced when loading a URI, or parsing a string. The expectation is that an instance of the 
	 DocumentLS interface can be obtained by using binding-specific casting methods on an instance of the 
	 Document interface.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave:LSLoadEvent">
         <apiName>LSLoadEvent</apiName>
         <shortdesc>
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave:LSSerializer">
         <apiName>LSSerializer</apiName>
         <shortdesc>
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave:LSOutput">
         <apiName>LSOutput</apiName>
         <shortdesc>
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave:DOMImplementationLS">
         <apiName>DOMImplementationLS</apiName>
         <shortdesc>
	 DOMImplementationLS contains the factory methods for creating Load and Save objects.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 DOMImplementationLS contains the factory methods for creating Load and Save objects. 
	 
	 The expectation is that an instance of the DOMImplementationLS interface can be obtained by using 
	 binding-specific casting methods on an instance of the DOMImplementation interface or, if the Document 
	 supports the feature "Core"  version "3.0" defined in DOM Level 3 Core, by using the method 
	 DOMImplementation.getFeature with parameter values "LS" (or "LS-Async") and "3.0" (respectively). 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave:LSParser">
         <apiName>LSParser</apiName>
         <shortdesc>
	 An interface to an object that is able to build, or augment, a DOM tree from various input sources.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An interface to an object that is able to build, or augment, a DOM tree from various input sources. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave:DOMImplementationLSMode">
         <apiName>DOMImplementationLSMode</apiName>
         <shortdesc>
	 Integer parser mode constants.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Integer parser mode constants.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave:LSSerializerFilter">
         <apiName>LSSerializerFilter</apiName>
         <shortdesc>
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.tr.traversal:NodeFilter</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave:LSResourceResolver">
         <apiName>LSResourceResolver</apiName>
         <shortdesc>
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave:LSParserFilter">
         <apiName>LSParserFilter</apiName>
         <shortdesc>
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.loadsave:LSProgressEvent">
         <apiName>LSProgressEvent</apiName>
         <shortdesc>
	 This interface represents a progress event object that notifies the application about progress as a document is parsed.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This interface represents a progress event object that notifies the application about progress as a document is parsed.
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.objects">
      <apiName>dom.objects</apiName>
      <apiClassifier id="dom.objects:NavigatorOnLine">
         <apiName>NavigatorOnLine</apiName>
         <shortdesc>
	 Objects implementing the Navigator interface must also implement the NavigatorOnLine interface.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Objects implementing the Navigator interface must also implement the NavigatorOnLine interface. This interface is defined separately so 
	 that other specifications can re-use parts of the Navigator interface.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:MessagePortArray">
         <apiName>MessagePortArray</apiName>
         <shortdesc>
	 A typed array containing only MessagePorts
	 
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A typed array containing only MessagePorts
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:MimeType">
         <apiName>MimeType</apiName>
         <shortdesc>
	 A MIME type (Multipart Internet Mail Extension) supported by the client.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A MIME type (Multipart Internet Mail Extension) supported by the client.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:Location">
         <apiName>Location</apiName>
         <shortdesc>
	 Contains information about the URL of the document and provides methods for changing that URL.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Contains information about the URL of the document and provides methods for changing that URL.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:NavigatorID">
         <apiName>NavigatorID</apiName>
         <shortdesc>
	 Objects implementing the Navigator interface must also implement the NavigatorID interface.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Objects implementing the Navigator interface must also implement the NavigatorID interface. This interface is defined separately so 
	 that other specifications can re-use parts of the Navigator interface.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:CRMFRequest">
         <apiName>CRMFRequest</apiName>
         <shortdesc>
	 RFC 4211, the Internet X.509 Public Key Infrastructure Certificate Request Message 
	 Format (CRMF), defines a certReqMessage.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 RFC 4211, the Internet X.509 Public Key Infrastructure Certificate Request Message 
	 Format (CRMF), defines a certReqMessage. The object returned by generateCRMFRequest() 
	 contains one of those.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:MimeTypeArray">
         <apiName>MimeTypeArray</apiName>
         <shortdesc>
	 Contains a list of MimeType objects representing the MIME types recognized by the browser.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Contains a list of MimeType objects representing the MIME types recognized by the browser. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:BarProp">
         <apiName>BarProp</apiName>
         <shortdesc>
	 To allow Web pages to integrate with Web browsers, certain Web browser interface elements are exposed in a limited way to scripts in Web pages.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 To allow Web pages to integrate with Web browsers, certain Web browser interface elements are exposed in a limited way to scripts in Web pages.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:PluginArray">
         <apiName>PluginArray</apiName>
         <shortdesc>
	 Contains a list of Plugins objects loaded in the browser.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Contains a list of Plugins objects loaded in the browser. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:History">
         <apiName>History</apiName>
         <shortdesc>
	 Contains information about the URLs visited by the client.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Contains information about the URLs visited by the client.
	 
	 <p>
               <b>Note:</b> For security reasons, the history object does not expose the actual 
	 URLs in the browser history. It does allow navigation through the browser history by exposing 
	 the back, forward, and go methods. A particular document in the browser history can be 
	 identified as an index relative to the current page. For example, specifying -1 as a parameter 
	 for the go method is the equivalent of clicking the Back button.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:MessagePort">
         <apiName>MessagePort</apiName>
         <shortdesc>
	 Each channel has two message ports.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Each channel has two message ports. Data sent through one port is received by the other port, and vice versa.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:Crypto">
         <apiName>Crypto</apiName>
         <shortdesc>
	 Mozilla defines a special JavaScript object to allow web pages access to certain cryptographic related services.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Mozilla defines a special JavaScript object to allow web pages access to certain cryptographic related services. 
	 These services are a balance between the functionality web pages need, and the requirement to protect users from 
	 malicious web sites. Most of these services are available via the JavaScript window object as window.crypto.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:Plugin">
         <apiName>Plugin</apiName>
         <shortdesc>
	 A plug-in module installed on the client.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A plug-in module installed on the client.
	 
	 <p>A plug-in is a software module that the browser can invoke to display specialized types of 
	 embedded data within the browser. The user can obtain a list of installed plug-ins by choosing 
	 About Plug-ins from the Help menu.</p>
	 
	           <p>Each Plugin object is itself array containing one element for each MIME type supported by the 
	 plug-in. Each element of the array is a MimeType object. For example, the following code displays 
	 the type and description properties of the first Plugin object's first MimeType object.</p>
	 
	           <codeblock>
	 myPlugin=navigator.plugins[0]
	 myMimeType=myPlugin[0]
	 document.writeln('myMimeType.type is ',myMimeType.type,"&lt;BR&gt;")
	 document.writeln('myMimeType.description is ',myMimeType.description</codeblock>
	 
	           <p>The preceding code displays output similar to the following:</p>
	 
	           <codeblock>
	 myMimeType.type is video/quicktime
	 myMimeType.description is QuickTime for Windows </codeblock>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:UserProfile">
         <apiName>UserProfile</apiName>
         <shortdesc>
	 Provides methods that allow a script to request read access to and perform read actions on a user's profile information.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Provides methods that allow a script to request read access to and perform read actions on a user's profile information.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:Navigator">
         <apiName>Navigator</apiName>
         <shortdesc>
	 Contains information about the application running the script.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>dom.objects:NavigatorID</apiBaseInterface>
               <apiBaseInterface>dom.objects:NavigatorOnLine</apiBaseInterface>
               <apiBaseInterface>dom.objects:NavigatorAbilities</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Contains information about the application running the script. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:NavigatorAbilities">
         <apiName>NavigatorAbilities</apiName>
         <shortdesc>
	 Objects implementing the Navigator interface must also implement the NavigatorAbilities interface.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Objects implementing the Navigator interface must also implement the NavigatorAbilities interface. This interface is defined separately so 
	 that other specifications can re-use parts of the Navigator interface.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:Pkcs11">
         <apiName>Pkcs11</apiName>
         <shortdesc>
	 PKCS11 modules are external modules which provide access to smart-card readers, biometric security 
	 devices, or external certificate stores.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 PKCS11 modules are external modules which provide access to smart-card readers, biometric security 
	 devices, or external certificate stores. There are two methods for installing PKCS11 modules into 
	 Firefox. Users can use the preferences dialog to install or remove PKCS11 module. Extensions can 
	 programmatically manage PKCS11 modules using the nsIPKCS11 programming interface.
	 
	 <p>
               <b>Note (Mozilla):</b> The information in this article is specific to Firefox 3.5 and 
	 newer, support for window.pkcs11 property was disabled due to security concerns.</p>
	 
	           <p>
               <b>Mechanism Flag Definitions</b>
            </p>
	 
	           <p>In general, most tokens should not set any of the cipher flags. Setting these flags means you want 
	 your token to supply the default implementation for these functions. Normally Mozilla uses its own 
	 internal module to supply these functions. These flags override that preference. If you choose to 
	 implement these flags, your module must supply the following additional functions for each flag: </p>
	 
	           <ul>
		             <li>PKCS11_MECH_FLAG: must support CKM_RSA_PKCS and CKM_RSA_X_509 and the following functions: C_WRAPKEY, C_ENCRYPT, C_SIGN, C_DECRYPT, C_UNWRAPKEY, C_VERIFYRECOVER, C_VERIFY, C_GENERATEKEYPAIR (2048, 1024, 512) size
		</li>
		             <li>PKCS11_MECH_DSA_FLAG: must support CKM_DSA and the following functions: C_SIGN, C_VERIFY, C_GENERATEKEYPAIR
		</li>
		             <li>PKCS11_MECH_RC2_FLAG: must support CKM_RC2_CBC and CKM_RC2_ECB and the following functions: C_GENERATEKEY, C_ENCRYPT, C_DECRYPT, C_WRAPKEY, C_UNWRAPKEY
		</li>
		             <li>PKCS11_MECH_RC4_FLAG: must support CKM_RC4_CBC and CKM_RC4_ECB and the following functions: C_GENERATEKEY, C_ENCRYPT, C_DECRYPT, C_WRAPKEY, C_UNWRAPKEY
		</li>
		             <li>PKCS11_MECH_DES_FLAG: must support CKM_CPMF_CBC, CKM_DES_CBC, CKM_DES3_CBC, CKM_CPMF_ECB, CKM_DES_ECB, CKM_DES3_ECB and the following functions: C_GENERATEKEY, C_ENCRYPT, C_DECRYPT, C_WRAPKEY, C_UNWRAPKEY
		</li>
		             <li>PKCS11_MECH_DH_FLAG: must support CKM_DH_PKCS_DERIVE and CKM_DH_KEY_PAIR_GEN and the following functions: C_DERIVEKEY, C_GENERATEKEYPAIR
		</li>
		             <li>PKCS11_MECH_MD5_FLAG: Hashing must be able to function without authentication.
		</li>
		             <li>PKCS11_MECH_SHA1_FLAG: Hashing must be able to function without authentication.
		</li>
		             <li>PKCS11_MECH_MD2_FLAG: Hashing must be able to function without authentication.
		</li>
		             <li>PKCS11_RANDOM_FLAG: Use token's Random Number Generator.
			<ul>
				                 <li>Warning: Must be able to use without authentication. Many hardware random number generators are not as secure as the Netscape internal one. Do not select this value unless you can show that your random number generator is secure. Even so, it's highly discouraged.
				</li>
			               </ul>
		             </li>
		             <li>PKCS11_PUB_READABLE_CERT_FLAG: This is the only flag most smart tokens should turn on. You can turn this flag on if:
			<ul>
				                 <li> the certs on your token can be read without authentication and,
				</li>
				                 <li> the public key on your token can be found by ID, MODULUS, or VALUE and all your private keys have the associated public key.

					<ul>
						                     <li>Turning this flag on will illuminate a large number of password prompts for your token when looking up certs in Communicator. </li>
					                   </ul>
				                 </li>
			               </ul>
		             </li>
		          </ul>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.objects:Selection">
         <apiName>Selection</apiName>
         <shortdesc>
	 Selection is the class of the object returned by window.getSelection() and other methods.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Selection is the class of the object returned by window.getSelection() and other methods. A 
	 selection object represents the ranges that the user has selected.
	 
	 <p>
               <b>Note (IE):</b> Internet Explorer uses the document.selection.createRange() to create a TextRange,
	 which is fundamentally different from Mozilla's Selection and W3C's Range objects.</p>
	 
	        </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.style.css">
      <apiName>dom.style.css</apiName>
      <apiClassifier id="dom.style.css:CSSRule">
         <apiName>CSSRule</apiName>
         <shortdesc>
	 The CSSRule interface is the abstract base interface for any type of CSS statement.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CSSRule interface is the abstract base interface for any type of CSS statement. 
	 
	 <p>This includes both rule sets and at-rules. An implementation is expected to preserve 
	 all rules specified in a CSS style sheet, even if the rule is not recognized by the 
	 parser. Unrecognized rules are represented using the CSSUnknownRule interface.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:CSSCharsetRule">
         <apiName>CSSCharsetRule</apiName>
         <shortdesc>
	 The CSSCharsetRule interface represents a &amp;#64;charset rule in a CSS style sheet.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.style.css:CSSRule</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CSSCharsetRule interface represents a @charset rule in a CSS style sheet.
	 
	 <p>The value of the 
	 encoding attribute does not affect the encoding of text data in the DOM objects; this encoding 
	 is always UTF-16. After a stylesheet is loaded, the value of the encoding attribute is the value 
	 found in the @charset rule. If there was no @charset in the original document, then no 
	 CSSCharsetRule is created. The value of the encoding attribute may also be used as a hint for 
	 the encoding used on serialization of the style sheet.</p>
	 
	           <p>The value of the @charset rule (and therefore of the CSSCharsetRule) may not correspond to the 
	 encoding the document actually came in; character encoding information e.g. in an HTTP header, 
	 has priority but this is not reflected in the CSSCharsetRule.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:RGBColor">
         <apiName>RGBColor</apiName>
         <shortdesc>
	 The RGBColor interface is used to represent any RGB color value.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The RGBColor interface is used to represent any RGB color value. 
	 
	 <p>This interface reflects the values 
	 in the underlying style property. Hence, modifications made to the CSSPrimitiveValue objects modify 
	 the style property.</p>
	 
	           <p>A specified RGB color is not clipped (even if the number is outside the range 0-255 or 0%-100%). A 
	 computed RGB color is clipped depending on the device.</p>
	 
	           <p>Even if a style sheet can only contain an integer for a color value, the internal storage of this 
	 integer is a float, and this can be used as a float in the specified or the computed style.</p>
	 
	           <p>A color percentage value can always be converted to a number and vice versa.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:CSSUnknownRule">
         <apiName>CSSUnknownRule</apiName>
         <shortdesc>
	 The CSSUnknownRule interface represents an at-rule not supported by this user agent.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.style.css:CSSRule</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CSSUnknownRule interface represents an at-rule not supported by this user agent.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:CSS2Properties">
         <apiName>CSS2Properties</apiName>
         <shortdesc>
	 INCOMPLETE
	 
	 The CSS2Properties interface represents a convenience mechanism for retrieving and setting properties within a 
	 CSSStyleDeclaration.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 INCOMPLETE
	 
	 The CSS2Properties interface represents a convenience mechanism for retrieving and setting properties within a 
	 CSSStyleDeclaration. 
	 
	 <p>The attributes of this interface correspond to all the properties specified in CSS2. 
	 Getting an attribute of this interface is equivalent to calling the getPropertyValue method of the 
	 CSSStyleDeclaration interface. Setting an attribute of this interface is equivalent to calling the 
	 setProperty method of the CSSStyleDeclaration interface.</p>
	 
	           <p>
               <b>Note:</b> When the margin property is set, for example, the marginTop, marginRight, marginBottom and marginLeft 
	 properties are actually being set.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:CSSImportRule">
         <apiName>CSSImportRule</apiName>
         <shortdesc>
	 The CSSImportRule interface represents a &amp;#64;import rule within a CSS style sheet.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.style.css:CSSRule</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CSSImportRule interface represents a @import rule within a CSS style sheet. The @import 
	 rule is used to import style rules from other style sheets.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:CSSMediaRule">
         <apiName>CSSMediaRule</apiName>
         <shortdesc>
	 The CSSMediaRule interface represents a &amp;#64;media rule in a CSS style sheet.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.style.css:CSSRule</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CSSMediaRule interface represents a @media rule in a CSS style sheet. A @media 
	 rule can be used to delimit style rules for specific media types.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:Counter">
         <apiName>Counter</apiName>
         <shortdesc>
	 The Counter interface is used to represent any counter or counters function value.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The Counter interface is used to represent any counter or counters function value. This interface reflects the values in 
	 the underlying style property.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:DocumentCSS">
         <apiName>DocumentCSS</apiName>
         <shortdesc>
	 This interface represents a document with a CSS view.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>dom.style.stylesheets:DocumentStyle</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This interface represents a document with a CSS view.
	 
	 <p>The getOverrideStyle method provides a mechanism through which a DOM author could effect immediate change 
	 to the style of an element without modifying the explicitly linked style sheets of a document or the inline 
	 style of elements in the style sheets. This style sheet comes after the author style sheet in the cascade 
	 algorithm and is called override style sheet. The override style sheet takes precedence over author style 
	 sheets. An "!important" declaration still takes precedence over a normal declaration. Override, author, 
	 and user style sheets all may contain "!important" declarations. User "!important" rules take precedence 
	 over both override and author "!important" rules, and override "!important" rules take precedence over 
	 author "!important" rules.</p>
	 
	           <p>The expectation is that an instance of the DocumentCSS interface can be obtained by using binding-specific 
	 casting methods on an instance of the Document interface.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:CSSFontFaceRule">
         <apiName>CSSFontFaceRule</apiName>
         <shortdesc>
	 The CSSFontFaceRule interface represents a &amp;#64;font-face rule in a CSS style sheet.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.style.css:CSSRule</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CSSFontFaceRule interface represents a @font-face rule in a CSS style sheet. The 
	 @font-face rule is used to hold a set of font descriptions.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:CSSRuleList">
         <apiName>CSSRuleList</apiName>
         <shortdesc>
	 The CSSRuleList interface provides the abstraction of an ordered collection of CSS rules.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CSSRuleList interface provides the abstraction of an ordered collection of CSS rules.
	 
	 <p>The items in the CSSRuleList are accessible via an integral index, starting from 0.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:Rect">
         <apiName>Rect</apiName>
         <shortdesc>
	 The Rect interface is used to represent any rect value.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The Rect interface is used to represent any rect value. 
	 
	 <p>This interface reflects the values in 
	 the underlying style property. Hence, modifications made to the CSSPrimitiveValue objects 
	 modify the style property.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:DOMImplementationCSS">
         <apiName>DOMImplementationCSS</apiName>
         <shortdesc>
	 This interface allows the DOM user to create a CSSStyleSheet outside the context of a document.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>dom.core:DOMImplementation</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This interface allows the DOM user to create a CSSStyleSheet outside the context of a document. 
	 
	 <p>There is no way to associate the new CSSStyleSheet with a document in DOM Level 2.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:CSSStyleSheet">
         <apiName>CSSStyleSheet</apiName>
         <shortdesc>
	 The CSSStyleSheet interface is a concrete interface used to represent a CSS style 
	 sheet i.e., a style sheet whose content type is "text/css".</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.style.stylesheets:StyleSheet</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CSSStyleSheet interface is a concrete interface used to represent a CSS style 
	 sheet i.e., a style sheet whose content type is "text/css".
	 
	 <p>All browser compatibility information was obtained via Quirksmode.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:CSSStyleRule">
         <apiName>CSSStyleRule</apiName>
         <shortdesc>
	 The CSSStyleRule interface represents a single rule set in a CSS style sheet.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.style.css:CSSRule</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CSSStyleRule interface represents a single rule set in a CSS style sheet.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:CSSPageRule">
         <apiName>CSSPageRule</apiName>
         <shortdesc>
	 The CSSPageRule interface represents a &amp;#64;page rule within a CSS style sheet.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.style.css:CSSRule</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CSSPageRule interface represents a @page rule within a CSS style sheet. The @page rule is used to 
	 specify the dimensions, orientation, margins, etc. of a page box for paged media.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:ElementCSSInlineStyle">
         <apiName>ElementCSSInlineStyle</apiName>
         <shortdesc>
	 Inline style information attached to elements is exposed through the style attribute.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Inline style information attached to elements is exposed through the style attribute. 
	 
	 <p>This represents 
	 the contents of the STYLE attribute for HTML elements (or elements in other schemas or DTDs which use 
	 the STYLE attribute in the same way). The expectation is that an instance of the ElementCSSInlineStyle 
	 interface can be obtained by using binding-specific casting methods on an instance of the Element 
	 interface when the element supports inline CSS style informations.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:CSSPrimitiveValue">
         <apiName>CSSPrimitiveValue</apiName>
         <shortdesc>
	 The CSSPrimitiveValue interface represents a single CSS value.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.style.css:CSSValue</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CSSPrimitiveValue interface represents a single CSS value. 
	 
	 <p>This interface may be used to determine 
	 the value of a specific style property currently set in a block or to set a specific style property 
	 explicitly within the block. An instance of this interface might be obtained from the getPropertyCSSValue 
	 method of the CSSStyleDeclaration interface. A CSSPrimitiveValue object only occurs in a context of 
	 a CSS property.</p>
	 
	           <p>Conversions are allowed between absolute values (from millimeters to centimeters, from degrees to radians, 
	 and so on) but not between relative values. (For example, a pixel value cannot be converted to a 
	 centimeter value.) Percentage values can't be converted since they are relative to the parent value (or 
	 another property value). There is one exception for color percentage values: since a color percentage value 
	 is relative to the range 0-255, a color percentage value can be converted to a number; (see also the 
	 RGBColor interface).</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:CSSValue">
         <apiName>CSSValue</apiName>
         <shortdesc>
	 The CSSValue interface represents a simple or a complex value.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CSSValue interface represents a simple or a complex value. A CSSValue 
	 object only occurs in a context of a CSS property.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:ViewCSS">
         <apiName>ViewCSS</apiName>
         <shortdesc>
	 This interface represents a CSS view.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>dom.views:AbstractView</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This interface represents a CSS view. The getComputedStyle method provides a read only access to the computed 
	 values of an element.
	 
	 <p>The expectation is that an instance of the ViewCSS interface can be obtained by using binding-specific casting 
	 methods on an instance of the AbstractView interface.</p>
	 
	           <p>Since a computed style is related to an Element node, if this element is removed from the document, the associated 
	 CSSStyleDeclaration and CSSValue related to this declaration are no longer valid.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:CSSStyleDeclaration">
         <apiName>CSSStyleDeclaration</apiName>
         <shortdesc>
	 The CSSStyleDeclaration interface represents a single CSS declaration block.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CSSStyleDeclaration interface represents a single CSS declaration block.
	 
	 <p class="style1">TODO: Add MS proprietary methods</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.css:CSSValueList">
         <apiName>CSSValueList</apiName>
         <shortdesc>
	 The CSSValueList interface provides the abstraction of an ordered collection of CSS values.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.style.css:CSSValue</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The CSSValueList interface provides the abstraction of an ordered collection of CSS values.
	 
	 <p>Some properties allow an empty list into their syntax. In that case, these properties take the 
	 none identifier. So, an empty list means that the property has the value none.</p>
	 
	           <p>The items in the CSSValueList are accessible via an integral index, starting from 0.</p>
	 
	        </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.style.stylesheets">
      <apiName>dom.style.stylesheets</apiName>
      <apiClassifier id="dom.style.stylesheets:DocumentStyle">
         <apiName>DocumentStyle</apiName>
         <shortdesc>
	 The DocumentStyle interface provides a mechanism by which the style sheets embedded in a document 
	 can be retrieved.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The DocumentStyle interface provides a mechanism by which the style sheets embedded in a document 
	 can be retrieved. The expectation is that an instance of the DocumentStyle interface can be obtained 
	 by using binding-specific casting methods on an instance of the Document interface.
	 
	 <p>
               <b>Note:</b> CSSOM is in its very early stages. The intention is that this specification will in due course supersede DOM Level 2 Style. </p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.stylesheets:MediaList">
         <apiName>MediaList</apiName>
         <shortdesc>
	 The MediaList interface provides the abstraction of an ordered collection of media, without 
	 defining or constraining how this collection is implemented.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The MediaList interface provides the abstraction of an ordered collection of media, without 
	 defining or constraining how this collection is implemented. An empty list is the same as 
	 a list that contains the medium "all".
	 
	 The items in the MediaList are accessible via an integral index, starting from 0.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.stylesheets:LinkStyle">
         <apiName>LinkStyle</apiName>
         <shortdesc>
	 The LinkStyle interface provides a mechanism by which a style sheet can be retrieved from the node responsible 
	 for linking it into a document.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The LinkStyle interface provides a mechanism by which a style sheet can be retrieved from the node responsible 
	 for linking it into a document. An instance of the LinkStyle interface can be obtained using binding-specific 
	 casting methods on an instance of a linking node.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.stylesheets:StyleSheet">
         <apiName>StyleSheet</apiName>
         <shortdesc>
	 The StyleSheet interface is the abstract base interface for any type of style sheet.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The StyleSheet interface is the abstract base interface for any type of style sheet. It represents 
	 a single style sheet associated with a structured document. In HTML, the StyleSheet interface 
	 represents either an external style sheet, included via the HTML LINK element, or an inline STYLE 
	 element. In XML, this interface represents an external style sheet, included via a style sheet 
	 processing instruction.
	 
	 <p>All browser compatibility information was obtained via Quirksmode.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.style.stylesheets:StyleSheetList">
         <apiName>StyleSheetList</apiName>
         <shortdesc>
	 The StyleSheetList interface provides the abstraction of an ordered collection of style sheets.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The StyleSheetList interface provides the abstraction of an ordered collection of style sheets.
	 
	 <p>The items in the StyleSheetList are accessible via an integral index, starting from 0.</p>
	 
	        </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.tr.range">
      <apiName>dom.tr.range</apiName>
      <apiClassifier id="dom.tr.range:RangeExceptionCode">
         <apiName>RangeExceptionCode</apiName>
         <shortdesc>
	 An integer indicating the type of error generated.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An integer indicating the type of error generated.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.tr.range:Range">
         <apiName>Range</apiName>
         <shortdesc>
	 The Range object represents a fragment of a document that can contain nodes and parts of text nodes in a given document.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>cssom.view:RangeView</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The Range object represents a fragment of a document that can contain nodes and parts of text nodes in a given document. 
	 
	 <p>A range can be created using the createRange method of the Document object. Range objects can also be retrieved by using 
	 the getRangeAt method of the selection object. </p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.tr.range:RangeException">
         <apiName>RangeException</apiName>
         <shortdesc>
	 Range operations may throw a RangeException as specified in their method descriptions.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Range operations may throw a RangeException as specified in their method descriptions.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.tr.range:DocumentRange">
         <apiName>DocumentRange</apiName>
         <shortdesc>
	 Contains a method to create a range object.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Contains a method to create a range object.
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.tr.traversal">
      <apiName>dom.tr.traversal</apiName>
      <apiClassifier id="dom.tr.traversal:DocumentTraversal">
         <apiName>DocumentTraversal</apiName>
         <shortdesc>
	 Contains methods that create iterators and tree-walkers to traverse a node and its children in document order.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Contains methods that create iterators and tree-walkers to traverse a node and its children in document order.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.tr.traversal:TreeWalker">
         <apiName>TreeWalker</apiName>
         <shortdesc>
	 Represents the nodes of a document subtree and a position within them.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Represents the nodes of a document subtree and a position within them.
	 
	 <p>A <codeph>TreeWalker</codeph> can be created using the createTreeWalker()<codeph/> method of the <codeph>Document</codeph> object.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.tr.traversal:NodeIterator">
         <apiName>NodeIterator</apiName>
         <shortdesc>
	 Allows you to iterate over the members of a list of the nodes in a subtree of the DOM, in document order.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Allows you to iterate over the members of a list of the nodes in a subtree of the DOM, in document order.
	 
	 A <codeph>NodeIterator</codeph> can be created using the createNodeIterator()<codeph/> method of the <codeph>Document</codeph> object, as follows:
	 
	 <codeblock>var nodeIterator = document.createNodeIterator();</codeblock>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.tr.traversal:NodeFilter">
         <apiName>NodeFilter</apiName>
         <shortdesc>
	 Filters are objects that know how to "filter out" nodes.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Filters are objects that know how to "filter out" nodes. 
	 
	 <p>If a <codeph>NodeIterator</codeph> or <codeph>TreeWalker</codeph> is given a <codeph>NodeFilter</codeph>, it 
	 applies the filter before it returns the next node. If the filter says to accept the node, the traversal logic 
	 returns it; otherwise, traversal looks for the next node and pretends that the node that was rejected was not there.</p>
	 
	        </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.validation">
      <apiName>dom.validation</apiName>
      <apiClassifier id="dom.validation:ExceptionVAL">
         <apiName>ExceptionVAL</apiName>
         <shortdesc>
	 Some Validation operations may throw an ExceptionVAL as described in their descriptions.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Some Validation operations may throw an ExceptionVAL as described in their descriptions. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.validation:CharacterDataEditVAL">
         <apiName>CharacterDataEditVAL</apiName>
         <shortdesc>
	 When validating CharacterData nodes, the NodeEditVAL.nodeValidity  operation must find the nearest parent node 
	 in order to do this; if no parent node is found, VAL_UNKNOWN  is returned.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>dom.validation:NodeEditVAL</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 When validating CharacterData nodes, the NodeEditVAL.nodeValidity  operation must find the nearest parent node 
	 in order to do this; if no parent node is found, VAL_UNKNOWN  is returned. In addition, when VAL_INCOMPLETE  
	 is passed in as an argument to the NodeEditVAL.nodeValidity operation to operate on such nodes, the operation 
	 considers all the text and not just some of it. 
	 
	 <p>An object implementing this interface must also implement CharacterData interface.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.validation:ElementEditVAL">
         <apiName>ElementEditVAL</apiName>
         <shortdesc>
	 This interface also has attributes that are a NameList of elements or attributes which can appear in the specified context.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>dom.validation:NodeEditVAL</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This interface also has attributes that are a NameList of elements or attributes which can appear in the specified context. 
	 Some schema languages, i.e., W3C XML schema, define wildcards which provide for validation of attribute and element information 
	 items dependent on their namespace names but independent of their local names. 
	 
	 <p>To expose wildcards, the NameList returns the values that represent the  namespace constraint: 
	 <ul>
	                 <li>
                     <codeph>{namespaceURI, name}</codeph> is <codeph>{null, ##any}</codeph> if any;</li>
	                 <li>
                     <codeph>{namespaceURI, name}</codeph> is <codeph>{namespace_a, ##other}</codeph> if not and a namespace name (namespace_a);</li>
	                 <li>
                     <codeph>{namespaceURI, name}</codeph> is <codeph>{null, ##other}</codeph> if not and absent;</li>
	                 <li>Pairs of <codeph>{namespaceURI, name}</codeph> with values <codeph>{a_namespaceURI | null, null}</codeph> if a set whose members are either namespace names or absent.</li>
	              </ul>
	           </p>
	 
	           <p>An object implementing this interface must also implement the Element interface. </p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.validation:ValidationState">
         <apiName>ValidationState</apiName>
         <shortdesc>
	 Validation state constants stored in NodeEditVAL.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Validation state constants stored in NodeEditVAL.
	 
	 <p>
               <b>Note:</b> Moved to ValidationState specifically for this documentation. Constants are not allowed in an interface.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.validation:ValidationType">
         <apiName>ValidationType</apiName>
         <shortdesc>
	 Validation type constants stored in NodeEditVAL.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Validation type constants stored in NodeEditVAL.
	 
	 <p>
               <b>Note:</b> Moved to ValidationType specifically for this documentation. Constants are not allowed in an interface.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.validation:ContentTypeVAL">
         <apiName>ContentTypeVAL</apiName>
         <shortdesc>
	 Content type constants stored in ElementEditVAL.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Content type constants stored in ElementEditVAL.
	 
	 <p>
               <b>Note:</b> Moved to ContentTypeVAL specifically for this documentation. Constants are not allowed in an interface.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.validation:DocumentEditVAL">
         <apiName>DocumentEditVAL</apiName>
         <shortdesc>
	 An object implementing this interface must also implement the Document interface.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>dom.validation:NodeEditVAL</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An object implementing this interface must also implement the Document interface. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.validation:NodeEditVAL">
         <apiName>NodeEditVAL</apiName>
         <shortdesc>
	 This interface is similar to the DOM Level 3 Core Node interface, with methods for guided document editing.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 This interface is similar to the DOM Level 3 Core Node interface, with methods for guided document editing. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.validation:ExceptionVALCode">
         <apiName>ExceptionVALCode</apiName>
         <shortdesc>
	 An integer indicating the type of error generated.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An integer indicating the type of error generated. 
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.views">
      <apiName>dom.views</apiName>
      <apiClassifier id="dom.views:DocumentView">
         <apiName>DocumentView</apiName>
         <shortdesc>
	 The DocumentView interface is implemented by Document objects in DOM 
	 implementations supporting DOM Views.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The DocumentView interface is implemented by Document objects in DOM 
	 implementations supporting DOM Views. It provides an attribute to 
	 retrieve the default view of a document.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.views:AbstractView">
         <apiName>AbstractView</apiName>
         <shortdesc>
	 A base interface that all views shall derive from.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A base interface that all views shall derive from.
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom">
      <apiName>dom</apiName>
      <apiClassifier id="dom:WindowProxy">
         <apiName>WindowProxy</apiName>
         <shortdesc>
	 Must proxy all operations to the Window object of the browsing context's active document.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom:Window</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Must proxy all operations to the Window object of the browsing context's active document.
	 
	 It is indistinguishable from that Window object in every way, except that it is not equal to it.
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom:Window">
         <apiName>Window</apiName>
         <shortdesc>
	 INCOMPLETE
	 
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>dom.style.css:ViewCSS</apiBaseInterface>
               <apiBaseInterface>dom.views:AbstractView</apiBaseInterface>
               <apiBaseInterface>cssom.view:WindowView</apiBaseInterface>
               <apiBaseInterface>dom.events:EventTarget</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 INCOMPLETE
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="dom.xpath">
      <apiName>dom.xpath</apiName>
      <apiClassifier id="dom.xpath:XPathEvaluator">
         <apiName>XPathEvaluator</apiName>
         <shortdesc>
	 The evaluation of XPath expressions is provided by XPathEvaluator.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The evaluation of XPath expressions is provided by XPathEvaluator. In a DOM implementation 
	 which supports the XPath 3.0 feature, as described above, the XPathEvaluator interface will 
	 be implemented on the same object which implements the Document interface permitting it to 
	 be obtained by the usual binding-specific method such as casting or by using the DOM Level 3 
	 getInterface method. In this case the implementation obtained from the Document supports the 
	 XPath DOM module and is compatible with the XPath 1.0 specification.
	 
	 <p>Evaluation of expressions with specialized extension functions or variables may not work 
	 in all implementations and is, therefore, not portable. XPathEvaluator implementations may be 
	 available from other sources that could provide specific support for specialized extension 
	 functions or variables as would be defined by other specifications. </p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.xpath:XPathResult">
         <apiName>XPathResult</apiName>
         <shortdesc>
	 The XPathResult interface represents the result of the evaluation of an XPath 1.0 expression 
	 within the context of a particular node.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The XPathResult interface represents the result of the evaluation of an XPath 1.0 expression 
	 within the context of a particular node. Since evaluation of an XPath expression can result in 
	 various result types, this object makes it possible to discover and manipulate the type and 
	 value of the result. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.xpath:XPathException">
         <apiName>XPathException</apiName>
         <shortdesc>
	 A new exception has been created for exceptions specific to these XPath interfaces.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A new exception has been created for exceptions specific to these XPath interfaces. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.xpath:XPathExpression">
         <apiName>XPathExpression</apiName>
         <shortdesc>
	 The XPathExpression interface represents a parsed and resolved XPath expression.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The XPathExpression interface represents a parsed and resolved XPath expression. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.xpath:XPathNSResolver">
         <apiName>XPathNSResolver</apiName>
         <shortdesc>
	 The XPathNSResolver interface permit prefix strings in the expression to be properly bound to 
	 namespaceURI strings.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The XPathNSResolver interface permit prefix strings in the expression to be properly bound to 
	 namespaceURI strings. XPathEvaluator can construct an implementation of XPathNSResolver from a 
	 node, or the interface may be implemented by any application. 
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.xpath:XPathNamespace">
         <apiName>XPathNamespace</apiName>
         <shortdesc>
	 The XPathNamespace interface is returned by XPathResult interfaces to represent the XPath namespace node type 
	 that DOM lacks.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.core:Node</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The XPathNamespace interface is returned by XPathResult interfaces to represent the XPath namespace node type 
	 that DOM lacks. There is no public constructor for this node type. Attempts to place it into a hierarchy or a 
	 NamedNodeMap result in a DOMException with the code HIERARCHY_REQUEST_ERR. This node is read only, so methods 
	 or setting of attributes that would mutate the node result in a DOMException with the code NO_MODIFICATION_ALLOWED_ERR.
	 
	 <p>The core specification describes attributes of the Node interface that are different for different node 
	 types but does not describe XPATH_NAMESPACE_NODE, so here is a description of those attributes for this node 
	 type. All attributes of Node not described in this section have a null or false value.</p>
	 
	           <p>ownerDocument matches the ownerDocument of the ownerElement even if the element is later adopted.</p>
	 
	           <p>nodeName is always the string "#namespace".</p>
	 
	           <p>prefix is the prefix of the namespace represented by the node.</p>
	 
	           <p>localName is the same as prefix.</p>
	 
	           <p>nodeType is equal to XPATH_NAMESPACE_NODE.</p>
	 
	           <p>namespaceURI is the namespace URI of the namespace represented by the node.</p>
	 
	           <p>nodeValue is the same as namespaceURI.</p>
	 
	           <p>adoptNode, cloneNode, and importNode fail on this node type by raising a DOMException with the code NOT_SUPPORTED_ERR.</p>
	 
	           <p>
               <b>Note:</b> In future versions of the XPath specification, the definition of a namespace node may be changed 
	 incomatibly, in which case incompatible changes to field values may be required to implement versions beyond XPath 1.0.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="dom.xpath:XPathExceptionCode">
         <apiName>XPathExceptionCode</apiName>
         <shortdesc>
	 An integer indicating the type of error generated.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An integer indicating the type of error generated.
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="elementtraversal">
      <apiName>elementtraversal</apiName>
      <apiClassifier id="elementtraversal:ElementTraversal">
         <apiName>ElementTraversal</apiName>
         <shortdesc>
	 Allows script navigation of the elements of a DOM tree, excluding all other nodes in the DOM, such 
	 as text nodes.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Allows script navigation of the elements of a DOM tree, excluding all other nodes in the DOM, such 
	 as text nodes. It also provides an attribute to expose the number of child elements of an element. 
	 It is intended to provide a more convenient alternative to existing DOM navigation interfaces, with 
	 a low implementation footprint.
	 
	 <p>All browser compatibility information was obtained via Quirksmode.</p>
	 
	        </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="gecko.dom.objects">
      <apiName>gecko.dom.objects</apiName>
      <apiClassifier id="gecko.dom.objects:Sidebar">
         <apiName>Sidebar</apiName>
         <shortdesc>
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="gecko.events">
      <apiName>gecko.events</apiName>
      <apiClassifier id="gecko.events:nsIDOMEventTarget">
         <apiName>nsIDOMEventTarget</apiName>
         <shortdesc>
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="gecko.events:MouseEvent">
         <apiName>MouseEvent</apiName>
         <shortdesc>
	 The DOMMouseScroll event is sent when the mouse wheel is moved.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.events:MouseEvent</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The DOMMouseScroll event is sent when the mouse wheel is moved. The target of 
	 this event is the element that was under the mouse pointer when the mouse wheel 
	 was scrolled, similar to the click event.
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="gecko">
      <apiName>gecko</apiName>
      <apiClassifier id="gecko:nsIBoxObject">
         <apiName>nsIBoxObject</apiName>
         <shortdesc>
	 Where possible, element.getClientRects and element.getBoundingClientRect should 
	 be used instead.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Where possible, element.getClientRects and element.getBoundingClientRect should 
	 be used instead.  nsIBoxObject is subject to change.
	 
	 INCOMPLETE
	 
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="gecko:nsIURI">
         <apiName>nsIURI</apiName>
         <shortdesc>
	 nsIURI is an interface for an uniform resource identifier with 
	 internationalization support, offering attributes that allow setting 
	 and querying the basic components of a URI, and methods for 
	 performing basic operations on URIs.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 nsIURI is an interface for an uniform resource identifier with 
	 internationalization support, offering attributes that allow setting 
	 and querying the basic components of a URI, and methods for 
	 performing basic operations on URIs.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="gecko:nsIDOMOfflineResourceList">
         <apiName>nsIDOMOfflineResourceList</apiName>
         <shortdesc>
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="gecko:nsIPrincipal">
         <apiName>nsIPrincipal</apiName>
         <shortdesc>
	 http://developer.mozilla.org/en/nsIPrincipal
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 http://developer.mozilla.org/en/nsIPrincipal
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="gecko:nsIXPCComponents">
         <apiName>nsIXPCComponents</apiName>
         <shortdesc>
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="selectors">
      <apiName>selectors</apiName>
      <apiClassifier id="selectors:NodeSelector">
         <apiName>NodeSelector</apiName>
         <shortdesc>
	 Objects implementing any of the Document, DocumentFragment or Element interfaces, as defined in DOM Level 3 Core, must also implement the NodeSelector interface.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Objects implementing any of the Document, DocumentFragment or Element interfaces, as defined in DOM Level 3 Core, must also implement the NodeSelector interface.
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="webstorage">
      <apiName>webstorage</apiName>
      <apiClassifier id="webstorage:Storage">
         <apiName>Storage</apiName>
         <shortdesc>
	 The DOM Storage mechanism is a means through which string key/value pairs can be securely stored and later 
	 retrieved for use.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The DOM Storage mechanism is a means through which string key/value pairs can be securely stored and later 
	 retrieved for use. The goal of this addition is to provide a comprehensive means through which interactive 
	 applications can be built (including advanced abilities, such as being able to work "offline" for extended 
	 periods of time).
	 
	 <p>
               <codeph>sessionStorage</codeph> sets fields on the window. When the window is closed, the session fields 
	 are lost, even if the site remains open in another window.</p>
	 
	           <p>
               <codeph>localStorage</codeph> sets fields on the domain. Even when you close the browser, reopen it, and 
	 go back to the site, it remembers all fields in localStorage.</p>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="webstorage:StorageEvent">
         <apiName>StorageEvent</apiName>
         <shortdesc>
	 Is fired when a storage area changes
	 
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>dom.events:Event</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Is fired when a storage area changes
	 
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
</allClasses>